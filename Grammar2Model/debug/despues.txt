/** 
 * An example grammar for a simple language
 */

grammar simpleGrammar;

options {
	backtrack=true; 

	output=template;
}


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
mainRule returns [Node returnNode] 
:  statementGen+=statement* 
	{
		// Create return CST Node
		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mainRuleReturnNode.setKind("mainRule");
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.statement_return r = (simpleGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$mainRule.returnNode = mainRuleReturnNode;
	}
	;

		
statement returns [Node returnNode] 
:  print_statementGen+=print_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($print_statementGen != null) {
	        for(Iterator it = $print_statementGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.print_statement_return r = (simpleGrammarParser.print_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("print_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	;
	
print_statement returns [Node returnNode] 
:  TK_0='print'  DQVALIslandIslandGen=DQVALIslandIsland 
	{
		// Create return CST Node
		Node print_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		print_statementReturnNode.setKind("print_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		print_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($DQVALIslandIslandGen != null) {
			Leaf DQVALIslandIslandGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQVALIslandIsland", $DQVALIslandIslandGen.text, DQVALIslandIslandGen.getCharPositionInLine(), DQVALIslandIslandGen.getLine());
			print_statementReturnNode.getChildren().add(DQVALIslandIslandGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$print_statement.returnNode = print_statementReturnNode;
	}
	;


DQUOTE : '\u0022';
DQVALIslandIsland  : DQUOTE (options {greedy=false;} : .)* DQUOTE;

WS 	   : (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};
COMMENT
    : '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;    

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;

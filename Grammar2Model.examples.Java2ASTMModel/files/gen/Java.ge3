/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility. 
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now): 
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
grammar Java;
options {k=2; backtrack=true; memoize=true;
	output=template;
}

@lexer::members {
protected boolean enumIsKeyword = true;
}

// starting point for parsing a java file

// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
compilationUnit returns [Node returnNode] 
:	annotationsGen+=annotations?
		packageDeclarationGen+=packageDeclaration?
        importDeclarationGen+=importDeclaration*
        typeDeclarationGen+=typeDeclaration* 
	{
		// Create return CST Node
		Node compilationUnitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		compilationUnitReturnNode.setKind("compilationUnit");
	    // Create a CST Node
		if($annotationsGen != null) {
	        for(Iterator it = $annotationsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotations");
	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($packageDeclarationGen != null) {
	        for(Iterator it = $packageDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.packageDeclaration_return r = (JavaParser.packageDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("packageDeclaration");
	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($importDeclarationGen != null) {
	        for(Iterator it = $importDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.importDeclaration_return r = (JavaParser.importDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("importDeclaration");
	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeDeclarationGen != null) {
	        for(Iterator it = $typeDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeDeclaration_return r = (JavaParser.typeDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeDeclaration");
	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$compilationUnit.returnNode = compilationUnitReturnNode;
	}
	;

packageDeclaration returns [Node returnNode] 
:	TK_0='package' qualifiedNameGen+=qualifiedName TK_1=';' 
	{
		// Create return CST Node
		Node packageDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		packageDeclarationReturnNode.setKind("packageDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		packageDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameGen != null) {
	        for(Iterator it = $qualifiedNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedName");
	            	packageDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		packageDeclarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$packageDeclaration.returnNode = packageDeclarationReturnNode;
	}
	;
	
importDeclaration returns [Node returnNode] 
:	TK_0='import' TK_1='static'? IdentifierGen=Identifier (TK_2='.' IdentifierGen_1_List+=Identifier)* (TK_3='.' TK_4='*')? TK_5=';' 
	{
		// Create return CST Node
		Node importDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		importDeclarationReturnNode.setKind("importDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			importDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			importDeclarationReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		importDeclarationReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$importDeclaration.returnNode = importDeclarationReturnNode;
	}
	;
	
typeDeclaration returns [Node returnNode] 
:	classOrInterfaceDeclarationGen+=classOrInterfaceDeclaration 
	{
		// Create return CST Node
		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeDeclarationReturnNode.setKind("typeDeclaration");
	    // Create a CST Node
		if($classOrInterfaceDeclarationGen != null) {
	        for(Iterator it = $classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classOrInterfaceDeclaration");
	            	typeDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$typeDeclaration.returnNode = typeDeclarationReturnNode;
	}
    |   TK_0=';' 
	{
		// Create return CST Node
		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeDeclarationReturnNode.setKind("typeDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeDeclaration.returnNode = typeDeclarationReturnNode;
	}
	;
	
classOrInterfaceDeclaration returns [Node returnNode] 
:	modifierGen+=modifier* (classDeclarationGen+=classDeclaration | interfaceDeclarationGen+=interfaceDeclaration) 
	{
		// Create return CST Node
		Node classOrInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classOrInterfaceDeclarationReturnNode.setKind("classOrInterfaceDeclaration");
	    // Create a CST Node
		if($modifierGen != null) {
	        for(Iterator it = $modifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("modifier");
	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($classDeclarationGen != null) {
	        for(Iterator it = $classDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classDeclaration");
	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($interfaceDeclarationGen != null) {
	        for(Iterator it = $interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceDeclaration");
	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classOrInterfaceDeclaration.returnNode = classOrInterfaceDeclarationReturnNode;
	}
	;
	
classDeclaration returns [Node returnNode] 
:	normalClassDeclarationGen+=normalClassDeclaration 
	{
		// Create return CST Node
		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classDeclarationReturnNode.setKind("classDeclaration");
	    // Create a CST Node
		if($normalClassDeclarationGen != null) {
	        for(Iterator it = $normalClassDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.normalClassDeclaration_return r = (JavaParser.normalClassDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalClassDeclaration");
	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classDeclaration.returnNode = classDeclarationReturnNode;
	}
    |   enumDeclarationGen+=enumDeclaration 
	{
		// Create return CST Node
		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classDeclarationReturnNode.setKind("classDeclaration");
	    // Create a CST Node
		if($enumDeclarationGen != null) {
	        for(Iterator it = $enumDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumDeclaration");
	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classDeclaration.returnNode = classDeclarationReturnNode;
	}
	;
	
normalClassDeclaration returns [Node returnNode] 
:	TK_0='class' IdentifierGen=Identifier (typeParametersGen+=typeParameters)?
        (TK_1='extends' typeGen+=type)?
        (TK_2='implements' typeListGen+=typeList)?
        classBodyGen+=classBody 
	{
		// Create return CST Node
		Node normalClassDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalClassDeclarationReturnNode.setKind("normalClassDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalClassDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			normalClassDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($typeParametersGen != null) {
	        for(Iterator it = $typeParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeParameters");
	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalClassDeclarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		normalClassDeclarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($typeListGen != null) {
	        for(Iterator it = $typeListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeList");
	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($classBodyGen != null) {
	        for(Iterator it = $classBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classBody");
	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$normalClassDeclaration.returnNode = normalClassDeclarationReturnNode;
	}
	;
	
typeParameters returns [Node returnNode] 
:	TK_0='<' typeParameterGen+=typeParameter (TK_1=',' typeParameterGen_1+=typeParameter)* TK_2='>' 
	{
		// Create return CST Node
		Node typeParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeParametersReturnNode.setKind("typeParameters");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeParametersReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeParameterGen != null) {
	        for(Iterator it = $typeParameterGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeParameter");
	            	typeParametersReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal typeParameterGen_1 aggregation
		if($typeParameterGen_1 != null) {
	    for(int pos = 0; pos < $typeParameterGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		typeParametersReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($typeParameterGen_1 != null) {		
	    	JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) $typeParameterGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("typeParameter");
	    		typeParametersReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		typeParametersReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeParameters.returnNode = typeParametersReturnNode;
	}
	;

typeParameter returns [Node returnNode] 
:	IdentifierGen=Identifier (TK_0='extends' boundGen+=bound)? 
	{
		// Create return CST Node
		Node typeParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeParameterReturnNode.setKind("typeParameter");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			typeParameterReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeParameterReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($boundGen != null) {
	        for(Iterator it = $boundGen.iterator(); it.hasNext(); )  { 
	            JavaParser.bound_return r = (JavaParser.bound_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("bound");
	            	typeParameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$typeParameter.returnNode = typeParameterReturnNode;
	}
	;
		
bound returns [Node returnNode] 
:	typeGen+=type (TK_0='&' typeGen_1+=type)* 
	{
		// Create return CST Node
		Node boundReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boundReturnNode.setKind("bound");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	boundReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal typeGen_1 aggregation
		if($typeGen_1 != null) {
	    for(int pos = 0; pos < $typeGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boundReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($typeGen_1 != null) {		
	    	JavaParser.type_return r = (JavaParser.type_return) $typeGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("type");
	    		boundReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$bound.returnNode = boundReturnNode;
	}
	;

enumDeclaration returns [Node returnNode] 
:	ENUMGen=ENUM IdentifierGen=Identifier (TK_0='implements' typeListGen+=typeList)? enumBodyGen+=enumBody 
	{
		// Create return CST Node
		Node enumDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumDeclarationReturnNode.setKind("enumDeclaration");
	    // Create a CST Leaf
		if($ENUMGen != null) {
			Leaf ENUMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ENUMGenLeaf.setKind("ENUM");
			ENUMGenLeaf.setValue($ENUMGen.text);
			ENUMGenLeaf.setPos(ENUMGen.getCharPositionInLine());
			ENUMGenLeaf.setLine(ENUMGen.getLine());
			enumDeclarationReturnNode.getChildren().add(ENUMGenLeaf);
		}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			enumDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		enumDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeListGen != null) {
	        for(Iterator it = $typeListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeList");
	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($enumBodyGen != null) {
	        for(Iterator it = $enumBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumBody_return r = (JavaParser.enumBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumBody");
	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$enumDeclaration.returnNode = enumDeclarationReturnNode;
	}
	;
	
enumBody returns [Node returnNode] 
:	TK_0='{' enumConstantsGen+=enumConstants? TK_1=','? enumBodyDeclarationsGen+=enumBodyDeclarations? TK_2='}' 
	{
		// Create return CST Node
		Node enumBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumBodyReturnNode.setKind("enumBody");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		enumBodyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($enumConstantsGen != null) {
	        for(Iterator it = $enumConstantsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumConstants_return r = (JavaParser.enumConstants_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumConstants");
	            	enumBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		enumBodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($enumBodyDeclarationsGen != null) {
	        for(Iterator it = $enumBodyDeclarationsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumBodyDeclarations_return r = (JavaParser.enumBodyDeclarations_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumBodyDeclarations");
	            	enumBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		enumBodyReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$enumBody.returnNode = enumBodyReturnNode;
	}
	;

enumConstants returns [Node returnNode] 
:	enumConstantGen+=enumConstant (TK_0=',' enumConstantGen_1+=enumConstant)* 
	{
		// Create return CST Node
		Node enumConstantsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumConstantsReturnNode.setKind("enumConstants");
	    // Create a CST Node
		if($enumConstantGen != null) {
	        for(Iterator it = $enumConstantGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumConstant");
	            	enumConstantsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal enumConstantGen_1 aggregation
		if($enumConstantGen_1 != null) {
	    for(int pos = 0; pos < $enumConstantGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		enumConstantsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($enumConstantGen_1 != null) {		
	    	JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) $enumConstantGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("enumConstant");
	    		enumConstantsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$enumConstants.returnNode = enumConstantsReturnNode;
	}
	;
	
enumConstant returns [Node returnNode] 
:	annotationsGen+=annotations? IdentifierGen=Identifier (argumentsGen+=arguments)? (classBodyGen+=classBody)? 
	{
		// Create return CST Node
		Node enumConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumConstantReturnNode.setKind("enumConstant");
	    // Create a CST Node
		if($annotationsGen != null) {
	        for(Iterator it = $annotationsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotations");
	            	enumConstantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			enumConstantReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	enumConstantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($classBodyGen != null) {
	        for(Iterator it = $classBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classBody");
	            	enumConstantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$enumConstant.returnNode = enumConstantReturnNode;
	}
	;
	
enumBodyDeclarations returns [Node returnNode] 
:	TK_0=';' (classBodyDeclarationGen+=classBodyDeclaration)* 
	{
		// Create return CST Node
		Node enumBodyDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumBodyDeclarationsReturnNode.setKind("enumBodyDeclarations");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		enumBodyDeclarationsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($classBodyDeclarationGen != null) {
	        for(Iterator it = $classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classBodyDeclaration");
	            	enumBodyDeclarationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$enumBodyDeclarations.returnNode = enumBodyDeclarationsReturnNode;
	}
	;
	
interfaceDeclaration returns [Node returnNode] 
:	normalInterfaceDeclarationGen+=normalInterfaceDeclaration 
	{
		// Create return CST Node
		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
	    // Create a CST Node
		if($normalInterfaceDeclarationGen != null) {
	        for(Iterator it = $normalInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.normalInterfaceDeclaration_return r = (JavaParser.normalInterfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalInterfaceDeclaration");
	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceDeclaration.returnNode = interfaceDeclarationReturnNode;
	}
		| annotationTypeDeclarationGen+=annotationTypeDeclaration 
	{
		// Create return CST Node
		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
	    // Create a CST Node
		if($annotationTypeDeclarationGen != null) {
	        for(Iterator it = $annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeDeclaration");
	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceDeclaration.returnNode = interfaceDeclarationReturnNode;
	}
	;
	
normalInterfaceDeclaration returns [Node returnNode] 
:	TK_0='interface' IdentifierGen=Identifier typeParametersGen+=typeParameters? (TK_1='extends' typeListGen+=typeList)? interfaceBodyGen+=interfaceBody 
	{
		// Create return CST Node
		Node normalInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalInterfaceDeclarationReturnNode.setKind("normalInterfaceDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			normalInterfaceDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($typeParametersGen != null) {
	        for(Iterator it = $typeParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeParameters");
	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($typeListGen != null) {
	        for(Iterator it = $typeListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeList");
	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($interfaceBodyGen != null) {
	        for(Iterator it = $interfaceBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceBody_return r = (JavaParser.interfaceBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceBody");
	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$normalInterfaceDeclaration.returnNode = normalInterfaceDeclarationReturnNode;
	}
	;
	
typeList returns [Node returnNode] 
:	typeGen+=type (TK_0=',' typeGen_1+=type)* 
	{
		// Create return CST Node
		Node typeListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeListReturnNode.setKind("typeList");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	typeListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal typeGen_1 aggregation
		if($typeGen_1 != null) {
	    for(int pos = 0; pos < $typeGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($typeGen_1 != null) {		
	    	JavaParser.type_return r = (JavaParser.type_return) $typeGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("type");
	    		typeListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$typeList.returnNode = typeListReturnNode;
	}
	;
	
classBody returns [Node returnNode] 
:	TK_0='{' classBodyDeclarationGen+=classBodyDeclaration* TK_1='}' 
	{
		// Create return CST Node
		Node classBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classBodyReturnNode.setKind("classBody");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		classBodyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($classBodyDeclarationGen != null) {
	        for(Iterator it = $classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classBodyDeclaration");
	            	classBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		classBodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$classBody.returnNode = classBodyReturnNode;
	}
	;
	
interfaceBody returns [Node returnNode] 
:	TK_0='{' interfaceBodyDeclarationGen+=interfaceBodyDeclaration* TK_1='}' 
	{
		// Create return CST Node
		Node interfaceBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceBodyReturnNode.setKind("interfaceBody");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interfaceBodyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($interfaceBodyDeclarationGen != null) {
	        for(Iterator it = $interfaceBodyDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceBodyDeclaration_return r = (JavaParser.interfaceBodyDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceBodyDeclaration");
	            	interfaceBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		interfaceBodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interfaceBody.returnNode = interfaceBodyReturnNode;
	}
	;

classBodyDeclaration returns [Node returnNode] 
:	TK_0=';' 
	{
		// Create return CST Node
		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$classBodyDeclaration.returnNode = classBodyDeclarationReturnNode;
	}
	|	TK_0='static'? blockGen+=block 
	{
		// Create return CST Node
		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classBodyDeclaration.returnNode = classBodyDeclarationReturnNode;
	}
	|	modifierGen+=modifier* memberDeclGen+=memberDecl 
	{
		// Create return CST Node
		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
	    // Create a CST Node
		if($modifierGen != null) {
	        for(Iterator it = $modifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("modifier");
	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($memberDeclGen != null) {
	        for(Iterator it = $memberDeclGen.iterator(); it.hasNext(); )  { 
	            JavaParser.memberDecl_return r = (JavaParser.memberDecl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("memberDecl");
	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classBodyDeclaration.returnNode = classBodyDeclarationReturnNode;
	}
	;
	
memberDecl returns [Node returnNode] 
:	genericMethodOrConstructorDeclGen+=genericMethodOrConstructorDecl 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Node
		if($genericMethodOrConstructorDeclGen != null) {
	        for(Iterator it = $genericMethodOrConstructorDeclGen.iterator(); it.hasNext(); )  { 
	            JavaParser.genericMethodOrConstructorDecl_return r = (JavaParser.genericMethodOrConstructorDecl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("genericMethodOrConstructorDecl");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	methodDeclarationGen+=methodDeclaration 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Node
		if($methodDeclarationGen != null) {
	        for(Iterator it = $methodDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodDeclaration_return r = (JavaParser.methodDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodDeclaration");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	fieldDeclarationGen+=fieldDeclaration 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Node
		if($fieldDeclarationGen != null) {
	        for(Iterator it = $fieldDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.fieldDeclaration_return r = (JavaParser.fieldDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("fieldDeclaration");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	TK_0='void' IdentifierGen=Identifier voidMethodDeclaratorRestGen+=voidMethodDeclaratorRest 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		memberDeclReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($voidMethodDeclaratorRestGen != null) {
	        for(Iterator it = $voidMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.voidMethodDeclaratorRest_return r = (JavaParser.voidMethodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("voidMethodDeclaratorRest");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	IdentifierGen=Identifier constructorDeclaratorRestGen+=constructorDeclaratorRest 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($constructorDeclaratorRestGen != null) {
	        for(Iterator it = $constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constructorDeclaratorRest");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	interfaceDeclarationGen+=interfaceDeclaration 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Node
		if($interfaceDeclarationGen != null) {
	        for(Iterator it = $interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceDeclaration");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	|	classDeclarationGen+=classDeclaration 
	{
		// Create return CST Node
		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		memberDeclReturnNode.setKind("memberDecl");
	    // Create a CST Node
		if($classDeclarationGen != null) {
	        for(Iterator it = $classDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classDeclaration");
	            	memberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$memberDecl.returnNode = memberDeclReturnNode;
	}
	;
	
genericMethodOrConstructorDecl returns [Node returnNode] 
:	typeParametersGen+=typeParameters genericMethodOrConstructorRestGen+=genericMethodOrConstructorRest 
	{
		// Create return CST Node
		Node genericMethodOrConstructorDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		genericMethodOrConstructorDeclReturnNode.setKind("genericMethodOrConstructorDecl");
	    // Create a CST Node
		if($typeParametersGen != null) {
	        for(Iterator it = $typeParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeParameters");
	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($genericMethodOrConstructorRestGen != null) {
	        for(Iterator it = $genericMethodOrConstructorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.genericMethodOrConstructorRest_return r = (JavaParser.genericMethodOrConstructorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("genericMethodOrConstructorRest");
	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$genericMethodOrConstructorDecl.returnNode = genericMethodOrConstructorDeclReturnNode;
	}
	;
	
genericMethodOrConstructorRest returns [Node returnNode] 
:	(typeGen+=type | TK_0='void') IdentifierGen=Identifier methodDeclaratorRestGen+=methodDeclaratorRest 
	{
		// Create return CST Node
		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		genericMethodOrConstructorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($methodDeclaratorRestGen != null) {
	        for(Iterator it = $methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodDeclaratorRest");
	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$genericMethodOrConstructorRest.returnNode = genericMethodOrConstructorRestReturnNode;
	}
	|	IdentifierGen=Identifier constructorDeclaratorRestGen+=constructorDeclaratorRest 
	{
		// Create return CST Node
		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($constructorDeclaratorRestGen != null) {
	        for(Iterator it = $constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constructorDeclaratorRest");
	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$genericMethodOrConstructorRest.returnNode = genericMethodOrConstructorRestReturnNode;
	}
	;

methodDeclaration returns [Node returnNode] 
:	typeGen+=type IdentifierGen=Identifier methodDeclaratorRestGen+=methodDeclaratorRest 
	{
		// Create return CST Node
		Node methodDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		methodDeclarationReturnNode.setKind("methodDeclaration");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			methodDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($methodDeclaratorRestGen != null) {
	        for(Iterator it = $methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodDeclaratorRest");
	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$methodDeclaration.returnNode = methodDeclarationReturnNode;
	}
	;

fieldDeclaration returns [Node returnNode] 
:	typeGen+=type variableDeclaratorsGen+=variableDeclarators TK_0=';' 
	{
		// Create return CST Node
		Node fieldDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fieldDeclarationReturnNode.setKind("fieldDeclaration");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($variableDeclaratorsGen != null) {
	        for(Iterator it = $variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclarators");
	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		fieldDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$fieldDeclaration.returnNode = fieldDeclarationReturnNode;
	}
	;
		
interfaceBodyDeclaration returns [Node returnNode] 
:	modifierGen+=modifier* interfaceMemberDeclGen+=interfaceMemberDecl 
	{
		// Create return CST Node
		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
	    // Create a CST Node
		if($modifierGen != null) {
	        for(Iterator it = $modifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("modifier");
	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($interfaceMemberDeclGen != null) {
	        for(Iterator it = $interfaceMemberDeclGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceMemberDecl_return r = (JavaParser.interfaceMemberDecl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceMemberDecl");
	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceBodyDeclaration.returnNode = interfaceBodyDeclarationReturnNode;
	}
	|   TK_0=';' 
	{
		// Create return CST Node
		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interfaceBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interfaceBodyDeclaration.returnNode = interfaceBodyDeclarationReturnNode;
	}
	;

interfaceMemberDecl returns [Node returnNode] 
:	interfaceMethodOrFieldDeclGen+=interfaceMethodOrFieldDecl 
	{
		// Create return CST Node
		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
	    // Create a CST Node
		if($interfaceMethodOrFieldDeclGen != null) {
	        for(Iterator it = $interfaceMethodOrFieldDeclGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceMethodOrFieldDecl_return r = (JavaParser.interfaceMethodOrFieldDecl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceMethodOrFieldDecl");
	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMemberDecl.returnNode = interfaceMemberDeclReturnNode;
	}
	|   interfaceGenericMethodDeclGen+=interfaceGenericMethodDecl 
	{
		// Create return CST Node
		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
	    // Create a CST Node
		if($interfaceGenericMethodDeclGen != null) {
	        for(Iterator it = $interfaceGenericMethodDeclGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceGenericMethodDecl_return r = (JavaParser.interfaceGenericMethodDecl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceGenericMethodDecl");
	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMemberDecl.returnNode = interfaceMemberDeclReturnNode;
	}
    |   TK_0='void' IdentifierGen=Identifier voidInterfaceMethodDeclaratorRestGen+=voidInterfaceMethodDeclaratorRest 
	{
		// Create return CST Node
		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interfaceMemberDeclReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			interfaceMemberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($voidInterfaceMethodDeclaratorRestGen != null) {
	        for(Iterator it = $voidInterfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.voidInterfaceMethodDeclaratorRest_return r = (JavaParser.voidInterfaceMethodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("voidInterfaceMethodDeclaratorRest");
	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMemberDecl.returnNode = interfaceMemberDeclReturnNode;
	}
    |   interfaceDeclarationGen+=interfaceDeclaration 
	{
		// Create return CST Node
		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
	    // Create a CST Node
		if($interfaceDeclarationGen != null) {
	        for(Iterator it = $interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceDeclaration");
	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMemberDecl.returnNode = interfaceMemberDeclReturnNode;
	}
    |   classDeclarationGen+=classDeclaration 
	{
		// Create return CST Node
		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
	    // Create a CST Node
		if($classDeclarationGen != null) {
	        for(Iterator it = $classDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classDeclaration");
	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMemberDecl.returnNode = interfaceMemberDeclReturnNode;
	}
	;
	
interfaceMethodOrFieldDecl returns [Node returnNode] 
:	typeGen+=type IdentifierGen=Identifier interfaceMethodOrFieldRestGen+=interfaceMethodOrFieldRest 
	{
		// Create return CST Node
		Node interfaceMethodOrFieldDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMethodOrFieldDeclReturnNode.setKind("interfaceMethodOrFieldDecl");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			interfaceMethodOrFieldDeclReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($interfaceMethodOrFieldRestGen != null) {
	        for(Iterator it = $interfaceMethodOrFieldRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceMethodOrFieldRest_return r = (JavaParser.interfaceMethodOrFieldRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceMethodOrFieldRest");
	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMethodOrFieldDecl.returnNode = interfaceMethodOrFieldDeclReturnNode;
	}
	;
	
interfaceMethodOrFieldRest returns [Node returnNode] 
:	constantDeclaratorsRestGen+=constantDeclaratorsRest TK_0=';' 
	{
		// Create return CST Node
		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
	    // Create a CST Node
		if($constantDeclaratorsRestGen != null) {
	        for(Iterator it = $constantDeclaratorsRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constantDeclaratorsRest_return r = (JavaParser.constantDeclaratorsRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constantDeclaratorsRest");
	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interfaceMethodOrFieldRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interfaceMethodOrFieldRest.returnNode = interfaceMethodOrFieldRestReturnNode;
	}
	|	interfaceMethodDeclaratorRestGen+=interfaceMethodDeclaratorRest 
	{
		// Create return CST Node
		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
	    // Create a CST Node
		if($interfaceMethodDeclaratorRestGen != null) {
	        for(Iterator it = $interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceMethodOrFieldRest.returnNode = interfaceMethodOrFieldRestReturnNode;
	}
	;
	
methodDeclaratorRest returns [Node returnNode] 
:	formalParametersGen+=formalParameters (TK_0='[' TK_1=']')*
        (TK_2='throws' qualifiedNameListGen+=qualifiedNameList)?
        (   methodBodyGen+=methodBody
        |   TK_3=';'
        ) 
	{
		// Create return CST Node
		Node methodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		methodDeclaratorRestReturnNode.setKind("methodDeclaratorRest");
	    // Create a CST Node
		if($formalParametersGen != null) {
	        for(Iterator it = $formalParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameters");
	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		methodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameListGen != null) {
	        for(Iterator it = $qualifiedNameListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedNameList");
	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($methodBodyGen != null) {
	        for(Iterator it = $methodBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodBody");
	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		methodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$methodDeclaratorRest.returnNode = methodDeclaratorRestReturnNode;
	}
	;
	
voidMethodDeclaratorRest returns [Node returnNode] 
:	formalParametersGen+=formalParameters (TK_0='throws' qualifiedNameListGen+=qualifiedNameList)?
        (   methodBodyGen+=methodBody
        |   TK_1=';'
        ) 
	{
		// Create return CST Node
		Node voidMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		voidMethodDeclaratorRestReturnNode.setKind("voidMethodDeclaratorRest");
	    // Create a CST Node
		if($formalParametersGen != null) {
	        for(Iterator it = $formalParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameters");
	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameListGen != null) {
	        for(Iterator it = $qualifiedNameListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedNameList");
	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($methodBodyGen != null) {
	        for(Iterator it = $methodBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodBody");
	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$voidMethodDeclaratorRest.returnNode = voidMethodDeclaratorRestReturnNode;
	}
	;
	
interfaceMethodDeclaratorRest returns [Node returnNode] 
:	formalParametersGen+=formalParameters (TK_0='[' TK_1=']')* (TK_2='throws' qualifiedNameListGen+=qualifiedNameList)? TK_3=';' 
	{
		// Create return CST Node
		Node interfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceMethodDeclaratorRestReturnNode.setKind("interfaceMethodDeclaratorRest");
	    // Create a CST Node
		if($formalParametersGen != null) {
	        for(Iterator it = $formalParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameters");
	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameListGen != null) {
	        for(Iterator it = $qualifiedNameListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedNameList");
	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interfaceMethodDeclaratorRest.returnNode = interfaceMethodDeclaratorRestReturnNode;
	}
	;
	
interfaceGenericMethodDecl returns [Node returnNode] 
:	typeParametersGen+=typeParameters (typeGen+=type | TK_0='void') IdentifierGen=Identifier
        interfaceMethodDeclaratorRestGen+=interfaceMethodDeclaratorRest 
	{
		// Create return CST Node
		Node interfaceGenericMethodDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interfaceGenericMethodDeclReturnNode.setKind("interfaceGenericMethodDecl");
	    // Create a CST Node
		if($typeParametersGen != null) {
	        for(Iterator it = $typeParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeParameters");
	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interfaceGenericMethodDeclReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			interfaceGenericMethodDeclReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($interfaceMethodDeclaratorRestGen != null) {
	        for(Iterator it = $interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interfaceGenericMethodDecl.returnNode = interfaceGenericMethodDeclReturnNode;
	}
	;
	
voidInterfaceMethodDeclaratorRest returns [Node returnNode] 
:	formalParametersGen+=formalParameters (TK_0='throws' qualifiedNameListGen+=qualifiedNameList)? TK_1=';' 
	{
		// Create return CST Node
		Node voidInterfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		voidInterfaceMethodDeclaratorRestReturnNode.setKind("voidInterfaceMethodDeclaratorRest");
	    // Create a CST Node
		if($formalParametersGen != null) {
	        for(Iterator it = $formalParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameters");
	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameListGen != null) {
	        for(Iterator it = $qualifiedNameListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedNameList");
	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$voidInterfaceMethodDeclaratorRest.returnNode = voidInterfaceMethodDeclaratorRestReturnNode;
	}
	;
	
constructorDeclaratorRest returns [Node returnNode] 
:	formalParametersGen+=formalParameters (TK_0='throws' qualifiedNameListGen+=qualifiedNameList)? methodBodyGen+=methodBody 
	{
		// Create return CST Node
		Node constructorDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constructorDeclaratorRestReturnNode.setKind("constructorDeclaratorRest");
	    // Create a CST Node
		if($formalParametersGen != null) {
	        for(Iterator it = $formalParametersGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameters");
	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		constructorDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($qualifiedNameListGen != null) {
	        for(Iterator it = $qualifiedNameListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedNameList");
	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($methodBodyGen != null) {
	        for(Iterator it = $methodBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodBody");
	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constructorDeclaratorRest.returnNode = constructorDeclaratorRestReturnNode;
	}
	;

constantDeclarator returns [Node returnNode] 
:	IdentifierGen=Identifier constantDeclaratorRestGen+=constantDeclaratorRest 
	{
		// Create return CST Node
		Node constantDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constantDeclaratorReturnNode.setKind("constantDeclarator");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			constantDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($constantDeclaratorRestGen != null) {
	        for(Iterator it = $constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constantDeclaratorRest");
	            	constantDeclaratorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constantDeclarator.returnNode = constantDeclaratorReturnNode;
	}
	;
	
variableDeclarators returns [Node returnNode] 
:	variableDeclaratorGen+=variableDeclarator (TK_0=',' variableDeclaratorGen_1+=variableDeclarator)* 
	{
		// Create return CST Node
		Node variableDeclaratorsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableDeclaratorsReturnNode.setKind("variableDeclarators");
	    // Create a CST Node
		if($variableDeclaratorGen != null) {
	        for(Iterator it = $variableDeclaratorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclarator");
	            	variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal variableDeclaratorGen_1 aggregation
		if($variableDeclaratorGen_1 != null) {
	    for(int pos = 0; pos < $variableDeclaratorGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		variableDeclaratorsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($variableDeclaratorGen_1 != null) {		
	    	JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) $variableDeclaratorGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("variableDeclarator");
	    		variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$variableDeclarators.returnNode = variableDeclaratorsReturnNode;
	}
	;

variableDeclarator returns [Node returnNode] 
:	IdentifierGen=Identifier variableDeclaratorRestGen+=variableDeclaratorRest 
	{
		// Create return CST Node
		Node variableDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableDeclaratorReturnNode.setKind("variableDeclarator");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			variableDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($variableDeclaratorRestGen != null) {
	        for(Iterator it = $variableDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclaratorRest_return r = (JavaParser.variableDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclaratorRest");
	            	variableDeclaratorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableDeclarator.returnNode = variableDeclaratorReturnNode;
	}
	;
	
variableDeclaratorRest returns [Node returnNode] 
:	(TK_0='[' TK_1=']')+ (TK_2='=' variableInitializerGen+=variableInitializer)? 
	{
		// Create return CST Node
		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		variableDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($variableInitializerGen != null) {
	        for(Iterator it = $variableInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableInitializer");
	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableDeclaratorRest.returnNode = variableDeclaratorRestReturnNode;
	}
	|	TK_0='=' variableInitializerGen+=variableInitializer 
	{
		// Create return CST Node
		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		variableDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($variableInitializerGen != null) {
	        for(Iterator it = $variableInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableInitializer");
	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableDeclaratorRest.returnNode = variableDeclaratorRestReturnNode;
	}
	|
	;
	
constantDeclaratorsRest returns [Node returnNode] 
:   constantDeclaratorRestGen+=constantDeclaratorRest (TK_0=',' constantDeclaratorGen+=constantDeclarator)* 
	{
		// Create return CST Node
		Node constantDeclaratorsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constantDeclaratorsRestReturnNode.setKind("constantDeclaratorsRest");
	    // Create a CST Node
		if($constantDeclaratorRestGen != null) {
	        for(Iterator it = $constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constantDeclaratorRest");
	            	constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal constantDeclaratorGen aggregation
		if($constantDeclaratorGen != null) {
	    for(int pos = 0; pos < $constantDeclaratorGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		constantDeclaratorsRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($constantDeclaratorGen != null) {		
	    	JavaParser.constantDeclarator_return r = (JavaParser.constantDeclarator_return) $constantDeclaratorGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("constantDeclarator");
	    		constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$constantDeclaratorsRest.returnNode = constantDeclaratorsRestReturnNode;
	}
    ;

constantDeclaratorRest returns [Node returnNode] 
:	(TK_0='[' TK_1=']')* TK_2='=' variableInitializerGen+=variableInitializer 
	{
		// Create return CST Node
		Node constantDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constantDeclaratorRestReturnNode.setKind("constantDeclaratorRest");
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		constantDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($variableInitializerGen != null) {
	        for(Iterator it = $variableInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableInitializer");
	            	constantDeclaratorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constantDeclaratorRest.returnNode = constantDeclaratorRestReturnNode;
	}
	;
	
variableDeclaratorId returns [Node returnNode] 
:	IdentifierGen=Identifier (TK_0='[' TK_1=']')* 
	{
		// Create return CST Node
		Node variableDeclaratorIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableDeclaratorIdReturnNode.setKind("variableDeclaratorId");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			variableDeclaratorIdReturnNode.getChildren().add(IdentifierGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$variableDeclaratorId.returnNode = variableDeclaratorIdReturnNode;
	}
	;

variableInitializer returns [Node returnNode] 
:	arrayInitializerGen+=arrayInitializer 
	{
		// Create return CST Node
		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableInitializerReturnNode.setKind("variableInitializer");
	    // Create a CST Node
		if($arrayInitializerGen != null) {
	        for(Iterator it = $arrayInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arrayInitializer");
	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableInitializer.returnNode = variableInitializerReturnNode;
	}
    |   expressionGen+=expression 
	{
		// Create return CST Node
		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableInitializerReturnNode.setKind("variableInitializer");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableInitializer.returnNode = variableInitializerReturnNode;
	}
	;
	
arrayInitializer returns [Node returnNode] 
:	TK_0='{' (variableInitializerGen+=variableInitializer (TK_1=',' variableInitializerGen_1+=variableInitializer)* (TK_2=',')? )? TK_3='}' 
	{
		// Create return CST Node
		Node arrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayInitializerReturnNode.setKind("arrayInitializer");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayInitializerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($variableInitializerGen != null) {
	        for(Iterator it = $variableInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableInitializer");
	            	arrayInitializerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal variableInitializerGen_1 aggregation
		if($variableInitializerGen_1 != null) {
	    for(int pos = 0; pos < $variableInitializerGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		arrayInitializerReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($variableInitializerGen_1 != null) {		
	    	JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) $variableInitializerGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("variableInitializer");
	    		arrayInitializerReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		arrayInitializerReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		arrayInitializerReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arrayInitializer.returnNode = arrayInitializerReturnNode;
	}
	;

modifier returns [Node returnNode] 
:   annotationGen+=annotation 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a CST Node
		if($annotationGen != null) {
	        for(Iterator it = $annotationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotation");
	            	modifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='public' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='protected' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='private' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='static' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='abstract' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='final' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='native' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='synchronized' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='transient' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='volatile' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    |   TK_0='strictfp' 
	{
		// Create return CST Node
		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		modifierReturnNode.setKind("modifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		modifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$modifier.returnNode = modifierReturnNode;
	}
    ;

packageOrTypeName returns [Node returnNode] 
:	IdentifierGen=Identifier (TK_0='.' IdentifierGen_1_List+=Identifier)* 
	{
		// Create return CST Node
		Node packageOrTypeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		packageOrTypeNameReturnNode.setKind("packageOrTypeName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			packageOrTypeNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		packageOrTypeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			packageOrTypeNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$packageOrTypeName.returnNode = packageOrTypeNameReturnNode;
	}
	;

enumConstantName returns [Node returnNode] 
:   IdentifierGen=Identifier 
	{
		// Create return CST Node
		Node enumConstantNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		enumConstantNameReturnNode.setKind("enumConstantName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			enumConstantNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$enumConstantName.returnNode = enumConstantNameReturnNode;
	}
    ;

typeName returns [Node returnNode] 
:   IdentifierGen=Identifier 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	}
    |   packageOrTypeNameGen+=packageOrTypeName TK_0='.' IdentifierGen=Identifier 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a CST Node
		if($packageOrTypeNameGen != null) {
	        for(Iterator it = $packageOrTypeNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.packageOrTypeName_return r = (JavaParser.packageOrTypeName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("packageOrTypeName");
	            	typeNameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	}
	;

type returns [Node returnNode] 
:	IdentifierGen=Identifier (typeArgumentsGen+=typeArguments)? (TK_0='.' IdentifierGen_1_List+=Identifier (typeArgumentsGen_1+=typeArguments)? )* (TK_1='[' TK_2=']')* 
	{
		// Create return CST Node
		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeReturnNode.setKind("type");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			typeReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($typeArgumentsGen != null) {
	        for(Iterator it = $typeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeArguments");
	            	typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			typeReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		// No Terminal extractor
	    if($typeArgumentsGen_1 != null) {		
	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) $typeArgumentsGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("typeArguments");
	    		typeReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$type.returnNode = typeReturnNode;
	}
	|	primitiveTypeGen+=primitiveType (TK_0='[' TK_1=']')* 
	{
		// Create return CST Node
		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeReturnNode.setKind("type");
	    // Create a CST Node
		if($primitiveTypeGen != null) {
	        for(Iterator it = $primitiveTypeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primitiveType");
	            	typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$type.returnNode = typeReturnNode;
	}
	;

primitiveType returns [Node returnNode] 
:   TK_0='boolean' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='char' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='byte' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='short' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='int' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='long' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='float' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    |	TK_0='double' 
	{
		// Create return CST Node
		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primitiveTypeReturnNode.setKind("primitiveType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primitiveType.returnNode = primitiveTypeReturnNode;
	}
    ;

variableModifier returns [Node returnNode] 
:	TK_0='final' 
	{
		// Create return CST Node
		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableModifierReturnNode.setKind("variableModifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		variableModifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$variableModifier.returnNode = variableModifierReturnNode;
	}
    |   annotationGen+=annotation 
	{
		// Create return CST Node
		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableModifierReturnNode.setKind("variableModifier");
	    // Create a CST Node
		if($annotationGen != null) {
	        for(Iterator it = $annotationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotation");
	            	variableModifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variableModifier.returnNode = variableModifierReturnNode;
	}
	;

typeArguments returns [Node returnNode] 
:	TK_0='<' typeArgumentGen+=typeArgument (TK_1=',' typeArgumentGen_1+=typeArgument)* TK_2='>' 
	{
		// Create return CST Node
		Node typeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeArgumentsReturnNode.setKind("typeArguments");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeArgumentsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeArgumentGen != null) {
	        for(Iterator it = $typeArgumentGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeArgument");
	            	typeArgumentsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal typeArgumentGen_1 aggregation
		if($typeArgumentGen_1 != null) {
	    for(int pos = 0; pos < $typeArgumentGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		typeArgumentsReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($typeArgumentGen_1 != null) {		
	    	JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) $typeArgumentGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("typeArgument");
	    		typeArgumentsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		typeArgumentsReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeArguments.returnNode = typeArgumentsReturnNode;
	}
	;
	
typeArgument returns [Node returnNode] 
:	typeGen+=type 
	{
		// Create return CST Node
		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeArgumentReturnNode.setKind("typeArgument");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$typeArgument.returnNode = typeArgumentReturnNode;
	}
	|	TK_0='?' ((TK_1='extends' | TK_2='super') typeGen+=type)? 
	{
		// Create return CST Node
		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeArgumentReturnNode.setKind("typeArgument");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeArgumentReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		typeArgumentReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		typeArgumentReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$typeArgument.returnNode = typeArgumentReturnNode;
	}
	;
	
qualifiedNameList returns [Node returnNode] 
:	qualifiedNameGen+=qualifiedName (TK_0=',' qualifiedNameGen_1+=qualifiedName)* 
	{
		// Create return CST Node
		Node qualifiedNameListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		qualifiedNameListReturnNode.setKind("qualifiedNameList");
	    // Create a CST Node
		if($qualifiedNameGen != null) {
	        for(Iterator it = $qualifiedNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("qualifiedName");
	            	qualifiedNameListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal qualifiedNameGen_1 aggregation
		if($qualifiedNameGen_1 != null) {
	    for(int pos = 0; pos < $qualifiedNameGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		qualifiedNameListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($qualifiedNameGen_1 != null) {		
	    	JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) $qualifiedNameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("qualifiedName");
	    		qualifiedNameListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$qualifiedNameList.returnNode = qualifiedNameListReturnNode;
	}
	;
	
formalParameters returns [Node returnNode] 
:	TK_0='(' formalParameterDeclsGen+=formalParameterDecls? TK_1=')' 
	{
		// Create return CST Node
		Node formalParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		formalParametersReturnNode.setKind("formalParameters");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		formalParametersReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($formalParameterDeclsGen != null) {
	        for(Iterator it = $formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameterDecls");
	            	formalParametersReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		formalParametersReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$formalParameters.returnNode = formalParametersReturnNode;
	}
	;
	
formalParameterDecls returns [Node returnNode] 
:	variableModifierGen+=variableModifier* typeGen+=type formalParameterDeclsRestGen+=formalParameterDeclsRest? 
	{
		// Create return CST Node
		Node formalParameterDeclsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		formalParameterDeclsReturnNode.setKind("formalParameterDecls");
	    // Create a CST Node
		if($variableModifierGen != null) {
	        for(Iterator it = $variableModifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableModifier");
	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($formalParameterDeclsRestGen != null) {
	        for(Iterator it = $formalParameterDeclsRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameterDeclsRest_return r = (JavaParser.formalParameterDeclsRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameterDeclsRest");
	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$formalParameterDecls.returnNode = formalParameterDeclsReturnNode;
	}
	;
	
formalParameterDeclsRest returns [Node returnNode] 
:	variableDeclaratorIdGen+=variableDeclaratorId (TK_0=',' formalParameterDeclsGen+=formalParameterDecls)? 
	{
		// Create return CST Node
		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
	    // Create a CST Node
		if($variableDeclaratorIdGen != null) {
	        for(Iterator it = $variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclaratorId");
	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($formalParameterDeclsGen != null) {
	        for(Iterator it = $formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameterDecls");
	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$formalParameterDeclsRest.returnNode = formalParameterDeclsRestReturnNode;
	}
	|   TK_0='...' variableDeclaratorIdGen+=variableDeclaratorId 
	{
		// Create return CST Node
		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($variableDeclaratorIdGen != null) {
	        for(Iterator it = $variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclaratorId");
	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$formalParameterDeclsRest.returnNode = formalParameterDeclsRestReturnNode;
	}
	;
	
methodBody returns [Node returnNode] 
:	blockGen+=block 
	{
		// Create return CST Node
		Node methodBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		methodBodyReturnNode.setKind("methodBody");
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	methodBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$methodBody.returnNode = methodBodyReturnNode;
	}
	;

qualifiedName returns [Node returnNode] 
:	IdentifierGen=Identifier (TK_0='.' IdentifierGen_1_List+=Identifier)* 
	{
		// Create return CST Node
		Node qualifiedNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		qualifiedNameReturnNode.setKind("qualifiedName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			qualifiedNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		qualifiedNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			qualifiedNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$qualifiedName.returnNode = qualifiedNameReturnNode;
	}
	;
	
literal returns [Node returnNode] 
:   integerLiteralGen+=integerLiteral 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Node
		if($integerLiteralGen != null) {
	        for(Iterator it = $integerLiteralGen.iterator(); it.hasNext(); )  { 
	            JavaParser.integerLiteral_return r = (JavaParser.integerLiteral_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integerLiteral");
	            	literalReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
    |   FloatingPointLiteralGen=FloatingPointLiteral 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Leaf
		if($FloatingPointLiteralGen != null) {
			Leaf FloatingPointLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			FloatingPointLiteralGenLeaf.setKind("FloatingPointLiteral");
			FloatingPointLiteralGenLeaf.setValue($FloatingPointLiteralGen.text);
			FloatingPointLiteralGenLeaf.setPos(FloatingPointLiteralGen.getCharPositionInLine());
			FloatingPointLiteralGenLeaf.setLine(FloatingPointLiteralGen.getLine());
			literalReturnNode.getChildren().add(FloatingPointLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
    |   CharacterLiteralGen=CharacterLiteral 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Leaf
		if($CharacterLiteralGen != null) {
			Leaf CharacterLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CharacterLiteralGenLeaf.setKind("CharacterLiteral");
			CharacterLiteralGenLeaf.setValue($CharacterLiteralGen.text);
			CharacterLiteralGenLeaf.setPos(CharacterLiteralGen.getCharPositionInLine());
			CharacterLiteralGenLeaf.setLine(CharacterLiteralGen.getLine());
			literalReturnNode.getChildren().add(CharacterLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
    |   StringLiteralGen=StringLiteral 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Leaf
		if($StringLiteralGen != null) {
			Leaf StringLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			StringLiteralGenLeaf.setKind("StringLiteral");
			StringLiteralGenLeaf.setValue($StringLiteralGen.text);
			StringLiteralGenLeaf.setPos(StringLiteralGen.getCharPositionInLine());
			StringLiteralGenLeaf.setLine(StringLiteralGen.getLine());
			literalReturnNode.getChildren().add(StringLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
    |   booleanLiteralGen+=booleanLiteral 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Node
		if($booleanLiteralGen != null) {
	        for(Iterator it = $booleanLiteralGen.iterator(); it.hasNext(); )  { 
	            JavaParser.booleanLiteral_return r = (JavaParser.booleanLiteral_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("booleanLiteral");
	            	literalReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
    |   TK_0='null' 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		literalReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
	;

integerLiteral returns [Node returnNode] 
:   HexLiteralGen=HexLiteral 
	{
		// Create return CST Node
		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		integerLiteralReturnNode.setKind("integerLiteral");
	    // Create a CST Leaf
		if($HexLiteralGen != null) {
			Leaf HexLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			HexLiteralGenLeaf.setKind("HexLiteral");
			HexLiteralGenLeaf.setValue($HexLiteralGen.text);
			HexLiteralGenLeaf.setPos(HexLiteralGen.getCharPositionInLine());
			HexLiteralGenLeaf.setLine(HexLiteralGen.getLine());
			integerLiteralReturnNode.getChildren().add(HexLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$integerLiteral.returnNode = integerLiteralReturnNode;
	}
    |   OctalLiteralGen=OctalLiteral 
	{
		// Create return CST Node
		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		integerLiteralReturnNode.setKind("integerLiteral");
	    // Create a CST Leaf
		if($OctalLiteralGen != null) {
			Leaf OctalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			OctalLiteralGenLeaf.setKind("OctalLiteral");
			OctalLiteralGenLeaf.setValue($OctalLiteralGen.text);
			OctalLiteralGenLeaf.setPos(OctalLiteralGen.getCharPositionInLine());
			OctalLiteralGenLeaf.setLine(OctalLiteralGen.getLine());
			integerLiteralReturnNode.getChildren().add(OctalLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$integerLiteral.returnNode = integerLiteralReturnNode;
	}
    |   DecimalLiteralGen=DecimalLiteral 
	{
		// Create return CST Node
		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		integerLiteralReturnNode.setKind("integerLiteral");
	    // Create a CST Leaf
		if($DecimalLiteralGen != null) {
			Leaf DecimalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DecimalLiteralGenLeaf.setKind("DecimalLiteral");
			DecimalLiteralGenLeaf.setValue($DecimalLiteralGen.text);
			DecimalLiteralGenLeaf.setPos(DecimalLiteralGen.getCharPositionInLine());
			DecimalLiteralGenLeaf.setLine(DecimalLiteralGen.getLine());
			integerLiteralReturnNode.getChildren().add(DecimalLiteralGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$integerLiteral.returnNode = integerLiteralReturnNode;
	}
    ;

booleanLiteral returns [Node returnNode] 
:   TK_0='true' 
	{
		// Create return CST Node
		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		booleanLiteralReturnNode.setKind("booleanLiteral");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$booleanLiteral.returnNode = booleanLiteralReturnNode;
	}
    |   TK_0='false' 
	{
		// Create return CST Node
		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		booleanLiteralReturnNode.setKind("booleanLiteral");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$booleanLiteral.returnNode = booleanLiteralReturnNode;
	}
    ;

// ANNOTATIONS

annotations returns [Node returnNode] 
:	annotationGen+=annotation+ 
	{
		// Create return CST Node
		Node annotationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationsReturnNode.setKind("annotations");
	    // Create a CST Node
		if($annotationGen != null) {
	        for(Iterator it = $annotationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotation");
	            	annotationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotations.returnNode = annotationsReturnNode;
	}
	;

annotation returns [Node returnNode] 
:	TK_0='@' annotationNameGen+=annotationName (TK_1='(' elementValuePairsGen+=elementValuePairs? TK_2=')')? 
	{
		// Create return CST Node
		Node annotationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationReturnNode.setKind("annotation");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($annotationNameGen != null) {
	        for(Iterator it = $annotationNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationName_return r = (JavaParser.annotationName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationName");
	            	annotationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		annotationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($elementValuePairsGen != null) {
	        for(Iterator it = $elementValuePairsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValuePairs_return r = (JavaParser.elementValuePairs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValuePairs");
	            	annotationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		annotationReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotation.returnNode = annotationReturnNode;
	}
	;
	
annotationName returns [Node returnNode] 
: IdentifierGen=Identifier (TK_0='.' IdentifierGen_1_List+=Identifier)* 
	{
		// Create return CST Node
		Node annotationNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationNameReturnNode.setKind("annotationName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			annotationNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			annotationNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$annotationName.returnNode = annotationNameReturnNode;
	}
	;
	
elementValuePairs returns [Node returnNode] 
: elementValuePairGen+=elementValuePair (TK_0=',' elementValuePairGen_1+=elementValuePair)* 
	{
		// Create return CST Node
		Node elementValuePairsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValuePairsReturnNode.setKind("elementValuePairs");
	    // Create a CST Node
		if($elementValuePairGen != null) {
	        for(Iterator it = $elementValuePairGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValuePair");
	            	elementValuePairsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal elementValuePairGen_1 aggregation
		if($elementValuePairGen_1 != null) {
	    for(int pos = 0; pos < $elementValuePairGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementValuePairsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($elementValuePairGen_1 != null) {		
	    	JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) $elementValuePairGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("elementValuePair");
	    		elementValuePairsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$elementValuePairs.returnNode = elementValuePairsReturnNode;
	}
	;
	
elementValuePair returns [Node returnNode] 
: (IdentifierGen=Identifier TK_0='=')? elementValueGen+=elementValue 
	{
		// Create return CST Node
		Node elementValuePairReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValuePairReturnNode.setKind("elementValuePair");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			elementValuePairReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementValuePairReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elementValueGen != null) {
	        for(Iterator it = $elementValueGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValue");
	            	elementValuePairReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementValuePair.returnNode = elementValuePairReturnNode;
	}
	;
	
elementValue returns [Node returnNode] 
:	conditionalExpressionGen+=conditionalExpression 
	{
		// Create return CST Node
		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValueReturnNode.setKind("elementValue");
	    // Create a CST Node
		if($conditionalExpressionGen != null) {
	        for(Iterator it = $conditionalExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditionalExpression");
	            	elementValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementValue.returnNode = elementValueReturnNode;
	}
	|   annotationGen+=annotation 
	{
		// Create return CST Node
		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValueReturnNode.setKind("elementValue");
	    // Create a CST Node
		if($annotationGen != null) {
	        for(Iterator it = $annotationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotation");
	            	elementValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementValue.returnNode = elementValueReturnNode;
	}
	|   elementValueArrayInitializerGen+=elementValueArrayInitializer 
	{
		// Create return CST Node
		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValueReturnNode.setKind("elementValue");
	    // Create a CST Node
		if($elementValueArrayInitializerGen != null) {
	        for(Iterator it = $elementValueArrayInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValueArrayInitializer_return r = (JavaParser.elementValueArrayInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValueArrayInitializer");
	            	elementValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementValue.returnNode = elementValueReturnNode;
	}
	;
	
elementValueArrayInitializer returns [Node returnNode] 
:	TK_0='{' (elementValueGen+=elementValue (TK_1=',' elementValueGen_1+=elementValue )*)? TK_2='}' 
	{
		// Create return CST Node
		Node elementValueArrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementValueArrayInitializerReturnNode.setKind("elementValueArrayInitializer");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elementValueGen != null) {
	        for(Iterator it = $elementValueGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValue");
	            	elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal elementValueGen_1 aggregation
		if($elementValueGen_1 != null) {
	    for(int pos = 0; pos < $elementValueGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($elementValueGen_1 != null) {		
	    	JavaParser.elementValue_return r = (JavaParser.elementValue_return) $elementValueGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("elementValue");
	    		elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elementValueArrayInitializer.returnNode = elementValueArrayInitializerReturnNode;
	}
	;
	
annotationTypeDeclaration returns [Node returnNode] 
:	TK_0='@' TK_1='interface' IdentifierGen=Identifier annotationTypeBodyGen+=annotationTypeBody 
	{
		// Create return CST Node
		Node annotationTypeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeDeclarationReturnNode.setKind("annotationTypeDeclaration");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			annotationTypeDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($annotationTypeBodyGen != null) {
	        for(Iterator it = $annotationTypeBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeBody_return r = (JavaParser.annotationTypeBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeBody");
	            	annotationTypeDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeDeclaration.returnNode = annotationTypeDeclarationReturnNode;
	}
	;
	
annotationTypeBody returns [Node returnNode] 
:	TK_0='{' (annotationTypeElementDeclarationsGen+=annotationTypeElementDeclarations)? TK_1='}' 
	{
		// Create return CST Node
		Node annotationTypeBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeBodyReturnNode.setKind("annotationTypeBody");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeBodyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($annotationTypeElementDeclarationsGen != null) {
	        for(Iterator it = $annotationTypeElementDeclarationsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeElementDeclarations_return r = (JavaParser.annotationTypeElementDeclarations_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeElementDeclarations");
	            	annotationTypeBodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		annotationTypeBodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeBody.returnNode = annotationTypeBodyReturnNode;
	}
	;
	
annotationTypeElementDeclarations returns [Node returnNode] 
:	(annotationTypeElementDeclarationGen+=annotationTypeElementDeclaration) (annotationTypeElementDeclarationGen_1+=annotationTypeElementDeclaration)* 
	{
		// Create return CST Node
		Node annotationTypeElementDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementDeclarationsReturnNode.setKind("annotationTypeElementDeclarations");
	    // Create a CST Node
		if($annotationTypeElementDeclarationGen != null) {
	        for(Iterator it = $annotationTypeElementDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeElementDeclaration");
	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($annotationTypeElementDeclarationGen_1 != null) {
	        for(Iterator it = $annotationTypeElementDeclarationGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeElementDeclaration");
	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementDeclarations.returnNode = annotationTypeElementDeclarationsReturnNode;
	}
	;
	
annotationTypeElementDeclaration returns [Node returnNode] 
:	(modifierGen+=modifier)* annotationTypeElementRestGen+=annotationTypeElementRest 
	{
		// Create return CST Node
		Node annotationTypeElementDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementDeclarationReturnNode.setKind("annotationTypeElementDeclaration");
	    // Create a CST Node
		if($modifierGen != null) {
	        for(Iterator it = $modifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("modifier");
	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($annotationTypeElementRestGen != null) {
	        for(Iterator it = $annotationTypeElementRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeElementRest_return r = (JavaParser.annotationTypeElementRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeElementRest");
	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementDeclaration.returnNode = annotationTypeElementDeclarationReturnNode;
	}
	;
	
annotationTypeElementRest returns [Node returnNode] 
:	typeGen+=type annotationMethodOrConstantRestGen+=annotationMethodOrConstantRest TK_0=';' 
	{
		// Create return CST Node
		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($annotationMethodOrConstantRestGen != null) {
	        for(Iterator it = $annotationMethodOrConstantRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationMethodOrConstantRest_return r = (JavaParser.annotationMethodOrConstantRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationMethodOrConstantRest");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementRest.returnNode = annotationTypeElementRestReturnNode;
	}
	|   classDeclarationGen+=classDeclaration TK_0=';'? 
	{
		// Create return CST Node
		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
	    // Create a CST Node
		if($classDeclarationGen != null) {
	        for(Iterator it = $classDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classDeclaration");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementRest.returnNode = annotationTypeElementRestReturnNode;
	}
	|   interfaceDeclarationGen+=interfaceDeclaration TK_0=';'? 
	{
		// Create return CST Node
		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
	    // Create a CST Node
		if($interfaceDeclarationGen != null) {
	        for(Iterator it = $interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interfaceDeclaration");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementRest.returnNode = annotationTypeElementRestReturnNode;
	}
	|   enumDeclarationGen+=enumDeclaration TK_0=';'? 
	{
		// Create return CST Node
		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
	    // Create a CST Node
		if($enumDeclarationGen != null) {
	        for(Iterator it = $enumDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumDeclaration");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementRest.returnNode = annotationTypeElementRestReturnNode;
	}
	|   annotationTypeDeclarationGen+=annotationTypeDeclaration TK_0=';'? 
	{
		// Create return CST Node
		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
	    // Create a CST Node
		if($annotationTypeDeclarationGen != null) {
	        for(Iterator it = $annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationTypeDeclaration");
	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$annotationTypeElementRest.returnNode = annotationTypeElementRestReturnNode;
	}
	;
	
annotationMethodOrConstantRest returns [Node returnNode] 
:	annotationMethodRestGen+=annotationMethodRest 
	{
		// Create return CST Node
		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
	    // Create a CST Node
		if($annotationMethodRestGen != null) {
	        for(Iterator it = $annotationMethodRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationMethodRest_return r = (JavaParser.annotationMethodRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationMethodRest");
	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationMethodOrConstantRest.returnNode = annotationMethodOrConstantRestReturnNode;
	}
	|   annotationConstantRestGen+=annotationConstantRest 
	{
		// Create return CST Node
		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
	    // Create a CST Node
		if($annotationConstantRestGen != null) {
	        for(Iterator it = $annotationConstantRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.annotationConstantRest_return r = (JavaParser.annotationConstantRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("annotationConstantRest");
	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationMethodOrConstantRest.returnNode = annotationMethodOrConstantRestReturnNode;
	}
	;
	
annotationMethodRest returns [Node returnNode] 
:	IdentifierGen=Identifier TK_0='(' TK_1=')' (defaultValueGen+=defaultValue)? 
	{
		// Create return CST Node
		Node annotationMethodRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationMethodRestReturnNode.setKind("annotationMethodRest");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			annotationMethodRestReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		annotationMethodRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		annotationMethodRestReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($defaultValueGen != null) {
	        for(Iterator it = $defaultValueGen.iterator(); it.hasNext(); )  { 
	            JavaParser.defaultValue_return r = (JavaParser.defaultValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("defaultValue");
	            	annotationMethodRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationMethodRest.returnNode = annotationMethodRestReturnNode;
	}
 	;
 	
annotationConstantRest returns [Node returnNode] 
:	variableDeclaratorsGen+=variableDeclarators 
	{
		// Create return CST Node
		Node annotationConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		annotationConstantRestReturnNode.setKind("annotationConstantRest");
	    // Create a CST Node
		if($variableDeclaratorsGen != null) {
	        for(Iterator it = $variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclarators");
	            	annotationConstantRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$annotationConstantRest.returnNode = annotationConstantRestReturnNode;
	}
 	;
 	
defaultValue returns [Node returnNode] 
:	TK_0='default' elementValueGen+=elementValue 
	{
		// Create return CST Node
		Node defaultValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		defaultValueReturnNode.setKind("defaultValue");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		defaultValueReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elementValueGen != null) {
	        for(Iterator it = $elementValueGen.iterator(); it.hasNext(); )  { 
	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementValue");
	            	defaultValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$defaultValue.returnNode = defaultValueReturnNode;
	}
 	;

// STATEMENTS / BLOCKS

block returns [Node returnNode] 
:	TK_0='{' blockStatementGen+=blockStatement* TK_1='}' 
	{
		// Create return CST Node
		Node blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		blockReturnNode.setKind("block");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($blockStatementGen != null) {
	        for(Iterator it = $blockStatementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("blockStatement");
	            	blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$block.returnNode = blockReturnNode;
	}
	;
	
blockStatement returns [Node returnNode] 
:	localVariableDeclarationGen+=localVariableDeclaration 
	{
		// Create return CST Node
		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		blockStatementReturnNode.setKind("blockStatement");
	    // Create a CST Node
		if($localVariableDeclarationGen != null) {
	        for(Iterator it = $localVariableDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.localVariableDeclaration_return r = (JavaParser.localVariableDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("localVariableDeclaration");
	            	blockStatementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$blockStatement.returnNode = blockStatementReturnNode;
	}
	|	classOrInterfaceDeclarationGen+=classOrInterfaceDeclaration 
	{
		// Create return CST Node
		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		blockStatementReturnNode.setKind("blockStatement");
	    // Create a CST Node
		if($classOrInterfaceDeclarationGen != null) {
	        for(Iterator it = $classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classOrInterfaceDeclaration");
	            	blockStatementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$blockStatement.returnNode = blockStatementReturnNode;
	}
    	|	statementGen+=statement 
	{
		// Create return CST Node
		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		blockStatementReturnNode.setKind("blockStatement");
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	blockStatementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$blockStatement.returnNode = blockStatementReturnNode;
	}
	;
	
localVariableDeclaration returns [Node returnNode] 
:	variableModifierGen+=variableModifier* typeGen+=type variableDeclaratorsGen+=variableDeclarators TK_0=';' 
	{
		// Create return CST Node
		Node localVariableDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		localVariableDeclarationReturnNode.setKind("localVariableDeclaration");
	    // Create a CST Node
		if($variableModifierGen != null) {
	        for(Iterator it = $variableModifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableModifier");
	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($variableDeclaratorsGen != null) {
	        for(Iterator it = $variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclarators");
	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		localVariableDeclarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$localVariableDeclaration.returnNode = localVariableDeclarationReturnNode;
	}
	;
	
statement returns [Node returnNode] 
: blockGen+=block 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='assert' expressionGen+=expression (TK_1=':' expressionGen_1+=expression)? TK_2=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen_1 != null) {
	        for(Iterator it = $expressionGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='if' parExpressionGen+=parExpression statementGen+=statement (options {k=1;}:TK_1='else' statementGen_1+=statement)? 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($statementGen_1 != null) {
	        for(Iterator it = $statementGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='for' TK_1='(' forControlGen+=forControl TK_2=')' statementGen+=statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($forControlGen != null) {
	        for(Iterator it = $forControlGen.iterator(); it.hasNext(); )  { 
	            JavaParser.forControl_return r = (JavaParser.forControl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("forControl");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='while' parExpressionGen+=parExpression statementGen+=statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='do' statementGen+=statement TK_1='while' parExpressionGen+=parExpression TK_2=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='try' blockGen+=block
      (	catchesGen+=catches TK_1='finally' blockGen_1+=block
      | catchesGen_1+=catches
      | TK_2='finally' blockGen_2+=block
      ) 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($catchesGen != null) {
	        for(Iterator it = $catchesGen.iterator(); it.hasNext(); )  { 
	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("catches");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($blockGen_1 != null) {
	        for(Iterator it = $blockGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($catchesGen_1 != null) {
	        for(Iterator it = $catchesGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("catches");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($blockGen_2 != null) {
	        for(Iterator it = $blockGen_2.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='switch' parExpressionGen+=parExpression TK_1='{' switchBlockStatementGroupsGen+=switchBlockStatementGroups TK_2='}' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($switchBlockStatementGroupsGen != null) {
	        for(Iterator it = $switchBlockStatementGroupsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.switchBlockStatementGroups_return r = (JavaParser.switchBlockStatementGroups_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("switchBlockStatementGroups");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='synchronized' parExpressionGen+=parExpression blockGen+=block 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='return' expressionGen+=expression? TK_1=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='throw' expressionGen+=expression TK_1=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='break' IdentifierGen=Identifier? TK_1=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			statementReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0='continue' IdentifierGen=Identifier? TK_1=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			statementReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | TK_0=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | statementExpressionGen+=statementExpression TK_0=';' 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($statementExpressionGen != null) {
	        for(Iterator it = $statementExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statementExpression");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
    | IdentifierGen=Identifier TK_0=':' statementGen+=statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			statementReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	;
	
catches returns [Node returnNode] 
:	catchClauseGen+=catchClause (catchClauseGen_1+=catchClause)* 
	{
		// Create return CST Node
		Node catchesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		catchesReturnNode.setKind("catches");
	    // Create a CST Node
		if($catchClauseGen != null) {
	        for(Iterator it = $catchClauseGen.iterator(); it.hasNext(); )  { 
	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("catchClause");
	            	catchesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($catchClauseGen_1 != null) {
	        for(Iterator it = $catchClauseGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("catchClause");
	            	catchesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$catches.returnNode = catchesReturnNode;
	}
	;
	
catchClause returns [Node returnNode] 
:	TK_0='catch' TK_1='(' formalParameterGen+=formalParameter TK_2=')' blockGen+=block 
	{
		// Create return CST Node
		Node catchClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		catchClauseReturnNode.setKind("catchClause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		catchClauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		catchClauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($formalParameterGen != null) {
	        for(Iterator it = $formalParameterGen.iterator(); it.hasNext(); )  { 
	            JavaParser.formalParameter_return r = (JavaParser.formalParameter_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("formalParameter");
	            	catchClauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		catchClauseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	catchClauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$catchClause.returnNode = catchClauseReturnNode;
	}
	;

formalParameter returns [Node returnNode] 
:	variableModifierGen+=variableModifier* typeGen+=type variableDeclaratorIdGen+=variableDeclaratorId 
	{
		// Create return CST Node
		Node formalParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		formalParameterReturnNode.setKind("formalParameter");
	    // Create a CST Node
		if($variableModifierGen != null) {
	        for(Iterator it = $variableModifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableModifier");
	            	formalParameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	formalParameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($variableDeclaratorIdGen != null) {
	        for(Iterator it = $variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclaratorId");
	            	formalParameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$formalParameter.returnNode = formalParameterReturnNode;
	}
	;
		
switchBlockStatementGroups returns [Node returnNode] 
:	(switchBlockStatementGroupGen+=switchBlockStatementGroup)* 
	{
		// Create return CST Node
		Node switchBlockStatementGroupsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		switchBlockStatementGroupsReturnNode.setKind("switchBlockStatementGroups");
	    // Create a CST Node
		if($switchBlockStatementGroupGen != null) {
	        for(Iterator it = $switchBlockStatementGroupGen.iterator(); it.hasNext(); )  { 
	            JavaParser.switchBlockStatementGroup_return r = (JavaParser.switchBlockStatementGroup_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("switchBlockStatementGroup");
	            	switchBlockStatementGroupsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$switchBlockStatementGroups.returnNode = switchBlockStatementGroupsReturnNode;
	}
	;
	
switchBlockStatementGroup returns [Node returnNode] 
:	switchLabelGen+=switchLabel blockStatementGen+=blockStatement* 
	{
		// Create return CST Node
		Node switchBlockStatementGroupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		switchBlockStatementGroupReturnNode.setKind("switchBlockStatementGroup");
	    // Create a CST Node
		if($switchLabelGen != null) {
	        for(Iterator it = $switchLabelGen.iterator(); it.hasNext(); )  { 
	            JavaParser.switchLabel_return r = (JavaParser.switchLabel_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("switchLabel");
	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($blockStatementGen != null) {
	        for(Iterator it = $blockStatementGen.iterator(); it.hasNext(); )  { 
	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("blockStatement");
	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$switchBlockStatementGroup.returnNode = switchBlockStatementGroupReturnNode;
	}
	;
	
switchLabel returns [Node returnNode] 
:	TK_0='case' constantExpressionGen+=constantExpression TK_1=':' 
	{
		// Create return CST Node
		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		switchLabelReturnNode.setKind("switchLabel");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($constantExpressionGen != null) {
	        for(Iterator it = $constantExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.constantExpression_return r = (JavaParser.constantExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constantExpression");
	            	switchLabelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$switchLabel.returnNode = switchLabelReturnNode;
	}
	|   TK_0='case' enumConstantNameGen+=enumConstantName TK_1=':' 
	{
		// Create return CST Node
		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		switchLabelReturnNode.setKind("switchLabel");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($enumConstantNameGen != null) {
	        for(Iterator it = $enumConstantNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.enumConstantName_return r = (JavaParser.enumConstantName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("enumConstantName");
	            	switchLabelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$switchLabel.returnNode = switchLabelReturnNode;
	}
	|   TK_0='default' TK_1=':' 
	{
		// Create return CST Node
		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		switchLabelReturnNode.setKind("switchLabel");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$switchLabel.returnNode = switchLabelReturnNode;
	}
	;
	
moreStatementExpressions returns [Node returnNode] 
:	(TK_0=',' statementExpressionGen+=statementExpression)* 
	{
		// Create return CST Node
		Node moreStatementExpressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		moreStatementExpressionsReturnNode.setKind("moreStatementExpressions");
	
		// Create a special CST Node for terminal statementExpressionGen aggregation
		if($statementExpressionGen != null) {
	    for(int pos = 0; pos < $statementExpressionGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		moreStatementExpressionsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($statementExpressionGen != null) {		
	    	JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) $statementExpressionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("statementExpression");
	    		moreStatementExpressionsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$moreStatementExpressions.returnNode = moreStatementExpressionsReturnNode;
	}
	;

forControl returns [Node returnNode] 
options {k=3;} // be efficient for common case: for (ID ID : ID) ...
	:	forVarControlGen+=forVarControl 
	{
		// Create return CST Node
		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forControlReturnNode.setKind("forControl");
	    // Create a CST Node
		if($forVarControlGen != null) {
	        for(Iterator it = $forVarControlGen.iterator(); it.hasNext(); )  { 
	            JavaParser.forVarControl_return r = (JavaParser.forVarControl_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("forVarControl");
	            	forControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forControl.returnNode = forControlReturnNode;
	}
	|	forInitGen+=forInit? TK_0=';' expressionGen+=expression? TK_1=';' forUpdateGen+=forUpdate? 
	{
		// Create return CST Node
		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forControlReturnNode.setKind("forControl");
	    // Create a CST Node
		if($forInitGen != null) {
	        for(Iterator it = $forInitGen.iterator(); it.hasNext(); )  { 
	            JavaParser.forInit_return r = (JavaParser.forInit_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("forInit");
	            	forControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		forControlReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	forControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		forControlReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($forUpdateGen != null) {
	        for(Iterator it = $forUpdateGen.iterator(); it.hasNext(); )  { 
	            JavaParser.forUpdate_return r = (JavaParser.forUpdate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("forUpdate");
	            	forControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forControl.returnNode = forControlReturnNode;
	}
	;

forInit returns [Node returnNode] 
:	variableModifierGen+=variableModifier* typeGen+=type variableDeclaratorsGen+=variableDeclarators 
	{
		// Create return CST Node
		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forInitReturnNode.setKind("forInit");
	    // Create a CST Node
		if($variableModifierGen != null) {
	        for(Iterator it = $variableModifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableModifier");
	            	forInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	forInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($variableDeclaratorsGen != null) {
	        for(Iterator it = $variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableDeclarators");
	            	forInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forInit.returnNode = forInitReturnNode;
	}
	|	expressionListGen+=expressionList 
	{
		// Create return CST Node
		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forInitReturnNode.setKind("forInit");
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	forInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forInit.returnNode = forInitReturnNode;
	}
	;
	
forVarControl returns [Node returnNode] 
:	variableModifierGen+=variableModifier* typeGen+=type IdentifierGen=Identifier TK_0=':' expressionGen+=expression 
	{
		// Create return CST Node
		Node forVarControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forVarControlReturnNode.setKind("forVarControl");
	    // Create a CST Node
		if($variableModifierGen != null) {
	        for(Iterator it = $variableModifierGen.iterator(); it.hasNext(); )  { 
	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variableModifier");
	            	forVarControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	forVarControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			forVarControlReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		forVarControlReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	forVarControlReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forVarControl.returnNode = forVarControlReturnNode;
	}
	;

forUpdate returns [Node returnNode] 
:	expressionListGen+=expressionList 
	{
		// Create return CST Node
		Node forUpdateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		forUpdateReturnNode.setKind("forUpdate");
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	forUpdateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$forUpdate.returnNode = forUpdateReturnNode;
	}
	;

// EXPRESSIONS

parExpression returns [Node returnNode] 
:	TK_0='(' expressionGen+=expression TK_1=')' 
	{
		// Create return CST Node
		Node parExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		parExpressionReturnNode.setKind("parExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		parExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	parExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		parExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$parExpression.returnNode = parExpressionReturnNode;
	}
	;
	
expressionList returns [Node returnNode] 
:   expressionGen+=expression (TK_0=',' expressionGen_1+=expression)* 
	{
		// Create return CST Node
		Node expressionListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expressionListReturnNode.setKind("expressionList");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	expressionListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal expressionGen_1 aggregation
		if($expressionGen_1 != null) {
	    for(int pos = 0; pos < $expressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expressionListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($expressionGen_1 != null) {		
	    	JavaParser.expression_return r = (JavaParser.expression_return) $expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expression");
	    		expressionListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expressionList.returnNode = expressionListReturnNode;
	}
    ;

statementExpression returns [Node returnNode] 
:	expressionGen+=expression 
	{
		// Create return CST Node
		Node statementExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementExpressionReturnNode.setKind("statementExpression");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	statementExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statementExpression.returnNode = statementExpressionReturnNode;
	}
	;
	
constantExpression returns [Node returnNode] 
:	expressionGen+=expression 
	{
		// Create return CST Node
		Node constantExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constantExpressionReturnNode.setKind("constantExpression");
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	constantExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constantExpression.returnNode = constantExpressionReturnNode;
	}
	;
	
expression returns [Node returnNode] 
:	conditionalExpressionGen+=conditionalExpression (assignmentOperatorGen+=assignmentOperator expressionGen+=expression)? 
	{
		// Create return CST Node
		Node expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expressionReturnNode.setKind("expression");
	    // Create a CST Node
		if($conditionalExpressionGen != null) {
	        for(Iterator it = $conditionalExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditionalExpression");
	            	expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($assignmentOperatorGen != null) {
	        for(Iterator it = $assignmentOperatorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.assignmentOperator_return r = (JavaParser.assignmentOperator_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("assignmentOperator");
	            	expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expression.returnNode = expressionReturnNode;
	}
	;
	
assignmentOperator returns [Node returnNode] 
:	TK_0='=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='+=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='-=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='*=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='/=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='&=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='|=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='^=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='%=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='<' TK_1='<' TK_2='=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='>' TK_1='>' TK_2='=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
    |   TK_0='>' TK_1='>' TK_2='>' TK_3='=' 
	{
		// Create return CST Node
		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignmentOperatorReturnNode.setKind("assignmentOperator");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		assignmentOperatorReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$assignmentOperator.returnNode = assignmentOperatorReturnNode;
	}
	;

conditionalExpression returns [Node returnNode] 
:   conditionalOrExpressionGen+=conditionalOrExpression ( TK_0='?' expressionGen+=expression TK_1=':' expressionGen_1+=expression )? 
	{
		// Create return CST Node
		Node conditionalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditionalExpressionReturnNode.setKind("conditionalExpression");
	    // Create a CST Node
		if($conditionalOrExpressionGen != null) {
	        for(Iterator it = $conditionalOrExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.conditionalOrExpression_return r = (JavaParser.conditionalOrExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditionalOrExpression");
	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		conditionalExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		conditionalExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen_1 != null) {
	        for(Iterator it = $expressionGen_1.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$conditionalExpression.returnNode = conditionalExpressionReturnNode;
	}
	;

conditionalOrExpression returns [Node returnNode] 
:   conditionalAndExpressionGen+=conditionalAndExpression ( TK_0='||' conditionalAndExpressionGen_1+=conditionalAndExpression )* 
	{
		// Create return CST Node
		Node conditionalOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditionalOrExpressionReturnNode.setKind("conditionalOrExpression");
	    // Create a CST Node
		if($conditionalAndExpressionGen != null) {
	        for(Iterator it = $conditionalAndExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditionalAndExpression");
	            	conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal conditionalAndExpressionGen_1 aggregation
		if($conditionalAndExpressionGen_1 != null) {
	    for(int pos = 0; pos < $conditionalAndExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		conditionalOrExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($conditionalAndExpressionGen_1 != null) {		
	    	JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) $conditionalAndExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("conditionalAndExpression");
	    		conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$conditionalOrExpression.returnNode = conditionalOrExpressionReturnNode;
	}
	;

conditionalAndExpression returns [Node returnNode] 
:   inclusiveOrExpressionGen+=inclusiveOrExpression ( TK_0='&&' inclusiveOrExpressionGen_1+=inclusiveOrExpression )* 
	{
		// Create return CST Node
		Node conditionalAndExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditionalAndExpressionReturnNode.setKind("conditionalAndExpression");
	    // Create a CST Node
		if($inclusiveOrExpressionGen != null) {
	        for(Iterator it = $inclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("inclusiveOrExpression");
	            	conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal inclusiveOrExpressionGen_1 aggregation
		if($inclusiveOrExpressionGen_1 != null) {
	    for(int pos = 0; pos < $inclusiveOrExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		conditionalAndExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($inclusiveOrExpressionGen_1 != null) {		
	    	JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) $inclusiveOrExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("inclusiveOrExpression");
	    		conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$conditionalAndExpression.returnNode = conditionalAndExpressionReturnNode;
	}
	;

inclusiveOrExpression returns [Node returnNode] 
:   exclusiveOrExpressionGen+=exclusiveOrExpression ( TK_0='|' exclusiveOrExpressionGen_1+=exclusiveOrExpression )* 
	{
		// Create return CST Node
		Node inclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		inclusiveOrExpressionReturnNode.setKind("inclusiveOrExpression");
	    // Create a CST Node
		if($exclusiveOrExpressionGen != null) {
	        for(Iterator it = $exclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exclusiveOrExpression");
	            	inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal exclusiveOrExpressionGen_1 aggregation
		if($exclusiveOrExpressionGen_1 != null) {
	    for(int pos = 0; pos < $exclusiveOrExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		inclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($exclusiveOrExpressionGen_1 != null) {		
	    	JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) $exclusiveOrExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("exclusiveOrExpression");
	    		inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$inclusiveOrExpression.returnNode = inclusiveOrExpressionReturnNode;
	}
	;

exclusiveOrExpression returns [Node returnNode] 
:   andExpressionGen+=andExpression ( TK_0='^' andExpressionGen_1+=andExpression )* 
	{
		// Create return CST Node
		Node exclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exclusiveOrExpressionReturnNode.setKind("exclusiveOrExpression");
	    // Create a CST Node
		if($andExpressionGen != null) {
	        for(Iterator it = $andExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.andExpression_return r = (JavaParser.andExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("andExpression");
	            	exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal andExpressionGen_1 aggregation
		if($andExpressionGen_1 != null) {
	    for(int pos = 0; pos < $andExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($andExpressionGen_1 != null) {		
	    	JavaParser.andExpression_return r = (JavaParser.andExpression_return) $andExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("andExpression");
	    		exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$exclusiveOrExpression.returnNode = exclusiveOrExpressionReturnNode;
	}
	;

andExpression returns [Node returnNode] 
:   equalityExpressionGen+=equalityExpression ( TK_0='&' equalityExpressionGen_1+=equalityExpression )* 
	{
		// Create return CST Node
		Node andExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		andExpressionReturnNode.setKind("andExpression");
	    // Create a CST Node
		if($equalityExpressionGen != null) {
	        for(Iterator it = $equalityExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("equalityExpression");
	            	andExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal equalityExpressionGen_1 aggregation
		if($equalityExpressionGen_1 != null) {
	    for(int pos = 0; pos < $equalityExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		andExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($equalityExpressionGen_1 != null) {		
	    	JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) $equalityExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("equalityExpression");
	    		andExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$andExpression.returnNode = andExpressionReturnNode;
	}
	;

equalityExpression returns [Node returnNode] 
:   instanceOfExpressionGen+=instanceOfExpression ( (TK_0='==' | TK_1='!=') instanceOfExpressionGen_1+=instanceOfExpression )* 
	{
		// Create return CST Node
		Node equalityExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		equalityExpressionReturnNode.setKind("equalityExpression");
	    // Create a CST Node
		if($instanceOfExpressionGen != null) {
	        for(Iterator it = $instanceOfExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("instanceOfExpression");
	            	equalityExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal instanceOfExpressionGen_1 aggregation
		if($instanceOfExpressionGen_1 != null) {
	    for(int pos = 0; pos < $instanceOfExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		equalityExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		equalityExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($instanceOfExpressionGen_1 != null) {		
	    	JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) $instanceOfExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("instanceOfExpression");
	    		equalityExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$equalityExpression.returnNode = equalityExpressionReturnNode;
	}
	;

instanceOfExpression returns [Node returnNode] 
:   relationalExpressionGen+=relationalExpression (TK_0='instanceof' typeGen+=type)? 
	{
		// Create return CST Node
		Node instanceOfExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		instanceOfExpressionReturnNode.setKind("instanceOfExpression");
	    // Create a CST Node
		if($relationalExpressionGen != null) {
	        for(Iterator it = $relationalExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.relationalExpression_return r = (JavaParser.relationalExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("relationalExpression");
	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		instanceOfExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$instanceOfExpression.returnNode = instanceOfExpressionReturnNode;
	}
	;

relationalExpression returns [Node returnNode] 
:   shiftExpressionGen+=shiftExpression ( relationalOpGen+=relationalOp shiftExpressionGen_1+=shiftExpression )* 
	{
		// Create return CST Node
		Node relationalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relationalExpressionReturnNode.setKind("relationalExpression");
	    // Create a CST Node
		if($shiftExpressionGen != null) {
	        for(Iterator it = $shiftExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("shiftExpression");
	            	relationalExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal relationalOpGen aggregation
		if($relationalOpGen != null) {
	    for(int pos = 0; pos < $relationalOpGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($relationalOpGen != null) {		
	    	JavaParser.relationalOp_return r = (JavaParser.relationalOp_return) $relationalOpGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("relationalOp");
	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($shiftExpressionGen_1 != null) {		
	    	JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) $shiftExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("shiftExpression");
	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$relationalExpression.returnNode = relationalExpressionReturnNode;
	}
	;
	
relationalOp returns [Node returnNode] 
:	(TK_0='<' TK_1='=' | TK_2='>' TK_3='=' | TK_4='<' | TK_5='>') 
	{
		// Create return CST Node
		Node relationalOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relationalOpReturnNode.setKind("relationalOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		relationalOpReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relationalOp.returnNode = relationalOpReturnNode;
	}
	;

shiftExpression returns [Node returnNode] 
:   additiveExpressionGen+=additiveExpression ( shiftOpGen+=shiftOp additiveExpressionGen_1+=additiveExpression )* 
	{
		// Create return CST Node
		Node shiftExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		shiftExpressionReturnNode.setKind("shiftExpression");
	    // Create a CST Node
		if($additiveExpressionGen != null) {
	        for(Iterator it = $additiveExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("additiveExpression");
	            	shiftExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal shiftOpGen aggregation
		if($shiftOpGen != null) {
	    for(int pos = 0; pos < $shiftOpGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($shiftOpGen != null) {		
	    	JavaParser.shiftOp_return r = (JavaParser.shiftOp_return) $shiftOpGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("shiftOp");
	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($additiveExpressionGen_1 != null) {		
	    	JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) $additiveExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("additiveExpression");
	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$shiftExpression.returnNode = shiftExpressionReturnNode;
	}
	;

        // TODO: need a sem pred to check column on these >>>
shiftOp returns [Node returnNode] 
:	(TK_0='<' TK_1='<' | TK_2='>' TK_3='>' TK_4='>' | TK_5='>' TK_6='>') 
	{
		// Create return CST Node
		Node shiftOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		shiftOpReturnNode.setKind("shiftOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		shiftOpReturnNode.getChildren().add(TK_6Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$shiftOp.returnNode = shiftOpReturnNode;
	}
	;


additiveExpression returns [Node returnNode] 
:   multiplicativeExpressionGen+=multiplicativeExpression ( (TK_0='+' | TK_1='-') multiplicativeExpressionGen_1+=multiplicativeExpression )* 
	{
		// Create return CST Node
		Node additiveExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		additiveExpressionReturnNode.setKind("additiveExpression");
	    // Create a CST Node
		if($multiplicativeExpressionGen != null) {
	        for(Iterator it = $multiplicativeExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("multiplicativeExpression");
	            	additiveExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal multiplicativeExpressionGen_1 aggregation
		if($multiplicativeExpressionGen_1 != null) {
	    for(int pos = 0; pos < $multiplicativeExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		additiveExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		additiveExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($multiplicativeExpressionGen_1 != null) {		
	    	JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) $multiplicativeExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("multiplicativeExpression");
	    		additiveExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$additiveExpression.returnNode = additiveExpressionReturnNode;
	}
	;

multiplicativeExpression returns [Node returnNode] 
:   unaryExpressionGen+=unaryExpression ( ( TK_0='*' | TK_1='/' | TK_2='%' ) unaryExpressionGen_1+=unaryExpression )* 
	{
		// Create return CST Node
		Node multiplicativeExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		multiplicativeExpressionReturnNode.setKind("multiplicativeExpression");
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal unaryExpressionGen_1 aggregation
		if($unaryExpressionGen_1 != null) {
	    for(int pos = 0; pos < $unaryExpressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		multiplicativeExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		multiplicativeExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		multiplicativeExpressionReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($unaryExpressionGen_1 != null) {		
	    	JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) $unaryExpressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("unaryExpression");
	    		multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$multiplicativeExpression.returnNode = multiplicativeExpressionReturnNode;
	}
	;
	
unaryExpression returns [Node returnNode] 
:   TK_0='+' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionReturnNode.setKind("unaryExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpression.returnNode = unaryExpressionReturnNode;
	}
    |	TK_0='-' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionReturnNode.setKind("unaryExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpression.returnNode = unaryExpressionReturnNode;
	}
    |   TK_0='++' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionReturnNode.setKind("unaryExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpression.returnNode = unaryExpressionReturnNode;
	}
    |   TK_0='--' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionReturnNode.setKind("unaryExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpression.returnNode = unaryExpressionReturnNode;
	}
    |   unaryExpressionNotPlusMinusGen+=unaryExpressionNotPlusMinus 
	{
		// Create return CST Node
		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionReturnNode.setKind("unaryExpression");
	    // Create a CST Node
		if($unaryExpressionNotPlusMinusGen != null) {
	        for(Iterator it = $unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpression.returnNode = unaryExpressionReturnNode;
	}
    ;

unaryExpressionNotPlusMinus returns [Node returnNode] 
:   TK_0='~' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpressionNotPlusMinus.returnNode = unaryExpressionNotPlusMinusReturnNode;
	}
    | 	TK_0='!' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpressionNotPlusMinus.returnNode = unaryExpressionNotPlusMinusReturnNode;
	}
    |   castExpressionGen+=castExpression 
	{
		// Create return CST Node
		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
	    // Create a CST Node
		if($castExpressionGen != null) {
	        for(Iterator it = $castExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.castExpression_return r = (JavaParser.castExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("castExpression");
	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$unaryExpressionNotPlusMinus.returnNode = unaryExpressionNotPlusMinusReturnNode;
	}
    |   primaryGen+=primary selectorGen+=selector* (TK_0='++'|TK_1='--')? 
	{
		// Create return CST Node
		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
	    // Create a CST Node
		if($primaryGen != null) {
	        for(Iterator it = $primaryGen.iterator(); it.hasNext(); )  { 
	            JavaParser.primary_return r = (JavaParser.primary_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primary");
	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($selectorGen != null) {
	        for(Iterator it = $selectorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.selector_return r = (JavaParser.selector_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("selector");
	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$unaryExpressionNotPlusMinus.returnNode = unaryExpressionNotPlusMinusReturnNode;
	}
    ;

castExpression returns [Node returnNode] 
:  TK_0='(' primitiveTypeGen+=primitiveType TK_1=')' unaryExpressionGen+=unaryExpression 
	{
		// Create return CST Node
		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		castExpressionReturnNode.setKind("castExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($primitiveTypeGen != null) {
	        for(Iterator it = $primitiveTypeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primitiveType");
	            	castExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionGen != null) {
	        for(Iterator it = $unaryExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpression");
	            	castExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$castExpression.returnNode = castExpressionReturnNode;
	}
    |  TK_0='(' (typeGen+=type | expressionGen+=expression) TK_1=')' unaryExpressionNotPlusMinusGen+=unaryExpressionNotPlusMinus 
	{
		// Create return CST Node
		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		castExpressionReturnNode.setKind("castExpression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeGen != null) {
	        for(Iterator it = $typeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type");
	            	castExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	castExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($unaryExpressionNotPlusMinusGen != null) {
	        for(Iterator it = $unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
	            	castExpressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$castExpression.returnNode = castExpressionReturnNode;
	}
    ;

primary returns [Node returnNode] 
:	parExpressionGen+=parExpression 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a CST Node
		if($parExpressionGen != null) {
	        for(Iterator it = $parExpressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parExpression");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   nonWildcardTypeArgumentsGen+=nonWildcardTypeArguments
        (explicitGenericInvocationSuffixGen+=explicitGenericInvocationSuffix | TK_0='this' argumentsGen+=arguments) 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a CST Node
		if($nonWildcardTypeArgumentsGen != null) {
	        for(Iterator it = $nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nonWildcardTypeArguments");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($explicitGenericInvocationSuffixGen != null) {
	        for(Iterator it = $explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   TK_0='this' (TK_1='.' IdentifierGen_List+=Identifier)* (identifierSuffixGen+=identifierSuffix)? 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	
		// Create a special CST Node for terminal IdentifierGen_List aggregation
		if($IdentifierGen_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		primaryReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_List != null) {
		    Token t = (Token) $IdentifierGen_List.get(pos); 
		    Leaf IdentifierGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_ListLeaf.setKind("Identifier");
			IdentifierGen_ListLeaf.setValue(t.getText());
			IdentifierGen_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_ListLeaf.setLine(t.getLine());
			primaryReturnNode.getChildren().add(IdentifierGen_ListLeaf);
		}
		}
		}
	
	    // Create a CST Node
		if($identifierSuffixGen != null) {
	        for(Iterator it = $identifierSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifierSuffix");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   TK_0='super' superSuffixGen+=superSuffix 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($superSuffixGen != null) {
	        for(Iterator it = $superSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("superSuffix");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   literalGen+=literal 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a CST Node
		if($literalGen != null) {
	        for(Iterator it = $literalGen.iterator(); it.hasNext(); )  { 
	            JavaParser.literal_return r = (JavaParser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   TK_0='new' creatorGen+=creator 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($creatorGen != null) {
	        for(Iterator it = $creatorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.creator_return r = (JavaParser.creator_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("creator");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   IdentifierGen=Identifier (TK_0='.' IdentifierGen_1_List+=Identifier)* (identifierSuffixGen+=identifierSuffix)? 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			primaryReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			primaryReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		}
		}
	
	    // Create a CST Node
		if($identifierSuffixGen != null) {
	        for(Iterator it = $identifierSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifierSuffix");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   primitiveTypeGen+=primitiveType (TK_0='[' TK_1=']')* TK_2='.' TK_3='class' 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a CST Node
		if($primitiveTypeGen != null) {
	        for(Iterator it = $primitiveTypeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primitiveType");
	            	primaryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		primaryReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		primaryReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
    |   TK_0='void' TK_1='.' TK_2='class' 
	{
		// Create return CST Node
		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primaryReturnNode.setKind("primary");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primaryReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		primaryReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		primaryReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primary.returnNode = primaryReturnNode;
	}
	;

identifierSuffix returns [Node returnNode] 
:	(TK_0='[' TK_1=']')+ TK_2='.' TK_3='class' 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
	|	(TK_0='[' expressionGen+=expression TK_1=']')+ 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	
		// Create a special CST Node for terminal expressionGen aggregation
		if($expressionGen != null) {
	    for(int pos = 0; pos < $expressionGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($expressionGen != null) {		
	    	JavaParser.expression_return r = (JavaParser.expression_return) $expressionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expression");
	    		identifierSuffixReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
	 	}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	} // can also be matched by selector, but do here
    |   argumentsGen+=arguments 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
    |   TK_0='.' TK_1='class' 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
    |   TK_0='.' explicitGenericInvocationGen+=explicitGenericInvocation 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($explicitGenericInvocationGen != null) {
	        for(Iterator it = $explicitGenericInvocationGen.iterator(); it.hasNext(); )  { 
	            JavaParser.explicitGenericInvocation_return r = (JavaParser.explicitGenericInvocation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("explicitGenericInvocation");
	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
    |   TK_0='.' TK_1='this' 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
    |   TK_0='.' TK_1='super' argumentsGen+=arguments 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
    |   TK_0='.' TK_1='new' (nonWildcardTypeArgumentsGen+=nonWildcardTypeArguments)? innerCreatorGen+=innerCreator 
	{
		// Create return CST Node
		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierSuffixReturnNode.setKind("identifierSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($nonWildcardTypeArgumentsGen != null) {
	        for(Iterator it = $nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nonWildcardTypeArguments");
	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($innerCreatorGen != null) {
	        for(Iterator it = $innerCreatorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("innerCreator");
	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$identifierSuffix.returnNode = identifierSuffixReturnNode;
	}
	;
	
creator returns [Node returnNode] 
:	nonWildcardTypeArgumentsGen+=nonWildcardTypeArguments? createdNameGen+=createdName
        (arrayCreatorRestGen+=arrayCreatorRest | classCreatorRestGen+=classCreatorRest) 
	{
		// Create return CST Node
		Node creatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		creatorReturnNode.setKind("creator");
	    // Create a CST Node
		if($nonWildcardTypeArgumentsGen != null) {
	        for(Iterator it = $nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nonWildcardTypeArguments");
	            	creatorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($createdNameGen != null) {
	        for(Iterator it = $createdNameGen.iterator(); it.hasNext(); )  { 
	            JavaParser.createdName_return r = (JavaParser.createdName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("createdName");
	            	creatorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($arrayCreatorRestGen != null) {
	        for(Iterator it = $arrayCreatorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arrayCreatorRest_return r = (JavaParser.arrayCreatorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arrayCreatorRest");
	            	creatorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($classCreatorRestGen != null) {
	        for(Iterator it = $classCreatorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classCreatorRest");
	            	creatorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$creator.returnNode = creatorReturnNode;
	}
	;

createdName returns [Node returnNode] 
:	IdentifierGen=Identifier typeArgumentsGen+=typeArguments?
        (TK_0='.' IdentifierGen_1_List+=Identifier typeArgumentsGen_1+=typeArguments?)* 
	{
		// Create return CST Node
		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		createdNameReturnNode.setKind("createdName");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			createdNameReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($typeArgumentsGen != null) {
	        for(Iterator it = $typeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeArguments");
	            	createdNameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
		if($IdentifierGen_1_List != null) {
	    for(int pos = 0; pos < $IdentifierGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		createdNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($IdentifierGen_1_List != null) {
		    Token t = (Token) $IdentifierGen_1_List.get(pos); 
		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGen_1_ListLeaf.setKind("Identifier");
			IdentifierGen_1_ListLeaf.setValue(t.getText());
			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			IdentifierGen_1_ListLeaf.setLine(t.getLine());
			createdNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
		}
		// No Terminal extractor
	    if($typeArgumentsGen_1 != null) {		
	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) $typeArgumentsGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("typeArguments");
	    		createdNameReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$createdName.returnNode = createdNameReturnNode;
	}
    |	primitiveTypeGen+=primitiveType 
	{
		// Create return CST Node
		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		createdNameReturnNode.setKind("createdName");
	    // Create a CST Node
		if($primitiveTypeGen != null) {
	        for(Iterator it = $primitiveTypeGen.iterator(); it.hasNext(); )  { 
	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primitiveType");
	            	createdNameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$createdName.returnNode = createdNameReturnNode;
	}
	;
	
innerCreator returns [Node returnNode] 
:	IdentifierGen=Identifier classCreatorRestGen+=classCreatorRest 
	{
		// Create return CST Node
		Node innerCreatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		innerCreatorReturnNode.setKind("innerCreator");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			innerCreatorReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($classCreatorRestGen != null) {
	        for(Iterator it = $classCreatorRestGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classCreatorRest");
	            	innerCreatorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$innerCreator.returnNode = innerCreatorReturnNode;
	}
	;

arrayCreatorRest returns [Node returnNode] 
:	TK_0='['
        (   TK_1=']' (TK_2='[' TK_3=']')* arrayInitializerGen+=arrayInitializer
        |   expressionGen+=expression TK_4=']' (TK_5='[' expressionGen_1+=expression TK_6=']')* (TK_7='[' TK_8=']')*
        ) 
	{
		// Create return CST Node
		Node arrayCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayCreatorRestReturnNode.setKind("arrayCreatorRest");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayCreatorRestReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		arrayCreatorRestReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($arrayInitializerGen != null) {
	        for(Iterator it = $arrayInitializerGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arrayInitializer");
	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		arrayCreatorRestReturnNode.getChildren().add(TK_4Leaf);
	 	}
	
		// Create a special CST Node for terminal expressionGen_1 aggregation
		if($expressionGen_1 != null) {
	    for(int pos = 0; pos < $expressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		arrayCreatorRestReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// No Terminal extractor
	    if($expressionGen_1 != null) {		
	    	JavaParser.expression_return r = (JavaParser.expression_return) $expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expression");
	    		arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		arrayCreatorRestReturnNode.getChildren().add(TK_6Leaf);
	 	}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$arrayCreatorRest.returnNode = arrayCreatorRestReturnNode;
	}
	;

classCreatorRest returns [Node returnNode] 
:	argumentsGen+=arguments classBodyGen+=classBody? 
	{
		// Create return CST Node
		Node classCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classCreatorRestReturnNode.setKind("classCreatorRest");
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($classBodyGen != null) {
	        for(Iterator it = $classBodyGen.iterator(); it.hasNext(); )  { 
	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classBody");
	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$classCreatorRest.returnNode = classCreatorRestReturnNode;
	}
	;
	
explicitGenericInvocation returns [Node returnNode] 
:	nonWildcardTypeArgumentsGen+=nonWildcardTypeArguments explicitGenericInvocationSuffixGen+=explicitGenericInvocationSuffix 
	{
		// Create return CST Node
		Node explicitGenericInvocationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		explicitGenericInvocationReturnNode.setKind("explicitGenericInvocation");
	    // Create a CST Node
		if($nonWildcardTypeArgumentsGen != null) {
	        for(Iterator it = $nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nonWildcardTypeArguments");
	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($explicitGenericInvocationSuffixGen != null) {
	        for(Iterator it = $explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$explicitGenericInvocation.returnNode = explicitGenericInvocationReturnNode;
	}
	;
	
nonWildcardTypeArguments returns [Node returnNode] 
:	TK_0='<' typeListGen+=typeList TK_1='>' 
	{
		// Create return CST Node
		Node nonWildcardTypeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nonWildcardTypeArgumentsReturnNode.setKind("nonWildcardTypeArguments");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($typeListGen != null) {
	        for(Iterator it = $typeListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeList");
	            	nonWildcardTypeArgumentsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$nonWildcardTypeArguments.returnNode = nonWildcardTypeArgumentsReturnNode;
	}
	;
	
explicitGenericInvocationSuffix returns [Node returnNode] 
:	TK_0='super' superSuffixGen+=superSuffix 
	{
		// Create return CST Node
		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		explicitGenericInvocationSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($superSuffixGen != null) {
	        for(Iterator it = $superSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("superSuffix");
	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$explicitGenericInvocationSuffix.returnNode = explicitGenericInvocationSuffixReturnNode;
	}
	|   IdentifierGen=Identifier argumentsGen+=arguments 
	{
		// Create return CST Node
		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			explicitGenericInvocationSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$explicitGenericInvocationSuffix.returnNode = explicitGenericInvocationSuffixReturnNode;
	}
	;
	
selector returns [Node returnNode] 
:	TK_0='.' IdentifierGen=Identifier (argumentsGen+=arguments)? 
	{
		// Create return CST Node
		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selectorReturnNode.setKind("selector");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selectorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			selectorReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	selectorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$selector.returnNode = selectorReturnNode;
	}
	|   TK_0='.' TK_1='this' 
	{
		// Create return CST Node
		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selectorReturnNode.setKind("selector");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selectorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		selectorReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$selector.returnNode = selectorReturnNode;
	}
	|   TK_0='.' TK_1='super' superSuffixGen+=superSuffix 
	{
		// Create return CST Node
		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selectorReturnNode.setKind("selector");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selectorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		selectorReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($superSuffixGen != null) {
	        for(Iterator it = $superSuffixGen.iterator(); it.hasNext(); )  { 
	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("superSuffix");
	            	selectorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$selector.returnNode = selectorReturnNode;
	}
	|   TK_0='.' TK_1='new' (nonWildcardTypeArgumentsGen+=nonWildcardTypeArguments)? innerCreatorGen+=innerCreator 
	{
		// Create return CST Node
		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selectorReturnNode.setKind("selector");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selectorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		selectorReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($nonWildcardTypeArgumentsGen != null) {
	        for(Iterator it = $nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nonWildcardTypeArguments");
	            	selectorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($innerCreatorGen != null) {
	        for(Iterator it = $innerCreatorGen.iterator(); it.hasNext(); )  { 
	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("innerCreator");
	            	selectorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$selector.returnNode = selectorReturnNode;
	}
	|   TK_0='[' expressionGen+=expression TK_1=']' 
	{
		// Create return CST Node
		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selectorReturnNode.setKind("selector");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selectorReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionGen != null) {
	        for(Iterator it = $expressionGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression");
	            	selectorReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		selectorReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$selector.returnNode = selectorReturnNode;
	}
	;
	
superSuffix returns [Node returnNode] 
:	argumentsGen+=arguments 
	{
		// Create return CST Node
		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		superSuffixReturnNode.setKind("superSuffix");
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	superSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$superSuffix.returnNode = superSuffixReturnNode;
	}
	|   TK_0='.' IdentifierGen=Identifier (argumentsGen+=arguments)? 
	{
		// Create return CST Node
		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		superSuffixReturnNode.setKind("superSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		superSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IdentifierGen != null) {
			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IdentifierGenLeaf.setKind("Identifier");
			IdentifierGenLeaf.setValue($IdentifierGen.text);
			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
			superSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	superSuffixReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$superSuffix.returnNode = superSuffixReturnNode;
	}
    ;

arguments returns [Node returnNode] 
:	TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node argumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		argumentsReturnNode.setKind("arguments");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		argumentsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	argumentsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		argumentsReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arguments.returnNode = argumentsReturnNode;
	}
	;

// LEXER

HexLiteral : '0' ('x'|'X') HexDigit+ IntegerTypeSuffix? ;

DecimalLiteral : ('0' | '1'..'9' '0'..'9'*) IntegerTypeSuffix? ;

OctalLiteral : '0' ('0'..'7')+ IntegerTypeSuffix? ;

fragment
HexDigit : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
IntegerTypeSuffix : ('l'|'L') ;

FloatingPointLiteral
    :   ('0'..'9')+ '.' ('0'..'9')* Exponent? FloatTypeSuffix?
    |   '.' ('0'..'9')+ Exponent? FloatTypeSuffix?
    |   ('0'..'9')+ Exponent FloatTypeSuffix?
    |   ('0'..'9')+ Exponent? FloatTypeSuffix
	;

fragment
Exponent : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
FloatTypeSuffix : ('f'|'F'|'d'|'D') ;

CharacterLiteral
    :   '\'' ( EscapeSequence | ~('\''|'\\') ) '\''
    ;

StringLiteral
    :  '"' ( EscapeSequence | ~('\\'|'"') )* '"'
    ;

fragment
EscapeSequence
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UnicodeEscape
    |   OctalEscape
    ;

fragment
OctalEscape
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UnicodeEscape
    :   '\\' 'u' HexDigit HexDigit HexDigit HexDigit
    ;

ENUM:	'enum' {if ( !enumIsKeyword ) $type=Identifier;}
	;
	
Identifier 
    :   Letter (Letter|JavaIDDigit)*
    ;

/**I found this char range in JavaCC's grammar, but Letter and Digit overlap.
   Still works, but...
 */
fragment
Letter
    :  '\u0024' |
       '\u0041'..'\u005a' |
       '\u005f' |
       '\u0061'..'\u007a' |
       '\u00c0'..'\u00d6' |
       '\u00d8'..'\u00f6' |
       '\u00f8'..'\u00ff' |
       '\u0100'..'\u1fff' |
       '\u3040'..'\u318f' |
       '\u3300'..'\u337f' |
       '\u3400'..'\u3d2d' |
       '\u4e00'..'\u9fff' |
       '\uf900'..'\ufaff'
    ;

fragment
JavaIDDigit
    :  '\u0030'..'\u0039' |
       '\u0660'..'\u0669' |
       '\u06f0'..'\u06f9' |
       '\u0966'..'\u096f' |
       '\u09e6'..'\u09ef' |
       '\u0a66'..'\u0a6f' |
       '\u0ae6'..'\u0aef' |
       '\u0b66'..'\u0b6f' |
       '\u0be7'..'\u0bef' |
       '\u0c66'..'\u0c6f' |
       '\u0ce6'..'\u0cef' |
       '\u0d66'..'\u0d6f' |
       '\u0e50'..'\u0e59' |
       '\u0ed0'..'\u0ed9' |
       '\u1040'..'\u1049'
   ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;

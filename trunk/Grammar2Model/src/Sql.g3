grammar Sql;

options { 
	k = 4;
	output=AST;
}  

tokens {
	MIO;
}  
    
/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/
 
start_rule  
	: 
	packages+=create_package* (EOF | DIVIDE) ('SHOW' 'ERRORS')? 
	;

create_package
	: (COMMENT)? 'CREATE' ( 'OR' 'REPLACE' )? 'PACKAGE' name=normal_name ('IS' | 'AS') (pragma+=pragmaDeclaration)* (pos+=package_obj_spec)* 'END' (normal_name)? SEMI
	; 
	
package_obj_spec
	: variable=variable_declaration
	| procedure=procedure_spec
	| function=function_spec   
	;	

   
variable_declaration
	: (COMMENT)? id=identifier ('CONSTANT')? type=datatype ('NOT NULL')? ((ASSIGNMENT_EQ|'DEFAULT') val=value)? SEMI
	;	 
    
procedure_spec
	: (COMMENT)? 'PROCEDURE' name=normal_name ( OPEN_PAREN arg+=argument ( COMMA arg+=argument )* CLOSE_PAREN )? SEMI (pragmaDeclaration)?
	;  
	
function_spec
	: (COMMENT)? 'FUNCTION' name=normal_name ( OPEN_PAREN argument ( COMMA argument)* CLOSE_PAREN )? 'RETURN' datatype ('DETERMINISTIC')? SEMI (pragmaDeclaration)?
	;    

normal_name
	: (identifier DOT)* identifier 
	;	
 
identifier 
	: ( IDENTIFIER | QUOTED_STRING )
   	;  

argument 
	: identifier ( 'IN' | 'OUT' | ( 'INOUT' ) )? datatype ( ASSIGNMENT_EQ 'DEFAULT' value )?	
	;
 
datatype
	: ('NUMBER'(OPEN_PAREN NUMBER (COMMA NUMBER)? CLOSE_PAREN )? ) 
	| ( 'CHAR' (OPEN_PAREN NUMBER CLOSE_PAREN )? ) 
	| 'BOOLEAN'  
	| 'DATE'
	| ( 'VARCHAR2' ( OPEN_PAREN NUMBER CLOSE_PAREN )? )
	| ( 'VARCHAR' ( OPEN_PAREN NUMBER CLOSE_PAREN )? )
	| normal_name PERCENTAGE ('ROWTYPE' | 'TYPE')		
	;    

value 
	: (( PLUS | MINUS )? NUMBER ) 
	| QUOTED_STRING
    ;
    
pragmaDeclaration:
	'PRAGMA' 'RESTRICT_REFERENCES' OPEN_PAREN IDENTIFIER COMMA IDENTIFIER (COMMA IDENTIFIER)* CLOSE_PAREN SEMI
	;    


/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/

WHITESPACE : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ { $channel = HIDDEN; } ;
ANY_CHARACTER: 'a' .. 'z' ;    
QUOTED_STRING: '\'' ( ~'\'' )* '\'';
SEMI: ';'; 
COLON: ':';
DOT: '.' ; 
COMMA: ',' ;
ASTERISK: '*' ;
AT_SIGN: '@' ;
OPEN_PAREN: '(' ;
CLOSE_PAREN: ')' ;    
PLUS: '+' ;
MINUS: '-' ;
DIVIDE: '/' ;
EQ: '=' ; 
PERCENTAGE : '%' ;
DOUBLEDOT: '..';
START_LABEL: '<<' ;	
END_LABEL: '>>'	;
ASSIGNMENT_EQ: ':='	;
NUMBER 
    :
        ( PLUS | MINUS )?
        ( ( N DOT N ) => N DOT N | DOT N | N )
        ( 'e' ( PLUS | MINUS )? N )?
    ;
protected N : '0' .. '9' ( '0' .. '9' )* ; 
IDENTIFIER 
    : 
        ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' )*
    ;  
COMMENT: '/*' ( options {greedy=false;} : . )* '*/';
LINECOMMENT: '--' ( options {greedy=false;} : . )* '\n' { $channel = HIDDEN; } ; 
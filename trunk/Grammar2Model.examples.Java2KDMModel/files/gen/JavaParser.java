// $ANTLR 3.0.1 /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3 2009-05-11 17:51:23

	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility. 
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now): 
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "ENUM", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'['", "']'", "'throws'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'this'", "'new'"
    };
    public static final int HexLiteral=9;
    public static final int LINE_COMMENT=23;
    public static final int FloatTypeSuffix=15;
    public static final int OctalLiteral=10;
    public static final int IntegerTypeSuffix=13;
    public static final int CharacterLiteral=7;
    public static final int Exponent=14;
    public static final int EOF=-1;
    public static final int DecimalLiteral=11;
    public static final int HexDigit=12;
    public static final int Identifier=4;
    public static final int StringLiteral=8;
    public static final int WS=21;
    public static final int ENUM=5;
    public static final int UnicodeEscape=17;
    public static final int FloatingPointLiteral=6;
    public static final int JavaIDDigit=20;
    public static final int COMMENT=22;
    public static final int EscapeSequence=16;
    public static final int OctalEscape=18;
    public static final int Letter=19;

        public JavaParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[403+1];
         }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("JavaParserTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start compilationUnit
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:99:1: compilationUnit returns [Node returnNode] : (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )* ;
    public final compilationUnit_return compilationUnit() throws RecognitionException {
        compilationUnit_return retval = new compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        List list_annotationsGen=null;
        List list_packageDeclarationGen=null;
        List list_importDeclarationGen=null;
        List list_typeDeclarationGen=null;
        RuleReturnScope annotationsGen = null;
        RuleReturnScope packageDeclarationGen = null;
        RuleReturnScope importDeclarationGen = null;
        RuleReturnScope typeDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:100:1: ( (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:100:3: (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )*
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:100:17: (annotationsGen+= annotations )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==71) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==Identifier) ) {
                    int LA1_21 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt1=1;
                    }
                }
            }
            switch (alt1) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: annotationsGen+= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit62);
                    annotationsGen=annotations();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationsGen==null) list_annotationsGen=new ArrayList();
                    list_annotationsGen.add(annotationsGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:101:24: (packageDeclarationGen+= packageDeclaration )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==24) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: packageDeclarationGen+= packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit69);
                    packageDeclarationGen=packageDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_packageDeclarationGen==null) list_packageDeclarationGen=new ArrayList();
                    list_packageDeclarationGen.add(packageDeclarationGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:102:29: (importDeclarationGen+= importDeclaration )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==26) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: importDeclarationGen+= importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit82);
            	    importDeclarationGen=importDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_importDeclarationGen==null) list_importDeclarationGen=new ArrayList();
            	    list_importDeclarationGen.add(importDeclarationGen);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:103:27: (typeDeclarationGen+= typeDeclaration )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==ENUM||LA4_0==25||LA4_0==27||LA4_0==30||LA4_0==39||(LA4_0>=45 && LA4_0<=54)||LA4_0==71) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: typeDeclarationGen+= typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit95);
            	    typeDeclarationGen=typeDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_typeDeclarationGen==null) list_typeDeclarationGen=new ArrayList();
            	    list_typeDeclarationGen.add(typeDeclarationGen);


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node compilationUnitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		compilationUnitReturnNode.setKind("compilationUnit");
              	    // Create a CST Node
              		if(list_annotationsGen != null) {
              	        for(Iterator it = list_annotationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotations");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_packageDeclarationGen != null) {
              	        for(Iterator it = list_packageDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.packageDeclaration_return r = (JavaParser.packageDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("packageDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_importDeclarationGen != null) {
              	        for(Iterator it = list_importDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.importDeclaration_return r = (JavaParser.importDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("importDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeDeclarationGen != null) {
              	        for(Iterator it = list_typeDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeDeclaration_return r = (JavaParser.typeDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = compilationUnitReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end compilationUnit

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start packageDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:153:1: packageDeclaration returns [Node returnNode] : TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';' ;
    public final packageDeclaration_return packageDeclaration() throws RecognitionException {
        packageDeclaration_return retval = new packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_qualifiedNameGen=null;
        RuleReturnScope qualifiedNameGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:154:1: (TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:154:3: TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';'
            {
            TK_0=(Token)input.LT(1);
            match(input,24,FOLLOW_24_in_packageDeclaration117); if (failed) return retval;
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration121);
            qualifiedNameGen=qualifiedName();
            _fsp--;
            if (failed) return retval;
            if (list_qualifiedNameGen==null) list_qualifiedNameGen=new ArrayList();
            list_qualifiedNameGen.add(qualifiedNameGen);

            TK_1=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_packageDeclaration125); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node packageDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packageDeclarationReturnNode.setKind("packageDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		packageDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameGen != null) {
              	        for(Iterator it = list_qualifiedNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedName");
              	            	packageDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		packageDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packageDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end packageDeclaration

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start importDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:192:1: importDeclaration returns [Node returnNode] : TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';' ;
    public final importDeclaration_return importDeclaration() throws RecognitionException {
        importDeclaration_return retval = new importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:1: (TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:3: TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';'
            {
            TK_0=(Token)input.LT(1);
            match(input,26,FOLLOW_26_in_importDeclaration147); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:21: (TK_1= 'static' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==27) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_1= 'static'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,27,FOLLOW_27_in_importDeclaration151); if (failed) return retval;

                    }
                    break;

            }

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_importDeclaration156); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:57: (TK_2= '.' IdentifierGen_1_List+= Identifier )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==28) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==Identifier) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:58: TK_2= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_2=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_importDeclaration161); if (failed) return retval;
            	    IdentifierGen_1_List=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_importDeclaration165); if (failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:102: (TK_3= '.' TK_4= '*' )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==28) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:193:103: TK_3= '.' TK_4= '*'
                    {
                    TK_3=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_importDeclaration172); if (failed) return retval;
                    TK_4=(Token)input.LT(1);
                    match(input,29,FOLLOW_29_in_importDeclaration176); if (failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_importDeclaration182); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node importDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		importDeclarationReturnNode.setKind("importDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			importDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	
              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			importDeclarationReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = importDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end importDeclaration

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:283:1: typeDeclaration returns [Node returnNode] : (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' );
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_classOrInterfaceDeclarationGen=null;
        RuleReturnScope classOrInterfaceDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:284:1: (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==ENUM||LA8_0==27||LA8_0==30||LA8_0==39||(LA8_0>=45 && LA8_0<=54)||LA8_0==71) ) {
                alt8=1;
            }
            else if ( (LA8_0==25) ) {
                alt8=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("283:1: typeDeclaration returns [Node returnNode] : (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' );", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:284:3: classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration204);
                    classOrInterfaceDeclarationGen=classOrInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classOrInterfaceDeclarationGen==null) list_classOrInterfaceDeclarationGen=new ArrayList();
                    list_classOrInterfaceDeclarationGen.add(classOrInterfaceDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclarationReturnNode.setKind("typeDeclaration");
                      	    // Create a CST Node
                      		if(list_classOrInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classOrInterfaceDeclaration");
                      	            	typeDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:302:9: TK_0= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_typeDeclaration220); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclarationReturnNode.setKind("typeDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start classOrInterfaceDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:321:1: classOrInterfaceDeclaration returns [Node returnNode] : (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration ) ;
    public final classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        classOrInterfaceDeclaration_return retval = new classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        List list_modifierGen=null;
        List list_classDeclarationGen=null;
        List list_interfaceDeclarationGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope classDeclarationGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:1: ( (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:3: (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration )
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:14: (modifierGen+= modifier )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==71) ) {
                    int LA9_4 = input.LA(2);

                    if ( (LA9_4==Identifier) ) {
                        alt9=1;
                    }


                }
                else if ( (LA9_0==27||(LA9_0>=45 && LA9_0<=54)) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: modifierGen+= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration242);
            	    modifierGen=modifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
            	    list_modifierGen.add(modifierGen);


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:26: (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ENUM||LA10_0==30) ) {
                alt10=1;
            }
            else if ( (LA10_0==39||LA10_0==71) ) {
                alt10=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("322:26: (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration )", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:27: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration248);
                    classDeclarationGen=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:322:67: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration254);
                    interfaceDeclarationGen=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node classOrInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classOrInterfaceDeclarationReturnNode.setKind("classOrInterfaceDeclaration");
              	    // Create a CST Node
              		if(list_modifierGen != null) {
              	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("modifier");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classDeclarationGen != null) {
              	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classDeclaration");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_interfaceDeclarationGen != null) {
              	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceDeclaration");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classOrInterfaceDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classOrInterfaceDeclaration

    public static class classDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start classDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:362:1: classDeclaration returns [Node returnNode] : (normalClassDeclarationGen+= normalClassDeclaration | enumDeclarationGen+= enumDeclaration );
    public final classDeclaration_return classDeclaration() throws RecognitionException {
        classDeclaration_return retval = new classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        List list_normalClassDeclarationGen=null;
        List list_enumDeclarationGen=null;
        RuleReturnScope normalClassDeclarationGen = null;
        RuleReturnScope enumDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:363:1: (normalClassDeclarationGen+= normalClassDeclaration | enumDeclarationGen+= enumDeclaration )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==30) ) {
                alt11=1;
            }
            else if ( (LA11_0==ENUM) ) {
                alt11=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("362:1: classDeclaration returns [Node returnNode] : (normalClassDeclarationGen+= normalClassDeclaration | enumDeclarationGen+= enumDeclaration );", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:363:3: normalClassDeclarationGen+= normalClassDeclaration
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration277);
                    normalClassDeclarationGen=normalClassDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_normalClassDeclarationGen==null) list_normalClassDeclarationGen=new ArrayList();
                    list_normalClassDeclarationGen.add(normalClassDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classDeclarationReturnNode.setKind("classDeclaration");
                      	    // Create a CST Node
                      		if(list_normalClassDeclarationGen != null) {
                      	        for(Iterator it = list_normalClassDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.normalClassDeclaration_return r = (JavaParser.normalClassDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("normalClassDeclaration");
                      	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:381:9: enumDeclarationGen+= enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration293);
                    enumDeclarationGen=enumDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_enumDeclarationGen==null) list_enumDeclarationGen=new ArrayList();
                    list_enumDeclarationGen.add(enumDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classDeclarationReturnNode.setKind("classDeclaration");
                      	    // Create a CST Node
                      		if(list_enumDeclarationGen != null) {
                      	        for(Iterator it = list_enumDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumDeclaration");
                      	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classDeclaration

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start normalClassDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:401:1: normalClassDeclaration returns [Node returnNode] : TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeGen+= type )? (TK_2= 'implements' typeListGen+= typeList )? classBodyGen+= classBody ;
    public final normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        normalClassDeclaration_return retval = new normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeParametersGen=null;
        List list_typeGen=null;
        List list_typeListGen=null;
        List list_classBodyGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope typeListGen = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:402:1: (TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeGen+= type )? (TK_2= 'implements' typeListGen+= typeList )? classBodyGen+= classBody )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:402:3: TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeGen+= type )? (TK_2= 'implements' typeListGen+= typeList )? classBodyGen+= classBody
            {
            TK_0=(Token)input.LT(1);
            match(input,30,FOLLOW_30_in_normalClassDeclaration315); if (failed) return retval;
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_normalClassDeclaration319); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:402:41: (typeParametersGen+= typeParameters )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==33) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:402:42: typeParametersGen+= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration324);
                    typeParametersGen=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
                    list_typeParametersGen.add(typeParametersGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:403:9: (TK_1= 'extends' typeGen+= type )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==31) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:403:10: TK_1= 'extends' typeGen+= type
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_normalClassDeclaration339); if (failed) return retval;
                    pushFollow(FOLLOW_type_in_normalClassDeclaration343);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:404:9: (TK_2= 'implements' typeListGen+= typeList )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==32) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:404:10: TK_2= 'implements' typeListGen+= typeList
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,32,FOLLOW_32_in_normalClassDeclaration358); if (failed) return retval;
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration362);
                    typeListGen=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeListGen==null) list_typeListGen=new ArrayList();
                    list_typeListGen.add(typeListGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration376);
            classBodyGen=classBody();
            _fsp--;
            if (failed) return retval;
            if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
            list_classBodyGen.add(classBodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node normalClassDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		normalClassDeclarationReturnNode.setKind("normalClassDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			normalClassDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = normalClassDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 7, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end normalClassDeclaration

    public static class typeParameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeParameters
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:491:1: typeParameters returns [Node returnNode] : TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>' ;
    public final typeParameters_return typeParameters() throws RecognitionException {
        typeParameters_return retval = new typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeParameterGen=null;
        List list_typeParameterGen_1=null;
        RuleReturnScope typeParameterGen = null;
        RuleReturnScope typeParameterGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:492:1: (TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:492:3: TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>'
            {
            TK_0=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_typeParameters398); if (failed) return retval;
            pushFollow(FOLLOW_typeParameter_in_typeParameters402);
            typeParameterGen=typeParameter();
            _fsp--;
            if (failed) return retval;
            if (list_typeParameterGen==null) list_typeParameterGen=new ArrayList();
            list_typeParameterGen.add(typeParameterGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:492:44: (TK_1= ',' typeParameterGen_1+= typeParameter )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==34) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:492:45: TK_1= ',' typeParameterGen_1+= typeParameter
            	    {
            	    TK_1=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeParameters407); if (failed) return retval;
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters411);
            	    typeParameterGen_1=typeParameter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_typeParameterGen_1==null) list_typeParameterGen_1=new ArrayList();
            	    list_typeParameterGen_1.add(typeParameterGen_1);


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            TK_2=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_typeParameters417); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node typeParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeParametersReturnNode.setKind("typeParameters");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeParameterGen != null) {
              	        for(Iterator it = list_typeParameterGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameter");
              	            	typeParametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal typeParameterGen_1 aggregation
              		if(list_typeParameterGen_1 != null) {
              	    for(int pos = 0; pos < list_typeParameterGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeParameterGen_1 != null) {		
              	    	JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) list_typeParameterGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeParameter");
              	    		typeParametersReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeParametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 8, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeParameters

    public static class typeParameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeParameter
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:554:1: typeParameter returns [Node returnNode] : IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )? ;
    public final typeParameter_return typeParameter() throws RecognitionException {
        typeParameter_return retval = new typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_boundGen=null;
        RuleReturnScope boundGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:555:1: (IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:555:3: IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )?
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_typeParameter438); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:555:28: (TK_0= 'extends' boundGen+= bound )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==31) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:555:29: TK_0= 'extends' boundGen+= bound
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_typeParameter443); if (failed) return retval;
                    pushFollow(FOLLOW_bound_in_typeParameter447);
                    boundGen=bound();
                    _fsp--;
                    if (failed) return retval;
                    if (list_boundGen==null) list_boundGen=new ArrayList();
                    list_boundGen.add(boundGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node typeParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeParameterReturnNode.setKind("typeParameter");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			typeParameterReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeParameterReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_boundGen != null) {
              	        for(Iterator it = list_boundGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.bound_return r = (JavaParser.bound_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("bound");
              	            	typeParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeParameterReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 9, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeParameter

    public static class bound_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start bound
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:593:1: bound returns [Node returnNode] : typeGen+= type (TK_0= '&' typeGen_1+= type )* ;
    public final bound_return bound() throws RecognitionException {
        bound_return retval = new bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_typeGen_1=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope typeGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:594:1: (typeGen+= type (TK_0= '&' typeGen_1+= type )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:594:3: typeGen+= type (TK_0= '&' typeGen_1+= type )*
            {
            pushFollow(FOLLOW_type_in_bound472);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:594:17: (TK_0= '&' typeGen_1+= type )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==36) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:594:18: TK_0= '&' typeGen_1+= type
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_bound477); if (failed) return retval;
            	    pushFollow(FOLLOW_type_in_bound481);
            	    typeGen_1=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_typeGen_1==null) list_typeGen_1=new ArrayList();
            	    list_typeGen_1.add(typeGen_1);


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node boundReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		boundReturnNode.setKind("bound");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	boundReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal typeGen_1 aggregation
              		if(list_typeGen_1 != null) {
              	    for(int pos = 0; pos < list_typeGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		boundReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeGen_1 != null) {		
              	    	JavaParser.type_return r = (JavaParser.type_return) list_typeGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("type");
              	    		boundReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = boundReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 10, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end bound

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:638:1: enumDeclaration returns [Node returnNode] : ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody ;
    public final enumDeclaration_return enumDeclaration() throws RecognitionException {
        enumDeclaration_return retval = new enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Token ENUMGen=null;
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_typeListGen=null;
        List list_enumBodyGen=null;
        RuleReturnScope typeListGen = null;
        RuleReturnScope enumBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:639:1: (ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:639:3: ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody
            {
            ENUMGen=(Token)input.LT(1);
            match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration504); if (failed) return retval;
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration508); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:639:41: (TK_0= 'implements' typeListGen+= typeList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==32) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:639:42: TK_0= 'implements' typeListGen+= typeList
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,32,FOLLOW_32_in_enumDeclaration513); if (failed) return retval;
                    pushFollow(FOLLOW_typeList_in_enumDeclaration517);
                    typeListGen=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeListGen==null) list_typeListGen=new ArrayList();
                    list_typeListGen.add(typeListGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration523);
            enumBodyGen=enumBody();
            _fsp--;
            if (failed) return retval;
            if (list_enumBodyGen==null) list_enumBodyGen=new ArrayList();
            list_enumBodyGen.add(enumBodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumDeclarationReturnNode.setKind("enumDeclaration");
              	    // Create a CST Leaf
              		if(ENUMGen != null) {
              			Leaf ENUMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ENUMGenLeaf.setKind("ENUM");
              			ENUMGenLeaf.setValue(ENUMGen.getText());
              			ENUMGenLeaf.setPos(ENUMGen.getCharPositionInLine());
              			ENUMGenLeaf.setLine(ENUMGen.getLine());
              			enumDeclarationReturnNode.getChildren().add(ENUMGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_enumBodyGen != null) {
              	        for(Iterator it = list_enumBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumBody_return r = (JavaParser.enumBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumBody");
              	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 11, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumDeclaration

    public static class enumBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumBody
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:696:1: enumBody returns [Node returnNode] : TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}' ;
    public final enumBody_return enumBody() throws RecognitionException {
        enumBody_return retval = new enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_enumConstantsGen=null;
        List list_enumBodyDeclarationsGen=null;
        RuleReturnScope enumConstantsGen = null;
        RuleReturnScope enumBodyDeclarationsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:697:1: (TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:697:3: TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_enumBody545); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:697:28: (enumConstantsGen+= enumConstants )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Identifier||LA19_0==71) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: enumConstantsGen+= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody549);
                    enumConstantsGen=enumConstants();
                    _fsp--;
                    if (failed) return retval;
                    if (list_enumConstantsGen==null) list_enumConstantsGen=new ArrayList();
                    list_enumConstantsGen.add(enumConstantsGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:697:49: (TK_1= ',' )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==34) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_1= ','
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,34,FOLLOW_34_in_enumBody554); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:697:78: (enumBodyDeclarationsGen+= enumBodyDeclarations )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==25) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: enumBodyDeclarationsGen+= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody559);
                    enumBodyDeclarationsGen=enumBodyDeclarations();
                    _fsp--;
                    if (failed) return retval;
                    if (list_enumBodyDeclarationsGen==null) list_enumBodyDeclarationsGen=new ArrayList();
                    list_enumBodyDeclarationsGen.add(enumBodyDeclarationsGen);


                    }
                    break;

            }

            TK_2=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_enumBody564); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumBodyReturnNode.setKind("enumBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_enumConstantsGen != null) {
              	        for(Iterator it = list_enumConstantsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumConstants_return r = (JavaParser.enumConstants_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumConstants");
              	            	enumBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_enumBodyDeclarationsGen != null) {
              	        for(Iterator it = list_enumBodyDeclarationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumBodyDeclarations_return r = (JavaParser.enumBodyDeclarations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumBodyDeclarations");
              	            	enumBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 12, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumBody

    public static class enumConstants_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumConstants
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:754:1: enumConstants returns [Node returnNode] : enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )* ;
    public final enumConstants_return enumConstants() throws RecognitionException {
        enumConstants_return retval = new enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Token TK_0=null;
        List list_enumConstantGen=null;
        List list_enumConstantGen_1=null;
        RuleReturnScope enumConstantGen = null;
        RuleReturnScope enumConstantGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:755:1: (enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:755:3: enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants585);
            enumConstantGen=enumConstant();
            _fsp--;
            if (failed) return retval;
            if (list_enumConstantGen==null) list_enumConstantGen=new ArrayList();
            list_enumConstantGen.add(enumConstantGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:755:33: (TK_0= ',' enumConstantGen_1+= enumConstant )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==34) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==Identifier||LA22_1==71) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:755:34: TK_0= ',' enumConstantGen_1+= enumConstant
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_enumConstants590); if (failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants594);
            	    enumConstantGen_1=enumConstant();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_enumConstantGen_1==null) list_enumConstantGen_1=new ArrayList();
            	    list_enumConstantGen_1.add(enumConstantGen_1);


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumConstantsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantsReturnNode.setKind("enumConstants");
              	    // Create a CST Node
              		if(list_enumConstantGen != null) {
              	        for(Iterator it = list_enumConstantGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumConstant");
              	            	enumConstantsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal enumConstantGen_1 aggregation
              		if(list_enumConstantGen_1 != null) {
              	    for(int pos = 0; pos < list_enumConstantGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumConstantsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_enumConstantGen_1 != null) {		
              	    	JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) list_enumConstantGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("enumConstant");
              	    		enumConstantsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 13, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumConstants

    public static class enumConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumConstant
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:799:1: enumConstant returns [Node returnNode] : (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )? ;
    public final enumConstant_return enumConstant() throws RecognitionException {
        enumConstant_return retval = new enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_annotationsGen=null;
        List list_argumentsGen=null;
        List list_classBodyGen=null;
        RuleReturnScope annotationsGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:1: ( (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:3: (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:17: (annotationsGen+= annotations )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==71) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: annotationsGen+= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant618);
                    annotationsGen=annotations();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationsGen==null) list_annotationsGen=new ArrayList();
                    list_annotationsGen.add(annotationsGen);


                    }
                    break;

            }

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumConstant623); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:57: (argumentsGen+= arguments )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==65) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:58: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant628);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:84: (classBodyGen+= classBody )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==37) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:800:85: classBodyGen+= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant635);
                    classBodyGen=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
                    list_classBodyGen.add(classBodyGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantReturnNode.setKind("enumConstant");
              	    // Create a CST Node
              		if(list_annotationsGen != null) {
              	        for(Iterator it = list_annotationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotations");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumConstantReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 14, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumConstant

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumBodyDeclarations
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:849:1: enumBodyDeclarations returns [Node returnNode] : TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )* ;
    public final enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        enumBodyDeclarations_return retval = new enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Token TK_0=null;
        List list_classBodyDeclarationGen=null;
        RuleReturnScope classBodyDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:850:1: (TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:850:3: TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )*
            {
            TK_0=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_enumBodyDeclarations659); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:850:12: (classBodyDeclarationGen+= classBodyDeclaration )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( ((LA26_0>=Identifier && LA26_0<=ENUM)||LA26_0==25||LA26_0==27||LA26_0==30||LA26_0==33||LA26_0==37||(LA26_0>=39 && LA26_0<=40)||(LA26_0>=45 && LA26_0<=62)||LA26_0==71) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:850:13: classBodyDeclarationGen+= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations664);
            	    classBodyDeclarationGen=classBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_classBodyDeclarationGen==null) list_classBodyDeclarationGen=new ArrayList();
            	    list_classBodyDeclarationGen.add(classBodyDeclarationGen);


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumBodyDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumBodyDeclarationsReturnNode.setKind("enumBodyDeclarations");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumBodyDeclarationsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_classBodyDeclarationGen != null) {
              	        for(Iterator it = list_classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBodyDeclaration");
              	            	enumBodyDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumBodyDeclarationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 15, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumBodyDeclarations

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:879:1: interfaceDeclaration returns [Node returnNode] : (normalInterfaceDeclarationGen+= normalInterfaceDeclaration | annotationTypeDeclarationGen+= annotationTypeDeclaration );
    public final interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        interfaceDeclaration_return retval = new interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        List list_normalInterfaceDeclarationGen=null;
        List list_annotationTypeDeclarationGen=null;
        RuleReturnScope normalInterfaceDeclarationGen = null;
        RuleReturnScope annotationTypeDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:880:1: (normalInterfaceDeclarationGen+= normalInterfaceDeclaration | annotationTypeDeclarationGen+= annotationTypeDeclaration )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==39) ) {
                alt27=1;
            }
            else if ( (LA27_0==71) ) {
                alt27=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("879:1: interfaceDeclaration returns [Node returnNode] : (normalInterfaceDeclarationGen+= normalInterfaceDeclaration | annotationTypeDeclarationGen+= annotationTypeDeclaration );", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:880:3: normalInterfaceDeclarationGen+= normalInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration688);
                    normalInterfaceDeclarationGen=normalInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_normalInterfaceDeclarationGen==null) list_normalInterfaceDeclarationGen=new ArrayList();
                    list_normalInterfaceDeclarationGen.add(normalInterfaceDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
                      	    // Create a CST Node
                      		if(list_normalInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_normalInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.normalInterfaceDeclaration_return r = (JavaParser.normalInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("normalInterfaceDeclaration");
                      	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:898:5: annotationTypeDeclarationGen+= annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration700);
                    annotationTypeDeclarationGen=annotationTypeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationTypeDeclarationGen==null) list_annotationTypeDeclarationGen=new ArrayList();
                    list_annotationTypeDeclarationGen.add(annotationTypeDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
                      	    // Create a CST Node
                      		if(list_annotationTypeDeclarationGen != null) {
                      	        for(Iterator it = list_annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationTypeDeclaration");
                      	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 16, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceDeclaration

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start normalInterfaceDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:918:1: normalInterfaceDeclaration returns [Node returnNode] : TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeListGen+= typeList )? interfaceBodyGen+= interfaceBody ;
    public final normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        normalInterfaceDeclaration_return retval = new normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        List list_typeParametersGen=null;
        List list_typeListGen=null;
        List list_interfaceBodyGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope typeListGen = null;
        RuleReturnScope interfaceBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:919:1: (TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeListGen+= typeList )? interfaceBodyGen+= interfaceBody )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:919:3: TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' typeListGen+= typeList )? interfaceBodyGen+= interfaceBody
            {
            TK_0=(Token)input.LT(1);
            match(input,39,FOLLOW_39_in_normalInterfaceDeclaration722); if (failed) return retval;
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration726); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:919:62: (typeParametersGen+= typeParameters )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==33) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: typeParametersGen+= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration730);
                    typeParametersGen=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
                    list_typeParametersGen.add(typeParametersGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:919:80: (TK_1= 'extends' typeListGen+= typeList )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==31) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:919:81: TK_1= 'extends' typeListGen+= typeList
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_normalInterfaceDeclaration736); if (failed) return retval;
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration740);
                    typeListGen=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeListGen==null) list_typeListGen=new ArrayList();
                    list_typeListGen.add(typeListGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration746);
            interfaceBodyGen=interfaceBody();
            _fsp--;
            if (failed) return retval;
            if (list_interfaceBodyGen==null) list_interfaceBodyGen=new ArrayList();
            list_interfaceBodyGen.add(interfaceBodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node normalInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		normalInterfaceDeclarationReturnNode.setKind("normalInterfaceDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			normalInterfaceDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_interfaceBodyGen != null) {
              	        for(Iterator it = list_interfaceBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceBody_return r = (JavaParser.interfaceBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceBody");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = normalInterfaceDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 17, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end normalInterfaceDeclaration

    public static class typeList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeList
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:986:1: typeList returns [Node returnNode] : typeGen+= type (TK_0= ',' typeGen_1+= type )* ;
    public final typeList_return typeList() throws RecognitionException {
        typeList_return retval = new typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_typeGen_1=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope typeGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:987:1: (typeGen+= type (TK_0= ',' typeGen_1+= type )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:987:3: typeGen+= type (TK_0= ',' typeGen_1+= type )*
            {
            pushFollow(FOLLOW_type_in_typeList768);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:987:17: (TK_0= ',' typeGen_1+= type )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==34) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:987:18: TK_0= ',' typeGen_1+= type
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeList773); if (failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList777);
            	    typeGen_1=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_typeGen_1==null) list_typeGen_1=new ArrayList();
            	    list_typeGen_1.add(typeGen_1);


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node typeListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeListReturnNode.setKind("typeList");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	typeListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal typeGen_1 aggregation
              		if(list_typeGen_1 != null) {
              	    for(int pos = 0; pos < list_typeGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeGen_1 != null) {		
              	    	JavaParser.type_return r = (JavaParser.type_return) list_typeGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("type");
              	    		typeListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 18, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeList

    public static class classBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start classBody
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1031:1: classBody returns [Node returnNode] : TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}' ;
    public final classBody_return classBody() throws RecognitionException {
        classBody_return retval = new classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_classBodyDeclarationGen=null;
        RuleReturnScope classBodyDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1032:1: (TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1032:3: TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_classBody801); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1032:35: (classBodyDeclarationGen+= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0>=Identifier && LA31_0<=ENUM)||LA31_0==25||LA31_0==27||LA31_0==30||LA31_0==33||LA31_0==37||(LA31_0>=39 && LA31_0<=40)||(LA31_0>=45 && LA31_0<=62)||LA31_0==71) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: classBodyDeclarationGen+= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody805);
            	    classBodyDeclarationGen=classBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_classBodyDeclarationGen==null) list_classBodyDeclarationGen=new ArrayList();
            	    list_classBodyDeclarationGen.add(classBodyDeclarationGen);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            TK_1=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_classBody810); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node classBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classBodyReturnNode.setKind("classBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		classBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_classBodyDeclarationGen != null) {
              	        for(Iterator it = list_classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBodyDeclaration");
              	            	classBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		classBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 19, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classBody

    public static class interfaceBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceBody
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1070:1: interfaceBody returns [Node returnNode] : TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}' ;
    public final interfaceBody_return interfaceBody() throws RecognitionException {
        interfaceBody_return retval = new interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_interfaceBodyDeclarationGen=null;
        RuleReturnScope interfaceBodyDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1071:1: (TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1071:3: TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_interfaceBody832); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1071:39: (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( ((LA32_0>=Identifier && LA32_0<=ENUM)||LA32_0==25||LA32_0==27||LA32_0==30||LA32_0==33||(LA32_0>=39 && LA32_0<=40)||(LA32_0>=45 && LA32_0<=62)||LA32_0==71) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: interfaceBodyDeclarationGen+= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody836);
            	    interfaceBodyDeclarationGen=interfaceBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_interfaceBodyDeclarationGen==null) list_interfaceBodyDeclarationGen=new ArrayList();
            	    list_interfaceBodyDeclarationGen.add(interfaceBodyDeclarationGen);


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            TK_1=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_interfaceBody841); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node interfaceBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceBodyReturnNode.setKind("interfaceBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		interfaceBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_interfaceBodyDeclarationGen != null) {
              	        for(Iterator it = list_interfaceBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceBodyDeclaration_return r = (JavaParser.interfaceBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceBodyDeclaration");
              	            	interfaceBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		interfaceBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 20, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceBody

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start classBodyDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1109:1: classBodyDeclaration returns [Node returnNode] : (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl );
    public final classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        classBodyDeclaration_return retval = new classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_blockGen=null;
        List list_modifierGen=null;
        List list_memberDeclGen=null;
        RuleReturnScope blockGen = null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope memberDeclGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1110:1: (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl )
            int alt35=3;
            switch ( input.LA(1) ) {
            case 25:
                {
                alt35=1;
                }
                break;
            case 27:
                {
                int LA35_2 = input.LA(2);

                if ( (LA35_2==37) ) {
                    alt35=2;
                }
                else if ( ((LA35_2>=Identifier && LA35_2<=ENUM)||LA35_2==27||LA35_2==30||LA35_2==33||(LA35_2>=39 && LA35_2<=40)||(LA35_2>=45 && LA35_2<=62)||LA35_2==71) ) {
                    alt35=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1109:1: classBodyDeclaration returns [Node returnNode] : (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl );", 35, 2, input);

                    throw nvae;
                }
                }
                break;
            case 37:
                {
                alt35=2;
                }
                break;
            case Identifier:
            case ENUM:
            case 30:
            case 33:
            case 39:
            case 40:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 71:
                {
                alt35=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1109:1: classBodyDeclaration returns [Node returnNode] : (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl );", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1110:3: TK_0= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_classBodyDeclaration862); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1127:4: (TK_0= 'static' )? blockGen+= block
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1127:8: (TK_0= 'static' )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==27) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_0= 'static'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,27,FOLLOW_27_in_classBodyDeclaration873); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration878);
                    blockGen=block();
                    _fsp--;
                    if (failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1154:4: (modifierGen+= modifier )* memberDeclGen+= memberDecl
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1154:15: (modifierGen+= modifier )*
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==71) ) {
                            int LA34_13 = input.LA(2);

                            if ( (LA34_13==Identifier) ) {
                                alt34=1;
                            }


                        }
                        else if ( (LA34_0==27||(LA34_0>=45 && LA34_0<=54)) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: modifierGen+= modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration889);
                    	    modifierGen=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
                    	    list_modifierGen.add(modifierGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);

                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration894);
                    memberDeclGen=memberDecl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_memberDeclGen==null) list_memberDeclGen=new ArrayList();
                    list_memberDeclGen.add(memberDeclGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a CST Node
                      		if(list_modifierGen != null) {
                      	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("modifier");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_memberDeclGen != null) {
                      	        for(Iterator it = list_memberDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.memberDecl_return r = (JavaParser.memberDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("memberDecl");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 21, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classBodyDeclaration

    public static class memberDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start memberDecl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );
    public final memberDecl_return memberDecl() throws RecognitionException {
        memberDecl_return retval = new memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_genericMethodOrConstructorDeclGen=null;
        List list_methodDeclarationGen=null;
        List list_fieldDeclarationGen=null;
        List list_voidMethodDeclaratorRestGen=null;
        List list_constructorDeclaratorRestGen=null;
        List list_interfaceDeclarationGen=null;
        List list_classDeclarationGen=null;
        RuleReturnScope genericMethodOrConstructorDeclGen = null;
        RuleReturnScope methodDeclarationGen = null;
        RuleReturnScope fieldDeclarationGen = null;
        RuleReturnScope voidMethodDeclaratorRestGen = null;
        RuleReturnScope constructorDeclaratorRestGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope classDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1185:1: (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration )
            int alt36=7;
            switch ( input.LA(1) ) {
            case 33:
                {
                alt36=1;
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    int LA36_16 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 16, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    int LA36_17 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 17, input);

                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA36_18 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 18, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA36_19 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 19, input);

                        throw nvae;
                    }
                    }
                    break;
                case 65:
                    {
                    alt36=5;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 2, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                int LA36_3 = input.LA(2);

                if ( (LA36_3==41) ) {
                    int LA36_21 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 21, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_3==Identifier) ) {
                    int LA36_22 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 22, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 3, input);

                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA36_4 = input.LA(2);

                if ( (LA36_4==41) ) {
                    int LA36_23 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 23, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_4==Identifier) ) {
                    int LA36_24 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 24, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 4, input);

                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA36_5 = input.LA(2);

                if ( (LA36_5==41) ) {
                    int LA36_25 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 25, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_5==Identifier) ) {
                    int LA36_26 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 26, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 5, input);

                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA36_6 = input.LA(2);

                if ( (LA36_6==41) ) {
                    int LA36_27 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 27, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_6==Identifier) ) {
                    int LA36_28 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 28, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 6, input);

                    throw nvae;
                }
                }
                break;
            case 59:
                {
                int LA36_7 = input.LA(2);

                if ( (LA36_7==41) ) {
                    int LA36_29 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 29, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_7==Identifier) ) {
                    int LA36_30 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 30, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 7, input);

                    throw nvae;
                }
                }
                break;
            case 60:
                {
                int LA36_8 = input.LA(2);

                if ( (LA36_8==41) ) {
                    int LA36_31 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 31, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_8==Identifier) ) {
                    int LA36_32 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 32, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 8, input);

                    throw nvae;
                }
                }
                break;
            case 61:
                {
                int LA36_9 = input.LA(2);

                if ( (LA36_9==41) ) {
                    int LA36_33 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 33, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_9==Identifier) ) {
                    int LA36_34 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 34, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 9, input);

                    throw nvae;
                }
                }
                break;
            case 62:
                {
                int LA36_10 = input.LA(2);

                if ( (LA36_10==41) ) {
                    int LA36_35 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 35, input);

                        throw nvae;
                    }
                }
                else if ( (LA36_10==Identifier) ) {
                    int LA36_36 = input.LA(3);

                    if ( (synpred38()) ) {
                        alt36=2;
                    }
                    else if ( (synpred39()) ) {
                        alt36=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 36, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 10, input);

                    throw nvae;
                }
                }
                break;
            case 40:
                {
                alt36=4;
                }
                break;
            case 39:
            case 71:
                {
                alt36=6;
                }
                break;
            case ENUM:
            case 30:
                {
                alt36=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1185:3: genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl
                    {
                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl916);
                    genericMethodOrConstructorDeclGen=genericMethodOrConstructorDecl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_genericMethodOrConstructorDeclGen==null) list_genericMethodOrConstructorDeclGen=new ArrayList();
                    list_genericMethodOrConstructorDeclGen.add(genericMethodOrConstructorDeclGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_genericMethodOrConstructorDeclGen != null) {
                      	        for(Iterator it = list_genericMethodOrConstructorDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.genericMethodOrConstructorDecl_return r = (JavaParser.genericMethodOrConstructorDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("genericMethodOrConstructorDecl");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1203:4: methodDeclarationGen+= methodDeclaration
                    {
                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl927);
                    methodDeclarationGen=methodDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_methodDeclarationGen==null) list_methodDeclarationGen=new ArrayList();
                    list_methodDeclarationGen.add(methodDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_methodDeclarationGen != null) {
                      	        for(Iterator it = list_methodDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.methodDeclaration_return r = (JavaParser.methodDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("methodDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1221:4: fieldDeclarationGen+= fieldDeclaration
                    {
                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl938);
                    fieldDeclarationGen=fieldDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_fieldDeclarationGen==null) list_fieldDeclarationGen=new ArrayList();
                    list_fieldDeclarationGen.add(fieldDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_fieldDeclarationGen != null) {
                      	        for(Iterator it = list_fieldDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.fieldDeclaration_return r = (JavaParser.fieldDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("fieldDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1239:4: TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_memberDecl949); if (failed) return retval;
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_memberDecl953); if (failed) return retval;
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl957);
                    voidMethodDeclaratorRestGen=voidMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_voidMethodDeclaratorRestGen==null) list_voidMethodDeclaratorRestGen=new ArrayList();
                    list_voidMethodDeclaratorRestGen.add(voidMethodDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		memberDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_voidMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_voidMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.voidMethodDeclaratorRest_return r = (JavaParser.voidMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("voidMethodDeclaratorRest");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1275:4: IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_memberDecl968); if (failed) return retval;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl972);
                    constructorDeclaratorRestGen=constructorDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_constructorDeclaratorRestGen==null) list_constructorDeclaratorRestGen=new ArrayList();
                    list_constructorDeclaratorRestGen.add(constructorDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_constructorDeclaratorRestGen != null) {
                      	        for(Iterator it = list_constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constructorDeclaratorRest");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1302:4: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl983);
                    interfaceDeclarationGen=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1320:4: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_memberDecl994);
                    classDeclarationGen=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 22, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end memberDecl

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start genericMethodOrConstructorDecl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1340:1: genericMethodOrConstructorDecl returns [Node returnNode] : typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest ;
    public final genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        genericMethodOrConstructorDecl_return retval = new genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        List list_typeParametersGen=null;
        List list_genericMethodOrConstructorRestGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope genericMethodOrConstructorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1341:1: (typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1341:3: typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest
            {
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1016);
            typeParametersGen=typeParameters();
            _fsp--;
            if (failed) return retval;
            if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
            list_typeParametersGen.add(typeParametersGen);

            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1020);
            genericMethodOrConstructorRestGen=genericMethodOrConstructorRest();
            _fsp--;
            if (failed) return retval;
            if (list_genericMethodOrConstructorRestGen==null) list_genericMethodOrConstructorRestGen=new ArrayList();
            list_genericMethodOrConstructorRestGen.add(genericMethodOrConstructorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node genericMethodOrConstructorDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		genericMethodOrConstructorDeclReturnNode.setKind("genericMethodOrConstructorDecl");
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_genericMethodOrConstructorRestGen != null) {
              	        for(Iterator it = list_genericMethodOrConstructorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.genericMethodOrConstructorRest_return r = (JavaParser.genericMethodOrConstructorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("genericMethodOrConstructorRest");
              	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = genericMethodOrConstructorDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 23, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericMethodOrConstructorDecl

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start genericMethodOrConstructorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1371:1: genericMethodOrConstructorRest returns [Node returnNode] : ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest );
    public final genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        genericMethodOrConstructorRest_return retval = new genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_methodDeclaratorRestGen=null;
        List list_constructorDeclaratorRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope methodDeclaratorRestGen = null;
        RuleReturnScope constructorDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1372:1: ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==Identifier) ) {
                int LA38_1 = input.LA(2);

                if ( (LA38_1==Identifier||LA38_1==28||LA38_1==33||LA38_1==41) ) {
                    alt38=1;
                }
                else if ( (LA38_1==65) ) {
                    alt38=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1371:1: genericMethodOrConstructorRest returns [Node returnNode] : ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest );", 38, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA38_0==40||(LA38_0>=55 && LA38_0<=62)) ) {
                alt38=1;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1371:1: genericMethodOrConstructorRest returns [Node returnNode] : ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest );", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1372:3: (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1372:3: (typeGen+= type | TK_0= 'void' )
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==Identifier||(LA37_0>=55 && LA37_0<=62)) ) {
                        alt37=1;
                    }
                    else if ( (LA37_0==40) ) {
                        alt37=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1372:3: (typeGen+= type | TK_0= 'void' )", 37, 0, input);

                        throw nvae;
                    }
                    switch (alt37) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1372:4: typeGen+= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1043);
                            typeGen=type();
                            _fsp--;
                            if (failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1372:20: TK_0= 'void'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,40,FOLLOW_40_in_genericMethodOrConstructorRest1049); if (failed) return retval;

                            }
                            break;

                    }

                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1054); if (failed) return retval;
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1058);
                    methodDeclaratorRestGen=methodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_methodDeclaratorRestGen==null) list_methodDeclaratorRestGen=new ArrayList();
                    list_methodDeclaratorRestGen.add(methodDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		genericMethodOrConstructorRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_methodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("methodDeclaratorRest");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = genericMethodOrConstructorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1418:4: IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1069); if (failed) return retval;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1073);
                    constructorDeclaratorRestGen=constructorDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_constructorDeclaratorRestGen==null) list_constructorDeclaratorRestGen=new ArrayList();
                    list_constructorDeclaratorRestGen.add(constructorDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_constructorDeclaratorRestGen != null) {
                      	        for(Iterator it = list_constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constructorDeclaratorRest");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = genericMethodOrConstructorRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 24, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericMethodOrConstructorRest

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start methodDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1447:1: methodDeclaration returns [Node returnNode] : typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest ;
    public final methodDeclaration_return methodDeclaration() throws RecognitionException {
        methodDeclaration_return retval = new methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_methodDeclaratorRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope methodDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1448:1: (typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1448:3: typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1094);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1098); if (failed) return retval;
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1102);
            methodDeclaratorRestGen=methodDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if (list_methodDeclaratorRestGen==null) list_methodDeclaratorRestGen=new ArrayList();
            list_methodDeclaratorRestGen.add(methodDeclaratorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node methodDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodDeclarationReturnNode.setKind("methodDeclaration");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			methodDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_methodDeclaratorRestGen != null) {
              	        for(Iterator it = list_methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodDeclaratorRest");
              	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 25, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end methodDeclaration

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start fieldDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1487:1: fieldDeclaration returns [Node returnNode] : typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' ;
    public final fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        fieldDeclaration_return retval = new fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1488:1: (typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1488:3: typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1123);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1127);
            variableDeclaratorsGen=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen);

            TK_0=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_fieldDeclaration1131); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node fieldDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fieldDeclarationReturnNode.setKind("fieldDeclaration");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		fieldDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fieldDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 26, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end fieldDeclaration

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceBodyDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1527:1: interfaceBodyDeclaration returns [Node returnNode] : ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' );
    public final interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        interfaceBodyDeclaration_return retval = new interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_modifierGen=null;
        List list_interfaceMemberDeclGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope interfaceMemberDeclGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1528:1: ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=Identifier && LA40_0<=ENUM)||LA40_0==27||LA40_0==30||LA40_0==33||(LA40_0>=39 && LA40_0<=40)||(LA40_0>=45 && LA40_0<=62)||LA40_0==71) ) {
                alt40=1;
            }
            else if ( (LA40_0==25) ) {
                alt40=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1527:1: interfaceBodyDeclaration returns [Node returnNode] : ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' );", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1528:3: (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1528:14: (modifierGen+= modifier )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==71) ) {
                            int LA39_13 = input.LA(2);

                            if ( (LA39_13==Identifier) ) {
                                alt39=1;
                            }


                        }
                        else if ( (LA39_0==27||(LA39_0>=45 && LA39_0<=54)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: modifierGen+= modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1154);
                    	    modifierGen=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
                    	    list_modifierGen.add(modifierGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1159);
                    interfaceMemberDeclGen=interfaceMemberDecl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceMemberDeclGen==null) list_interfaceMemberDeclGen=new ArrayList();
                    list_interfaceMemberDeclGen.add(interfaceMemberDeclGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
                      	    // Create a CST Node
                      		if(list_modifierGen != null) {
                      	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("modifier");
                      	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_interfaceMemberDeclGen != null) {
                      	        for(Iterator it = list_interfaceMemberDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMemberDecl_return r = (JavaParser.interfaceMemberDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMemberDecl");
                      	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1556:6: TK_0= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_interfaceBodyDeclaration1172); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 27, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceBodyDeclaration

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceMemberDecl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1575:1: interfaceMemberDecl returns [Node returnNode] : (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );
    public final interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        interfaceMemberDecl_return retval = new interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_interfaceMethodOrFieldDeclGen=null;
        List list_interfaceGenericMethodDeclGen=null;
        List list_voidInterfaceMethodDeclaratorRestGen=null;
        List list_interfaceDeclarationGen=null;
        List list_classDeclarationGen=null;
        RuleReturnScope interfaceMethodOrFieldDeclGen = null;
        RuleReturnScope interfaceGenericMethodDeclGen = null;
        RuleReturnScope voidInterfaceMethodDeclaratorRestGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope classDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1576:1: (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration )
            int alt41=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt41=1;
                }
                break;
            case 33:
                {
                alt41=2;
                }
                break;
            case 40:
                {
                alt41=3;
                }
                break;
            case 39:
            case 71:
                {
                alt41=4;
                }
                break;
            case ENUM:
            case 30:
                {
                alt41=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1575:1: interfaceMemberDecl returns [Node returnNode] : (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1576:3: interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl
                    {
                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1193);
                    interfaceMethodOrFieldDeclGen=interfaceMethodOrFieldDecl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceMethodOrFieldDeclGen==null) list_interfaceMethodOrFieldDeclGen=new ArrayList();
                    list_interfaceMethodOrFieldDeclGen.add(interfaceMethodOrFieldDeclGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceMethodOrFieldDeclGen != null) {
                      	        for(Iterator it = list_interfaceMethodOrFieldDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMethodOrFieldDecl_return r = (JavaParser.interfaceMethodOrFieldDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMethodOrFieldDecl");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1594:6: interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl
                    {
                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1206);
                    interfaceGenericMethodDeclGen=interfaceGenericMethodDecl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceGenericMethodDeclGen==null) list_interfaceGenericMethodDeclGen=new ArrayList();
                    list_interfaceGenericMethodDeclGen.add(interfaceGenericMethodDeclGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceGenericMethodDeclGen != null) {
                      	        for(Iterator it = list_interfaceGenericMethodDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceGenericMethodDecl_return r = (JavaParser.interfaceGenericMethodDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceGenericMethodDecl");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1612:9: TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_interfaceMemberDecl1222); if (failed) return retval;
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_interfaceMemberDecl1226); if (failed) return retval;
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1230);
                    voidInterfaceMethodDeclaratorRestGen=voidInterfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_voidInterfaceMethodDeclaratorRestGen==null) list_voidInterfaceMethodDeclaratorRestGen=new ArrayList();
                    list_voidInterfaceMethodDeclaratorRestGen.add(voidInterfaceMethodDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceMemberDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			interfaceMemberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_voidInterfaceMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_voidInterfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.voidInterfaceMethodDeclaratorRest_return r = (JavaParser.voidInterfaceMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("voidInterfaceMethodDeclaratorRest");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1648:9: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1246);
                    interfaceDeclarationGen=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1666:9: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl1262);
                    classDeclarationGen=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 28, interfaceMemberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceMemberDecl

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceMethodOrFieldDecl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1686:1: interfaceMethodOrFieldDecl returns [Node returnNode] : typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest ;
    public final interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        interfaceMethodOrFieldDecl_return retval = new interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_interfaceMethodOrFieldRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope interfaceMethodOrFieldRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1687:1: (typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1687:3: typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest
            {
            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl1284);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1288); if (failed) return retval;
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1292);
            interfaceMethodOrFieldRestGen=interfaceMethodOrFieldRest();
            _fsp--;
            if (failed) return retval;
            if (list_interfaceMethodOrFieldRestGen==null) list_interfaceMethodOrFieldRestGen=new ArrayList();
            list_interfaceMethodOrFieldRestGen.add(interfaceMethodOrFieldRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node interfaceMethodOrFieldDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceMethodOrFieldDeclReturnNode.setKind("interfaceMethodOrFieldDecl");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			interfaceMethodOrFieldDeclReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_interfaceMethodOrFieldRestGen != null) {
              	        for(Iterator it = list_interfaceMethodOrFieldRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceMethodOrFieldRest_return r = (JavaParser.interfaceMethodOrFieldRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceMethodOrFieldRest");
              	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceMethodOrFieldDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 29, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceMethodOrFieldDecl

    public static class interfaceMethodOrFieldRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceMethodOrFieldRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1726:1: interfaceMethodOrFieldRest returns [Node returnNode] : (constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';' | interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest );
    public final interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest() throws RecognitionException {
        interfaceMethodOrFieldRest_return retval = new interfaceMethodOrFieldRest_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldRest_StartIndex = input.index();
        Token TK_0=null;
        List list_constantDeclaratorsRestGen=null;
        List list_interfaceMethodDeclaratorRestGen=null;
        RuleReturnScope constantDeclaratorsRestGen = null;
        RuleReturnScope interfaceMethodDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1727:1: (constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';' | interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==41||LA42_0==44) ) {
                alt42=1;
            }
            else if ( (LA42_0==65) ) {
                alt42=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1726:1: interfaceMethodOrFieldRest returns [Node returnNode] : (constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';' | interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest );", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1727:3: constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';'
                    {
                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1314);
                    constantDeclaratorsRestGen=constantDeclaratorsRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_constantDeclaratorsRestGen==null) list_constantDeclaratorsRestGen=new ArrayList();
                    list_constantDeclaratorsRestGen.add(constantDeclaratorsRestGen);

                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_interfaceMethodOrFieldRest1318); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
                      	    // Create a CST Node
                      		if(list_constantDeclaratorsRestGen != null) {
                      	        for(Iterator it = list_constantDeclaratorsRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constantDeclaratorsRest_return r = (JavaParser.constantDeclaratorsRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constantDeclaratorsRest");
                      	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceMethodOrFieldRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMethodOrFieldRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1754:4: interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1329);
                    interfaceMethodDeclaratorRestGen=interfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceMethodDeclaratorRestGen==null) list_interfaceMethodDeclaratorRestGen=new ArrayList();
                    list_interfaceMethodDeclaratorRestGen.add(interfaceMethodDeclaratorRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
                      	    // Create a CST Node
                      		if(list_interfaceMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
                      	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMethodOrFieldRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 30, interfaceMethodOrFieldRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceMethodOrFieldRest

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start methodDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1774:1: methodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' ) ;
    public final methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        methodDeclaratorRest_return retval = new methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1775:1: (formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1775:3: formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1351);
            formalParametersGen=formalParameters();
            _fsp--;
            if (failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1775:41: (TK_0= '[' TK_1= ']' )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==41) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1775:42: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_methodDeclaratorRest1356); if (failed) return retval;
            	    TK_1=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_methodDeclaratorRest1360); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1776:9: (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==43) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1776:10: TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_methodDeclaratorRest1375); if (failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest1379);
                    qualifiedNameListGen=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1777:9: (methodBodyGen+= methodBody | TK_3= ';' )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==37) ) {
                alt45=1;
            }
            else if ( (LA45_0==25) ) {
                alt45=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1777:9: (methodBodyGen+= methodBody | TK_3= ';' )", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1777:13: methodBodyGen+= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1397);
                    methodBodyGen=methodBody();
                    _fsp--;
                    if (failed) return retval;
                    if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
                    list_methodBodyGen.add(methodBodyGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1778:13: TK_3= ';'
                    {
                    TK_3=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_methodDeclaratorRest1413); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node methodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodDeclaratorRestReturnNode.setKind("methodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 31, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end methodDeclaratorRest

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start voidMethodDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1837:1: voidMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' ) ;
    public final voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        voidMethodDeclaratorRest_return retval = new voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1838:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1838:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1445);
            formalParametersGen=formalParameters();
            _fsp--;
            if (failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1838:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==43) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1838:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_voidMethodDeclaratorRest1450); if (failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1454);
                    qualifiedNameListGen=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1839:9: (methodBodyGen+= methodBody | TK_1= ';' )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==37) ) {
                alt47=1;
            }
            else if ( (LA47_0==25) ) {
                alt47=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1839:9: (methodBodyGen+= methodBody | TK_1= ';' )", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1839:13: methodBodyGen+= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1472);
                    methodBodyGen=methodBody();
                    _fsp--;
                    if (failed) return retval;
                    if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
                    list_methodBodyGen.add(methodBodyGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1840:13: TK_1= ';'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_voidMethodDeclaratorRest1488); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node voidMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		voidMethodDeclaratorRestReturnNode.setKind("voidMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = voidMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 32, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end voidMethodDeclaratorRest

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceMethodDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1899:1: interfaceMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';' ;
    public final interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        interfaceMethodDeclaratorRest_return retval = new interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:1: (formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:3: formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1520);
            formalParametersGen=formalParameters();
            _fsp--;
            if (failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:41: (TK_0= '[' TK_1= ']' )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==41) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:42: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_interfaceMethodDeclaratorRest1525); if (failed) return retval;
            	    TK_1=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_interfaceMethodDeclaratorRest1529); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:62: (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==43) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1900:63: TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_interfaceMethodDeclaratorRest1536); if (failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1540);
                    qualifiedNameListGen=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen);


                    }
                    break;

            }

            TK_3=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_interfaceMethodDeclaratorRest1546); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node interfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceMethodDeclaratorRestReturnNode.setKind("interfaceMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 33, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceMethodDeclaratorRest

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start interfaceGenericMethodDecl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1948:1: interfaceGenericMethodDecl returns [Node returnNode] : typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest ;
    public final interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        interfaceGenericMethodDecl_return retval = new interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_typeParametersGen=null;
        List list_typeGen=null;
        List list_interfaceMethodDeclaratorRestGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope interfaceMethodDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1949:1: (typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1949:3: typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1568);
            typeParametersGen=typeParameters();
            _fsp--;
            if (failed) return retval;
            if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
            list_typeParametersGen.add(typeParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1949:37: (typeGen+= type | TK_0= 'void' )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==Identifier||(LA50_0>=55 && LA50_0<=62)) ) {
                alt50=1;
            }
            else if ( (LA50_0==40) ) {
                alt50=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1949:37: (typeGen+= type | TK_0= 'void' )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1949:38: typeGen+= type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl1573);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1949:54: TK_0= 'void'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_interfaceGenericMethodDecl1579); if (failed) return retval;

                    }
                    break;

            }

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1584); if (failed) return retval;
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1596);
            interfaceMethodDeclaratorRestGen=interfaceMethodDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if (list_interfaceMethodDeclaratorRestGen==null) list_interfaceMethodDeclaratorRestGen=new ArrayList();
            list_interfaceMethodDeclaratorRestGen.add(interfaceMethodDeclaratorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node interfaceGenericMethodDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceGenericMethodDeclReturnNode.setKind("interfaceGenericMethodDecl");
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		interfaceGenericMethodDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			interfaceGenericMethodDeclReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_interfaceMethodDeclaratorRestGen != null) {
              	        for(Iterator it = list_interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceGenericMethodDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 34, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceGenericMethodDecl

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start voidInterfaceMethodDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2008:1: voidInterfaceMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';' ;
    public final voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        voidInterfaceMethodDeclaratorRest_return retval = new voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2009:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2009:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1618);
            formalParametersGen=formalParameters();
            _fsp--;
            if (failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2009:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==43) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2009:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1623); if (failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1627);
                    qualifiedNameListGen=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1633); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node voidInterfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		voidInterfaceMethodDeclaratorRestReturnNode.setKind("voidInterfaceMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = voidInterfaceMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 35, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end voidInterfaceMethodDeclaratorRest

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start constructorDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2057:1: constructorDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody ;
    public final constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        constructorDeclaratorRest_return retval = new constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2058:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2058:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest1655);
            formalParametersGen=formalParameters();
            _fsp--;
            if (failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2058:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==43) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2058:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_constructorDeclaratorRest1660); if (failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1664);
                    qualifiedNameListGen=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest1670);
            methodBodyGen=methodBody();
            _fsp--;
            if (failed) return retval;
            if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
            list_methodBodyGen.add(methodBodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node constructorDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constructorDeclaratorRestReturnNode.setKind("constructorDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		constructorDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constructorDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 36, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end constructorDeclaratorRest

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start constantDeclarator
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2107:1: constantDeclarator returns [Node returnNode] : IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest ;
    public final constantDeclarator_return constantDeclarator() throws RecognitionException {
        constantDeclarator_return retval = new constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_constantDeclaratorRestGen=null;
        RuleReturnScope constantDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2108:1: (IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2108:3: IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator1691); if (failed) return retval;
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator1695);
            constantDeclaratorRestGen=constantDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if (list_constantDeclaratorRestGen==null) list_constantDeclaratorRestGen=new ArrayList();
            list_constantDeclaratorRestGen.add(constantDeclaratorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node constantDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorReturnNode.setKind("constantDeclarator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			constantDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_constantDeclaratorRestGen != null) {
              	        for(Iterator it = list_constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constantDeclaratorRest");
              	            	constantDeclaratorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 37, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end constantDeclarator

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableDeclarators
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2137:1: variableDeclarators returns [Node returnNode] : variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )* ;
    public final variableDeclarators_return variableDeclarators() throws RecognitionException {
        variableDeclarators_return retval = new variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Token TK_0=null;
        List list_variableDeclaratorGen=null;
        List list_variableDeclaratorGen_1=null;
        RuleReturnScope variableDeclaratorGen = null;
        RuleReturnScope variableDeclaratorGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2138:1: (variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2138:3: variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1717);
            variableDeclaratorGen=variableDeclarator();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorGen==null) list_variableDeclaratorGen=new ArrayList();
            list_variableDeclaratorGen.add(variableDeclaratorGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2138:45: (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==34) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2138:46: TK_0= ',' variableDeclaratorGen_1+= variableDeclarator
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_variableDeclarators1722); if (failed) return retval;
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1726);
            	    variableDeclaratorGen_1=variableDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variableDeclaratorGen_1==null) list_variableDeclaratorGen_1=new ArrayList();
            	    list_variableDeclaratorGen_1.add(variableDeclaratorGen_1);


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variableDeclaratorsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorsReturnNode.setKind("variableDeclarators");
              	    // Create a CST Node
              		if(list_variableDeclaratorGen != null) {
              	        for(Iterator it = list_variableDeclaratorGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarator");
              	            	variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal variableDeclaratorGen_1 aggregation
              		if(list_variableDeclaratorGen_1 != null) {
              	    for(int pos = 0; pos < list_variableDeclaratorGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		variableDeclaratorsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_variableDeclaratorGen_1 != null) {		
              	    	JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) list_variableDeclaratorGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("variableDeclarator");
              	    		variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 38, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableDeclarators

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableDeclarator
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2182:1: variableDeclarator returns [Node returnNode] : IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest ;
    public final variableDeclarator_return variableDeclarator() throws RecognitionException {
        variableDeclarator_return retval = new variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_variableDeclaratorRestGen=null;
        RuleReturnScope variableDeclaratorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2183:1: (IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2183:3: IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator1749); if (failed) return retval;
            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator1753);
            variableDeclaratorRestGen=variableDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorRestGen==null) list_variableDeclaratorRestGen=new ArrayList();
            list_variableDeclaratorRestGen.add(variableDeclaratorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variableDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorReturnNode.setKind("variableDeclarator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			variableDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_variableDeclaratorRestGen != null) {
              	        for(Iterator it = list_variableDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclaratorRest_return r = (JavaParser.variableDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclaratorRest");
              	            	variableDeclaratorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 39, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableDeclarator

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2212:1: variableDeclaratorRest returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )? | TK_0= '=' variableInitializerGen+= variableInitializer | );
    public final variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        variableDeclaratorRest_return retval = new variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_variableInitializerGen=null;
        RuleReturnScope variableInitializerGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:1: ( (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )? | TK_0= '=' variableInitializerGen+= variableInitializer | )
            int alt56=3;
            switch ( input.LA(1) ) {
            case 41:
                {
                alt56=1;
                }
                break;
            case 44:
                {
                alt56=2;
                }
                break;
            case EOF:
            case 25:
            case 34:
                {
                alt56=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2212:1: variableDeclaratorRest returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )? | TK_0= '=' variableInitializerGen+= variableInitializer | );", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:3: (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )?
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:3: (TK_0= '[' TK_1= ']' )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==41) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:4: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_variableDeclaratorRest1776); if (failed) return retval;
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_variableDeclaratorRest1780); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:24: (TK_2= '=' variableInitializerGen+= variableInitializer )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==44) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2213:25: TK_2= '=' variableInitializerGen+= variableInitializer
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,44,FOLLOW_44_in_variableDeclaratorRest1787); if (failed) return retval;
                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1791);
                            variableInitializerGen=variableInitializer();
                            _fsp--;
                            if (failed) return retval;
                            if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                            list_variableInitializerGen.add(variableInitializerGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableInitializerGen != null) {
                      	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableInitializer");
                      	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableDeclaratorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2240:4: TK_0= '=' variableInitializerGen+= variableInitializer
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_variableDeclaratorRest1804); if (failed) return retval;
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1808);
                    variableInitializerGen=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                    list_variableInitializerGen.add(variableInitializerGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableInitializerGen != null) {
                      	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableInitializer");
                      	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableDeclaratorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2268:2: 
                    {
                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 40, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableDeclaratorRest

    public static class constantDeclaratorsRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start constantDeclaratorsRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2270:1: constantDeclaratorsRest returns [Node returnNode] : constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )* ;
    public final constantDeclaratorsRest_return constantDeclaratorsRest() throws RecognitionException {
        constantDeclaratorsRest_return retval = new constantDeclaratorsRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorsRest_StartIndex = input.index();
        Token TK_0=null;
        List list_constantDeclaratorRestGen=null;
        List list_constantDeclaratorGen=null;
        RuleReturnScope constantDeclaratorRestGen = null;
        RuleReturnScope constantDeclaratorGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2271:1: (constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2271:5: constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1835);
            constantDeclaratorRestGen=constantDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if (list_constantDeclaratorRestGen==null) list_constantDeclaratorRestGen=new ArrayList();
            list_constantDeclaratorRestGen.add(constantDeclaratorRestGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2271:55: (TK_0= ',' constantDeclaratorGen+= constantDeclarator )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==34) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2271:56: TK_0= ',' constantDeclaratorGen+= constantDeclarator
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_constantDeclaratorsRest1840); if (failed) return retval;
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest1844);
            	    constantDeclaratorGen=constantDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_constantDeclaratorGen==null) list_constantDeclaratorGen=new ArrayList();
            	    list_constantDeclaratorGen.add(constantDeclaratorGen);


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node constantDeclaratorsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorsRestReturnNode.setKind("constantDeclaratorsRest");
              	    // Create a CST Node
              		if(list_constantDeclaratorRestGen != null) {
              	        for(Iterator it = list_constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constantDeclaratorRest");
              	            	constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal constantDeclaratorGen aggregation
              		if(list_constantDeclaratorGen != null) {
              	    for(int pos = 0; pos < list_constantDeclaratorGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		constantDeclaratorsRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_constantDeclaratorGen != null) {		
              	    	JavaParser.constantDeclarator_return r = (JavaParser.constantDeclarator_return) list_constantDeclaratorGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("constantDeclarator");
              	    		constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorsRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 41, constantDeclaratorsRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end constantDeclaratorsRest

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start constantDeclaratorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2315:1: constantDeclaratorRest returns [Node returnNode] : (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer ;
    public final constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        constantDeclaratorRest_return retval = new constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_variableInitializerGen=null;
        RuleReturnScope variableInitializerGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2316:1: ( (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2316:3: (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2316:3: (TK_0= '[' TK_1= ']' )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==41) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2316:4: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_constantDeclaratorRest1871); if (failed) return retval;
            	    TK_1=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_constantDeclaratorRest1875); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            TK_2=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_constantDeclaratorRest1881); if (failed) return retval;
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest1885);
            variableInitializerGen=variableInitializer();
            _fsp--;
            if (failed) return retval;
            if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
            list_variableInitializerGen.add(variableInitializerGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node constantDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorRestReturnNode.setKind("constantDeclaratorRest");
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		constantDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_variableInitializerGen != null) {
              	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableInitializer");
              	            	constantDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 42, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end constantDeclaratorRest

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableDeclaratorId
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2345:1: variableDeclaratorId returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )* ;
    public final variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        variableDeclaratorId_return retval = new variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2346:1: (IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2346:3: IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )*
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId1907); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2346:28: (TK_0= '[' TK_1= ']' )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2346:29: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_variableDeclaratorId1912); if (failed) return retval;
            	    TK_1=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_variableDeclaratorId1916); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variableDeclaratorIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorIdReturnNode.setKind("variableDeclaratorId");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			variableDeclaratorIdReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorIdReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 43, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableDeclaratorId

    public static class variableInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableInitializer
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2365:1: variableInitializer returns [Node returnNode] : (arrayInitializerGen+= arrayInitializer | expressionGen+= expression );
    public final variableInitializer_return variableInitializer() throws RecognitionException {
        variableInitializer_return retval = new variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        List list_arrayInitializerGen=null;
        List list_expressionGen=null;
        RuleReturnScope arrayInitializerGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2366:1: (arrayInitializerGen+= arrayInitializer | expressionGen+= expression )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==37) ) {
                alt60=1;
            }
            else if ( (LA60_0==Identifier||(LA60_0>=FloatingPointLiteral && LA60_0<=DecimalLiteral)||LA60_0==33||LA60_0==40||(LA60_0>=55 && LA60_0<=62)||(LA60_0>=64 && LA60_0<=65)||(LA60_0>=68 && LA60_0<=70)||(LA60_0>=104 && LA60_0<=105)||(LA60_0>=108 && LA60_0<=113)) ) {
                alt60=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2365:1: variableInitializer returns [Node returnNode] : (arrayInitializerGen+= arrayInitializer | expressionGen+= expression );", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2366:3: arrayInitializerGen+= arrayInitializer
                    {
                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer1939);
                    arrayInitializerGen=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_arrayInitializerGen==null) list_arrayInitializerGen=new ArrayList();
                    list_arrayInitializerGen.add(arrayInitializerGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableInitializerReturnNode.setKind("variableInitializer");
                      	    // Create a CST Node
                      		if(list_arrayInitializerGen != null) {
                      	        for(Iterator it = list_arrayInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arrayInitializer");
                      	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableInitializerReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2384:9: expressionGen+= expression
                    {
                    pushFollow(FOLLOW_expression_in_variableInitializer1955);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableInitializerReturnNode.setKind("variableInitializer");
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableInitializerReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 44, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableInitializer

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start arrayInitializer
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2404:1: arrayInitializer returns [Node returnNode] : TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}' ;
    public final arrayInitializer_return arrayInitializer() throws RecognitionException {
        arrayInitializer_return retval = new arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_variableInitializerGen=null;
        List list_variableInitializerGen_1=null;
        RuleReturnScope variableInitializerGen = null;
        RuleReturnScope variableInitializerGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:1: (TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:3: TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_arrayInitializer1977); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:12: (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Identifier||(LA63_0>=FloatingPointLiteral && LA63_0<=DecimalLiteral)||LA63_0==33||LA63_0==37||LA63_0==40||(LA63_0>=55 && LA63_0<=62)||(LA63_0>=64 && LA63_0<=65)||(LA63_0>=68 && LA63_0<=70)||(LA63_0>=104 && LA63_0<=105)||(LA63_0>=108 && LA63_0<=113)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:13: variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1982);
                    variableInitializerGen=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                    list_variableInitializerGen.add(variableInitializerGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:57: (TK_1= ',' variableInitializerGen_1+= variableInitializer )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==34) ) {
                            int LA61_1 = input.LA(2);

                            if ( (LA61_1==Identifier||(LA61_1>=FloatingPointLiteral && LA61_1<=DecimalLiteral)||LA61_1==33||LA61_1==37||LA61_1==40||(LA61_1>=55 && LA61_1<=62)||(LA61_1>=64 && LA61_1<=65)||(LA61_1>=68 && LA61_1<=70)||(LA61_1>=104 && LA61_1<=105)||(LA61_1>=108 && LA61_1<=113)) ) {
                                alt61=1;
                            }


                        }


                        switch (alt61) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:58: TK_1= ',' variableInitializerGen_1+= variableInitializer
                    	    {
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,34,FOLLOW_34_in_arrayInitializer1987); if (failed) return retval;
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1991);
                    	    variableInitializerGen_1=variableInitializer();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_variableInitializerGen_1==null) list_variableInitializerGen_1=new ArrayList();
                    	    list_variableInitializerGen_1.add(variableInitializerGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:115: (TK_2= ',' )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==34) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2405:116: TK_2= ','
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,34,FOLLOW_34_in_arrayInitializer1998); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            TK_3=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_arrayInitializer2007); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node arrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayInitializerReturnNode.setKind("arrayInitializer");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_variableInitializerGen != null) {
              	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableInitializer");
              	            	arrayInitializerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal variableInitializerGen_1 aggregation
              		if(list_variableInitializerGen_1 != null) {
              	    for(int pos = 0; pos < list_variableInitializerGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_variableInitializerGen_1 != null) {		
              	    	JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) list_variableInitializerGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("variableInitializer");
              	    		arrayInitializerReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayInitializerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 45, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arrayInitializer

    public static class modifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start modifier
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2476:1: modifier returns [Node returnNode] : (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' );
    public final modifier_return modifier() throws RecognitionException {
        modifier_return retval = new modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Token TK_0=null;
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2477:1: (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' )
            int alt64=12;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt64=1;
                }
                break;
            case 45:
                {
                alt64=2;
                }
                break;
            case 46:
                {
                alt64=3;
                }
                break;
            case 47:
                {
                alt64=4;
                }
                break;
            case 27:
                {
                alt64=5;
                }
                break;
            case 48:
                {
                alt64=6;
                }
                break;
            case 49:
                {
                alt64=7;
                }
                break;
            case 50:
                {
                alt64=8;
                }
                break;
            case 51:
                {
                alt64=9;
                }
                break;
            case 52:
                {
                alt64=10;
                }
                break;
            case 53:
                {
                alt64=11;
                }
                break;
            case 54:
                {
                alt64=12;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2476:1: modifier returns [Node returnNode] : (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' );", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2477:5: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_modifier2030);
                    annotationGen=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	modifierReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2495:9: TK_0= 'public'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,45,FOLLOW_45_in_modifier2046); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2512:9: TK_0= 'protected'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,46,FOLLOW_46_in_modifier2062); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2529:9: TK_0= 'private'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,47,FOLLOW_47_in_modifier2078); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2546:9: TK_0= 'static'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,27,FOLLOW_27_in_modifier2094); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2563:9: TK_0= 'abstract'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,48,FOLLOW_48_in_modifier2110); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2580:9: TK_0= 'final'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_modifier2126); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2597:9: TK_0= 'native'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_modifier2142); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2614:9: TK_0= 'synchronized'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_modifier2158); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2631:9: TK_0= 'transient'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,52,FOLLOW_52_in_modifier2174); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2648:9: TK_0= 'volatile'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_modifier2190); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2665:9: TK_0= 'strictfp'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_modifier2206); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 46, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end modifier

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start packageOrTypeName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2684:1: packageOrTypeName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        packageOrTypeName_return retval = new packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2230); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==28) ) {
                    int LA65_1 = input.LA(2);

                    if ( (LA65_1==Identifier) ) {
                        int LA65_2 = input.LA(3);

                        if ( (synpred85()) ) {
                            alt65=1;
                        }


                    }


                }


                switch (alt65) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_packageOrTypeName2235); if (failed) return retval;
            	    IdentifierGen_1_List=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2239); if (failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node packageOrTypeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packageOrTypeNameReturnNode.setKind("packageOrTypeName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			packageOrTypeNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	
              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		packageOrTypeNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			packageOrTypeNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packageOrTypeNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 47, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end packageOrTypeName

    public static class enumConstantName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start enumConstantName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2730:1: enumConstantName returns [Node returnNode] : IdentifierGen= Identifier ;
    public final enumConstantName_return enumConstantName() throws RecognitionException {
        enumConstantName_return retval = new enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Token IdentifierGen=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2731:1: (IdentifierGen= Identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2731:5: IdentifierGen= Identifier
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2264); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node enumConstantNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantNameReturnNode.setKind("enumConstantName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumConstantNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 48, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumConstantName

    public static class typeName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2750:1: typeName returns [Node returnNode] : (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier );
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_packageOrTypeNameGen=null;
        RuleReturnScope packageOrTypeNameGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2751:1: (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==EOF) ) {
                    alt66=1;
                }
                else if ( (LA66_1==28) ) {
                    alt66=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("2750:1: typeName returns [Node returnNode] : (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier );", 66, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2750:1: typeName returns [Node returnNode] : (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier );", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2751:5: IdentifierGen= Identifier
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_typeName2290); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeNameReturnNode.setKind("typeName");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeNameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2768:9: packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier
                    {
                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2306);
                    packageOrTypeNameGen=packageOrTypeName();
                    _fsp--;
                    if (failed) return retval;
                    if (list_packageOrTypeNameGen==null) list_packageOrTypeNameGen=new ArrayList();
                    list_packageOrTypeNameGen.add(packageOrTypeNameGen);

                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_typeName2310); if (failed) return retval;
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_typeName2314); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeNameReturnNode.setKind("typeName");
                      	    // Create a CST Node
                      		if(list_packageOrTypeNameGen != null) {
                      	        for(Iterator it = list_packageOrTypeNameGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.packageOrTypeName_return r = (JavaParser.packageOrTypeName_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("packageOrTypeName");
                      	            	typeNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeNameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 49, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeName

    public static class type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start type
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2806:1: type returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;
        List list_typeArgumentsGen=null;
        List list_typeArgumentsGen_1=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope typeArgumentsGen = null;
        RuleReturnScope typeArgumentsGen_1 = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:1: (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Identifier) ) {
                alt72=1;
            }
            else if ( ((LA72_0>=55 && LA72_0<=62)) ) {
                alt72=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2806:1: type returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* );", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:3: IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )*
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_type2335); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:28: (typeArgumentsGen+= typeArguments )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==33) ) {
                        int LA67_1 = input.LA(2);

                        if ( (LA67_1==Identifier||(LA67_1>=55 && LA67_1<=63)) ) {
                            alt67=1;
                        }
                    }
                    switch (alt67) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:29: typeArgumentsGen+= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type2340);
                            typeArgumentsGen=typeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_typeArgumentsGen==null) list_typeArgumentsGen=new ArrayList();
                            list_typeArgumentsGen.add(typeArgumentsGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:63: (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==28) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:64: TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )?
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_type2347); if (failed) return retval;
                    	    IdentifierGen_1_List=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_type2351); if (failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);

                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:106: (typeArgumentsGen_1+= typeArguments )?
                    	    int alt68=2;
                    	    int LA68_0 = input.LA(1);

                    	    if ( (LA68_0==33) ) {
                    	        int LA68_1 = input.LA(2);

                    	        if ( (LA68_1==Identifier||(LA68_1>=55 && LA68_1<=63)) ) {
                    	            alt68=1;
                    	        }
                    	    }
                    	    switch (alt68) {
                    	        case 1 :
                    	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:107: typeArgumentsGen_1+= typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type2356);
                    	            typeArgumentsGen_1=typeArguments();
                    	            _fsp--;
                    	            if (failed) return retval;
                    	            if (list_typeArgumentsGen_1==null) list_typeArgumentsGen_1=new ArrayList();
                    	            list_typeArgumentsGen_1.add(typeArgumentsGen_1);


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:146: (TK_1= '[' TK_2= ']' )*
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);

                        if ( (LA70_0==41) ) {
                            alt70=1;
                        }


                        switch (alt70) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2807:147: TK_1= '[' TK_2= ']'
                    	    {
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_type2366); if (failed) return retval;
                    	    TK_2=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_type2370); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_typeArgumentsGen != null) {
                      	        for(Iterator it = list_typeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeArguments");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	
                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			typeReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_typeArgumentsGen_1 != null) {		
                      	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) list_typeArgumentsGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("typeArguments");
                      	    		typeReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}
                      	
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2868:4: primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2383);
                    primitiveTypeGen=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2868:36: (TK_0= '[' TK_1= ']' )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==41) ) {
                            alt71=1;
                        }


                        switch (alt71) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2868:37: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_type2388); if (failed) return retval;
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_type2392); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 50, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end type

    public static class primitiveType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start primitiveType
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2888:1: primitiveType returns [Node returnNode] : (TK_0= 'boolean' | TK_0= 'char' | TK_0= 'byte' | TK_0= 'short' | TK_0= 'int' | TK_0= 'long' | TK_0= 'float' | TK_0= 'double' );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2889:1: (TK_0= 'boolean' | TK_0= 'char' | TK_0= 'byte' | TK_0= 'short' | TK_0= 'int' | TK_0= 'long' | TK_0= 'float' | TK_0= 'double' )
            int alt73=8;
            switch ( input.LA(1) ) {
            case 55:
                {
                alt73=1;
                }
                break;
            case 56:
                {
                alt73=2;
                }
                break;
            case 57:
                {
                alt73=3;
                }
                break;
            case 58:
                {
                alt73=4;
                }
                break;
            case 59:
                {
                alt73=5;
                }
                break;
            case 60:
                {
                alt73=6;
                }
                break;
            case 61:
                {
                alt73=7;
                }
                break;
            case 62:
                {
                alt73=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2888:1: primitiveType returns [Node returnNode] : (TK_0= 'boolean' | TK_0= 'char' | TK_0= 'byte' | TK_0= 'short' | TK_0= 'int' | TK_0= 'long' | TK_0= 'float' | TK_0= 'double' );", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2889:5: TK_0= 'boolean'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_primitiveType2417); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2906:7: TK_0= 'char'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,56,FOLLOW_56_in_primitiveType2431); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2923:7: TK_0= 'byte'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,57,FOLLOW_57_in_primitiveType2445); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2940:7: TK_0= 'short'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,58,FOLLOW_58_in_primitiveType2459); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2957:7: TK_0= 'int'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_primitiveType2473); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2974:7: TK_0= 'long'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,60,FOLLOW_60_in_primitiveType2487); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2991:7: TK_0= 'float'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,61,FOLLOW_61_in_primitiveType2501); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3008:7: TK_0= 'double'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_primitiveType2515); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 51, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end primitiveType

    public static class variableModifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variableModifier
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3027:1: variableModifier returns [Node returnNode] : (TK_0= 'final' | annotationGen+= annotation );
    public final variableModifier_return variableModifier() throws RecognitionException {
        variableModifier_return retval = new variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Token TK_0=null;
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3028:1: (TK_0= 'final' | annotationGen+= annotation )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==49) ) {
                alt74=1;
            }
            else if ( (LA74_0==71) ) {
                alt74=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3027:1: variableModifier returns [Node returnNode] : (TK_0= 'final' | annotationGen+= annotation );", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3028:3: TK_0= 'final'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_variableModifier2539); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableModifierReturnNode.setKind("variableModifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		variableModifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableModifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3045:9: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_variableModifier2555);
                    annotationGen=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableModifierReturnNode.setKind("variableModifier");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	variableModifierReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableModifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 52, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableModifier

    public static class typeArguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeArguments
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3065:1: typeArguments returns [Node returnNode] : TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>' ;
    public final typeArguments_return typeArguments() throws RecognitionException {
        typeArguments_return retval = new typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeArgumentGen=null;
        List list_typeArgumentGen_1=null;
        RuleReturnScope typeArgumentGen = null;
        RuleReturnScope typeArgumentGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3066:1: (TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3066:3: TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>'
            {
            TK_0=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_typeArguments2576); if (failed) return retval;
            pushFollow(FOLLOW_typeArgument_in_typeArguments2580);
            typeArgumentGen=typeArgument();
            _fsp--;
            if (failed) return retval;
            if (list_typeArgumentGen==null) list_typeArgumentGen=new ArrayList();
            list_typeArgumentGen.add(typeArgumentGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3066:42: (TK_1= ',' typeArgumentGen_1+= typeArgument )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==34) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3066:43: TK_1= ',' typeArgumentGen_1+= typeArgument
            	    {
            	    TK_1=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeArguments2585); if (failed) return retval;
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2589);
            	    typeArgumentGen_1=typeArgument();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_typeArgumentGen_1==null) list_typeArgumentGen_1=new ArrayList();
            	    list_typeArgumentGen_1.add(typeArgumentGen_1);


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            TK_2=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_typeArguments2595); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node typeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeArgumentsReturnNode.setKind("typeArguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeArgumentGen != null) {
              	        for(Iterator it = list_typeArgumentGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeArgument");
              	            	typeArgumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal typeArgumentGen_1 aggregation
              		if(list_typeArgumentGen_1 != null) {
              	    for(int pos = 0; pos < list_typeArgumentGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeArgumentGen_1 != null) {		
              	    	JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) list_typeArgumentGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeArgument");
              	    		typeArgumentsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeArgumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 53, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeArguments

    public static class typeArgument_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start typeArgument
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3128:1: typeArgument returns [Node returnNode] : (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? );
    public final typeArgument_return typeArgument() throws RecognitionException {
        typeArgument_return retval = new typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeGen=null;
        RuleReturnScope typeGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3129:1: (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier||(LA78_0>=55 && LA78_0<=62)) ) {
                alt78=1;
            }
            else if ( (LA78_0==63) ) {
                alt78=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3128:1: typeArgument returns [Node returnNode] : (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? );", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3129:3: typeGen+= type
                    {
                    pushFollow(FOLLOW_type_in_typeArgument2617);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeArgumentReturnNode.setKind("typeArgument");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeArgumentReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:4: TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,63,FOLLOW_63_in_typeArgument2628); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:13: ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==31||LA77_0==64) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:14: (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type
                            {
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:14: (TK_1= 'extends' | TK_2= 'super' )
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==31) ) {
                                alt76=1;
                            }
                            else if ( (LA76_0==64) ) {
                                alt76=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("3147:14: (TK_1= 'extends' | TK_2= 'super' )", 76, 0, input);

                                throw nvae;
                            }
                            switch (alt76) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:15: TK_1= 'extends'
                                    {
                                    TK_1=(Token)input.LT(1);
                                    match(input,31,FOLLOW_31_in_typeArgument2634); if (failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3147:32: TK_2= 'super'
                                    {
                                    TK_2=(Token)input.LT(1);
                                    match(input,64,FOLLOW_64_in_typeArgument2640); if (failed) return retval;

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument2645);
                            typeGen=type();
                            _fsp--;
                            if (failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeArgumentReturnNode.setKind("typeArgument");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeArgumentReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 54, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeArgument

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start qualifiedNameList
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3194:1: qualifiedNameList returns [Node returnNode] : qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )* ;
    public final qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        qualifiedNameList_return retval = new qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Token TK_0=null;
        List list_qualifiedNameGen=null;
        List list_qualifiedNameGen_1=null;
        RuleReturnScope qualifiedNameGen = null;
        RuleReturnScope qualifiedNameGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3195:1: (qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3195:3: qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )*
            {
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2669);
            qualifiedNameGen=qualifiedName();
            _fsp--;
            if (failed) return retval;
            if (list_qualifiedNameGen==null) list_qualifiedNameGen=new ArrayList();
            list_qualifiedNameGen.add(qualifiedNameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3195:35: (TK_0= ',' qualifiedNameGen_1+= qualifiedName )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==34) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3195:36: TK_0= ',' qualifiedNameGen_1+= qualifiedName
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_qualifiedNameList2674); if (failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2678);
            	    qualifiedNameGen_1=qualifiedName();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_qualifiedNameGen_1==null) list_qualifiedNameGen_1=new ArrayList();
            	    list_qualifiedNameGen_1.add(qualifiedNameGen_1);


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node qualifiedNameListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		qualifiedNameListReturnNode.setKind("qualifiedNameList");
              	    // Create a CST Node
              		if(list_qualifiedNameGen != null) {
              	        for(Iterator it = list_qualifiedNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedName");
              	            	qualifiedNameListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal qualifiedNameGen_1 aggregation
              		if(list_qualifiedNameGen_1 != null) {
              	    for(int pos = 0; pos < list_qualifiedNameGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		qualifiedNameListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_qualifiedNameGen_1 != null) {		
              	    	JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) list_qualifiedNameGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("qualifiedName");
              	    		qualifiedNameListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = qualifiedNameListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 55, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedNameList

    public static class formalParameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start formalParameters
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3239:1: formalParameters returns [Node returnNode] : TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')' ;
    public final formalParameters_return formalParameters() throws RecognitionException {
        formalParameters_return retval = new formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParameterDeclsGen=null;
        RuleReturnScope formalParameterDeclsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3240:1: (TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3240:3: TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')'
            {
            TK_0=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_formalParameters2702); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3240:35: (formalParameterDeclsGen+= formalParameterDecls )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==Identifier||LA80_0==49||(LA80_0>=55 && LA80_0<=62)||LA80_0==71) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: formalParameterDeclsGen+= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2706);
                    formalParameterDeclsGen=formalParameterDecls();
                    _fsp--;
                    if (failed) return retval;
                    if (list_formalParameterDeclsGen==null) list_formalParameterDeclsGen=new ArrayList();
                    list_formalParameterDeclsGen.add(formalParameterDeclsGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_formalParameters2711); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node formalParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParametersReturnNode.setKind("formalParameters");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_formalParameterDeclsGen != null) {
              	        for(Iterator it = list_formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameterDecls");
              	            	formalParametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 56, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameters

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start formalParameterDecls
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3278:1: formalParameterDecls returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )? ;
    public final formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        formalParameterDecls_return retval = new formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_formalParameterDeclsRestGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope formalParameterDeclsRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3279:1: ( (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3279:3: (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3279:22: (variableModifierGen+= variableModifier )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==49||LA81_0==71) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2733);
            	    variableModifierGen=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen);


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2738);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3279:83: (formalParameterDeclsRestGen+= formalParameterDeclsRest )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==Identifier||LA82_0==67) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: formalParameterDeclsRestGen+= formalParameterDeclsRest
                    {
                    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2742);
                    formalParameterDeclsRestGen=formalParameterDeclsRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_formalParameterDeclsRestGen==null) list_formalParameterDeclsRestGen=new ArrayList();
                    list_formalParameterDeclsRestGen.add(formalParameterDeclsRestGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node formalParameterDeclsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParameterDeclsReturnNode.setKind("formalParameterDecls");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParameterDeclsRestGen != null) {
              	        for(Iterator it = list_formalParameterDeclsRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameterDeclsRest_return r = (JavaParser.formalParameterDeclsRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameterDeclsRest");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParameterDeclsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 57, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameterDecls

    public static class formalParameterDeclsRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start formalParameterDeclsRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3319:1: formalParameterDeclsRest returns [Node returnNode] : (variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )? | TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId );
    public final formalParameterDeclsRest_return formalParameterDeclsRest() throws RecognitionException {
        formalParameterDeclsRest_return retval = new formalParameterDeclsRest_return();
        retval.start = input.LT(1);
        int formalParameterDeclsRest_StartIndex = input.index();
        Token TK_0=null;
        List list_variableDeclaratorIdGen=null;
        List list_formalParameterDeclsGen=null;
        RuleReturnScope variableDeclaratorIdGen = null;
        RuleReturnScope formalParameterDeclsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3320:1: (variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )? | TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==Identifier) ) {
                alt84=1;
            }
            else if ( (LA84_0==67) ) {
                alt84=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3319:1: formalParameterDeclsRest returns [Node returnNode] : (variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )? | TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId );", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3320:3: variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2765);
                    variableDeclaratorIdGen=variableDeclaratorId();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
                    list_variableDeclaratorIdGen.add(variableDeclaratorIdGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3320:49: (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==34) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3320:50: TK_0= ',' formalParameterDeclsGen+= formalParameterDecls
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,34,FOLLOW_34_in_formalParameterDeclsRest2770); if (failed) return retval;
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2774);
                            formalParameterDeclsGen=formalParameterDecls();
                            _fsp--;
                            if (failed) return retval;
                            if (list_formalParameterDeclsGen==null) list_formalParameterDeclsGen=new ArrayList();
                            list_formalParameterDeclsGen.add(formalParameterDeclsGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
                      	    // Create a CST Node
                      		if(list_variableDeclaratorIdGen != null) {
                      	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclaratorId");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_formalParameterDeclsGen != null) {
                      	        for(Iterator it = list_formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("formalParameterDecls");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = formalParameterDeclsRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3357:6: TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_formalParameterDeclsRest2789); if (failed) return retval;
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2793);
                    variableDeclaratorIdGen=variableDeclaratorId();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
                    list_variableDeclaratorIdGen.add(variableDeclaratorIdGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableDeclaratorIdGen != null) {
                      	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclaratorId");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = formalParameterDeclsRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 58, formalParameterDeclsRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameterDeclsRest

    public static class methodBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start methodBody
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3386:1: methodBody returns [Node returnNode] : blockGen+= block ;
    public final methodBody_return methodBody() throws RecognitionException {
        methodBody_return retval = new methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        List list_blockGen=null;
        RuleReturnScope blockGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3387:1: (blockGen+= block )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3387:3: blockGen+= block
            {
            pushFollow(FOLLOW_block_in_methodBody2815);
            blockGen=block();
            _fsp--;
            if (failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node methodBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodBodyReturnNode.setKind("methodBody");
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	methodBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 59, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end methodBody

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start qualifiedName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3407:1: qualifiedName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final qualifiedName_return qualifiedName() throws RecognitionException {
        qualifiedName_return retval = new qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3408:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3408:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2836); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3408:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==28) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3408:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_qualifiedName2841); if (failed) return retval;
            	    IdentifierGen_1_List=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2845); if (failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node qualifiedNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		qualifiedNameReturnNode.setKind("qualifiedName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			qualifiedNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	
              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		qualifiedNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			qualifiedNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = qualifiedNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 60, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedName

    public static class literal_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start literal
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3453:1: literal returns [Node returnNode] : (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Token FloatingPointLiteralGen=null;
        Token CharacterLiteralGen=null;
        Token StringLiteralGen=null;
        Token TK_0=null;
        List list_integerLiteralGen=null;
        List list_booleanLiteralGen=null;
        RuleReturnScope integerLiteralGen = null;
        RuleReturnScope booleanLiteralGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3454:1: (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' )
            int alt86=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt86=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt86=2;
                }
                break;
            case CharacterLiteral:
                {
                alt86=3;
                }
                break;
            case StringLiteral:
                {
                alt86=4;
                }
                break;
            case 69:
            case 70:
                {
                alt86=5;
                }
                break;
            case 68:
                {
                alt86=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3453:1: literal returns [Node returnNode] : (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3454:5: integerLiteralGen+= integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal2871);
                    integerLiteralGen=integerLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if (list_integerLiteralGen==null) list_integerLiteralGen=new ArrayList();
                    list_integerLiteralGen.add(integerLiteralGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Node
                      		if(list_integerLiteralGen != null) {
                      	        for(Iterator it = list_integerLiteralGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.integerLiteral_return r = (JavaParser.integerLiteral_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("integerLiteral");
                      	            	literalReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3472:9: FloatingPointLiteralGen= FloatingPointLiteral
                    {
                    FloatingPointLiteralGen=(Token)input.LT(1);
                    match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal2887); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(FloatingPointLiteralGen != null) {
                      			Leaf FloatingPointLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			FloatingPointLiteralGenLeaf.setKind("FloatingPointLiteral");
                      			FloatingPointLiteralGenLeaf.setValue(FloatingPointLiteralGen.getText());
                      			FloatingPointLiteralGenLeaf.setPos(FloatingPointLiteralGen.getCharPositionInLine());
                      			FloatingPointLiteralGenLeaf.setLine(FloatingPointLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(FloatingPointLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3489:9: CharacterLiteralGen= CharacterLiteral
                    {
                    CharacterLiteralGen=(Token)input.LT(1);
                    match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal2903); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(CharacterLiteralGen != null) {
                      			Leaf CharacterLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CharacterLiteralGenLeaf.setKind("CharacterLiteral");
                      			CharacterLiteralGenLeaf.setValue(CharacterLiteralGen.getText());
                      			CharacterLiteralGenLeaf.setPos(CharacterLiteralGen.getCharPositionInLine());
                      			CharacterLiteralGenLeaf.setLine(CharacterLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(CharacterLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3506:9: StringLiteralGen= StringLiteral
                    {
                    StringLiteralGen=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal2919); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(StringLiteralGen != null) {
                      			Leaf StringLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			StringLiteralGenLeaf.setKind("StringLiteral");
                      			StringLiteralGenLeaf.setValue(StringLiteralGen.getText());
                      			StringLiteralGenLeaf.setPos(StringLiteralGen.getCharPositionInLine());
                      			StringLiteralGenLeaf.setLine(StringLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(StringLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3523:9: booleanLiteralGen+= booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal2935);
                    booleanLiteralGen=booleanLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if (list_booleanLiteralGen==null) list_booleanLiteralGen=new ArrayList();
                    list_booleanLiteralGen.add(booleanLiteralGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Node
                      		if(list_booleanLiteralGen != null) {
                      	        for(Iterator it = list_booleanLiteralGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.booleanLiteral_return r = (JavaParser.booleanLiteral_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("booleanLiteral");
                      	            	literalReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3541:9: TK_0= 'null'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_literal2951); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		literalReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 61, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end literal

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start integerLiteral
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3560:1: integerLiteral returns [Node returnNode] : (HexLiteralGen= HexLiteral | OctalLiteralGen= OctalLiteral | DecimalLiteralGen= DecimalLiteral );
    public final integerLiteral_return integerLiteral() throws RecognitionException {
        integerLiteral_return retval = new integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Token HexLiteralGen=null;
        Token OctalLiteralGen=null;
        Token DecimalLiteralGen=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3561:1: (HexLiteralGen= HexLiteral | OctalLiteralGen= OctalLiteral | DecimalLiteralGen= DecimalLiteral )
            int alt87=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt87=1;
                }
                break;
            case OctalLiteral:
                {
                alt87=2;
                }
                break;
            case DecimalLiteral:
                {
                alt87=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3560:1: integerLiteral returns [Node returnNode] : (HexLiteralGen= HexLiteral | OctalLiteralGen= OctalLiteral | DecimalLiteralGen= DecimalLiteral );", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3561:5: HexLiteralGen= HexLiteral
                    {
                    HexLiteralGen=(Token)input.LT(1);
                    match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral2974); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(HexLiteralGen != null) {
                      			Leaf HexLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			HexLiteralGenLeaf.setKind("HexLiteral");
                      			HexLiteralGenLeaf.setValue(HexLiteralGen.getText());
                      			HexLiteralGenLeaf.setPos(HexLiteralGen.getCharPositionInLine());
                      			HexLiteralGenLeaf.setLine(HexLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(HexLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3578:9: OctalLiteralGen= OctalLiteral
                    {
                    OctalLiteralGen=(Token)input.LT(1);
                    match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral2990); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(OctalLiteralGen != null) {
                      			Leaf OctalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			OctalLiteralGenLeaf.setKind("OctalLiteral");
                      			OctalLiteralGenLeaf.setValue(OctalLiteralGen.getText());
                      			OctalLiteralGenLeaf.setPos(OctalLiteralGen.getCharPositionInLine());
                      			OctalLiteralGenLeaf.setLine(OctalLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(OctalLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3595:9: DecimalLiteralGen= DecimalLiteral
                    {
                    DecimalLiteralGen=(Token)input.LT(1);
                    match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral3006); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(DecimalLiteralGen != null) {
                      			Leaf DecimalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DecimalLiteralGenLeaf.setKind("DecimalLiteral");
                      			DecimalLiteralGenLeaf.setValue(DecimalLiteralGen.getText());
                      			DecimalLiteralGenLeaf.setPos(DecimalLiteralGen.getCharPositionInLine());
                      			DecimalLiteralGenLeaf.setLine(DecimalLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(DecimalLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 62, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end integerLiteral

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start booleanLiteral
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3614:1: booleanLiteral returns [Node returnNode] : (TK_0= 'true' | TK_0= 'false' );
    public final booleanLiteral_return booleanLiteral() throws RecognitionException {
        booleanLiteral_return retval = new booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3615:1: (TK_0= 'true' | TK_0= 'false' )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==69) ) {
                alt88=1;
            }
            else if ( (LA88_0==70) ) {
                alt88=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3614:1: booleanLiteral returns [Node returnNode] : (TK_0= 'true' | TK_0= 'false' );", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3615:5: TK_0= 'true'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_booleanLiteral3032); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		booleanLiteralReturnNode.setKind("booleanLiteral");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = booleanLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3632:9: TK_0= 'false'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,70,FOLLOW_70_in_booleanLiteral3048); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		booleanLiteralReturnNode.setKind("booleanLiteral");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = booleanLiteralReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 63, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end booleanLiteral

    public static class annotations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotations
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3653:1: annotations returns [Node returnNode] : (annotationGen+= annotation )+ ;
    public final annotations_return annotations() throws RecognitionException {
        annotations_return retval = new annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3654:1: ( (annotationGen+= annotation )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3654:3: (annotationGen+= annotation )+
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3654:16: (annotationGen+= annotation )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==71) ) {
                    int LA89_3 = input.LA(2);

                    if ( (LA89_3==Identifier) ) {
                        int LA89_22 = input.LA(3);

                        if ( (synpred120()) ) {
                            alt89=1;
                        }


                    }


                }


                switch (alt89) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: annotationGen+= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3074);
            	    annotationGen=annotation();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_annotationGen==null) list_annotationGen=new ArrayList();
            	    list_annotationGen.add(annotationGen);


            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationsReturnNode.setKind("annotations");
              	    // Create a CST Node
              		if(list_annotationGen != null) {
              	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotation");
              	            	annotationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 64, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotations

    public static class annotation_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotation
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3674:1: annotation returns [Node returnNode] : TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )? ;
    public final annotation_return annotation() throws RecognitionException {
        annotation_return retval = new annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_annotationNameGen=null;
        List list_elementValuePairsGen=null;
        RuleReturnScope annotationNameGen = null;
        RuleReturnScope elementValuePairsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3675:1: (TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3675:3: TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )?
            {
            TK_0=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_annotation3096); if (failed) return retval;
            pushFollow(FOLLOW_annotationName_in_annotation3100);
            annotationNameGen=annotationName();
            _fsp--;
            if (failed) return retval;
            if (list_annotationNameGen==null) list_annotationNameGen=new ArrayList();
            list_annotationNameGen.add(annotationNameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3675:46: (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==65) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3675:47: TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_annotation3105); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3675:76: (elementValuePairsGen+= elementValuePairs )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==Identifier||(LA90_0>=FloatingPointLiteral && LA90_0<=DecimalLiteral)||LA90_0==33||LA90_0==37||LA90_0==40||(LA90_0>=55 && LA90_0<=62)||(LA90_0>=64 && LA90_0<=65)||(LA90_0>=68 && LA90_0<=71)||(LA90_0>=104 && LA90_0<=105)||(LA90_0>=108 && LA90_0<=113)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: elementValuePairsGen+= elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3109);
                            elementValuePairsGen=elementValuePairs();
                            _fsp--;
                            if (failed) return retval;
                            if (list_elementValuePairsGen==null) list_elementValuePairsGen=new ArrayList();
                            list_elementValuePairsGen.add(elementValuePairsGen);


                            }
                            break;

                    }

                    TK_2=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_annotation3114); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationReturnNode.setKind("annotation");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_annotationNameGen != null) {
              	        for(Iterator it = list_annotationNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationName_return r = (JavaParser.annotationName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationName");
              	            	annotationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValuePairsGen != null) {
              	        for(Iterator it = list_elementValuePairsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValuePairs_return r = (JavaParser.elementValuePairs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValuePairs");
              	            	annotationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		annotationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 65, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotation

    public static class annotationName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3732:1: annotationName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final annotationName_return annotationName() throws RecognitionException {
        annotationName_return retval = new annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3733:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3733:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationName3138); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3733:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==28) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3733:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_annotationName3143); if (failed) return retval;
            	    IdentifierGen_1_List=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_annotationName3147); if (failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationNameReturnNode.setKind("annotationName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	
              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			annotationNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 66, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationName

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start elementValuePairs
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3778:1: elementValuePairs returns [Node returnNode] : elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )* ;
    public final elementValuePairs_return elementValuePairs() throws RecognitionException {
        elementValuePairs_return retval = new elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Token TK_0=null;
        List list_elementValuePairGen=null;
        List list_elementValuePairGen_1=null;
        RuleReturnScope elementValuePairGen = null;
        RuleReturnScope elementValuePairGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3779:1: (elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3779:3: elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )*
            {
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3171);
            elementValuePairGen=elementValuePair();
            _fsp--;
            if (failed) return retval;
            if (list_elementValuePairGen==null) list_elementValuePairGen=new ArrayList();
            list_elementValuePairGen.add(elementValuePairGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3779:41: (TK_0= ',' elementValuePairGen_1+= elementValuePair )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==34) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3779:42: TK_0= ',' elementValuePairGen_1+= elementValuePair
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_elementValuePairs3176); if (failed) return retval;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3180);
            	    elementValuePairGen_1=elementValuePair();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_elementValuePairGen_1==null) list_elementValuePairGen_1=new ArrayList();
            	    list_elementValuePairGen_1.add(elementValuePairGen_1);


            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node elementValuePairsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValuePairsReturnNode.setKind("elementValuePairs");
              	    // Create a CST Node
              		if(list_elementValuePairGen != null) {
              	        for(Iterator it = list_elementValuePairGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValuePair");
              	            	elementValuePairsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal elementValuePairGen_1 aggregation
              		if(list_elementValuePairGen_1 != null) {
              	    for(int pos = 0; pos < list_elementValuePairGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValuePairsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_elementValuePairGen_1 != null) {		
              	    	JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) list_elementValuePairGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("elementValuePair");
              	    		elementValuePairsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValuePairsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 67, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end elementValuePairs

    public static class elementValuePair_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start elementValuePair
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3823:1: elementValuePair returns [Node returnNode] : (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue ;
    public final elementValuePair_return elementValuePair() throws RecognitionException {
        elementValuePair_return retval = new elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_elementValueGen=null;
        RuleReturnScope elementValueGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3824:1: ( (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3824:3: (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3824:3: (IdentifierGen= Identifier TK_0= '=' )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==Identifier) ) {
                int LA94_1 = input.LA(2);

                if ( (LA94_1==44) ) {
                    alt94=1;
                }
            }
            switch (alt94) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3824:4: IdentifierGen= Identifier TK_0= '='
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3205); if (failed) return retval;
                    TK_0=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_elementValuePair3209); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3215);
            elementValueGen=elementValue();
            _fsp--;
            if (failed) return retval;
            if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
            list_elementValueGen.add(elementValueGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node elementValuePairReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValuePairReturnNode.setKind("elementValuePair");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			elementValuePairReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValuePairReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	elementValuePairReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValuePairReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 68, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end elementValuePair

    public static class elementValue_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start elementValue
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3862:1: elementValue returns [Node returnNode] : (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer );
    public final elementValue_return elementValue() throws RecognitionException {
        elementValue_return retval = new elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        List list_conditionalExpressionGen=null;
        List list_annotationGen=null;
        List list_elementValueArrayInitializerGen=null;
        RuleReturnScope conditionalExpressionGen = null;
        RuleReturnScope annotationGen = null;
        RuleReturnScope elementValueArrayInitializerGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3863:1: (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer )
            int alt95=3;
            switch ( input.LA(1) ) {
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt95=1;
                }
                break;
            case 71:
                {
                alt95=2;
                }
                break;
            case 37:
                {
                alt95=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3862:1: elementValue returns [Node returnNode] : (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer );", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3863:3: conditionalExpressionGen+= conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3237);
                    conditionalExpressionGen=conditionalExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_conditionalExpressionGen==null) list_conditionalExpressionGen=new ArrayList();
                    list_conditionalExpressionGen.add(conditionalExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_conditionalExpressionGen != null) {
                      	        for(Iterator it = list_conditionalExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("conditionalExpression");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3881:6: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_elementValue3250);
                    annotationGen=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3899:6: elementValueArrayInitializerGen+= elementValueArrayInitializer
                    {
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3263);
                    elementValueArrayInitializerGen=elementValueArrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_elementValueArrayInitializerGen==null) list_elementValueArrayInitializerGen=new ArrayList();
                    list_elementValueArrayInitializerGen.add(elementValueArrayInitializerGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_elementValueArrayInitializerGen != null) {
                      	        for(Iterator it = list_elementValueArrayInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.elementValueArrayInitializer_return r = (JavaParser.elementValueArrayInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("elementValueArrayInitializer");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 69, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end elementValue

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start elementValueArrayInitializer
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3919:1: elementValueArrayInitializer returns [Node returnNode] : TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}' ;
    public final elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        elementValueArrayInitializer_return retval = new elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_elementValueGen=null;
        List list_elementValueGen_1=null;
        RuleReturnScope elementValueGen = null;
        RuleReturnScope elementValueGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:1: (TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:3: TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_elementValueArrayInitializer3285); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:12: (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Identifier||(LA97_0>=FloatingPointLiteral && LA97_0<=DecimalLiteral)||LA97_0==33||LA97_0==37||LA97_0==40||(LA97_0>=55 && LA97_0<=62)||(LA97_0>=64 && LA97_0<=65)||(LA97_0>=68 && LA97_0<=71)||(LA97_0>=104 && LA97_0<=105)||(LA97_0>=108 && LA97_0<=113)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:13: elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3290);
                    elementValueGen=elementValue();
                    _fsp--;
                    if (failed) return retval;
                    if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
                    list_elementValueGen.add(elementValueGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:43: (TK_1= ',' elementValueGen_1+= elementValue )*
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==34) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3920:44: TK_1= ',' elementValueGen_1+= elementValue
                    	    {
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,34,FOLLOW_34_in_elementValueArrayInitializer3295); if (failed) return retval;
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3299);
                    	    elementValueGen_1=elementValue();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_elementValueGen_1==null) list_elementValueGen_1=new ArrayList();
                    	    list_elementValueGen_1.add(elementValueGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop96;
                        }
                    } while (true);


                    }
                    break;

            }

            TK_2=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_elementValueArrayInitializer3308); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node elementValueArrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValueArrayInitializerReturnNode.setKind("elementValueArrayInitializer");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal elementValueGen_1 aggregation
              		if(list_elementValueGen_1 != null) {
              	    for(int pos = 0; pos < list_elementValueGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_elementValueGen_1 != null) {		
              	    	JavaParser.elementValue_return r = (JavaParser.elementValue_return) list_elementValueGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("elementValue");
              	    		elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValueArrayInitializerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 70, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end elementValueArrayInitializer

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationTypeDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3982:1: annotationTypeDeclaration returns [Node returnNode] : TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody ;
    public final annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        annotationTypeDeclaration_return retval = new annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        List list_annotationTypeBodyGen=null;
        RuleReturnScope annotationTypeBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3983:1: (TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3983:3: TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody
            {
            TK_0=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_annotationTypeDeclaration3330); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,39,FOLLOW_39_in_annotationTypeDeclaration3334); if (failed) return retval;
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3338); if (failed) return retval;
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3342);
            annotationTypeBodyGen=annotationTypeBody();
            _fsp--;
            if (failed) return retval;
            if (list_annotationTypeBodyGen==null) list_annotationTypeBodyGen=new ArrayList();
            list_annotationTypeBodyGen.add(annotationTypeBodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationTypeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeDeclarationReturnNode.setKind("annotationTypeDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationTypeDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_annotationTypeBodyGen != null) {
              	        for(Iterator it = list_annotationTypeBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeBody_return r = (JavaParser.annotationTypeBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeBody");
              	            	annotationTypeDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 71, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeDeclaration

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationTypeBody
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4030:1: annotationTypeBody returns [Node returnNode] : TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}' ;
    public final annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        annotationTypeBody_return retval = new annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_annotationTypeElementDeclarationsGen=null;
        RuleReturnScope annotationTypeElementDeclarationsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4031:1: (TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4031:3: TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_annotationTypeBody3364); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4031:12: (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( ((LA98_0>=Identifier && LA98_0<=ENUM)||LA98_0==27||LA98_0==30||LA98_0==39||(LA98_0>=45 && LA98_0<=62)||LA98_0==71) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4031:13: annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3369);
                    annotationTypeElementDeclarationsGen=annotationTypeElementDeclarations();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationTypeElementDeclarationsGen==null) list_annotationTypeElementDeclarationsGen=new ArrayList();
                    list_annotationTypeElementDeclarationsGen.add(annotationTypeElementDeclarationsGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_annotationTypeBody3375); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationTypeBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeBodyReturnNode.setKind("annotationTypeBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationTypeBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationsGen != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclarations_return r = (JavaParser.annotationTypeElementDeclarations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclarations");
              	            	annotationTypeBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationTypeBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 72, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeBody

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationTypeElementDeclarations
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4069:1: annotationTypeElementDeclarations returns [Node returnNode] : (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )* ;
    public final annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        annotationTypeElementDeclarations_return retval = new annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        List list_annotationTypeElementDeclarationGen=null;
        List list_annotationTypeElementDeclarationGen_1=null;
        RuleReturnScope annotationTypeElementDeclarationGen = null;
        RuleReturnScope annotationTypeElementDeclarationGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:1: ( (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:3: (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )*
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:3: (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:4: annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3398);
            annotationTypeElementDeclarationGen=annotationTypeElementDeclaration();
            _fsp--;
            if (failed) return retval;
            if (list_annotationTypeElementDeclarationGen==null) list_annotationTypeElementDeclarationGen=new ArrayList();
            list_annotationTypeElementDeclarationGen.add(annotationTypeElementDeclarationGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:75: (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( ((LA99_0>=Identifier && LA99_0<=ENUM)||LA99_0==27||LA99_0==30||LA99_0==39||(LA99_0>=45 && LA99_0<=62)||LA99_0==71) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4070:76: annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3404);
            	    annotationTypeElementDeclarationGen_1=annotationTypeElementDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_annotationTypeElementDeclarationGen_1==null) list_annotationTypeElementDeclarationGen_1=new ArrayList();
            	    list_annotationTypeElementDeclarationGen_1.add(annotationTypeElementDeclarationGen_1);


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationTypeElementDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeElementDeclarationsReturnNode.setKind("annotationTypeElementDeclarations");
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationGen != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclaration");
              	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationGen_1 != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclaration");
              	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeElementDeclarationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 73, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeElementDeclarations

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationTypeElementDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4100:1: annotationTypeElementDeclaration returns [Node returnNode] : (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest ;
    public final annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        annotationTypeElementDeclaration_return retval = new annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        List list_modifierGen=null;
        List list_annotationTypeElementRestGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope annotationTypeElementRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4101:1: ( (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4101:3: (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4101:3: (modifierGen+= modifier )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==71) ) {
                    int LA100_13 = input.LA(2);

                    if ( (LA100_13==Identifier) ) {
                        alt100=1;
                    }


                }
                else if ( (LA100_0==27||(LA100_0>=45 && LA100_0<=54)) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4101:4: modifierGen+= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3429);
            	    modifierGen=modifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
            	    list_modifierGen.add(modifierGen);


            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3435);
            annotationTypeElementRestGen=annotationTypeElementRest();
            _fsp--;
            if (failed) return retval;
            if (list_annotationTypeElementRestGen==null) list_annotationTypeElementRestGen=new ArrayList();
            list_annotationTypeElementRestGen.add(annotationTypeElementRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationTypeElementDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeElementDeclarationReturnNode.setKind("annotationTypeElementDeclaration");
              	    // Create a CST Node
              		if(list_modifierGen != null) {
              	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("modifier");
              	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_annotationTypeElementRestGen != null) {
              	        for(Iterator it = list_annotationTypeElementRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementRest_return r = (JavaParser.annotationTypeElementRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementRest");
              	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeElementDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 74, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeElementDeclaration

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationTypeElementRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );
    public final annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        annotationTypeElementRest_return retval = new annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_annotationMethodOrConstantRestGen=null;
        List list_classDeclarationGen=null;
        List list_interfaceDeclarationGen=null;
        List list_enumDeclarationGen=null;
        List list_annotationTypeDeclarationGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope annotationMethodOrConstantRestGen = null;
        RuleReturnScope classDeclarationGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope enumDeclarationGen = null;
        RuleReturnScope annotationTypeDeclarationGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4132:1: (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? )
            int alt105=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt105=1;
                }
                break;
            case 30:
                {
                alt105=2;
                }
                break;
            case ENUM:
                {
                int LA105_11 = input.LA(2);

                if ( (LA105_11==Identifier) ) {
                    int LA105_14 = input.LA(3);

                    if ( (synpred135()) ) {
                        alt105=2;
                    }
                    else if ( (synpred139()) ) {
                        alt105=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );", 105, 14, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );", 105, 11, input);

                    throw nvae;
                }
                }
                break;
            case 39:
                {
                alt105=3;
                }
                break;
            case 71:
                {
                int LA105_13 = input.LA(2);

                if ( (LA105_13==39) ) {
                    int LA105_15 = input.LA(3);

                    if ( (synpred137()) ) {
                        alt105=3;
                    }
                    else if ( (true) ) {
                        alt105=5;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );", 105, 15, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );", 105, 13, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("4131:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4132:3: typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';'
                    {
                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3457);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);

                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3461);
                    annotationMethodOrConstantRestGen=annotationMethodOrConstantRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationMethodOrConstantRestGen==null) list_annotationMethodOrConstantRestGen=new ArrayList();
                    list_annotationMethodOrConstantRestGen.add(annotationMethodOrConstantRestGen);

                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_annotationTypeElementRest3465); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_annotationMethodOrConstantRestGen != null) {
                      	        for(Iterator it = list_annotationMethodOrConstantRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationMethodOrConstantRest_return r = (JavaParser.annotationMethodOrConstantRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationMethodOrConstantRest");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4169:6: classDeclarationGen+= classDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3478);
                    classDeclarationGen=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4169:48: (TK_0= ';' )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==25) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_0= ';'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3482); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4196:6: interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3496);
                    interfaceDeclarationGen=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4196:56: (TK_0= ';' )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==25) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_0= ';'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3500); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4223:6: enumDeclarationGen+= enumDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3514);
                    enumDeclarationGen=enumDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_enumDeclarationGen==null) list_enumDeclarationGen=new ArrayList();
                    list_enumDeclarationGen.add(enumDeclarationGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4223:46: (TK_0= ';' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==25) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_0= ';'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3518); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_enumDeclarationGen != null) {
                      	        for(Iterator it = list_enumDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4250:6: annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3532);
                    annotationTypeDeclarationGen=annotationTypeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationTypeDeclarationGen==null) list_annotationTypeDeclarationGen=new ArrayList();
                    list_annotationTypeDeclarationGen.add(annotationTypeDeclarationGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4250:66: (TK_0= ';' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==25) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: TK_0= ';'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3536); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_annotationTypeDeclarationGen != null) {
                      	        for(Iterator it = list_annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationTypeDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 75, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeElementRest

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationMethodOrConstantRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4279:1: annotationMethodOrConstantRest returns [Node returnNode] : (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest );
    public final annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        annotationMethodOrConstantRest_return retval = new annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        List list_annotationMethodRestGen=null;
        List list_annotationConstantRestGen=null;
        RuleReturnScope annotationMethodRestGen = null;
        RuleReturnScope annotationConstantRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4280:1: (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Identifier) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==65) ) {
                    alt106=1;
                }
                else if ( (LA106_1==25||LA106_1==34||LA106_1==41||LA106_1==44) ) {
                    alt106=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4279:1: annotationMethodOrConstantRest returns [Node returnNode] : (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest );", 106, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("4279:1: annotationMethodOrConstantRest returns [Node returnNode] : (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest );", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4280:3: annotationMethodRestGen+= annotationMethodRest
                    {
                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3559);
                    annotationMethodRestGen=annotationMethodRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationMethodRestGen==null) list_annotationMethodRestGen=new ArrayList();
                    list_annotationMethodRestGen.add(annotationMethodRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
                      	    // Create a CST Node
                      		if(list_annotationMethodRestGen != null) {
                      	        for(Iterator it = list_annotationMethodRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationMethodRest_return r = (JavaParser.annotationMethodRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationMethodRest");
                      	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationMethodOrConstantRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4298:6: annotationConstantRestGen+= annotationConstantRest
                    {
                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3572);
                    annotationConstantRestGen=annotationConstantRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_annotationConstantRestGen==null) list_annotationConstantRestGen=new ArrayList();
                    list_annotationConstantRestGen.add(annotationConstantRestGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
                      	    // Create a CST Node
                      		if(list_annotationConstantRestGen != null) {
                      	        for(Iterator it = list_annotationConstantRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationConstantRest_return r = (JavaParser.annotationConstantRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationConstantRest");
                      	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationMethodOrConstantRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 76, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationMethodOrConstantRest

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationMethodRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4318:1: annotationMethodRest returns [Node returnNode] : IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )? ;
    public final annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        annotationMethodRest_return retval = new annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;
        List list_defaultValueGen=null;
        RuleReturnScope defaultValueGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4319:1: (IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4319:3: IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )?
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3594); if (failed) return retval;
            TK_0=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_annotationMethodRest3598); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_annotationMethodRest3602); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4319:46: (defaultValueGen+= defaultValue )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==72) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4319:47: defaultValueGen+= defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3607);
                    defaultValueGen=defaultValue();
                    _fsp--;
                    if (failed) return retval;
                    if (list_defaultValueGen==null) list_defaultValueGen=new ArrayList();
                    list_defaultValueGen.add(defaultValueGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationMethodRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationMethodRestReturnNode.setKind("annotationMethodRest");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationMethodRestReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationMethodRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationMethodRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_defaultValueGen != null) {
              	        for(Iterator it = list_defaultValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.defaultValue_return r = (JavaParser.defaultValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("defaultValue");
              	            	annotationMethodRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationMethodRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 77, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationMethodRest

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start annotationConstantRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4366:1: annotationConstantRest returns [Node returnNode] : variableDeclaratorsGen+= variableDeclarators ;
    public final annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        annotationConstantRest_return retval = new annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        List list_variableDeclaratorsGen=null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4367:1: (variableDeclaratorsGen+= variableDeclarators )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4367:3: variableDeclaratorsGen+= variableDeclarators
            {
            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3633);
            variableDeclaratorsGen=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node annotationConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationConstantRestReturnNode.setKind("annotationConstantRest");
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	annotationConstantRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationConstantRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 78, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationConstantRest

    public static class defaultValue_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start defaultValue
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4387:1: defaultValue returns [Node returnNode] : TK_0= 'default' elementValueGen+= elementValue ;
    public final defaultValue_return defaultValue() throws RecognitionException {
        defaultValue_return retval = new defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Token TK_0=null;
        List list_elementValueGen=null;
        RuleReturnScope elementValueGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4388:1: (TK_0= 'default' elementValueGen+= elementValue )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4388:3: TK_0= 'default' elementValueGen+= elementValue
            {
            TK_0=(Token)input.LT(1);
            match(input,72,FOLLOW_72_in_defaultValue3657); if (failed) return retval;
            pushFollow(FOLLOW_elementValue_in_defaultValue3661);
            elementValueGen=elementValue();
            _fsp--;
            if (failed) return retval;
            if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
            list_elementValueGen.add(elementValueGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node defaultValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		defaultValueReturnNode.setKind("defaultValue");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		defaultValueReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	defaultValueReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = defaultValueReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 79, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end defaultValue

    public static class block_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start block
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4419:1: block returns [Node returnNode] : TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}' ;
    public final block_return block() throws RecognitionException {
        block_return retval = new block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_blockStatementGen=null;
        RuleReturnScope blockStatementGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4420:1: (TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4420:3: TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}'
            {
            TK_0=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_block3685); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4420:29: (blockStatementGen+= blockStatement )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( ((LA108_0>=Identifier && LA108_0<=DecimalLiteral)||LA108_0==25||LA108_0==27||LA108_0==30||LA108_0==33||LA108_0==37||(LA108_0>=39 && LA108_0<=40)||(LA108_0>=45 && LA108_0<=62)||(LA108_0>=64 && LA108_0<=65)||(LA108_0>=68 && LA108_0<=71)||LA108_0==73||LA108_0==75||(LA108_0>=77 && LA108_0<=80)||(LA108_0>=82 && LA108_0<=86)||(LA108_0>=104 && LA108_0<=105)||(LA108_0>=108 && LA108_0<=113)) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: blockStatementGen+= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3689);
            	    blockStatementGen=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_blockStatementGen==null) list_blockStatementGen=new ArrayList();
            	    list_blockStatementGen.add(blockStatementGen);


            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            TK_1=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_block3694); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		blockReturnNode.setKind("block");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		blockReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_blockStatementGen != null) {
              	        for(Iterator it = list_blockStatementGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("blockStatement");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		blockReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = blockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 80, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end block

    public static class blockStatement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start blockStatement
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );
    public final blockStatement_return blockStatement() throws RecognitionException {
        blockStatement_return retval = new blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        List list_localVariableDeclarationGen=null;
        List list_classOrInterfaceDeclarationGen=null;
        List list_statementGen=null;
        RuleReturnScope localVariableDeclarationGen = null;
        RuleReturnScope classOrInterfaceDeclarationGen = null;
        RuleReturnScope statementGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4459:1: (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement )
            int alt109=3;
            switch ( input.LA(1) ) {
            case 49:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                    {
                    alt109=1;
                    }
                    break;
                case 49:
                    {
                    int LA109_68 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (synpred145()) ) {
                        alt109=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 68, input);

                        throw nvae;
                    }
                    }
                    break;
                case 71:
                    {
                    int LA109_69 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (synpred145()) ) {
                        alt109=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 69, input);

                        throw nvae;
                    }
                    }
                    break;
                case ENUM:
                case 27:
                case 30:
                case 39:
                case 45:
                case 46:
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                    {
                    alt109=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 1, input);

                    throw nvae;
                }

                }
                break;
            case 71:
                {
                int LA109_2 = input.LA(2);

                if ( (LA109_2==39) ) {
                    alt109=2;
                }
                else if ( (LA109_2==Identifier) ) {
                    int LA109_84 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (synpred145()) ) {
                        alt109=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 84, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 2, input);

                    throw nvae;
                }
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 25:
                case 29:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 74:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt109=3;
                    }
                    break;
                case 33:
                    {
                    int LA109_86 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 86, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    int LA109_87 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 87, input);

                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA109_88 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 88, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 3, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_118 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 118, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 4, input);

                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_121 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 121, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 5, input);

                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_124 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 124, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 6, input);

                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_127 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 127, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 7, input);

                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_130 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 130, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 8, input);

                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_133 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 133, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 9, input);

                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_136 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 136, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 10, input);

                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA109_139 = input.LA(3);

                    if ( (synpred144()) ) {
                        alt109=1;
                    }
                    else if ( (true) ) {
                        alt109=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 139, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt109=1;
                    }
                    break;
                case 28:
                    {
                    alt109=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 11, input);

                    throw nvae;
                }

                }
                break;
            case ENUM:
            case 27:
            case 30:
            case 39:
            case 45:
            case 46:
            case 47:
            case 48:
            case 50:
            case 52:
            case 53:
            case 54:
                {
                alt109=2;
                }
                break;
            case 51:
                {
                int LA109_18 = input.LA(2);

                if ( (LA109_18==65) ) {
                    alt109=3;
                }
                else if ( (LA109_18==ENUM||LA109_18==27||LA109_18==30||LA109_18==39||(LA109_18>=45 && LA109_18<=54)||LA109_18==71) ) {
                    alt109=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 18, input);

                    throw nvae;
                }
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 25:
            case 33:
            case 37:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 77:
            case 78:
            case 79:
            case 80:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt109=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("4458:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );", 109, 0, input);

                throw nvae;
            }

            switch (alt109) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4459:3: localVariableDeclarationGen+= localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3716);
                    localVariableDeclarationGen=localVariableDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_localVariableDeclarationGen==null) list_localVariableDeclarationGen=new ArrayList();
                    list_localVariableDeclarationGen.add(localVariableDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_localVariableDeclarationGen != null) {
                      	        for(Iterator it = list_localVariableDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.localVariableDeclaration_return r = (JavaParser.localVariableDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("localVariableDeclaration");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4477:4: classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3727);
                    classOrInterfaceDeclarationGen=classOrInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classOrInterfaceDeclarationGen==null) list_classOrInterfaceDeclarationGen=new ArrayList();
                    list_classOrInterfaceDeclarationGen.add(classOrInterfaceDeclarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_classOrInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classOrInterfaceDeclaration");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4495:8: statementGen+= statement
                    {
                    pushFollow(FOLLOW_statement_in_blockStatement3742);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 81, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end blockStatement

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start localVariableDeclaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4515:1: localVariableDeclaration returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' ;
    public final localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        localVariableDeclaration_return retval = new localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4516:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4516:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';'
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4516:22: (variableModifierGen+= variableModifier )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==49||LA110_0==71) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3764);
            	    variableModifierGen=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen);


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3769);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3773);
            variableDeclaratorsGen=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen);

            TK_0=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_localVariableDeclaration3777); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node localVariableDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		localVariableDeclarationReturnNode.setKind("localVariableDeclaration");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		localVariableDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = localVariableDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 82, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end localVariableDeclaration

    public static class statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4565:1: statement returns [Node returnNode] : (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token IdentifierGen=null;
        List list_blockGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        List list_parExpressionGen=null;
        List list_statementGen=null;
        List list_statementGen_1=null;
        List list_forControlGen=null;
        List list_catchesGen=null;
        List list_blockGen_1=null;
        List list_catchesGen_1=null;
        List list_blockGen_2=null;
        List list_switchBlockStatementGroupsGen=null;
        List list_statementExpressionGen=null;
        RuleReturnScope blockGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        RuleReturnScope parExpressionGen = null;
        RuleReturnScope statementGen = null;
        RuleReturnScope statementGen_1 = null;
        RuleReturnScope forControlGen = null;
        RuleReturnScope catchesGen = null;
        RuleReturnScope blockGen_1 = null;
        RuleReturnScope catchesGen_1 = null;
        RuleReturnScope blockGen_2 = null;
        RuleReturnScope switchBlockStatementGroupsGen = null;
        RuleReturnScope statementExpressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4566:1: (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement )
            int alt117=16;
            switch ( input.LA(1) ) {
            case 37:
                {
                alt117=1;
                }
                break;
            case 73:
                {
                alt117=2;
                }
                break;
            case 75:
                {
                alt117=3;
                }
                break;
            case 77:
                {
                alt117=4;
                }
                break;
            case 78:
                {
                alt117=5;
                }
                break;
            case 79:
                {
                alt117=6;
                }
                break;
            case 80:
                {
                alt117=7;
                }
                break;
            case 82:
                {
                alt117=8;
                }
                break;
            case 51:
                {
                alt117=9;
                }
                break;
            case 83:
                {
                alt117=10;
                }
                break;
            case 84:
                {
                alt117=11;
                }
                break;
            case 85:
                {
                alt117=12;
                }
                break;
            case 86:
                {
                alt117=13;
                }
                break;
            case 25:
                {
                alt117=14;
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt117=15;
                }
                break;
            case Identifier:
                {
                int LA117_35 = input.LA(2);

                if ( (LA117_35==74) ) {
                    alt117=16;
                }
                else if ( (LA117_35==25||(LA117_35>=28 && LA117_35<=29)||LA117_35==33||(LA117_35>=35 && LA117_35<=36)||LA117_35==41||LA117_35==44||LA117_35==63||LA117_35==65||(LA117_35>=89 && LA117_35<=109)) ) {
                    alt117=15;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("4565:1: statement returns [Node returnNode] : (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement );", 117, 35, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("4565:1: statement returns [Node returnNode] : (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement );", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4566:3: blockGen+= block
                    {
                    pushFollow(FOLLOW_block_in_statement3799);
                    blockGen=block();
                    _fsp--;
                    if (failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4584:7: TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,73,FOLLOW_73_in_statement3813); if (failed) return retval;
                    pushFollow(FOLLOW_expression_in_statement3817);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4584:47: (TK_1= ':' expressionGen_1+= expression )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==74) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4584:48: TK_1= ':' expressionGen_1+= expression
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,74,FOLLOW_74_in_statement3822); if (failed) return retval;
                            pushFollow(FOLLOW_expression_in_statement3826);
                            expressionGen_1=expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                            list_expressionGen_1.add(expressionGen_1);


                            }
                            break;

                    }

                    TK_2=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3832); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen_1 != null) {
                      	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4639:7: TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,75,FOLLOW_75_in_statement3846); if (failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3850);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    pushFollow(FOLLOW_statement_in_statement3854);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4639:73: ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==76) ) {
                        int LA112_1 = input.LA(2);

                        if ( (synpred150()) ) {
                            alt112=1;
                        }
                    }
                    switch (alt112) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4639:89: TK_1= 'else' statementGen_1+= statement
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,76,FOLLOW_76_in_statement3866); if (failed) return retval;
                            pushFollow(FOLLOW_statement_in_statement3870);
                            statementGen_1=statement();
                            _fsp--;
                            if (failed) return retval;
                            if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
                            list_statementGen_1.add(statementGen_1);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen_1 != null) {
                      	        for(Iterator it = list_statementGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4695:7: TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,77,FOLLOW_77_in_statement3886); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_statement3890); if (failed) return retval;
                    pushFollow(FOLLOW_forControl_in_statement3894);
                    forControlGen=forControl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_forControlGen==null) list_forControlGen=new ArrayList();
                    list_forControlGen.add(forControlGen);

                    TK_2=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_statement3898); if (failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement3902);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_forControlGen != null) {
                      	        for(Iterator it = list_forControlGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forControl_return r = (JavaParser.forControl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forControl");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4750:7: TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_statement3916); if (failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3920);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    pushFollow(FOLLOW_statement_in_statement3924);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4787:7: TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,79,FOLLOW_79_in_statement3938); if (failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement3942);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    TK_1=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_statement3946); if (failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3950);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    TK_2=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3954); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4842:7: TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_statement3968); if (failed) return retval;
                    pushFollow(FOLLOW_block_in_statement3972);
                    blockGen=block();
                    _fsp--;
                    if (failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4843:7: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )
                    int alt113=3;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==87) ) {
                        int LA113_1 = input.LA(2);

                        if ( (LA113_1==65) ) {
                            int LA113_3 = input.LA(3);

                            if ( (synpred155()) ) {
                                alt113=1;
                            }
                            else if ( (synpred156()) ) {
                                alt113=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("4843:7: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )", 113, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("4843:7: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )", 113, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA113_0==81) ) {
                        alt113=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4843:7: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )", 113, 0, input);

                        throw nvae;
                    }
                    switch (alt113) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4843:9: catchesGen+= catches TK_1= 'finally' blockGen_1+= block
                            {
                            pushFollow(FOLLOW_catches_in_statement3984);
                            catchesGen=catches();
                            _fsp--;
                            if (failed) return retval;
                            if (list_catchesGen==null) list_catchesGen=new ArrayList();
                            list_catchesGen.add(catchesGen);

                            TK_1=(Token)input.LT(1);
                            match(input,81,FOLLOW_81_in_statement3988); if (failed) return retval;
                            pushFollow(FOLLOW_block_in_statement3992);
                            blockGen_1=block();
                            _fsp--;
                            if (failed) return retval;
                            if (list_blockGen_1==null) list_blockGen_1=new ArrayList();
                            list_blockGen_1.add(blockGen_1);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4844:9: catchesGen_1+= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement4004);
                            catchesGen_1=catches();
                            _fsp--;
                            if (failed) return retval;
                            if (list_catchesGen_1==null) list_catchesGen_1=new ArrayList();
                            list_catchesGen_1.add(catchesGen_1);


                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4845:9: TK_2= 'finally' blockGen_2+= block
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,81,FOLLOW_81_in_statement4016); if (failed) return retval;
                            pushFollow(FOLLOW_block_in_statement4020);
                            blockGen_2=block();
                            _fsp--;
                            if (failed) return retval;
                            if (list_blockGen_2==null) list_blockGen_2=new ArrayList();
                            list_blockGen_2.add(blockGen_2);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_catchesGen != null) {
                      	        for(Iterator it = list_catchesGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("catches");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen_1 != null) {
                      	        for(Iterator it = list_blockGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_catchesGen_1 != null) {
                      	        for(Iterator it = list_catchesGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("catches");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen_2 != null) {
                      	        for(Iterator it = list_blockGen_2.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4931:7: TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,82,FOLLOW_82_in_statement4042); if (failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement4046);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    TK_1=(Token)input.LT(1);
                    match(input,37,FOLLOW_37_in_statement4050); if (failed) return retval;
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement4054);
                    switchBlockStatementGroupsGen=switchBlockStatementGroups();
                    _fsp--;
                    if (failed) return retval;
                    if (list_switchBlockStatementGroupsGen==null) list_switchBlockStatementGroupsGen=new ArrayList();
                    list_switchBlockStatementGroupsGen.add(switchBlockStatementGroupsGen);

                    TK_2=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_statement4058); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_switchBlockStatementGroupsGen != null) {
                      	        for(Iterator it = list_switchBlockStatementGroupsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.switchBlockStatementGroups_return r = (JavaParser.switchBlockStatementGroups_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("switchBlockStatementGroups");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4986:7: TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_statement4072); if (failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement4076);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    pushFollow(FOLLOW_block_in_statement4080);
                    blockGen=block();
                    _fsp--;
                    if (failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5023:7: TK_0= 'return' (expressionGen+= expression )? TK_1= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,83,FOLLOW_83_in_statement4094); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5023:34: (expressionGen+= expression )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==Identifier||(LA114_0>=FloatingPointLiteral && LA114_0<=DecimalLiteral)||LA114_0==33||LA114_0==40||(LA114_0>=55 && LA114_0<=62)||(LA114_0>=64 && LA114_0<=65)||(LA114_0>=68 && LA114_0<=70)||(LA114_0>=104 && LA114_0<=105)||(LA114_0>=108 && LA114_0<=113)) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement4098);
                            expressionGen=expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen);


                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4103); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5059:7: TK_0= 'throw' expressionGen+= expression TK_1= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,84,FOLLOW_84_in_statement4117); if (failed) return retval;
                    pushFollow(FOLLOW_expression_in_statement4121);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4125); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5095:7: TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,85,FOLLOW_85_in_statement4139); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5095:33: (IdentifierGen= Identifier )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==Identifier) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: IdentifierGen= Identifier
                            {
                            IdentifierGen=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_statement4143); if (failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4148); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5130:7: TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,86,FOLLOW_86_in_statement4162); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5130:36: (IdentifierGen= Identifier )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==Identifier) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: IdentifierGen= Identifier
                            {
                            IdentifierGen=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_statement4166); if (failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4171); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5165:7: TK_0= ';'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4185); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5182:7: statementExpressionGen+= statementExpression TK_0= ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4199);
                    statementExpressionGen=statementExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementExpressionGen==null) list_statementExpressionGen=new ArrayList();
                    list_statementExpressionGen.add(statementExpressionGen);

                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement4203); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_statementExpressionGen != null) {
                      	        for(Iterator it = list_statementExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statementExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5209:7: IdentifierGen= Identifier TK_0= ':' statementGen+= statement
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_statement4217); if (failed) return retval;
                    TK_0=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_statement4221); if (failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement4225);
                    statementGen=statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 83, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end statement

    public static class catches_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start catches
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5247:1: catches returns [Node returnNode] : catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )* ;
    public final catches_return catches() throws RecognitionException {
        catches_return retval = new catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        List list_catchClauseGen=null;
        List list_catchClauseGen_1=null;
        RuleReturnScope catchClauseGen = null;
        RuleReturnScope catchClauseGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5248:1: (catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5248:3: catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )*
            {
            pushFollow(FOLLOW_catchClause_in_catches4247);
            catchClauseGen=catchClause();
            _fsp--;
            if (failed) return retval;
            if (list_catchClauseGen==null) list_catchClauseGen=new ArrayList();
            list_catchClauseGen.add(catchClauseGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5248:31: (catchClauseGen_1+= catchClause )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==87) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5248:32: catchClauseGen_1+= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4252);
            	    catchClauseGen_1=catchClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_catchClauseGen_1==null) list_catchClauseGen_1=new ArrayList();
            	    list_catchClauseGen_1.add(catchClauseGen_1);


            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node catchesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		catchesReturnNode.setKind("catches");
              	    // Create a CST Node
              		if(list_catchClauseGen != null) {
              	        for(Iterator it = list_catchClauseGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("catchClause");
              	            	catchesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_catchClauseGen_1 != null) {
              	        for(Iterator it = list_catchClauseGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("catchClause");
              	            	catchesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = catchesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 84, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end catches

    public static class catchClause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start catchClause
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5278:1: catchClause returns [Node returnNode] : TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block ;
    public final catchClause_return catchClause() throws RecognitionException {
        catchClause_return retval = new catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_formalParameterGen=null;
        List list_blockGen=null;
        RuleReturnScope formalParameterGen = null;
        RuleReturnScope blockGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5279:1: (TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5279:3: TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block
            {
            TK_0=(Token)input.LT(1);
            match(input,87,FOLLOW_87_in_catchClause4276); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_catchClause4280); if (failed) return retval;
            pushFollow(FOLLOW_formalParameter_in_catchClause4284);
            formalParameterGen=formalParameter();
            _fsp--;
            if (failed) return retval;
            if (list_formalParameterGen==null) list_formalParameterGen=new ArrayList();
            list_formalParameterGen.add(formalParameterGen);

            TK_2=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_catchClause4288); if (failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause4292);
            blockGen=block();
            _fsp--;
            if (failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node catchClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		catchClauseReturnNode.setKind("catchClause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_formalParameterGen != null) {
              	        for(Iterator it = list_formalParameterGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameter_return r = (JavaParser.formalParameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameter");
              	            	catchClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	catchClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = catchClauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 85, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end catchClause

    public static class formalParameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start formalParameter
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5336:1: formalParameter returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId ;
    public final formalParameter_return formalParameter() throws RecognitionException {
        formalParameter_return retval = new formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorIdGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorIdGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5337:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5337:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5337:22: (variableModifierGen+= variableModifier )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==49||LA119_0==71) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4313);
            	    variableModifierGen=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen);


            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4318);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4322);
            variableDeclaratorIdGen=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
            list_variableDeclaratorIdGen.add(variableDeclaratorIdGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node formalParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParameterReturnNode.setKind("formalParameter");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorIdGen != null) {
              	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclaratorId");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParameterReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 86, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameter

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start switchBlockStatementGroups
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5377:1: switchBlockStatementGroups returns [Node returnNode] : (switchBlockStatementGroupGen+= switchBlockStatementGroup )* ;
    public final switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        switchBlockStatementGroups_return retval = new switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        List list_switchBlockStatementGroupGen=null;
        RuleReturnScope switchBlockStatementGroupGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5378:1: ( (switchBlockStatementGroupGen+= switchBlockStatementGroup )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5378:3: (switchBlockStatementGroupGen+= switchBlockStatementGroup )*
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5378:3: (switchBlockStatementGroupGen+= switchBlockStatementGroup )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==72||LA120_0==88) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5378:4: switchBlockStatementGroupGen+= switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4346);
            	    switchBlockStatementGroupGen=switchBlockStatementGroup();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_switchBlockStatementGroupGen==null) list_switchBlockStatementGroupGen=new ArrayList();
            	    list_switchBlockStatementGroupGen.add(switchBlockStatementGroupGen);


            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node switchBlockStatementGroupsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		switchBlockStatementGroupsReturnNode.setKind("switchBlockStatementGroups");
              	    // Create a CST Node
              		if(list_switchBlockStatementGroupGen != null) {
              	        for(Iterator it = list_switchBlockStatementGroupGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.switchBlockStatementGroup_return r = (JavaParser.switchBlockStatementGroup_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("switchBlockStatementGroup");
              	            	switchBlockStatementGroupsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = switchBlockStatementGroupsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 87, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchBlockStatementGroups

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start switchBlockStatementGroup
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5398:1: switchBlockStatementGroup returns [Node returnNode] : switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )* ;
    public final switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        switchBlockStatementGroup_return retval = new switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        List list_switchLabelGen=null;
        List list_blockStatementGen=null;
        RuleReturnScope switchLabelGen = null;
        RuleReturnScope blockStatementGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5399:1: (switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5399:3: switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4370);
            switchLabelGen=switchLabel();
            _fsp--;
            if (failed) return retval;
            if (list_switchLabelGen==null) list_switchLabelGen=new ArrayList();
            list_switchLabelGen.add(switchLabelGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5399:48: (blockStatementGen+= blockStatement )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=Identifier && LA121_0<=DecimalLiteral)||LA121_0==25||LA121_0==27||LA121_0==30||LA121_0==33||LA121_0==37||(LA121_0>=39 && LA121_0<=40)||(LA121_0>=45 && LA121_0<=62)||(LA121_0>=64 && LA121_0<=65)||(LA121_0>=68 && LA121_0<=71)||LA121_0==73||LA121_0==75||(LA121_0>=77 && LA121_0<=80)||(LA121_0>=82 && LA121_0<=86)||(LA121_0>=104 && LA121_0<=105)||(LA121_0>=108 && LA121_0<=113)) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: blockStatementGen+= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4374);
            	    blockStatementGen=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_blockStatementGen==null) list_blockStatementGen=new ArrayList();
            	    list_blockStatementGen.add(blockStatementGen);


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node switchBlockStatementGroupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		switchBlockStatementGroupReturnNode.setKind("switchBlockStatementGroup");
              	    // Create a CST Node
              		if(list_switchLabelGen != null) {
              	        for(Iterator it = list_switchLabelGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.switchLabel_return r = (JavaParser.switchLabel_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("switchLabel");
              	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_blockStatementGen != null) {
              	        for(Iterator it = list_blockStatementGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("blockStatement");
              	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = switchBlockStatementGroupReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 88, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchBlockStatementGroup

    public static class switchLabel_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start switchLabel
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5429:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );
    public final switchLabel_return switchLabel() throws RecognitionException {
        switchLabel_return retval = new switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_constantExpressionGen=null;
        List list_enumConstantNameGen=null;
        RuleReturnScope constantExpressionGen = null;
        RuleReturnScope enumConstantNameGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5430:1: (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' )
            int alt122=3;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==88) ) {
                int LA122_1 = input.LA(2);

                if ( (LA122_1==Identifier) ) {
                    int LA122_3 = input.LA(3);

                    if ( (synpred173()) ) {
                        alt122=1;
                    }
                    else if ( (synpred174()) ) {
                        alt122=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5429:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );", 122, 3, input);

                        throw nvae;
                    }
                }
                else if ( ((LA122_1>=FloatingPointLiteral && LA122_1<=DecimalLiteral)||LA122_1==33||LA122_1==40||(LA122_1>=55 && LA122_1<=62)||(LA122_1>=64 && LA122_1<=65)||(LA122_1>=68 && LA122_1<=70)||(LA122_1>=104 && LA122_1<=105)||(LA122_1>=108 && LA122_1<=113)) ) {
                    alt122=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5429:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );", 122, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA122_0==72) ) {
                alt122=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5429:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5430:3: TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_switchLabel4397); if (failed) return retval;
                    pushFollow(FOLLOW_constantExpression_in_switchLabel4401);
                    constantExpressionGen=constantExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_constantExpressionGen==null) list_constantExpressionGen=new ArrayList();
                    list_constantExpressionGen.add(constantExpressionGen);

                    TK_1=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel4405); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constantExpressionGen != null) {
                      	        for(Iterator it = list_constantExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constantExpression_return r = (JavaParser.constantExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constantExpression");
                      	            	switchLabelReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5466:6: TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_switchLabel4418); if (failed) return retval;
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4422);
                    enumConstantNameGen=enumConstantName();
                    _fsp--;
                    if (failed) return retval;
                    if (list_enumConstantNameGen==null) list_enumConstantNameGen=new ArrayList();
                    list_enumConstantNameGen.add(enumConstantNameGen);

                    TK_1=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel4426); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_enumConstantNameGen != null) {
                      	        for(Iterator it = list_enumConstantNameGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumConstantName_return r = (JavaParser.enumConstantName_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumConstantName");
                      	            	switchLabelReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5502:6: TK_0= 'default' TK_1= ':'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,72,FOLLOW_72_in_switchLabel4439); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel4443); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 89, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchLabel

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start moreStatementExpressions
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5530:1: moreStatementExpressions returns [Node returnNode] : (TK_0= ',' statementExpressionGen+= statementExpression )* ;
    public final moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        moreStatementExpressions_return retval = new moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Token TK_0=null;
        List list_statementExpressionGen=null;
        RuleReturnScope statementExpressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5531:1: ( (TK_0= ',' statementExpressionGen+= statementExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5531:3: (TK_0= ',' statementExpressionGen+= statementExpression )*
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5531:3: (TK_0= ',' statementExpressionGen+= statementExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==34) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5531:4: TK_0= ',' statementExpressionGen+= statementExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_moreStatementExpressions4466); if (failed) return retval;
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4470);
            	    statementExpressionGen=statementExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_statementExpressionGen==null) list_statementExpressionGen=new ArrayList();
            	    list_statementExpressionGen.add(statementExpressionGen);


            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node moreStatementExpressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		moreStatementExpressionsReturnNode.setKind("moreStatementExpressions");
              	
              		// Create a special CST Node for terminal statementExpressionGen aggregation
              		if(list_statementExpressionGen != null) {
              	    for(int pos = 0; pos < list_statementExpressionGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		moreStatementExpressionsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_statementExpressionGen != null) {		
              	    	JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) list_statementExpressionGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("statementExpression");
              	    		moreStatementExpressionsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = moreStatementExpressionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 90, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end moreStatementExpressions

    public static class forControl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start forControl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );
    public final forControl_return forControl() throws RecognitionException {
        forControl_return retval = new forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_forVarControlGen=null;
        List list_forInitGen=null;
        List list_expressionGen=null;
        List list_forUpdateGen=null;
        RuleReturnScope forVarControlGen = null;
        RuleReturnScope forInitGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope forUpdateGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5567:2: (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? )
            int alt127=2;
            switch ( input.LA(1) ) {
            case 49:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    switch ( input.LA(3) ) {
                    case 33:
                        {
                        int LA127_103 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 103, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 28:
                        {
                        int LA127_104 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 104, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 41:
                        {
                        int LA127_105 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 105, input);

                            throw nvae;
                        }
                        }
                        break;
                    case Identifier:
                        {
                        int LA127_106 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 106, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 34, input);

                        throw nvae;
                    }

                    }
                    break;
                case 55:
                    {
                    int LA127_35 = input.LA(3);

                    if ( (LA127_35==41) ) {
                        int LA127_107 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 107, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_35==Identifier) ) {
                        int LA127_108 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 108, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 35, input);

                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA127_36 = input.LA(3);

                    if ( (LA127_36==41) ) {
                        int LA127_109 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 109, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_36==Identifier) ) {
                        int LA127_110 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 110, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 36, input);

                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA127_37 = input.LA(3);

                    if ( (LA127_37==41) ) {
                        int LA127_111 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 111, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_37==Identifier) ) {
                        int LA127_112 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 112, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 37, input);

                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA127_38 = input.LA(3);

                    if ( (LA127_38==41) ) {
                        int LA127_113 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 113, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_38==Identifier) ) {
                        int LA127_114 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 114, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 38, input);

                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA127_39 = input.LA(3);

                    if ( (LA127_39==41) ) {
                        int LA127_115 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 115, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_39==Identifier) ) {
                        int LA127_116 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 116, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 39, input);

                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA127_40 = input.LA(3);

                    if ( (LA127_40==41) ) {
                        int LA127_117 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 117, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_40==Identifier) ) {
                        int LA127_118 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 118, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 40, input);

                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA127_41 = input.LA(3);

                    if ( (LA127_41==41) ) {
                        int LA127_119 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 119, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_41==Identifier) ) {
                        int LA127_120 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 120, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 41, input);

                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA127_42 = input.LA(3);

                    if ( (LA127_42==41) ) {
                        int LA127_121 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 121, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_42==Identifier) ) {
                        int LA127_122 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 122, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 42, input);

                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(3) ) {
                    case Identifier:
                        {
                        int LA127_123 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 123, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA127_124 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 124, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA127_125 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 125, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA127_126 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 126, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA127_127 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 127, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA127_128 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 128, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA127_129 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 129, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA127_130 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 130, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA127_131 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 131, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 49:
                        {
                        int LA127_132 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 132, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 71:
                        {
                        int LA127_133 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 133, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 43, input);

                        throw nvae;
                    }

                    }
                    break;
                case 71:
                    {
                    int LA127_44 = input.LA(3);

                    if ( (LA127_44==Identifier) ) {
                        int LA127_134 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 134, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 44, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 1, input);

                    throw nvae;
                }

                }
                break;
            case 71:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==Identifier) ) {
                    switch ( input.LA(3) ) {
                    case 28:
                        {
                        int LA127_135 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 135, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 65:
                        {
                        int LA127_136 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 136, input);

                            throw nvae;
                        }
                        }
                        break;
                    case Identifier:
                        {
                        int LA127_137 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 137, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA127_138 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 138, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA127_139 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 139, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA127_140 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 140, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA127_141 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 141, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA127_142 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 142, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA127_143 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 143, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA127_144 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 144, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA127_145 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 145, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 49:
                        {
                        int LA127_146 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 146, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 71:
                        {
                        int LA127_147 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 147, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 45, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 2, input);

                    throw nvae;
                }
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    switch ( input.LA(3) ) {
                    case FloatingPointLiteral:
                    case CharacterLiteral:
                    case StringLiteral:
                    case HexLiteral:
                    case OctalLiteral:
                    case DecimalLiteral:
                    case 33:
                    case 40:
                    case 44:
                    case 64:
                    case 65:
                    case 68:
                    case 69:
                    case 70:
                    case 104:
                    case 105:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                        {
                        alt127=2;
                        }
                        break;
                    case Identifier:
                        {
                        int LA127_150 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 150, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA127_151 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 151, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA127_152 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 152, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA127_153 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 153, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA127_154 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 154, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA127_155 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 155, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA127_156 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 156, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA127_157 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 157, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA127_158 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 158, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 63:
                        {
                        int LA127_159 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 159, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 46, input);

                        throw nvae;
                    }

                    }
                    break;
                case 28:
                    {
                    int LA127_47 = input.LA(3);

                    if ( (LA127_47==Identifier) ) {
                        int LA127_180 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 180, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_47==30||LA127_47==33||LA127_47==64||(LA127_47>=112 && LA127_47<=113)) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 47, input);

                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA127_48 = input.LA(3);

                    if ( (LA127_48==42) ) {
                        int LA127_186 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 186, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA127_48==Identifier||(LA127_48>=FloatingPointLiteral && LA127_48<=DecimalLiteral)||LA127_48==33||LA127_48==40||(LA127_48>=55 && LA127_48<=62)||(LA127_48>=64 && LA127_48<=65)||(LA127_48>=68 && LA127_48<=70)||(LA127_48>=104 && LA127_48<=105)||(LA127_48>=108 && LA127_48<=113)) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 48, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA127_49 = input.LA(3);

                    if ( (LA127_49==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_49==25||LA127_49==34||LA127_49==41||LA127_49==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 49, input);

                        throw nvae;
                    }
                    }
                    break;
                case 25:
                case 29:
                case 34:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 3, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_79 = input.LA(3);

                    if ( (LA127_79==42) ) {
                        int LA127_222 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 222, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 79, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    int LA127_81 = input.LA(3);

                    if ( (LA127_81==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_81==25||LA127_81==34||LA127_81==41||LA127_81==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 81, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 4, input);

                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_82 = input.LA(3);

                    if ( (LA127_82==42) ) {
                        int LA127_228 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 228, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 82, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    int LA127_84 = input.LA(3);

                    if ( (LA127_84==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_84==25||LA127_84==34||LA127_84==41||LA127_84==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 84, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 5, input);

                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_85 = input.LA(3);

                    if ( (LA127_85==42) ) {
                        int LA127_234 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 234, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 85, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA127_86 = input.LA(3);

                    if ( (LA127_86==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_86==25||LA127_86==34||LA127_86==41||LA127_86==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 86, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 6, input);

                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_88 = input.LA(3);

                    if ( (LA127_88==42) ) {
                        int LA127_240 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 240, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 88, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA127_89 = input.LA(3);

                    if ( (LA127_89==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_89==25||LA127_89==34||LA127_89==41||LA127_89==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 89, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 7, input);

                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_91 = input.LA(3);

                    if ( (LA127_91==42) ) {
                        int LA127_246 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 246, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 91, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    int LA127_93 = input.LA(3);

                    if ( (LA127_93==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_93==25||LA127_93==34||LA127_93==41||LA127_93==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 93, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 8, input);

                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_94 = input.LA(3);

                    if ( (LA127_94==42) ) {
                        int LA127_252 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 252, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 94, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    int LA127_96 = input.LA(3);

                    if ( (LA127_96==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_96==25||LA127_96==34||LA127_96==41||LA127_96==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 96, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 9, input);

                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_97 = input.LA(3);

                    if ( (LA127_97==42) ) {
                        int LA127_258 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 258, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 97, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA127_98 = input.LA(3);

                    if ( (LA127_98==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_98==25||LA127_98==34||LA127_98==41||LA127_98==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 98, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 10, input);

                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_100 = input.LA(3);

                    if ( (LA127_100==42) ) {
                        int LA127_264 = input.LA(4);

                        if ( (synpred176()) ) {
                            alt127=1;
                        }
                        else if ( (true) ) {
                            alt127=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 264, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 100, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA127_101 = input.LA(3);

                    if ( (LA127_101==74) ) {
                        alt127=1;
                    }
                    else if ( (LA127_101==25||LA127_101==34||LA127_101==41||LA127_101==44) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 101, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 11, input);

                    throw nvae;
                }

                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 25:
            case 33:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt127=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5565:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5567:4: forVarControlGen+= forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4502);
                    forVarControlGen=forVarControl();
                    _fsp--;
                    if (failed) return retval;
                    if (list_forVarControlGen==null) list_forVarControlGen=new ArrayList();
                    list_forVarControlGen.add(forVarControlGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forControlReturnNode.setKind("forControl");
                      	    // Create a CST Node
                      		if(list_forVarControlGen != null) {
                      	        for(Iterator it = list_forVarControlGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forVarControl_return r = (JavaParser.forVarControl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forVarControl");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forControlReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5585:4: (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )?
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5585:14: (forInitGen+= forInit )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Identifier||(LA124_0>=FloatingPointLiteral && LA124_0<=DecimalLiteral)||LA124_0==33||LA124_0==40||LA124_0==49||(LA124_0>=55 && LA124_0<=62)||(LA124_0>=64 && LA124_0<=65)||(LA124_0>=68 && LA124_0<=71)||(LA124_0>=104 && LA124_0<=105)||(LA124_0>=108 && LA124_0<=113)) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: forInitGen+= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4513);
                            forInitGen=forInit();
                            _fsp--;
                            if (failed) return retval;
                            if (list_forInitGen==null) list_forInitGen=new ArrayList();
                            list_forInitGen.add(forInitGen);


                            }
                            break;

                    }

                    TK_0=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_forControl4518); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5585:47: (expressionGen+= expression )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==Identifier||(LA125_0>=FloatingPointLiteral && LA125_0<=DecimalLiteral)||LA125_0==33||LA125_0==40||(LA125_0>=55 && LA125_0<=62)||(LA125_0>=64 && LA125_0<=65)||(LA125_0>=68 && LA125_0<=70)||(LA125_0>=104 && LA125_0<=105)||(LA125_0>=108 && LA125_0<=113)) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4522);
                            expressionGen=expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen);


                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_forControl4527); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5585:82: (forUpdateGen+= forUpdate )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==Identifier||(LA126_0>=FloatingPointLiteral && LA126_0<=DecimalLiteral)||LA126_0==33||LA126_0==40||(LA126_0>=55 && LA126_0<=62)||(LA126_0>=64 && LA126_0<=65)||(LA126_0>=68 && LA126_0<=70)||(LA126_0>=104 && LA126_0<=105)||(LA126_0>=108 && LA126_0<=113)) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: forUpdateGen+= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4531);
                            forUpdateGen=forUpdate();
                            _fsp--;
                            if (failed) return retval;
                            if (list_forUpdateGen==null) list_forUpdateGen=new ArrayList();
                            list_forUpdateGen.add(forUpdateGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forControlReturnNode.setKind("forControl");
                      	    // Create a CST Node
                      		if(list_forInitGen != null) {
                      	        for(Iterator it = list_forInitGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forInit_return r = (JavaParser.forInit_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forInit");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		forControlReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		forControlReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_forUpdateGen != null) {
                      	        for(Iterator it = list_forUpdateGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forUpdate_return r = (JavaParser.forUpdate_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forUpdate");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forControlReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 91, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forControl

    public static class forInit_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start forInit
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );
    public final forInit_return forInit() throws RecognitionException {
        forInit_return retval = new forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        List list_expressionListGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList )
            int alt129=2;
            switch ( input.LA(1) ) {
            case 49:
            case 71:
                {
                alt129=1;
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    int LA129_33 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 33, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    int LA129_34 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 34, input);

                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA129_35 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 35, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case EOF:
                case 25:
                case 29:
                case 34:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 3, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_67 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 67, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 4, input);

                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_70 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 70, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 5, input);

                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_73 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 73, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 6, input);

                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_76 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 76, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 7, input);

                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_79 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 79, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 8, input);

                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_82 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 82, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 9, input);

                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_85 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 85, input);

                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 10, input);

                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA129_88 = input.LA(3);

                    if ( (synpred181()) ) {
                        alt129=1;
                    }
                    else if ( (true) ) {
                        alt129=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 88, input);

                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt129=1;
                    }
                    break;
                case 28:
                    {
                    alt129=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 11, input);

                    throw nvae;
                }

                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt129=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5643:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:22: (variableModifierGen+= variableModifier )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==49||LA128_0==71) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifierGen+= variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4553);
                    	    variableModifierGen=variableModifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
                    	    list_variableModifierGen.add(variableModifierGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4558);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);

                    pushFollow(FOLLOW_variableDeclarators_in_forInit4562);
                    variableDeclaratorsGen=variableDeclarators();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
                    list_variableDeclaratorsGen.add(variableDeclaratorsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forInitReturnNode.setKind("forInit");
                      	    // Create a CST Node
                      		if(list_variableModifierGen != null) {
                      	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableModifier");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_variableDeclaratorsGen != null) {
                      	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclarators");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forInitReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5682:4: expressionListGen+= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit4573);
                    expressionListGen=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
                    list_expressionListGen.add(expressionListGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forInitReturnNode.setKind("forInit");
                      	    // Create a CST Node
                      		if(list_expressionListGen != null) {
                      	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expressionList");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forInitReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 92, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forInit

    public static class forVarControl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start forVarControl
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5702:1: forVarControl returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression ;
    public final forVarControl_return forVarControl() throws RecognitionException {
        forVarControl_return retval = new forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_expressionGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5703:1: ( (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5703:3: (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5703:22: (variableModifierGen+= variableModifier )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==49||LA130_0==71) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4595);
            	    variableModifierGen=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen);


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4600);
            typeGen=type();
            _fsp--;
            if (failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_forVarControl4604); if (failed) return retval;
            TK_0=(Token)input.LT(1);
            match(input,74,FOLLOW_74_in_forVarControl4608); if (failed) return retval;
            pushFollow(FOLLOW_expression_in_forVarControl4612);
            expressionGen=expression();
            _fsp--;
            if (failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node forVarControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		forVarControlReturnNode.setKind("forVarControl");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			forVarControlReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		forVarControlReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = forVarControlReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 93, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forVarControl

    public static class forUpdate_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start forUpdate
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5761:1: forUpdate returns [Node returnNode] : expressionListGen+= expressionList ;
    public final forUpdate_return forUpdate() throws RecognitionException {
        forUpdate_return retval = new forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        List list_expressionListGen=null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5762:1: (expressionListGen+= expressionList )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5762:3: expressionListGen+= expressionList
            {
            pushFollow(FOLLOW_expressionList_in_forUpdate4633);
            expressionListGen=expressionList();
            _fsp--;
            if (failed) return retval;
            if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
            list_expressionListGen.add(expressionListGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node forUpdateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		forUpdateReturnNode.setKind("forUpdate");
              	    // Create a CST Node
              		if(list_expressionListGen != null) {
              	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expressionList");
              	            	forUpdateReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = forUpdateReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 94, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forUpdate

    public static class parExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start parExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5784:1: parExpression returns [Node returnNode] : TK_0= '(' expressionGen+= expression TK_1= ')' ;
    public final parExpression_return parExpression() throws RecognitionException {
        parExpression_return retval = new parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5785:1: (TK_0= '(' expressionGen+= expression TK_1= ')' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5785:3: TK_0= '(' expressionGen+= expression TK_1= ')'
            {
            TK_0=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_parExpression4656); if (failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4660);
            expressionGen=expression();
            _fsp--;
            if (failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            TK_1=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_parExpression4664); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node parExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		parExpressionReturnNode.setKind("parExpression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		parExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	parExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		parExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = parExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 95, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end parExpression

    public static class expressionList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expressionList
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5823:1: expressionList returns [Node returnNode] : expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Token TK_0=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5824:1: (expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5824:5: expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList4688);
            expressionGen=expression();
            _fsp--;
            if (failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5824:31: (TK_0= ',' expressionGen_1+= expression )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==34) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5824:32: TK_0= ',' expressionGen_1+= expression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_expressionList4693); if (failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4697);
            	    expressionGen_1=expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
            	    list_expressionGen_1.add(expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expressionListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expressionListReturnNode.setKind("expressionList");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	expressionListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal expressionGen_1 aggregation
              		if(list_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expressionListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expressionGen_1 != null) {		
              	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression");
              	    		expressionListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expressionListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 96, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end expressionList

    public static class statementExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start statementExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5868:1: statementExpression returns [Node returnNode] : expressionGen+= expression ;
    public final statementExpression_return statementExpression() throws RecognitionException {
        statementExpression_return retval = new statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5869:1: (expressionGen+= expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5869:3: expressionGen+= expression
            {
            pushFollow(FOLLOW_expression_in_statementExpression4723);
            expressionGen=expression();
            _fsp--;
            if (failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node statementExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		statementExpressionReturnNode.setKind("statementExpression");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	statementExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = statementExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 97, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end statementExpression

    public static class constantExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start constantExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5889:1: constantExpression returns [Node returnNode] : expressionGen+= expression ;
    public final constantExpression_return constantExpression() throws RecognitionException {
        constantExpression_return retval = new constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5890:1: (expressionGen+= expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5890:3: expressionGen+= expression
            {
            pushFollow(FOLLOW_expression_in_constantExpression4745);
            expressionGen=expression();
            _fsp--;
            if (failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node constantExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantExpressionReturnNode.setKind("constantExpression");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	constantExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 98, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end constantExpression

    public static class expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5910:1: expression returns [Node returnNode] : conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )? ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        List list_conditionalExpressionGen=null;
        List list_assignmentOperatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope conditionalExpressionGen = null;
        RuleReturnScope assignmentOperatorGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:1: (conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:3: conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4767);
            conditionalExpressionGen=conditionalExpression();
            _fsp--;
            if (failed) return retval;
            if (list_conditionalExpressionGen==null) list_conditionalExpressionGen=new ArrayList();
            list_conditionalExpressionGen.add(conditionalExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:51: (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )?
            int alt132=2;
            switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA132_1 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 89:
                    {
                    int LA132_2 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 90:
                    {
                    int LA132_3 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 91:
                    {
                    int LA132_4 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 92:
                    {
                    int LA132_5 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 93:
                    {
                    int LA132_6 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 94:
                    {
                    int LA132_7 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 95:
                    {
                    int LA132_8 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 96:
                    {
                    int LA132_9 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 33:
                    {
                    int LA132_10 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
                case 35:
                    {
                    int LA132_11 = input.LA(2);

                    if ( (synpred184()) ) {
                        alt132=1;
                    }
                    }
                    break;
            }

            switch (alt132) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:52: assignmentOperatorGen+= assignmentOperator expressionGen+= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression4772);
                    assignmentOperatorGen=assignmentOperator();
                    _fsp--;
                    if (failed) return retval;
                    if (list_assignmentOperatorGen==null) list_assignmentOperatorGen=new ArrayList();
                    list_assignmentOperatorGen.add(assignmentOperatorGen);

                    pushFollow(FOLLOW_expression_in_expression4776);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expressionReturnNode.setKind("expression");
              	    // Create a CST Node
              		if(list_conditionalExpressionGen != null) {
              	        for(Iterator it = list_conditionalExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalExpression");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_assignmentOperatorGen != null) {
              	        for(Iterator it = list_assignmentOperatorGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.assignmentOperator_return r = (JavaParser.assignmentOperator_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("assignmentOperator");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 99, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end expression

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start assignmentOperator
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5951:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );
    public final assignmentOperator_return assignmentOperator() throws RecognitionException {
        assignmentOperator_return retval = new assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5952:1: (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' )
            int alt133=12;
            switch ( input.LA(1) ) {
            case 44:
                {
                alt133=1;
                }
                break;
            case 89:
                {
                alt133=2;
                }
                break;
            case 90:
                {
                alt133=3;
                }
                break;
            case 91:
                {
                alt133=4;
                }
                break;
            case 92:
                {
                alt133=5;
                }
                break;
            case 93:
                {
                alt133=6;
                }
                break;
            case 94:
                {
                alt133=7;
                }
                break;
            case 95:
                {
                alt133=8;
                }
                break;
            case 96:
                {
                alt133=9;
                }
                break;
            case 33:
                {
                alt133=10;
                }
                break;
            case 35:
                {
                int LA133_11 = input.LA(2);

                if ( (LA133_11==35) ) {
                    int LA133_12 = input.LA(3);

                    if ( (synpred195()) ) {
                        alt133=11;
                    }
                    else if ( (true) ) {
                        alt133=12;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5951:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );", 133, 12, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5951:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );", 133, 11, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5951:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5952:3: TK_0= '='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4800); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5969:9: TK_0= '+='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,89,FOLLOW_89_in_assignmentOperator4816); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5986:9: TK_0= '-='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,90,FOLLOW_90_in_assignmentOperator4832); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6003:9: TK_0= '*='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_assignmentOperator4848); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6020:9: TK_0= '/='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,92,FOLLOW_92_in_assignmentOperator4864); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6037:9: TK_0= '&='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,93,FOLLOW_93_in_assignmentOperator4880); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6054:9: TK_0= '|='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,94,FOLLOW_94_in_assignmentOperator4896); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6071:9: TK_0= '^='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,95,FOLLOW_95_in_assignmentOperator4912); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6088:9: TK_0= '%='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,96,FOLLOW_96_in_assignmentOperator4928); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6105:9: TK_0= '<' TK_1= '<' TK_2= '='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_assignmentOperator4944); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_assignmentOperator4948); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4952); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6140:9: TK_0= '>' TK_1= '>' TK_2= '='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4968); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4972); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4976); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6175:9: TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4992); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4996); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator5000); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator5004); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 100, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end assignmentOperator

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start conditionalExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6221:1: conditionalExpression returns [Node returnNode] : conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )? ;
    public final conditionalExpression_return conditionalExpression() throws RecognitionException {
        conditionalExpression_return retval = new conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_conditionalOrExpressionGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope conditionalOrExpressionGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6222:1: (conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6222:5: conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )?
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5027);
            conditionalOrExpressionGen=conditionalOrExpression();
            _fsp--;
            if (failed) return retval;
            if (list_conditionalOrExpressionGen==null) list_conditionalOrExpressionGen=new ArrayList();
            list_conditionalOrExpressionGen.add(conditionalOrExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6222:57: (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==63) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6222:59: TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,63,FOLLOW_63_in_conditionalExpression5033); if (failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditionalExpression5037);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_1=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_conditionalExpression5041); if (failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditionalExpression5045);
                    expressionGen_1=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                    list_expressionGen_1.add(expressionGen_1);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node conditionalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalExpressionReturnNode.setKind("conditionalExpression");
              	    // Create a CST Node
              		if(list_conditionalOrExpressionGen != null) {
              	        for(Iterator it = list_conditionalOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalOrExpression_return r = (JavaParser.conditionalOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalOrExpression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		conditionalExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen_1 != null) {
              	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 101, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end conditionalExpression

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start conditionalOrExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6280:1: conditionalOrExpression returns [Node returnNode] : conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )* ;
    public final conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        conditionalOrExpression_return retval = new conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_conditionalAndExpressionGen=null;
        List list_conditionalAndExpressionGen_1=null;
        RuleReturnScope conditionalAndExpressionGen = null;
        RuleReturnScope conditionalAndExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6281:1: (conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6281:5: conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5071);
            conditionalAndExpressionGen=conditionalAndExpression();
            _fsp--;
            if (failed) return retval;
            if (list_conditionalAndExpressionGen==null) list_conditionalAndExpressionGen=new ArrayList();
            list_conditionalAndExpressionGen.add(conditionalAndExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6281:59: (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==97) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6281:61: TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,97,FOLLOW_97_in_conditionalOrExpression5077); if (failed) return retval;
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5081);
            	    conditionalAndExpressionGen_1=conditionalAndExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_conditionalAndExpressionGen_1==null) list_conditionalAndExpressionGen_1=new ArrayList();
            	    list_conditionalAndExpressionGen_1.add(conditionalAndExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node conditionalOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalOrExpressionReturnNode.setKind("conditionalOrExpression");
              	    // Create a CST Node
              		if(list_conditionalAndExpressionGen != null) {
              	        for(Iterator it = list_conditionalAndExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalAndExpression");
              	            	conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal conditionalAndExpressionGen_1 aggregation
              		if(list_conditionalAndExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_conditionalAndExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_conditionalAndExpressionGen_1 != null) {		
              	    	JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) list_conditionalAndExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("conditionalAndExpression");
              	    		conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 102, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end conditionalOrExpression

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start conditionalAndExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6325:1: conditionalAndExpression returns [Node returnNode] : inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )* ;
    public final conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        conditionalAndExpression_return retval = new conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_inclusiveOrExpressionGen=null;
        List list_inclusiveOrExpressionGen_1=null;
        RuleReturnScope inclusiveOrExpressionGen = null;
        RuleReturnScope inclusiveOrExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6326:1: (inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6326:5: inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )*
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5107);
            inclusiveOrExpressionGen=inclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if (list_inclusiveOrExpressionGen==null) list_inclusiveOrExpressionGen=new ArrayList();
            list_inclusiveOrExpressionGen.add(inclusiveOrExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6326:53: (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==98) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6326:55: TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,98,FOLLOW_98_in_conditionalAndExpression5113); if (failed) return retval;
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5117);
            	    inclusiveOrExpressionGen_1=inclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_inclusiveOrExpressionGen_1==null) list_inclusiveOrExpressionGen_1=new ArrayList();
            	    list_inclusiveOrExpressionGen_1.add(inclusiveOrExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node conditionalAndExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalAndExpressionReturnNode.setKind("conditionalAndExpression");
              	    // Create a CST Node
              		if(list_inclusiveOrExpressionGen != null) {
              	        for(Iterator it = list_inclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("inclusiveOrExpression");
              	            	conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal inclusiveOrExpressionGen_1 aggregation
              		if(list_inclusiveOrExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_inclusiveOrExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalAndExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_inclusiveOrExpressionGen_1 != null) {		
              	    	JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) list_inclusiveOrExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("inclusiveOrExpression");
              	    		conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalAndExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 103, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end conditionalAndExpression

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start inclusiveOrExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6370:1: inclusiveOrExpression returns [Node returnNode] : exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )* ;
    public final inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        inclusiveOrExpression_return retval = new inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_exclusiveOrExpressionGen=null;
        List list_exclusiveOrExpressionGen_1=null;
        RuleReturnScope exclusiveOrExpressionGen = null;
        RuleReturnScope exclusiveOrExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6371:1: (exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6371:5: exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )*
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5143);
            exclusiveOrExpressionGen=exclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if (list_exclusiveOrExpressionGen==null) list_exclusiveOrExpressionGen=new ArrayList();
            list_exclusiveOrExpressionGen.add(exclusiveOrExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6371:53: (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==99) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6371:55: TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,99,FOLLOW_99_in_inclusiveOrExpression5149); if (failed) return retval;
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5153);
            	    exclusiveOrExpressionGen_1=exclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_exclusiveOrExpressionGen_1==null) list_exclusiveOrExpressionGen_1=new ArrayList();
            	    list_exclusiveOrExpressionGen_1.add(exclusiveOrExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node inclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		inclusiveOrExpressionReturnNode.setKind("inclusiveOrExpression");
              	    // Create a CST Node
              		if(list_exclusiveOrExpressionGen != null) {
              	        for(Iterator it = list_exclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exclusiveOrExpression");
              	            	inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal exclusiveOrExpressionGen_1 aggregation
              		if(list_exclusiveOrExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_exclusiveOrExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		inclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_exclusiveOrExpressionGen_1 != null) {		
              	    	JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) list_exclusiveOrExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("exclusiveOrExpression");
              	    		inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = inclusiveOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 104, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end inclusiveOrExpression

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exclusiveOrExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6415:1: exclusiveOrExpression returns [Node returnNode] : andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )* ;
    public final exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        exclusiveOrExpression_return retval = new exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_andExpressionGen=null;
        List list_andExpressionGen_1=null;
        RuleReturnScope andExpressionGen = null;
        RuleReturnScope andExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6416:1: (andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6416:5: andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5179);
            andExpressionGen=andExpression();
            _fsp--;
            if (failed) return retval;
            if (list_andExpressionGen==null) list_andExpressionGen=new ArrayList();
            list_andExpressionGen.add(andExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6416:37: (TK_0= '^' andExpressionGen_1+= andExpression )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==100) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6416:39: TK_0= '^' andExpressionGen_1+= andExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,100,FOLLOW_100_in_exclusiveOrExpression5185); if (failed) return retval;
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5189);
            	    andExpressionGen_1=andExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_andExpressionGen_1==null) list_andExpressionGen_1=new ArrayList();
            	    list_andExpressionGen_1.add(andExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exclusiveOrExpressionReturnNode.setKind("exclusiveOrExpression");
              	    // Create a CST Node
              		if(list_andExpressionGen != null) {
              	        for(Iterator it = list_andExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.andExpression_return r = (JavaParser.andExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("andExpression");
              	            	exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal andExpressionGen_1 aggregation
              		if(list_andExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_andExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_andExpressionGen_1 != null) {		
              	    	JavaParser.andExpression_return r = (JavaParser.andExpression_return) list_andExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("andExpression");
              	    		exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exclusiveOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 105, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end exclusiveOrExpression

    public static class andExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start andExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6460:1: andExpression returns [Node returnNode] : equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )* ;
    public final andExpression_return andExpression() throws RecognitionException {
        andExpression_return retval = new andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_equalityExpressionGen=null;
        List list_equalityExpressionGen_1=null;
        RuleReturnScope equalityExpressionGen = null;
        RuleReturnScope equalityExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6461:1: (equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6461:5: equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5215);
            equalityExpressionGen=equalityExpression();
            _fsp--;
            if (failed) return retval;
            if (list_equalityExpressionGen==null) list_equalityExpressionGen=new ArrayList();
            list_equalityExpressionGen.add(equalityExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6461:47: (TK_0= '&' equalityExpressionGen_1+= equalityExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==36) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6461:49: TK_0= '&' equalityExpressionGen_1+= equalityExpression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_andExpression5221); if (failed) return retval;
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression5225);
            	    equalityExpressionGen_1=equalityExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_equalityExpressionGen_1==null) list_equalityExpressionGen_1=new ArrayList();
            	    list_equalityExpressionGen_1.add(equalityExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node andExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		andExpressionReturnNode.setKind("andExpression");
              	    // Create a CST Node
              		if(list_equalityExpressionGen != null) {
              	        for(Iterator it = list_equalityExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("equalityExpression");
              	            	andExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal equalityExpressionGen_1 aggregation
              		if(list_equalityExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_equalityExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		andExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_equalityExpressionGen_1 != null) {		
              	    	JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) list_equalityExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("equalityExpression");
              	    		andExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = andExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 106, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end andExpression

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start equalityExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6505:1: equalityExpression returns [Node returnNode] : instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )* ;
    public final equalityExpression_return equalityExpression() throws RecognitionException {
        equalityExpression_return retval = new equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_instanceOfExpressionGen=null;
        List list_instanceOfExpressionGen_1=null;
        RuleReturnScope instanceOfExpressionGen = null;
        RuleReturnScope instanceOfExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:1: (instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:5: instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )*
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5251);
            instanceOfExpressionGen=instanceOfExpression();
            _fsp--;
            if (failed) return retval;
            if (list_instanceOfExpressionGen==null) list_instanceOfExpressionGen=new ArrayList();
            list_instanceOfExpressionGen.add(instanceOfExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:51: ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( ((LA141_0>=101 && LA141_0<=102)) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:53: (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:53: (TK_0= '==' | TK_1= '!=' )
            	    int alt140=2;
            	    int LA140_0 = input.LA(1);

            	    if ( (LA140_0==101) ) {
            	        alt140=1;
            	    }
            	    else if ( (LA140_0==102) ) {
            	        alt140=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6506:53: (TK_0= '==' | TK_1= '!=' )", 140, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt140) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:54: TK_0= '=='
            	            {
            	            TK_0=(Token)input.LT(1);
            	            match(input,101,FOLLOW_101_in_equalityExpression5258); if (failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6506:66: TK_1= '!='
            	            {
            	            TK_1=(Token)input.LT(1);
            	            match(input,102,FOLLOW_102_in_equalityExpression5264); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5269);
            	    instanceOfExpressionGen_1=instanceOfExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_instanceOfExpressionGen_1==null) list_instanceOfExpressionGen_1=new ArrayList();
            	    list_instanceOfExpressionGen_1.add(instanceOfExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node equalityExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		equalityExpressionReturnNode.setKind("equalityExpression");
              	    // Create a CST Node
              		if(list_instanceOfExpressionGen != null) {
              	        for(Iterator it = list_instanceOfExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("instanceOfExpression");
              	            	equalityExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal instanceOfExpressionGen_1 aggregation
              		if(list_instanceOfExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_instanceOfExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		equalityExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		equalityExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_instanceOfExpressionGen_1 != null) {		
              	    	JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) list_instanceOfExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("instanceOfExpression");
              	    		equalityExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = equalityExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 107, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end equalityExpression

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start instanceOfExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6559:1: instanceOfExpression returns [Node returnNode] : relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )? ;
    public final instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        instanceOfExpression_return retval = new instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_relationalExpressionGen=null;
        List list_typeGen=null;
        RuleReturnScope relationalExpressionGen = null;
        RuleReturnScope typeGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6560:1: (relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6560:5: relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )?
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5295);
            relationalExpressionGen=relationalExpression();
            _fsp--;
            if (failed) return retval;
            if (list_relationalExpressionGen==null) list_relationalExpressionGen=new ArrayList();
            list_relationalExpressionGen.add(relationalExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6560:51: (TK_0= 'instanceof' typeGen+= type )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==103) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6560:52: TK_0= 'instanceof' typeGen+= type
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,103,FOLLOW_103_in_instanceOfExpression5300); if (failed) return retval;
                    pushFollow(FOLLOW_type_in_instanceOfExpression5304);
                    typeGen=type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node instanceOfExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		instanceOfExpressionReturnNode.setKind("instanceOfExpression");
              	    // Create a CST Node
              		if(list_relationalExpressionGen != null) {
              	        for(Iterator it = list_relationalExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.relationalExpression_return r = (JavaParser.relationalExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("relationalExpression");
              	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		instanceOfExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = instanceOfExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 108, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end instanceOfExpression

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start relationalExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6599:1: relationalExpression returns [Node returnNode] : shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )* ;
    public final relationalExpression_return relationalExpression() throws RecognitionException {
        relationalExpression_return retval = new relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        List list_shiftExpressionGen=null;
        List list_relationalOpGen=null;
        List list_shiftExpressionGen_1=null;
        RuleReturnScope shiftExpressionGen = null;
        RuleReturnScope relationalOpGen = null;
        RuleReturnScope shiftExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:1: (shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:5: shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )*
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5329);
            shiftExpressionGen=shiftExpression();
            _fsp--;
            if (failed) return retval;
            if (list_shiftExpressionGen==null) list_shiftExpressionGen=new ArrayList();
            list_shiftExpressionGen.add(shiftExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:41: (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==33) ) {
                    int LA143_24 = input.LA(2);

                    if ( (LA143_24==33) ) {
                        int LA143_28 = input.LA(3);

                        if ( (synpred205()) ) {
                            alt143=1;
                        }


                    }
                    else if ( (LA143_24==Identifier||(LA143_24>=FloatingPointLiteral && LA143_24<=DecimalLiteral)||LA143_24==40||LA143_24==44||(LA143_24>=55 && LA143_24<=62)||(LA143_24>=64 && LA143_24<=65)||(LA143_24>=68 && LA143_24<=70)||(LA143_24>=104 && LA143_24<=105)||(LA143_24>=108 && LA143_24<=113)) ) {
                        alt143=1;
                    }


                }
                else if ( (LA143_0==35) ) {
                    int LA143_25 = input.LA(2);

                    if ( (LA143_25==Identifier||(LA143_25>=FloatingPointLiteral && LA143_25<=DecimalLiteral)||LA143_25==33||LA143_25==40||LA143_25==44||(LA143_25>=55 && LA143_25<=62)||(LA143_25>=64 && LA143_25<=65)||(LA143_25>=68 && LA143_25<=70)||(LA143_25>=104 && LA143_25<=105)||(LA143_25>=108 && LA143_25<=113)) ) {
                        alt143=1;
                    }


                }


                switch (alt143) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:43: relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression5335);
            	    relationalOpGen=relationalOp();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_relationalOpGen==null) list_relationalOpGen=new ArrayList();
            	    list_relationalOpGen.add(relationalOpGen);

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5339);
            	    shiftExpressionGen_1=shiftExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_shiftExpressionGen_1==null) list_shiftExpressionGen_1=new ArrayList();
            	    list_shiftExpressionGen_1.add(shiftExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node relationalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		relationalExpressionReturnNode.setKind("relationalExpression");
              	    // Create a CST Node
              		if(list_shiftExpressionGen != null) {
              	        for(Iterator it = list_shiftExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("shiftExpression");
              	            	relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal relationalOpGen aggregation
              		if(list_relationalOpGen != null) {
              	    for(int pos = 0; pos < list_relationalOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_relationalOpGen != null) {		
              	    	JavaParser.relationalOp_return r = (JavaParser.relationalOp_return) list_relationalOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("relationalOp");
              	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_shiftExpressionGen_1 != null) {		
              	    	JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) list_shiftExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("shiftExpression");
              	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = relationalExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 109, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end relationalExpression

    public static class relationalOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start relationalOp
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6643:1: relationalOp returns [Node returnNode] : (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' ) ;
    public final relationalOp_return relationalOp() throws RecognitionException {
        relationalOp_return retval = new relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:1: ( (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )
            int alt144=4;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==33) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==44) ) {
                    alt144=1;
                }
                else if ( (LA144_1==Identifier||(LA144_1>=FloatingPointLiteral && LA144_1<=DecimalLiteral)||LA144_1==33||LA144_1==40||(LA144_1>=55 && LA144_1<=62)||(LA144_1>=64 && LA144_1<=65)||(LA144_1>=68 && LA144_1<=70)||(LA144_1>=104 && LA144_1<=105)||(LA144_1>=108 && LA144_1<=113)) ) {
                    alt144=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("6644:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )", 144, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA144_0==35) ) {
                int LA144_2 = input.LA(2);

                if ( (LA144_2==44) ) {
                    alt144=2;
                }
                else if ( (LA144_2==Identifier||(LA144_2>=FloatingPointLiteral && LA144_2<=DecimalLiteral)||LA144_2==33||LA144_2==40||(LA144_2>=55 && LA144_2<=62)||(LA144_2>=64 && LA144_2<=65)||(LA144_2>=68 && LA144_2<=70)||(LA144_2>=104 && LA144_2<=105)||(LA144_2>=108 && LA144_2<=113)) ) {
                    alt144=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("6644:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )", 144, 2, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6644:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:4: TK_0= '<' TK_1= '='
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_relationalOp5365); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_relationalOp5369); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:24: TK_2= '>' TK_3= '='
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_relationalOp5375); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_relationalOp5379); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:44: TK_4= '<'
                    {
                    TK_4=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_relationalOp5385); if (failed) return retval;

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6644:55: TK_5= '>'
                    {
                    TK_5=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_relationalOp5391); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node relationalOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		relationalOpReturnNode.setKind("relationalOp");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = relationalOpReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 110, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end relationalOp

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start shiftExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6708:1: shiftExpression returns [Node returnNode] : additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )* ;
    public final shiftExpression_return shiftExpression() throws RecognitionException {
        shiftExpression_return retval = new shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        List list_additiveExpressionGen=null;
        List list_shiftOpGen=null;
        List list_additiveExpressionGen_1=null;
        RuleReturnScope additiveExpressionGen = null;
        RuleReturnScope shiftOpGen = null;
        RuleReturnScope additiveExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:1: (additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:5: additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5415);
            additiveExpressionGen=additiveExpression();
            _fsp--;
            if (failed) return retval;
            if (list_additiveExpressionGen==null) list_additiveExpressionGen=new ArrayList();
            list_additiveExpressionGen.add(additiveExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:47: (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==33) ) {
                    int LA145_1 = input.LA(2);

                    if ( (LA145_1==33) ) {
                        int LA145_28 = input.LA(3);

                        if ( (synpred209()) ) {
                            alt145=1;
                        }


                    }


                }
                else if ( (LA145_0==35) ) {
                    int LA145_2 = input.LA(2);

                    if ( (LA145_2==35) ) {
                        int LA145_59 = input.LA(3);

                        if ( (synpred209()) ) {
                            alt145=1;
                        }


                    }


                }


                switch (alt145) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:49: shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression5421);
            	    shiftOpGen=shiftOp();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_shiftOpGen==null) list_shiftOpGen=new ArrayList();
            	    list_shiftOpGen.add(shiftOpGen);

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5425);
            	    additiveExpressionGen_1=additiveExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_additiveExpressionGen_1==null) list_additiveExpressionGen_1=new ArrayList();
            	    list_additiveExpressionGen_1.add(additiveExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node shiftExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		shiftExpressionReturnNode.setKind("shiftExpression");
              	    // Create a CST Node
              		if(list_additiveExpressionGen != null) {
              	        for(Iterator it = list_additiveExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("additiveExpression");
              	            	shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal shiftOpGen aggregation
              		if(list_shiftOpGen != null) {
              	    for(int pos = 0; pos < list_shiftOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_shiftOpGen != null) {		
              	    	JavaParser.shiftOp_return r = (JavaParser.shiftOp_return) list_shiftOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("shiftOp");
              	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_additiveExpressionGen_1 != null) {		
              	    	JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) list_additiveExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("additiveExpression");
              	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = shiftExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 111, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end shiftExpression

    public static class shiftOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start shiftOp
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6753:1: shiftOp returns [Node returnNode] : (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' ) ;
    public final shiftOp_return shiftOp() throws RecognitionException {
        shiftOp_return retval = new shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:1: ( (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )
            int alt146=3;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==33) ) {
                alt146=1;
            }
            else if ( (LA146_0==35) ) {
                int LA146_2 = input.LA(2);

                if ( (LA146_2==35) ) {
                    int LA146_3 = input.LA(3);

                    if ( (synpred211()) ) {
                        alt146=2;
                    }
                    else if ( (true) ) {
                        alt146=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("6754:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )", 146, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("6754:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )", 146, 2, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6754:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:4: TK_0= '<' TK_1= '<'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_shiftOp5459); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_shiftOp5463); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:24: TK_2= '>' TK_3= '>' TK_4= '>'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp5469); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp5473); if (failed) return retval;
                    TK_4=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp5477); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:53: TK_5= '>' TK_6= '>'
                    {
                    TK_5=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp5483); if (failed) return retval;
                    TK_6=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp5487); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node shiftOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		shiftOpReturnNode.setKind("shiftOp");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue(TK_6.getText());
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = shiftOpReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 112, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end shiftOp

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start additiveExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6828:1: additiveExpression returns [Node returnNode] : multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )* ;
    public final additiveExpression_return additiveExpression() throws RecognitionException {
        additiveExpression_return retval = new additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_multiplicativeExpressionGen=null;
        List list_multiplicativeExpressionGen_1=null;
        RuleReturnScope multiplicativeExpressionGen = null;
        RuleReturnScope multiplicativeExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:1: (multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:5: multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5512);
            multiplicativeExpressionGen=multiplicativeExpression();
            _fsp--;
            if (failed) return retval;
            if (list_multiplicativeExpressionGen==null) list_multiplicativeExpressionGen=new ArrayList();
            list_multiplicativeExpressionGen.add(multiplicativeExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:59: ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( ((LA148_0>=104 && LA148_0<=105)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:61: (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:61: (TK_0= '+' | TK_1= '-' )
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==104) ) {
            	        alt147=1;
            	    }
            	    else if ( (LA147_0==105) ) {
            	        alt147=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6829:61: (TK_0= '+' | TK_1= '-' )", 147, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:62: TK_0= '+'
            	            {
            	            TK_0=(Token)input.LT(1);
            	            match(input,104,FOLLOW_104_in_additiveExpression5519); if (failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6829:73: TK_1= '-'
            	            {
            	            TK_1=(Token)input.LT(1);
            	            match(input,105,FOLLOW_105_in_additiveExpression5525); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5530);
            	    multiplicativeExpressionGen_1=multiplicativeExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_multiplicativeExpressionGen_1==null) list_multiplicativeExpressionGen_1=new ArrayList();
            	    list_multiplicativeExpressionGen_1.add(multiplicativeExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node additiveExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		additiveExpressionReturnNode.setKind("additiveExpression");
              	    // Create a CST Node
              		if(list_multiplicativeExpressionGen != null) {
              	        for(Iterator it = list_multiplicativeExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("multiplicativeExpression");
              	            	additiveExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal multiplicativeExpressionGen_1 aggregation
              		if(list_multiplicativeExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_multiplicativeExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		additiveExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		additiveExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_multiplicativeExpressionGen_1 != null) {		
              	    	JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) list_multiplicativeExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("multiplicativeExpression");
              	    		additiveExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = additiveExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 113, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end additiveExpression

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start multiplicativeExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6882:1: multiplicativeExpression returns [Node returnNode] : unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )* ;
    public final multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        multiplicativeExpression_return retval = new multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_unaryExpressionGen=null;
        List list_unaryExpressionGen_1=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope unaryExpressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:1: (unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:5: unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5556);
            unaryExpressionGen=unaryExpression();
            _fsp--;
            if (failed) return retval;
            if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
            list_unaryExpressionGen.add(unaryExpressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:41: ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==29||(LA150_0>=106 && LA150_0<=107)) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:43: (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:43: (TK_0= '*' | TK_1= '/' | TK_2= '%' )
            	    int alt149=3;
            	    switch ( input.LA(1) ) {
            	    case 29:
            	        {
            	        alt149=1;
            	        }
            	        break;
            	    case 106:
            	        {
            	        alt149=2;
            	        }
            	        break;
            	    case 107:
            	        {
            	        alt149=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6883:43: (TK_0= '*' | TK_1= '/' | TK_2= '%' )", 149, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt149) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:45: TK_0= '*'
            	            {
            	            TK_0=(Token)input.LT(1);
            	            match(input,29,FOLLOW_29_in_multiplicativeExpression5564); if (failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:56: TK_1= '/'
            	            {
            	            TK_1=(Token)input.LT(1);
            	            match(input,106,FOLLOW_106_in_multiplicativeExpression5570); if (failed) return retval;

            	            }
            	            break;
            	        case 3 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6883:67: TK_2= '%'
            	            {
            	            TK_2=(Token)input.LT(1);
            	            match(input,107,FOLLOW_107_in_multiplicativeExpression5576); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5582);
            	    unaryExpressionGen_1=unaryExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_unaryExpressionGen_1==null) list_unaryExpressionGen_1=new ArrayList();
            	    list_unaryExpressionGen_1.add(unaryExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node multiplicativeExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		multiplicativeExpressionReturnNode.setKind("multiplicativeExpression");
              	    // Create a CST Node
              		if(list_unaryExpressionGen != null) {
              	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("unaryExpression");
              	            	multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal unaryExpressionGen_1 aggregation
              		if(list_unaryExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_unaryExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_unaryExpressionGen_1 != null) {		
              	    	JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) list_unaryExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("unaryExpression");
              	    		multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = multiplicativeExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 114, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpression

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start unaryExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6945:1: unaryExpression returns [Node returnNode] : (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );
    public final unaryExpression_return unaryExpression() throws RecognitionException {
        unaryExpression_return retval = new unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_unaryExpressionGen=null;
        List list_unaryExpressionNotPlusMinusGen=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope unaryExpressionNotPlusMinusGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6946:1: (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus )
            int alt151=5;
            switch ( input.LA(1) ) {
            case 104:
                {
                alt151=1;
                }
                break;
            case 105:
                {
                alt151=2;
                }
                break;
            case 108:
                {
                alt151=3;
                }
                break;
            case 109:
                {
                alt151=4;
                }
                break;
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt151=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6945:1: unaryExpression returns [Node returnNode] : (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6946:5: TK_0= '+' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,104,FOLLOW_104_in_unaryExpression5609); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5613);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6973:7: TK_0= '-' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,105,FOLLOW_105_in_unaryExpression5627); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5631);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7000:9: TK_0= '++' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,108,FOLLOW_108_in_unaryExpression5647); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5651);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7027:9: TK_0= '--' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,109,FOLLOW_109_in_unaryExpression5667); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5671);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7054:9: unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5687);
                    unaryExpressionNotPlusMinusGen=unaryExpressionNotPlusMinus();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionNotPlusMinusGen==null) list_unaryExpressionNotPlusMinusGen=new ArrayList();
                    list_unaryExpressionNotPlusMinusGen.add(unaryExpressionNotPlusMinusGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a CST Node
                      		if(list_unaryExpressionNotPlusMinusGen != null) {
                      	        for(Iterator it = list_unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 115, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end unaryExpression

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start unaryExpressionNotPlusMinus
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );
    public final unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_unaryExpressionGen=null;
        List list_castExpressionGen=null;
        List list_primaryGen=null;
        List list_selectorGen=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope castExpressionGen = null;
        RuleReturnScope primaryGen = null;
        RuleReturnScope selectorGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7075:1: (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? )
            int alt154=4;
            switch ( input.LA(1) ) {
            case 110:
                {
                alt154=1;
                }
                break;
            case 111:
                {
                alt154=2;
                }
                break;
            case 65:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    int LA154_27 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 27, input);

                        throw nvae;
                    }
                    }
                    break;
                case 55:
                    {
                    int LA154_28 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA154_29 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA154_30 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA154_31 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA154_32 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 32, input);

                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA154_33 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 33, input);

                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA154_34 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 34, input);

                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA154_35 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 35, input);

                        throw nvae;
                    }
                    }
                    break;
                case 104:
                    {
                    int LA154_36 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 36, input);

                        throw nvae;
                    }
                    }
                    break;
                case 105:
                    {
                    int LA154_37 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 37, input);

                        throw nvae;
                    }
                    }
                    break;
                case 108:
                    {
                    int LA154_38 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 38, input);

                        throw nvae;
                    }
                    }
                    break;
                case 109:
                    {
                    int LA154_39 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 39, input);

                        throw nvae;
                    }
                    }
                    break;
                case 110:
                    {
                    int LA154_40 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 40, input);

                        throw nvae;
                    }
                    }
                    break;
                case 111:
                    {
                    int LA154_41 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 41, input);

                        throw nvae;
                    }
                    }
                    break;
                case 65:
                    {
                    int LA154_42 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 42, input);

                        throw nvae;
                    }
                    }
                    break;
                case 33:
                    {
                    int LA154_43 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 43, input);

                        throw nvae;
                    }
                    }
                    break;
                case 112:
                    {
                    int LA154_44 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 44, input);

                        throw nvae;
                    }
                    }
                    break;
                case 64:
                    {
                    int LA154_45 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 45, input);

                        throw nvae;
                    }
                    }
                    break;
                case HexLiteral:
                    {
                    int LA154_46 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 46, input);

                        throw nvae;
                    }
                    }
                    break;
                case OctalLiteral:
                    {
                    int LA154_47 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 47, input);

                        throw nvae;
                    }
                    }
                    break;
                case DecimalLiteral:
                    {
                    int LA154_48 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 48, input);

                        throw nvae;
                    }
                    }
                    break;
                case FloatingPointLiteral:
                    {
                    int LA154_49 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 49, input);

                        throw nvae;
                    }
                    }
                    break;
                case CharacterLiteral:
                    {
                    int LA154_50 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 50, input);

                        throw nvae;
                    }
                    }
                    break;
                case StringLiteral:
                    {
                    int LA154_51 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 51, input);

                        throw nvae;
                    }
                    }
                    break;
                case 69:
                    {
                    int LA154_52 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 52, input);

                        throw nvae;
                    }
                    }
                    break;
                case 70:
                    {
                    int LA154_53 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 53, input);

                        throw nvae;
                    }
                    }
                    break;
                case 68:
                    {
                    int LA154_54 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 54, input);

                        throw nvae;
                    }
                    }
                    break;
                case 113:
                    {
                    int LA154_55 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 55, input);

                        throw nvae;
                    }
                    }
                    break;
                case 40:
                    {
                    int LA154_56 = input.LA(3);

                    if ( (synpred223()) ) {
                        alt154=3;
                    }
                    else if ( (true) ) {
                        alt154=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 56, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 3, input);

                    throw nvae;
                }

                }
                break;
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 68:
            case 69:
            case 70:
            case 112:
            case 113:
                {
                alt154=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7074:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7075:5: TK_0= '~' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_unaryExpressionNotPlusMinus5713); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5717);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7102:8: TK_0= '!' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,111,FOLLOW_111_in_unaryExpressionNotPlusMinus5732); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5736);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7129:9: castExpressionGen+= castExpression
                    {
                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5752);
                    castExpressionGen=castExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_castExpressionGen==null) list_castExpressionGen=new ArrayList();
                    list_castExpressionGen.add(castExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a CST Node
                      		if(list_castExpressionGen != null) {
                      	        for(Iterator it = list_castExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.castExpression_return r = (JavaParser.castExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("castExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7147:9: primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )?
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus5768);
                    primaryGen=primary();
                    _fsp--;
                    if (failed) return retval;
                    if (list_primaryGen==null) list_primaryGen=new ArrayList();
                    list_primaryGen.add(primaryGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7147:40: (selectorGen+= selector )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==28||LA152_0==41) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: selectorGen+= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus5772);
                    	    selectorGen=selector();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_selectorGen==null) list_selectorGen=new ArrayList();
                    	    list_selectorGen.add(selectorGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7147:52: (TK_0= '++' | TK_1= '--' )?
                    int alt153=3;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==108) ) {
                        alt153=1;
                    }
                    else if ( (LA153_0==109) ) {
                        alt153=2;
                    }
                    switch (alt153) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7147:53: TK_0= '++'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,108,FOLLOW_108_in_unaryExpressionNotPlusMinus5778); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7147:63: TK_1= '--'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,109,FOLLOW_109_in_unaryExpressionNotPlusMinus5782); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a CST Node
                      		if(list_primaryGen != null) {
                      	        for(Iterator it = list_primaryGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primary_return r = (JavaParser.primary_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primary");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_selectorGen != null) {
                      	        for(Iterator it = list_selectorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.selector_return r = (JavaParser.selector_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("selector");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 116, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end unaryExpressionNotPlusMinus

    public static class castExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start castExpression
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_primitiveTypeGen=null;
        List list_unaryExpressionGen=null;
        List list_typeGen=null;
        List list_expressionGen=null;
        List list_unaryExpressionNotPlusMinusGen=null;
        RuleReturnScope primitiveTypeGen = null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope unaryExpressionNotPlusMinusGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7196:1: (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==65) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                case FloatingPointLiteral:
                case CharacterLiteral:
                case StringLiteral:
                case HexLiteral:
                case OctalLiteral:
                case DecimalLiteral:
                case 33:
                case 40:
                case 64:
                case 65:
                case 68:
                case 69:
                case 70:
                case 104:
                case 105:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                    {
                    alt156=2;
                    }
                    break;
                case 55:
                    {
                    int LA156_3 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA156_4 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA156_5 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA156_6 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 6, input);

                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA156_7 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 7, input);

                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA156_8 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 8, input);

                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA156_9 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA156_10 = input.LA(3);

                    if ( (synpred227()) ) {
                        alt156=1;
                    }
                    else if ( (true) ) {
                        alt156=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 10, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 1, input);

                    throw nvae;
                }

            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7195:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7196:4: TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_castExpression5809); if (failed) return retval;
                    pushFollow(FOLLOW_primitiveType_in_castExpression5813);
                    primitiveTypeGen=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen);

                    TK_1=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_castExpression5817); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_castExpression5821);
                    unaryExpressionGen=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		castExpressionReturnNode.setKind("castExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = castExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:8: TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_castExpression5836); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:17: (typeGen+= type | expressionGen+= expression )
                    int alt155=2;
                    switch ( input.LA(1) ) {
                    case Identifier:
                        {
                        int LA155_1 = input.LA(2);

                        if ( (synpred228()) ) {
                            alt155=1;
                        }
                        else if ( (true) ) {
                            alt155=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_63 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 63, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 56:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_66 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 66, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 3, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 57:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_69 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 69, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 58:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_72 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 72, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 59:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_75 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 75, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 60:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_78 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 78, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 7, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 61:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_81 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 81, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 8, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 62:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA155_84 = input.LA(3);

                            if ( (synpred228()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 84, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            alt155=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 9, input);

                            throw nvae;
                        }

                        }
                        break;
                    case FloatingPointLiteral:
                    case CharacterLiteral:
                    case StringLiteral:
                    case HexLiteral:
                    case OctalLiteral:
                    case DecimalLiteral:
                    case 33:
                    case 40:
                    case 64:
                    case 65:
                    case 68:
                    case 69:
                    case 70:
                    case 104:
                    case 105:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                        {
                        alt155=2;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7242:17: (typeGen+= type | expressionGen+= expression )", 155, 0, input);

                        throw nvae;
                    }

                    switch (alt155) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:18: typeGen+= type
                            {
                            pushFollow(FOLLOW_type_in_castExpression5841);
                            typeGen=type();
                            _fsp--;
                            if (failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:34: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_castExpression5847);
                            expressionGen=expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen);


                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_castExpression5852); if (failed) return retval;
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5856);
                    unaryExpressionNotPlusMinusGen=unaryExpressionNotPlusMinus();
                    _fsp--;
                    if (failed) return retval;
                    if (list_unaryExpressionNotPlusMinusGen==null) list_unaryExpressionNotPlusMinusGen=new ArrayList();
                    list_unaryExpressionNotPlusMinusGen.add(unaryExpressionNotPlusMinusGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		castExpressionReturnNode.setKind("castExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionNotPlusMinusGen != null) {
                      	        for(Iterator it = list_unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = castExpressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 117, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end castExpression

    public static class primary_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start primary
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7300:1: primary returns [Node returnNode] : (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' );
    public final primary_return primary() throws RecognitionException {
        primary_return retval = new primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token IdentifierGen_List=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_List=null;
        List list_IdentifierGen_1_List=null;
        List list_parExpressionGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_explicitGenericInvocationSuffixGen=null;
        List list_argumentsGen=null;
        List list_identifierSuffixGen=null;
        List list_superSuffixGen=null;
        List list_literalGen=null;
        List list_creatorGen=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope parExpressionGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope explicitGenericInvocationSuffixGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope identifierSuffixGen = null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope literalGen = null;
        RuleReturnScope creatorGen = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7301:1: (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' )
            int alt163=9;
            switch ( input.LA(1) ) {
            case 65:
                {
                alt163=1;
                }
                break;
            case 33:
                {
                alt163=2;
                }
                break;
            case 112:
                {
                alt163=3;
                }
                break;
            case 64:
                {
                alt163=4;
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 68:
            case 69:
            case 70:
                {
                alt163=5;
                }
                break;
            case 113:
                {
                alt163=6;
                }
                break;
            case Identifier:
                {
                alt163=7;
                }
                break;
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt163=8;
                }
                break;
            case 40:
                {
                alt163=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7300:1: primary returns [Node returnNode] : (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' );", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7301:3: parExpressionGen+= parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_primary5880);
                    parExpressionGen=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7319:9: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments )
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary5896);
                    nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                    list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7320:9: (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments )
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==Identifier||LA157_0==64) ) {
                        alt157=1;
                    }
                    else if ( (LA157_0==112) ) {
                        alt157=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7320:9: (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments )", 157, 0, input);

                        throw nvae;
                    }
                    switch (alt157) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7320:10: explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary5909);
                            explicitGenericInvocationSuffixGen=explicitGenericInvocationSuffix();
                            _fsp--;
                            if (failed) return retval;
                            if (list_explicitGenericInvocationSuffixGen==null) list_explicitGenericInvocationSuffixGen=new ArrayList();
                            list_explicitGenericInvocationSuffixGen.add(explicitGenericInvocationSuffixGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7320:80: TK_0= 'this' argumentsGen+= arguments
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,112,FOLLOW_112_in_primary5915); if (failed) return retval;
                            pushFollow(FOLLOW_arguments_in_primary5919);
                            argumentsGen=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_explicitGenericInvocationSuffixGen != null) {
                      	        for(Iterator it = list_explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:9: TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_primary5936); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:21: (TK_1= '.' IdentifierGen_List+= Identifier )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==28) ) {
                            int LA158_3 = input.LA(2);

                            if ( (LA158_3==Identifier) ) {
                                int LA158_41 = input.LA(3);

                                if ( (synpred232()) ) {
                                    alt158=1;
                                }


                            }


                        }


                        switch (alt158) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:22: TK_1= '.' IdentifierGen_List+= Identifier
                    	    {
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_primary5941); if (failed) return retval;
                    	    IdentifierGen_List=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_primary5945); if (failed) return retval;
                    	    if (list_IdentifierGen_List==null) list_IdentifierGen_List=new ArrayList();
                    	    list_IdentifierGen_List.add(IdentifierGen_List);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:64: (identifierSuffixGen+= identifierSuffix )?
                    int alt159=2;
                    switch ( input.LA(1) ) {
                        case 41:
                            {
                            switch ( input.LA(2) ) {
                                case 42:
                                    {
                                    alt159=1;
                                    }
                                    break;
                                case 104:
                                    {
                                    int LA159_39 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 105:
                                    {
                                    int LA159_40 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 108:
                                    {
                                    int LA159_41 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 109:
                                    {
                                    int LA159_42 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 110:
                                    {
                                    int LA159_43 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 111:
                                    {
                                    int LA159_44 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 65:
                                    {
                                    int LA159_45 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 33:
                                    {
                                    int LA159_46 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA159_47 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA159_48 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case HexLiteral:
                                    {
                                    int LA159_49 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case OctalLiteral:
                                    {
                                    int LA159_50 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case DecimalLiteral:
                                    {
                                    int LA159_51 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case FloatingPointLiteral:
                                    {
                                    int LA159_52 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case CharacterLiteral:
                                    {
                                    int LA159_53 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case StringLiteral:
                                    {
                                    int LA159_54 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 69:
                                    {
                                    int LA159_55 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 70:
                                    {
                                    int LA159_56 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 68:
                                    {
                                    int LA159_57 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA159_58 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case Identifier:
                                    {
                                    int LA159_59 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 55:
                                    {
                                    int LA159_60 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 56:
                                    {
                                    int LA159_61 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 57:
                                    {
                                    int LA159_62 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 58:
                                    {
                                    int LA159_63 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA159_64 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 60:
                                    {
                                    int LA159_65 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 61:
                                    {
                                    int LA159_66 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 62:
                                    {
                                    int LA159_67 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA159_68 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 65:
                            {
                            alt159=1;
                            }
                            break;
                        case 28:
                            {
                            switch ( input.LA(2) ) {
                                case 64:
                                    {
                                    int LA159_69 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA159_70 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA159_71 = input.LA(3);

                                    if ( (synpred233()) ) {
                                        alt159=1;
                                    }
                                    }
                                    break;
                                case 30:
                                case 33:
                                    {
                                    alt159=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt159) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:65: identifierSuffixGen+= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary5952);
                            identifierSuffixGen=identifierSuffix();
                            _fsp--;
                            if (failed) return retval;
                            if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
                            list_identifierSuffixGen.add(identifierSuffixGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	
                      		// Create a special CST Node for terminal IdentifierGen_List aggregation
                      		if(list_IdentifierGen_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_List != null) {
                      		    Token t = (Token) list_IdentifierGen_List.get(pos); 
                      		    Leaf IdentifierGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_ListLeaf.setKind("Identifier");
                      			IdentifierGen_ListLeaf.setValue(t.getText());
                      			IdentifierGen_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_ListLeaf.setLine(t.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGen_ListLeaf);
                      		}
                      		}
                      		}
                      	
                      	    // Create a CST Node
                      		if(list_identifierSuffixGen != null) {
                      	        for(Iterator it = list_identifierSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifierSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7420:9: TK_0= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_primary5970); if (failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_primary5974);
                    superSuffixGen=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7447:9: literalGen+= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary5990);
                    literalGen=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen==null) list_literalGen=new ArrayList();
                    list_literalGen.add(literalGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_literalGen != null) {
                      	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.literal_return r = (JavaParser.literal_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("literal");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7465:9: TK_0= 'new' creatorGen+= creator
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_primary6006); if (failed) return retval;
                    pushFollow(FOLLOW_creator_in_primary6010);
                    creatorGen=creator();
                    _fsp--;
                    if (failed) return retval;
                    if (list_creatorGen==null) list_creatorGen=new ArrayList();
                    list_creatorGen.add(creatorGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_creatorGen != null) {
                      	        for(Iterator it = list_creatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.creator_return r = (JavaParser.creator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("creator");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:9: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )?
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_primary6026); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:34: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==28) ) {
                            int LA160_3 = input.LA(2);

                            if ( (LA160_3==Identifier) ) {
                                int LA160_42 = input.LA(3);

                                if ( (synpred238()) ) {
                                    alt160=1;
                                }


                            }


                        }


                        switch (alt160) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:35: TK_0= '.' IdentifierGen_1_List+= Identifier
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_primary6031); if (failed) return retval;
                    	    IdentifierGen_1_List=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_primary6035); if (failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:79: (identifierSuffixGen+= identifierSuffix )?
                    int alt161=2;
                    switch ( input.LA(1) ) {
                        case 41:
                            {
                            switch ( input.LA(2) ) {
                                case 42:
                                    {
                                    alt161=1;
                                    }
                                    break;
                                case 104:
                                    {
                                    int LA161_39 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 105:
                                    {
                                    int LA161_40 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 108:
                                    {
                                    int LA161_41 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 109:
                                    {
                                    int LA161_42 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 110:
                                    {
                                    int LA161_43 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 111:
                                    {
                                    int LA161_44 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 65:
                                    {
                                    int LA161_45 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 33:
                                    {
                                    int LA161_46 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA161_47 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA161_48 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case HexLiteral:
                                    {
                                    int LA161_49 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case OctalLiteral:
                                    {
                                    int LA161_50 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case DecimalLiteral:
                                    {
                                    int LA161_51 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case FloatingPointLiteral:
                                    {
                                    int LA161_52 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case CharacterLiteral:
                                    {
                                    int LA161_53 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case StringLiteral:
                                    {
                                    int LA161_54 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 69:
                                    {
                                    int LA161_55 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 70:
                                    {
                                    int LA161_56 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 68:
                                    {
                                    int LA161_57 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA161_58 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case Identifier:
                                    {
                                    int LA161_59 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 55:
                                    {
                                    int LA161_60 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 56:
                                    {
                                    int LA161_61 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 57:
                                    {
                                    int LA161_62 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 58:
                                    {
                                    int LA161_63 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA161_64 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 60:
                                    {
                                    int LA161_65 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 61:
                                    {
                                    int LA161_66 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 62:
                                    {
                                    int LA161_67 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA161_68 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 65:
                            {
                            alt161=1;
                            }
                            break;
                        case 28:
                            {
                            switch ( input.LA(2) ) {
                                case 113:
                                    {
                                    int LA161_69 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 30:
                                case 33:
                                    {
                                    alt161=1;
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA161_71 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA161_72 = input.LA(3);

                                    if ( (synpred239()) ) {
                                        alt161=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt161) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:80: identifierSuffixGen+= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary6042);
                            identifierSuffixGen=identifierSuffix();
                            _fsp--;
                            if (failed) return retval;
                            if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
                            list_identifierSuffixGen.add(identifierSuffixGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	
                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		}
                      		}
                      	
                      	    // Create a CST Node
                      		if(list_identifierSuffixGen != null) {
                      	        for(Iterator it = list_identifierSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifierSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7545:9: primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary6060);
                    primitiveTypeGen=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7545:41: (TK_0= '[' TK_1= ']' )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==41) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7545:42: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_primary6065); if (failed) return retval;
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_primary6069); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    TK_2=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_primary6075); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_primary6079); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7581:9: TK_0= 'void' TK_1= '.' TK_2= 'class'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_primary6095); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_primary6099); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_primary6103); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 118, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end primary

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start identifierSuffix
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7618:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );
    public final identifierSuffix_return identifierSuffix() throws RecognitionException {
        identifierSuffix_return retval = new identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_expressionGen=null;
        List list_argumentsGen=null;
        List list_explicitGenericInvocationGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_innerCreatorGen=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope explicitGenericInvocationGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope innerCreatorGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7619:1: ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator )
            int alt167=8;
            switch ( input.LA(1) ) {
            case 41:
                {
                int LA167_1 = input.LA(2);

                if ( (LA167_1==42) ) {
                    alt167=1;
                }
                else if ( (LA167_1==Identifier||(LA167_1>=FloatingPointLiteral && LA167_1<=DecimalLiteral)||LA167_1==33||LA167_1==40||(LA167_1>=55 && LA167_1<=62)||(LA167_1>=64 && LA167_1<=65)||(LA167_1>=68 && LA167_1<=70)||(LA167_1>=104 && LA167_1<=105)||(LA167_1>=108 && LA167_1<=113)) ) {
                    alt167=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7618:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );", 167, 1, input);

                    throw nvae;
                }
                }
                break;
            case 65:
                {
                alt167=3;
                }
                break;
            case 28:
                {
                switch ( input.LA(2) ) {
                case 113:
                    {
                    alt167=8;
                    }
                    break;
                case 64:
                    {
                    alt167=7;
                    }
                    break;
                case 112:
                    {
                    alt167=6;
                    }
                    break;
                case 30:
                    {
                    alt167=4;
                    }
                    break;
                case 33:
                    {
                    alt167=5;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7618:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );", 167, 3, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7618:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7619:3: (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class'
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7619:3: (TK_0= '[' TK_1= ']' )+
                    int cnt164=0;
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==41) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7619:4: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_identifierSuffix6125); if (failed) return retval;
                    	    TK_1=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_identifierSuffix6129); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt164 >= 1 ) break loop164;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(164, input);
                                throw eee;
                        }
                        cnt164++;
                    } while (true);

                    TK_2=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6135); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_identifierSuffix6139); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7645:4: (TK_0= '[' expressionGen+= expression TK_1= ']' )+
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7645:4: (TK_0= '[' expressionGen+= expression TK_1= ']' )+
                    int cnt165=0;
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==41) ) {
                            switch ( input.LA(2) ) {
                            case 104:
                                {
                                int LA165_37 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 105:
                                {
                                int LA165_38 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 108:
                                {
                                int LA165_39 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 109:
                                {
                                int LA165_40 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 110:
                                {
                                int LA165_41 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 111:
                                {
                                int LA165_42 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 65:
                                {
                                int LA165_43 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 33:
                                {
                                int LA165_44 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 112:
                                {
                                int LA165_45 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 64:
                                {
                                int LA165_46 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case HexLiteral:
                                {
                                int LA165_47 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case OctalLiteral:
                                {
                                int LA165_48 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case DecimalLiteral:
                                {
                                int LA165_49 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case FloatingPointLiteral:
                                {
                                int LA165_50 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case CharacterLiteral:
                                {
                                int LA165_51 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case StringLiteral:
                                {
                                int LA165_52 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 69:
                                {
                                int LA165_53 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 70:
                                {
                                int LA165_54 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 68:
                                {
                                int LA165_55 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 113:
                                {
                                int LA165_56 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case Identifier:
                                {
                                int LA165_57 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA165_58 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 56:
                                {
                                int LA165_59 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 57:
                                {
                                int LA165_60 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 58:
                                {
                                int LA165_61 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA165_62 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 60:
                                {
                                int LA165_63 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 61:
                                {
                                int LA165_64 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 62:
                                {
                                int LA165_65 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA165_66 = input.LA(3);

                                if ( (synpred245()) ) {
                                    alt165=1;
                                }


                                }
                                break;

                            }

                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7645:5: TK_0= '[' expressionGen+= expression TK_1= ']'
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_identifierSuffix6151); if (failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix6155);
                    	    expressionGen=expression();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    	    list_expressionGen.add(expressionGen);

                    	    TK_1=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_identifierSuffix6159); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt165 >= 1 ) break loop165;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(165, input);
                                throw eee;
                        }
                        cnt165++;
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	
                      		// Create a special CST Node for terminal expressionGen aggregation
                      		if(list_expressionGen != null) {
                      	    for(int pos = 0; pos < list_expressionGen.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_expressionGen != null) {		
                      	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("expression");
                      	    		identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		}
                      		}
                      	
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7686:9: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_identifierSuffix6178);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7704:9: TK_0= '.' TK_1= 'class'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6194); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_identifierSuffix6198); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7730:9: TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6214); if (failed) return retval;
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffix6218);
                    explicitGenericInvocationGen=explicitGenericInvocation();
                    _fsp--;
                    if (failed) return retval;
                    if (list_explicitGenericInvocationGen==null) list_explicitGenericInvocationGen=new ArrayList();
                    list_explicitGenericInvocationGen.add(explicitGenericInvocationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_explicitGenericInvocationGen != null) {
                      	        for(Iterator it = list_explicitGenericInvocationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.explicitGenericInvocation_return r = (JavaParser.explicitGenericInvocation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("explicitGenericInvocation");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7757:9: TK_0= '.' TK_1= 'this'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6234); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_identifierSuffix6238); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7783:9: TK_0= '.' TK_1= 'super' argumentsGen+= arguments
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6254); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_identifierSuffix6258); if (failed) return retval;
                    pushFollow(FOLLOW_arguments_in_identifierSuffix6262);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7819:9: TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix6278); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_identifierSuffix6282); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7819:29: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==33) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7819:30: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_identifierSuffix6287);
                            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix6293);
                    innerCreatorGen=innerCreator();
                    _fsp--;
                    if (failed) return retval;
                    if (list_innerCreatorGen==null) list_innerCreatorGen=new ArrayList();
                    list_innerCreatorGen.add(innerCreatorGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_innerCreatorGen != null) {
                      	        for(Iterator it = list_innerCreatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("innerCreator");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 119, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end identifierSuffix

    public static class creator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start creator
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7867:1: creator returns [Node returnNode] : (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest ) ;
    public final creator_return creator() throws RecognitionException {
        creator_return retval = new creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        List list_nonWildcardTypeArgumentsGen=null;
        List list_createdNameGen=null;
        List list_arrayCreatorRestGen=null;
        List list_classCreatorRestGen=null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope createdNameGen = null;
        RuleReturnScope arrayCreatorRestGen = null;
        RuleReturnScope classCreatorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7868:1: ( (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7868:3: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest )
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7868:30: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==33) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator6315);
                    nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                    list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator6320);
            createdNameGen=createdName();
            _fsp--;
            if (failed) return retval;
            if (list_createdNameGen==null) list_createdNameGen=new ArrayList();
            list_createdNameGen.add(createdNameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7869:9: (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==41) ) {
                alt169=1;
            }
            else if ( (LA169_0==65) ) {
                alt169=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7869:9: (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest )", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7869:10: arrayCreatorRestGen+= arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator6333);
                    arrayCreatorRestGen=arrayCreatorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_arrayCreatorRestGen==null) list_arrayCreatorRestGen=new ArrayList();
                    list_arrayCreatorRestGen.add(arrayCreatorRestGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7869:50: classCreatorRestGen+= classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator6339);
                    classCreatorRestGen=classCreatorRest();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classCreatorRestGen==null) list_classCreatorRestGen=new ArrayList();
                    list_classCreatorRestGen.add(classCreatorRestGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node creatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		creatorReturnNode.setKind("creator");
              	    // Create a CST Node
              		if(list_nonWildcardTypeArgumentsGen != null) {
              	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nonWildcardTypeArguments");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_createdNameGen != null) {
              	        for(Iterator it = list_createdNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.createdName_return r = (JavaParser.createdName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("createdName");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_arrayCreatorRestGen != null) {
              	        for(Iterator it = list_arrayCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arrayCreatorRest_return r = (JavaParser.arrayCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayCreatorRest");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classCreatorRestGen != null) {
              	        for(Iterator it = list_classCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classCreatorRest");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = creatorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 120, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end creator

    public static class createdName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start createdName
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7919:1: createdName returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType );
    public final createdName_return createdName() throws RecognitionException {
        createdName_return retval = new createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;
        List list_typeArgumentsGen=null;
        List list_typeArgumentsGen_1=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope typeArgumentsGen = null;
        RuleReturnScope typeArgumentsGen_1 = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7920:1: (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==Identifier) ) {
                alt173=1;
            }
            else if ( ((LA173_0>=55 && LA173_0<=62)) ) {
                alt173=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7919:1: createdName returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType );", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7920:3: IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_createdName6361); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7920:44: (typeArgumentsGen+= typeArguments )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==33) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: typeArgumentsGen+= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName6365);
                            typeArgumentsGen=typeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_typeArgumentsGen==null) list_typeArgumentsGen=new ArrayList();
                            list_typeArgumentsGen.add(typeArgumentsGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7921:9: (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==28) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7921:10: TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )?
                    	    {
                    	    TK_0=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_createdName6379); if (failed) return retval;
                    	    IdentifierGen_1_List=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_createdName6383); if (failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);

                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7921:70: (typeArgumentsGen_1+= typeArguments )?
                    	    int alt171=2;
                    	    int LA171_0 = input.LA(1);

                    	    if ( (LA171_0==33) ) {
                    	        alt171=1;
                    	    }
                    	    switch (alt171) {
                    	        case 1 :
                    	            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: typeArgumentsGen_1+= typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName6387);
                    	            typeArgumentsGen_1=typeArguments();
                    	            _fsp--;
                    	            if (failed) return retval;
                    	            if (list_typeArgumentsGen_1==null) list_typeArgumentsGen_1=new ArrayList();
                    	            list_typeArgumentsGen_1.add(typeArgumentsGen_1);


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		createdNameReturnNode.setKind("createdName");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			createdNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_typeArgumentsGen != null) {
                      	        for(Iterator it = list_typeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeArguments");
                      	            	createdNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	
                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		createdNameReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			createdNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_typeArgumentsGen_1 != null) {		
                      	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) list_typeArgumentsGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("typeArguments");
                      	    		createdNameReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}
                      	
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = createdNameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7982:7: primitiveTypeGen+= primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_createdName6404);
                    primitiveTypeGen=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		createdNameReturnNode.setKind("createdName");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	createdNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = createdNameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 121, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end createdName

    public static class innerCreator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start innerCreator
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8002:1: innerCreator returns [Node returnNode] : IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest ;
    public final innerCreator_return innerCreator() throws RecognitionException {
        innerCreator_return retval = new innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_classCreatorRestGen=null;
        RuleReturnScope classCreatorRestGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8003:1: (IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8003:3: IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest
            {
            IdentifierGen=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_innerCreator6426); if (failed) return retval;
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6430);
            classCreatorRestGen=classCreatorRest();
            _fsp--;
            if (failed) return retval;
            if (list_classCreatorRestGen==null) list_classCreatorRestGen=new ArrayList();
            list_classCreatorRestGen.add(classCreatorRestGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node innerCreatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		innerCreatorReturnNode.setKind("innerCreator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue(IdentifierGen.getText());
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			innerCreatorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_classCreatorRestGen != null) {
              	        for(Iterator it = list_classCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classCreatorRest");
              	            	innerCreatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = innerCreatorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 122, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end innerCreator

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start arrayCreatorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8032:1: arrayCreatorRest returns [Node returnNode] : TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* ) ;
    public final arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        arrayCreatorRest_return retval = new arrayCreatorRest_return();
        retval.start = input.LT(1);
        int arrayCreatorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_arrayInitializerGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope arrayInitializerGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8033:1: (TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8033:3: TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )
            {
            TK_0=(Token)input.LT(1);
            match(input,41,FOLLOW_41_in_arrayCreatorRest6451); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8034:9: (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==42) ) {
                alt177=1;
            }
            else if ( (LA177_0==Identifier||(LA177_0>=FloatingPointLiteral && LA177_0<=DecimalLiteral)||LA177_0==33||LA177_0==40||(LA177_0>=55 && LA177_0<=62)||(LA177_0>=64 && LA177_0<=65)||(LA177_0>=68 && LA177_0<=70)||(LA177_0>=104 && LA177_0<=105)||(LA177_0>=108 && LA177_0<=113)) ) {
                alt177=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("8034:9: (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8034:13: TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_arrayCreatorRest6467); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8034:22: (TK_2= '[' TK_3= ']' )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==41) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8034:23: TK_2= '[' TK_3= ']'
                    	    {
                    	    TK_2=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest6472); if (failed) return retval;
                    	    TK_3=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest6476); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest6482);
                    arrayInitializerGen=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_arrayInitializerGen==null) list_arrayInitializerGen=new ArrayList();
                    list_arrayInitializerGen.add(arrayInitializerGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:13: expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest6498);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_4=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_arrayCreatorRest6502); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:48: (TK_5= '[' expressionGen_1+= expression TK_6= ']' )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==41) ) {
                            switch ( input.LA(2) ) {
                            case 104:
                                {
                                int LA175_38 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 105:
                                {
                                int LA175_39 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 108:
                                {
                                int LA175_40 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 109:
                                {
                                int LA175_41 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 110:
                                {
                                int LA175_42 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 111:
                                {
                                int LA175_43 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 65:
                                {
                                int LA175_44 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 33:
                                {
                                int LA175_45 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 112:
                                {
                                int LA175_46 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 64:
                                {
                                int LA175_47 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case HexLiteral:
                                {
                                int LA175_48 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case OctalLiteral:
                                {
                                int LA175_49 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case DecimalLiteral:
                                {
                                int LA175_50 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case FloatingPointLiteral:
                                {
                                int LA175_51 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case CharacterLiteral:
                                {
                                int LA175_52 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case StringLiteral:
                                {
                                int LA175_53 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 69:
                                {
                                int LA175_54 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 70:
                                {
                                int LA175_55 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 68:
                                {
                                int LA175_56 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 113:
                                {
                                int LA175_57 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case Identifier:
                                {
                                int LA175_58 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA175_59 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 56:
                                {
                                int LA175_60 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 57:
                                {
                                int LA175_61 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 58:
                                {
                                int LA175_62 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA175_63 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 60:
                                {
                                int LA175_64 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 61:
                                {
                                int LA175_65 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 62:
                                {
                                int LA175_66 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA175_67 = input.LA(3);

                                if ( (synpred261()) ) {
                                    alt175=1;
                                }


                                }
                                break;

                            }

                        }


                        switch (alt175) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:49: TK_5= '[' expressionGen_1+= expression TK_6= ']'
                    	    {
                    	    TK_5=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest6507); if (failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest6511);
                    	    expressionGen_1=expression();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                    	    list_expressionGen_1.add(expressionGen_1);

                    	    TK_6=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest6515); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:97: (TK_7= '[' TK_8= ']' )*
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==41) ) {
                            int LA176_2 = input.LA(2);

                            if ( (LA176_2==42) ) {
                                alt176=1;
                            }


                        }


                        switch (alt176) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:98: TK_7= '[' TK_8= ']'
                    	    {
                    	    TK_7=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest6522); if (failed) return retval;
                    	    TK_8=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest6526); if (failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop176;
                        }
                    } while (true);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node arrayCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayCreatorRestReturnNode.setKind("arrayCreatorRest");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_arrayInitializerGen != null) {
              	        for(Iterator it = list_arrayInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayInitializer");
              	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	
              		// Create a special CST Node for terminal expressionGen_1 aggregation
              		if(list_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expressionGen_1 != null) {		
              	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression");
              	    		arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue(TK_6.getText());
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayCreatorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 123, arrayCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arrayCreatorRest

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start classCreatorRest
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8126:1: classCreatorRest returns [Node returnNode] : argumentsGen+= arguments (classBodyGen+= classBody )? ;
    public final classCreatorRest_return classCreatorRest() throws RecognitionException {
        classCreatorRest_return retval = new classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        List list_argumentsGen=null;
        List list_classBodyGen=null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8127:1: (argumentsGen+= arguments (classBodyGen+= classBody )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8127:3: argumentsGen+= arguments (classBodyGen+= classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6559);
            argumentsGen=arguments();
            _fsp--;
            if (failed) return retval;
            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
            list_argumentsGen.add(argumentsGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8127:39: (classBodyGen+= classBody )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==37) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: classBodyGen+= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6563);
                    classBodyGen=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
                    list_classBodyGen.add(classBodyGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node classCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classCreatorRestReturnNode.setKind("classCreatorRest");
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classCreatorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 124, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classCreatorRest

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start explicitGenericInvocation
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8157:1: explicitGenericInvocation returns [Node returnNode] : nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix ;
    public final explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        explicitGenericInvocation_return retval = new explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        List list_nonWildcardTypeArgumentsGen=null;
        List list_explicitGenericInvocationSuffixGen=null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope explicitGenericInvocationSuffixGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8158:1: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8158:3: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix
            {
            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6586);
            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();
            _fsp--;
            if (failed) return retval;
            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen);

            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6590);
            explicitGenericInvocationSuffixGen=explicitGenericInvocationSuffix();
            _fsp--;
            if (failed) return retval;
            if (list_explicitGenericInvocationSuffixGen==null) list_explicitGenericInvocationSuffixGen=new ArrayList();
            list_explicitGenericInvocationSuffixGen.add(explicitGenericInvocationSuffixGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node explicitGenericInvocationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		explicitGenericInvocationReturnNode.setKind("explicitGenericInvocation");
              	    // Create a CST Node
              		if(list_nonWildcardTypeArgumentsGen != null) {
              	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nonWildcardTypeArguments");
              	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_explicitGenericInvocationSuffixGen != null) {
              	        for(Iterator it = list_explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
              	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = explicitGenericInvocationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 125, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end explicitGenericInvocation

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nonWildcardTypeArguments
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8188:1: nonWildcardTypeArguments returns [Node returnNode] : TK_0= '<' typeListGen+= typeList TK_1= '>' ;
    public final nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        nonWildcardTypeArguments_return retval = new nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_typeListGen=null;
        RuleReturnScope typeListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8189:1: (TK_0= '<' typeListGen+= typeList TK_1= '>' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8189:3: TK_0= '<' typeListGen+= typeList TK_1= '>'
            {
            TK_0=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_nonWildcardTypeArguments6612); if (failed) return retval;
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6616);
            typeListGen=typeList();
            _fsp--;
            if (failed) return retval;
            if (list_typeListGen==null) list_typeListGen=new ArrayList();
            list_typeListGen.add(typeListGen);

            TK_1=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_nonWildcardTypeArguments6620); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node nonWildcardTypeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nonWildcardTypeArgumentsReturnNode.setKind("nonWildcardTypeArguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	nonWildcardTypeArgumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nonWildcardTypeArgumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 126, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end nonWildcardTypeArguments

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start explicitGenericInvocationSuffix
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8227:1: explicitGenericInvocationSuffix returns [Node returnNode] : (TK_0= 'super' superSuffixGen+= superSuffix | IdentifierGen= Identifier argumentsGen+= arguments );
    public final explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        explicitGenericInvocationSuffix_return retval = new explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_superSuffixGen=null;
        List list_argumentsGen=null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope argumentsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8228:1: (TK_0= 'super' superSuffixGen+= superSuffix | IdentifierGen= Identifier argumentsGen+= arguments )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==64) ) {
                alt179=1;
            }
            else if ( (LA179_0==Identifier) ) {
                alt179=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("8227:1: explicitGenericInvocationSuffix returns [Node returnNode] : (TK_0= 'super' superSuffixGen+= superSuffix | IdentifierGen= Identifier argumentsGen+= arguments );", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8228:3: TK_0= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_explicitGenericInvocationSuffix6642); if (failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6646);
                    superSuffixGen=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		explicitGenericInvocationSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = explicitGenericInvocationSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8255:6: IdentifierGen= Identifier argumentsGen+= arguments
                    {
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6659); if (failed) return retval;
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6663);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			explicitGenericInvocationSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = explicitGenericInvocationSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 127, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end explicitGenericInvocationSuffix

    public static class selector_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start selector
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8284:1: selector returns [Node returnNode] : (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' );
    public final selector_return selector() throws RecognitionException {
        selector_return retval = new selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        List list_argumentsGen=null;
        List list_superSuffixGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_innerCreatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope innerCreatorGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8285:1: (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' )
            int alt182=5;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==28) ) {
                switch ( input.LA(2) ) {
                case 112:
                    {
                    alt182=2;
                    }
                    break;
                case Identifier:
                    {
                    alt182=1;
                    }
                    break;
                case 64:
                    {
                    alt182=3;
                    }
                    break;
                case 113:
                    {
                    alt182=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("8284:1: selector returns [Node returnNode] : (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' );", 182, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA182_0==41) ) {
                alt182=5;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("8284:1: selector returns [Node returnNode] : (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' );", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8285:3: TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector6685); if (failed) return retval;
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selector6689); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8285:37: (argumentsGen+= arguments )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==65) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8285:38: argumentsGen+= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector6694);
                            argumentsGen=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			selectorReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8321:6: TK_0= '.' TK_1= 'this'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector6709); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_selector6713); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8347:6: TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector6726); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_selector6730); if (failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_selector6734);
                    superSuffixGen=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8383:6: TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector6747); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_selector6751); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8383:26: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==33) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8383:27: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6756);
                            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector6762);
                    innerCreatorGen=innerCreator();
                    _fsp--;
                    if (failed) return retval;
                    if (list_innerCreatorGen==null) list_innerCreatorGen=new ArrayList();
                    list_innerCreatorGen.add(innerCreatorGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_innerCreatorGen != null) {
                      	        for(Iterator it = list_innerCreatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("innerCreator");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8429:6: TK_0= '[' expressionGen+= expression TK_1= ']'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,41,FOLLOW_41_in_selector6775); if (failed) return retval;
                    pushFollow(FOLLOW_expression_in_selector6779);
                    expressionGen=expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_1=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_selector6783); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 128, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end selector

    public static class superSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start superSuffix
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8467:1: superSuffix returns [Node returnNode] : (argumentsGen+= arguments | TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? );
    public final superSuffix_return superSuffix() throws RecognitionException {
        superSuffix_return retval = new superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_argumentsGen=null;
        RuleReturnScope argumentsGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8468:1: (argumentsGen+= arguments | TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==65) ) {
                alt184=1;
            }
            else if ( (LA184_0==28) ) {
                alt184=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("8467:1: superSuffix returns [Node returnNode] : (argumentsGen+= arguments | TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? );", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8468:3: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6805);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		superSuffixReturnNode.setKind("superSuffix");
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	superSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = superSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8486:6: TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_superSuffix6818); if (failed) return retval;
                    IdentifierGen=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_superSuffix6822); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8486:40: (argumentsGen+= arguments )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==65) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8486:41: argumentsGen+= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6827);
                            argumentsGen=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		superSuffixReturnNode.setKind("superSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		superSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue(IdentifierGen.getText());
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			superSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	superSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = superSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 129, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end superSuffix

    public static class arguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start arguments
    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8524:1: arguments returns [Node returnNode] : TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')' ;
    public final arguments_return arguments() throws RecognitionException {
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_expressionListGen=null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8525:1: (TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8525:3: TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')'
            {
            TK_0=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_arguments6853); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8525:29: (expressionListGen+= expressionList )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==Identifier||(LA185_0>=FloatingPointLiteral && LA185_0<=DecimalLiteral)||LA185_0==33||LA185_0==40||(LA185_0>=55 && LA185_0<=62)||(LA185_0>=64 && LA185_0<=65)||(LA185_0>=68 && LA185_0<=70)||(LA185_0>=104 && LA185_0<=105)||(LA185_0>=108 && LA185_0<=113)) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: expressionListGen+= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments6857);
                    expressionListGen=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
                    list_expressionListGen.add(expressionListGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_arguments6862); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node argumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argumentsReturnNode.setKind("arguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		argumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionListGen != null) {
              	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expressionList");
              	            	argumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		argumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 130, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arguments

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:100:19: ( annotations )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:100:19: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred162);
        annotations();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred38
    public final void synpred38_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1203:4: ( methodDeclaration )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1203:4: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred38927);
        methodDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred38

    // $ANTLR start synpred39
    public final void synpred39_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1221:4: ( fieldDeclaration )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:1221:4: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred39938);
        fieldDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred39

    // $ANTLR start synpred85
    public final void synpred85_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:29: ( '.' Identifier )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:2685:29: '.' Identifier
        {
        match(input,28,FOLLOW_28_in_synpred852235); if (failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred852239); if (failed) return ;

        }
    }
    // $ANTLR end synpred85

    // $ANTLR start synpred120
    public final void synpred120_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3654:18: ( annotation )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:3654:18: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred1203074);
        annotation();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred120

    // $ANTLR start synpred135
    public final void synpred135_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4169:6: ( classDeclaration ( ';' )? )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4169:6: classDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred1353478);
        classDeclaration();
        _fsp--;
        if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4169:48: ( ';' )?
        int alt201=2;
        int LA201_0 = input.LA(1);

        if ( (LA201_0==25) ) {
            alt201=1;
        }
        switch (alt201) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: ';'
                {
                match(input,25,FOLLOW_25_in_synpred1353482); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred135

    // $ANTLR start synpred137
    public final void synpred137_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4196:6: ( interfaceDeclaration ( ';' )? )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4196:6: interfaceDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred1373496);
        interfaceDeclaration();
        _fsp--;
        if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4196:56: ( ';' )?
        int alt202=2;
        int LA202_0 = input.LA(1);

        if ( (LA202_0==25) ) {
            alt202=1;
        }
        switch (alt202) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: ';'
                {
                match(input,25,FOLLOW_25_in_synpred1373500); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred137

    // $ANTLR start synpred139
    public final void synpred139_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4223:6: ( enumDeclaration ( ';' )? )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4223:6: enumDeclaration ( ';' )?
        {
        pushFollow(FOLLOW_enumDeclaration_in_synpred1393514);
        enumDeclaration();
        _fsp--;
        if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4223:46: ( ';' )?
        int alt203=2;
        int LA203_0 = input.LA(1);

        if ( (LA203_0==25) ) {
            alt203=1;
        }
        switch (alt203) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: ';'
                {
                match(input,25,FOLLOW_25_in_synpred1393518); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred139

    // $ANTLR start synpred144
    public final void synpred144_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4459:3: ( localVariableDeclaration )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4459:3: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred1443716);
        localVariableDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred144

    // $ANTLR start synpred145
    public final void synpred145_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4477:4: ( classOrInterfaceDeclaration )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4477:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred1453727);
        classOrInterfaceDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred145

    // $ANTLR start synpred150
    public final void synpred150_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4639:89: ( 'else' statement )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4639:89: 'else' statement
        {
        match(input,76,FOLLOW_76_in_synpred1503866); if (failed) return ;
        pushFollow(FOLLOW_statement_in_synpred1503870);
        statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred150

    // $ANTLR start synpred155
    public final void synpred155_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4843:9: ( catches 'finally' block )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4843:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred1553984);
        catches();
        _fsp--;
        if (failed) return ;
        match(input,81,FOLLOW_81_in_synpred1553988); if (failed) return ;
        pushFollow(FOLLOW_block_in_synpred1553992);
        block();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred155

    // $ANTLR start synpred156
    public final void synpred156_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4844:9: ( catches )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:4844:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred1564004);
        catches();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred156

    // $ANTLR start synpred173
    public final void synpred173_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5430:3: ( 'case' constantExpression ':' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5430:3: 'case' constantExpression ':'
        {
        match(input,88,FOLLOW_88_in_synpred1734397); if (failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred1734401);
        constantExpression();
        _fsp--;
        if (failed) return ;
        match(input,74,FOLLOW_74_in_synpred1734405); if (failed) return ;

        }
    }
    // $ANTLR end synpred173

    // $ANTLR start synpred174
    public final void synpred174_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5466:6: ( 'case' enumConstantName ':' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5466:6: 'case' enumConstantName ':'
        {
        match(input,88,FOLLOW_88_in_synpred1744418); if (failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred1744422);
        enumConstantName();
        _fsp--;
        if (failed) return ;
        match(input,74,FOLLOW_74_in_synpred1744426); if (failed) return ;

        }
    }
    // $ANTLR end synpred174

    // $ANTLR start synpred176
    public final void synpred176_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5567:4: ( forVarControl )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5567:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred1764502);
        forVarControl();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred176

    // $ANTLR start synpred181
    public final void synpred181_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:3: ( ( variableModifier )* type variableDeclarators )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:3: ( variableModifier )* type variableDeclarators
        {
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5644:22: ( variableModifier )*
        loop210:
        do {
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==49||LA210_0==71) ) {
                alt210=1;
            }


            switch (alt210) {
        	case 1 :
        	    // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred1814553);
        	    variableModifier();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    break loop210;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred1814558);
        type();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred1814562);
        variableDeclarators();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred181

    // $ANTLR start synpred184
    public final void synpred184_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:52: ( assignmentOperator expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:5911:52: assignmentOperator expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred1844772);
        assignmentOperator();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_expression_in_synpred1844776);
        expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred184

    // $ANTLR start synpred195
    public final void synpred195_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6140:9: ( '>' '>' '=' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6140:9: '>' '>' '='
        {
        match(input,35,FOLLOW_35_in_synpred1954968); if (failed) return ;
        match(input,35,FOLLOW_35_in_synpred1954972); if (failed) return ;
        match(input,44,FOLLOW_44_in_synpred1954976); if (failed) return ;

        }
    }
    // $ANTLR end synpred195

    // $ANTLR start synpred205
    public final void synpred205_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:43: ( relationalOp shiftExpression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6600:43: relationalOp shiftExpression
        {
        pushFollow(FOLLOW_relationalOp_in_synpred2055335);
        relationalOp();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred2055339);
        shiftExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred205

    // $ANTLR start synpred209
    public final void synpred209_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:49: ( shiftOp additiveExpression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6709:49: shiftOp additiveExpression
        {
        pushFollow(FOLLOW_shiftOp_in_synpred2095421);
        shiftOp();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred2095425);
        additiveExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred209

    // $ANTLR start synpred211
    public final void synpred211_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:24: ( '>' '>' '>' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:6754:24: '>' '>' '>'
        {
        match(input,35,FOLLOW_35_in_synpred2115469); if (failed) return ;
        match(input,35,FOLLOW_35_in_synpred2115473); if (failed) return ;
        match(input,35,FOLLOW_35_in_synpred2115477); if (failed) return ;

        }
    }
    // $ANTLR end synpred211

    // $ANTLR start synpred223
    public final void synpred223_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7129:9: ( castExpression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7129:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred2235752);
        castExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred223

    // $ANTLR start synpred227
    public final void synpred227_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7196:4: ( '(' primitiveType ')' unaryExpression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7196:4: '(' primitiveType ')' unaryExpression
        {
        match(input,65,FOLLOW_65_in_synpred2275809); if (failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred2275813);
        primitiveType();
        _fsp--;
        if (failed) return ;
        match(input,66,FOLLOW_66_in_synpred2275817); if (failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred2275821);
        unaryExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred227

    // $ANTLR start synpred228
    public final void synpred228_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:18: ( type )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7242:18: type
        {
        pushFollow(FOLLOW_type_in_synpred2285841);
        type();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred228

    // $ANTLR start synpred232
    public final void synpred232_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:22: ( '.' Identifier )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:22: '.' Identifier
        {
        match(input,28,FOLLOW_28_in_synpred2325941); if (failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred2325945); if (failed) return ;

        }
    }
    // $ANTLR end synpred232

    // $ANTLR start synpred233
    public final void synpred233_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:65: ( identifierSuffix )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7367:65: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred2335952);
        identifierSuffix();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred233

    // $ANTLR start synpred238
    public final void synpred238_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:35: ( '.' Identifier )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:35: '.' Identifier
        {
        match(input,28,FOLLOW_28_in_synpred2386031); if (failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred2386035); if (failed) return ;

        }
    }
    // $ANTLR end synpred238

    // $ANTLR start synpred239
    public final void synpred239_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:80: ( identifierSuffix )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7492:80: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred2396042);
        identifierSuffix();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred239

    // $ANTLR start synpred245
    public final void synpred245_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7645:5: ( '[' expression ']' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:7645:5: '[' expression ']'
        {
        match(input,41,FOLLOW_41_in_synpred2456151); if (failed) return ;
        pushFollow(FOLLOW_expression_in_synpred2456155);
        expression();
        _fsp--;
        if (failed) return ;
        match(input,42,FOLLOW_42_in_synpred2456159); if (failed) return ;

        }
    }
    // $ANTLR end synpred245

    // $ANTLR start synpred261
    public final void synpred261_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:49: ( '[' expression ']' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.Java2KDMModel/files/gen/Java.ge3:8035:49: '[' expression ']'
        {
        match(input,41,FOLLOW_41_in_synpred2616507); if (failed) return ;
        pushFollow(FOLLOW_expression_in_synpred2616511);
        expression();
        _fsp--;
        if (failed) return ;
        match(input,42,FOLLOW_42_in_synpred2616515); if (failed) return ;

        }
    }
    // $ANTLR end synpred261

    public final boolean synpred144() {
        backtracking++;
        int start = input.mark();
        try {
            synpred144_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred145() {
        backtracking++;
        int start = input.mark();
        try {
            synpred145_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred85() {
        backtracking++;
        int start = input.mark();
        try {
            synpred85_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred120() {
        backtracking++;
        int start = input.mark();
        try {
            synpred120_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred181() {
        backtracking++;
        int start = input.mark();
        try {
            synpred181_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred211() {
        backtracking++;
        int start = input.mark();
        try {
            synpred211_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred184() {
        backtracking++;
        int start = input.mark();
        try {
            synpred184_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred239() {
        backtracking++;
        int start = input.mark();
        try {
            synpred239_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred238() {
        backtracking++;
        int start = input.mark();
        try {
            synpred238_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred233() {
        backtracking++;
        int start = input.mark();
        try {
            synpred233_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred232() {
        backtracking++;
        int start = input.mark();
        try {
            synpred232_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred135() {
        backtracking++;
        int start = input.mark();
        try {
            synpred135_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred39() {
        backtracking++;
        int start = input.mark();
        try {
            synpred39_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred139() {
        backtracking++;
        int start = input.mark();
        try {
            synpred139_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred38() {
        backtracking++;
        int start = input.mark();
        try {
            synpred38_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred137() {
        backtracking++;
        int start = input.mark();
        try {
            synpred137_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred209() {
        backtracking++;
        int start = input.mark();
        try {
            synpred209_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred205() {
        backtracking++;
        int start = input.mark();
        try {
            synpred205_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred223() {
        backtracking++;
        int start = input.mark();
        try {
            synpred223_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred174() {
        backtracking++;
        int start = input.mark();
        try {
            synpred174_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred261() {
        backtracking++;
        int start = input.mark();
        try {
            synpred261_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred173() {
        backtracking++;
        int start = input.mark();
        try {
            synpred173_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred176() {
        backtracking++;
        int start = input.mark();
        try {
            synpred176_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred150() {
        backtracking++;
        int start = input.mark();
        try {
            synpred150_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred227() {
        backtracking++;
        int start = input.mark();
        try {
            synpred227_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred228() {
        backtracking++;
        int start = input.mark();
        try {
            synpred228_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred195() {
        backtracking++;
        int start = input.mark();
        try {
            synpred195_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred156() {
        backtracking++;
        int start = input.mark();
        try {
            synpred156_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred155() {
        backtracking++;
        int start = input.mark();
        try {
            synpred155_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred245() {
        backtracking++;
        int start = input.mark();
        try {
            synpred245_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_annotations_in_compilationUnit62 = new BitSet(new long[]{0x007FE0804F000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit69 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit82 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit95 = new BitSet(new long[]{0x007FE0804A000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_24_in_packageDeclaration117 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration121 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_packageDeclaration125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_importDeclaration147 = new BitSet(new long[]{0x0000000008000010L});
    public static final BitSet FOLLOW_27_in_importDeclaration151 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration156 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration161 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration165 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration172 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration176 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_importDeclaration182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_typeDeclaration220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration242 = new BitSet(new long[]{0x007FE08048000020L,0x0000000000000080L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_normalClassDeclaration315 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalClassDeclaration319 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration324 = new BitSet(new long[]{0x0000002180000000L});
    public static final BitSet FOLLOW_31_in_normalClassDeclaration339 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration343 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_32_in_normalClassDeclaration358 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration362 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeParameters398 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters402 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeParameters407 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters411 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeParameters417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter438 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_31_in_typeParameter443 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_bound_in_typeParameter447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound472 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_bound477 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_bound481 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration504 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration508 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_32_in_enumDeclaration513 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration517 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_enumBody545 = new BitSet(new long[]{0x0000004402000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody549 = new BitSet(new long[]{0x0000004402000000L});
    public static final BitSet FOLLOW_34_in_enumBody554 = new BitSet(new long[]{0x0000004002000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody559 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_enumBody564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants585 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_enumConstants590 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants594 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant618 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant623 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant628 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_enumBodyDeclarations659 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations664 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_normalInterfaceDeclaration722 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration726 = new BitSet(new long[]{0x0000002280000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration730 = new BitSet(new long[]{0x0000002080000000L});
    public static final BitSet FOLLOW_31_in_normalInterfaceDeclaration736 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration740 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList768 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_typeList773 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeList777 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_37_in_classBody801 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody805 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_classBody810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_interfaceBody832 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody836 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_interfaceBody841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_classBodyDeclaration862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_classBodyDeclaration873 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration889 = new BitSet(new long[]{0x7FFFE18248000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_memberDecl949 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1016 = new BitSet(new long[]{0x7F80010000000010L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1043 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_40_in_genericMethodOrConstructorRest1049 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1094 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1123 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1127 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_fieldDeclaration1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1154 = new BitSet(new long[]{0x7FFFE18248000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_interfaceBodyDeclaration1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_interfaceMemberDecl1222 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMemberDecl1226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl1284 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1288 = new BitSet(new long[]{0x0000120000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1314 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodOrFieldRest1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1351 = new BitSet(new long[]{0x00000A2002000000L});
    public static final BitSet FOLLOW_41_in_methodDeclaratorRest1356 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_methodDeclaratorRest1360 = new BitSet(new long[]{0x00000A2002000000L});
    public static final BitSet FOLLOW_43_in_methodDeclaratorRest1375 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest1379 = new BitSet(new long[]{0x0000002002000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_methodDeclaratorRest1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1445 = new BitSet(new long[]{0x0000082002000000L});
    public static final BitSet FOLLOW_43_in_voidMethodDeclaratorRest1450 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1454 = new BitSet(new long[]{0x0000002002000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_voidMethodDeclaratorRest1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1520 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_41_in_interfaceMethodDeclaratorRest1525 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_interfaceMethodDeclaratorRest1529 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_43_in_interfaceMethodDeclaratorRest1536 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1540 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodDeclaratorRest1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1568 = new BitSet(new long[]{0x7F80010000000010L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl1573 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_40_in_interfaceGenericMethodDecl1579 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1618 = new BitSet(new long[]{0x0000080002000000L});
    public static final BitSet FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1623 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1627 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest1655 = new BitSet(new long[]{0x0000082000000000L});
    public static final BitSet FOLLOW_43_in_constructorDeclaratorRest1660 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1664 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest1670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator1691 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1717 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_variableDeclarators1722 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1726 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator1749 = new BitSet(new long[]{0x0000120000000002L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorRest1776 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorRest1780 = new BitSet(new long[]{0x0000120000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1787 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1804 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1835 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_constantDeclaratorsRest1840 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest1844 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_41_in_constantDeclaratorRest1871 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_constantDeclaratorRest1875 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_44_in_constantDeclaratorRest1881 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId1907 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorId1912 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorId1916 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_arrayInitializer1977 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1982 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1987 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1991 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1998 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_arrayInitializer2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_modifier2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_modifier2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_modifier2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_modifier2094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_modifier2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_modifier2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_modifier2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_modifier2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier2190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2230 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_packageOrTypeName2235 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2239 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2306 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_typeName2310 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_typeName2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_type2335 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2340 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_28_in_type2347 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_type2351 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2356 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_41_in_type2366 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2370 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type2383 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_type2388 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2392 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_55_in_primitiveType2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_primitiveType2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primitiveType2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_primitiveType2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_primitiveType2473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_primitiveType2487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primitiveType2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_primitiveType2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_variableModifier2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeArguments2576 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2580 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeArguments2585 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2589 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeArguments2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_typeArgument2628 = new BitSet(new long[]{0x0000000080000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_31_in_typeArgument2634 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_64_in_typeArgument2640 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeArgument2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2669 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_qualifiedNameList2674 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2678 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_65_in_formalParameters2702 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000084L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_formalParameters2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2733 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2738 = new BitSet(new long[]{0x0000000000000012L,0x0000000000000008L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2765 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_formalParameterDeclsRest2770 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_formalParameterDeclsRest2789 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2836 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_qualifiedName2841 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2845 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal2903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_literal2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_booleanLiteral3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_booleanLiteral3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_annotation3096 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationName_in_annotation3100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotation3105 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F7L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotation3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3138 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_annotationName3143 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3147 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3171 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_elementValuePairs3176 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3180 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3205 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_elementValuePair3209 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_elementValueArrayInitializer3285 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3290 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_elementValueArrayInitializer3295 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3299 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_38_in_elementValueArrayInitializer3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_annotationTypeDeclaration3330 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_annotationTypeDeclaration3334 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3338 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_annotationTypeBody3364 = new BitSet(new long[]{0x7FFFE0C048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3369 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_annotationTypeBody3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3398 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3404 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3429 = new BitSet(new long[]{0x7FFFE08048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3457 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3461 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3478 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3496 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3514 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3532 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotationMethodRest3598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotationMethodRest3602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_defaultValue3657 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_block3685 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_block3689 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_38_in_block3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3764 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3769 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3773 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_localVariableDeclaration3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_statement3813 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3817 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement3822 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3826 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement3846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3850 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_76_in_statement3866 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_statement3886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_statement3890 = new BitSet(new long[]{0x7F82010202000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_forControl_in_statement3894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement3898 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement3916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3920 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement3938 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_statement3946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3950 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement3968 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_catches_in_statement3984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_statement3988 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_statement4016 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_statement4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement4046 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_statement4050 = new BitSet(new long[]{0x0000004000000000L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement4054 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_statement4058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_statement4072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement4076 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement4094 = new BitSet(new long[]{0x7F80010202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement4098 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_statement4117 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement4121 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_statement4139 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement4143 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_statement4162 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement4166 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_statement4185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4199 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement4221 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement4225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_catchClause_in_catches4252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_catchClause4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_catchClause4280 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_catchClause4288 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_catchClause4292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4313 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameter4318 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4346 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4370 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4374 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_88_in_switchLabel4397 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_switchLabel4418 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_switchLabel4439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_moreStatementExpressions4466 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4470 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4513 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4518 = new BitSet(new long[]{0x7F80010202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forControl4522 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4527 = new BitSet(new long[]{0x7F80010200000FD2L,0x0003F30000000073L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4553 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forInit4558 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4595 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forVarControl4600 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_forVarControl4608 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forVarControl4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_parExpression4656 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_parExpression4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_parExpression4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4688 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_expressionList4693 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expressionList4697 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression4723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4767 = new BitSet(new long[]{0x0000100A00000002L,0x00000001FE000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression4772 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expression4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_assignmentOperator4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_assignmentOperator4832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_assignmentOperator4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_assignmentOperator4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_assignmentOperator4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_assignmentOperator4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_assignmentOperator4912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_assignmentOperator4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4944 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4948 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4968 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4992 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4996 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator5000 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5027 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_conditionalExpression5033 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_conditionalExpression5041 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5071 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_conditionalOrExpression5077 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5081 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5107 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalAndExpression5113 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5117 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_inclusiveOrExpression5149 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5153 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5179 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_exclusiveOrExpression5185 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5189 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5215 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_andExpression5221 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5225 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5251 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_101_in_equalityExpression5258 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_102_in_equalityExpression5264 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5269 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5295 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_103_in_instanceOfExpression5300 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5329 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression5335 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5339 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_relationalOp5365 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp5375 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_relationalOp5385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5415 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression5421 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5425 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_shiftOp5459 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_shiftOp5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp5469 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5473 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp5483 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5512 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_104_in_additiveExpression5519 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_105_in_additiveExpression5525 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5530 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5556 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_29_in_multiplicativeExpression5564 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_106_in_multiplicativeExpression5570 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_107_in_multiplicativeExpression5576 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5582 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_104_in_unaryExpression5609 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_unaryExpression5627 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_unaryExpression5647 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpression5667 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpressionNotPlusMinus5713 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_unaryExpressionNotPlusMinus5732 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus5768 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus5772 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_108_in_unaryExpressionNotPlusMinus5778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpressionNotPlusMinus5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5809 = new BitSet(new long[]{0x7F80000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5817 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5836 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_type_in_castExpression5841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_castExpression5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5852 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003C00000000073L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary5896 = new BitSet(new long[]{0x0000000000000010L,0x0001000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary5909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_primary5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_primary5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_primary5936 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary5941 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary5945 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_primary5970 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_primary5974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary5990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary6006 = new BitSet(new long[]{0x7F80000200000010L});
    public static final BitSet FOLLOW_creator_in_primary6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6026 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary6031 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary6035 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary6060 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_41_in_primary6065 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_primary6069 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_primary6075 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary6079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_primary6095 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_primary6099 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary6103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix6125 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix6129 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6135 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix6151 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix6155 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix6159 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix6178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6194 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix6198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6214 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffix6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6234 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_identifierSuffix6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_identifierSuffix6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix6262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6278 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffix6282 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_identifierSuffix6287 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator6315 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_createdName_in_creator6320 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_createdName6361 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6365 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_createdName6379 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_createdName6383 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6387 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6451 = new BitSet(new long[]{0x7F80050200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6467 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6472 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6476 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest6482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6498 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6502 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6507 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6511 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6515 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6522 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6526 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6559 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6586 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_nonWildcardTypeArguments6612 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6616 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_nonWildcardTypeArguments6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_explicitGenericInvocationSuffix6642 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6685 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_selector6689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_selector6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6709 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_selector6713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_selector6730 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_selector6734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6747 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector6751 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6756 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_innerCreator_in_selector6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_selector6775 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_selector6779 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_selector6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_superSuffix6818 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_arguments6853 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000077L});
    public static final BitSet FOLLOW_expressionList_in_arguments6857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_arguments6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred38927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred39938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred852235 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred852239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred1203074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred1353478 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1353482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred1373496 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1373500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_synpred1393514 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1393518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred1443716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred1453727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred1503866 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_synpred1503870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred1553984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_synpred1553988 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_synpred1553992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred1564004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred1734397 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_synpred1734401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred1734405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred1744418 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred1744422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred1744426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred1764502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred1814553 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_synpred1814558 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred1814562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred1844772 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred1844776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred1954968 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred1954972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_synpred1954976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred2055335 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred2055339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred2095421 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred2095425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred2115469 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred2115473 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred2115477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred2235752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred2275809 = new BitSet(new long[]{0x7F80000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred2275813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred2275817 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred2275821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred2285841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred2325941 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred2325945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred2335952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred2386031 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred2386035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred2396042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred2456151 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred2456155 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred2456159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred2616507 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred2616511 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred2616515 = new BitSet(new long[]{0x0000000000000002L});

}
//*******************************************************************************
// * Copyright (c) 2008, 2012
// * All rights reserved. This program and the accompanying materials
// * are made available under the terms of the Eclipse Public License v1.0
// * which accompanies this distribution, and is available at
// * http://www.eclipse.org/legal/epl-v10.html
// *
// * Contributors:
// *    Javier Canovas (jlcanovas@um.es) 
// *******************************************************************************/

grammar json;

options {
	backtrack=true;

	output=template;
}  


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
mainRule returns [Node returnNode] 
: 
	complexElementGen+=complexElement 
	{
		// Create return CST Node
		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mainRuleReturnNode.setKind("mainRule");
	    // Create a CST Node
		if($complexElementGen != null) {
	        for(Iterator it = $complexElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.complexElement_return r = (jsonParser.complexElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("complexElement");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$mainRule.returnNode = mainRuleReturnNode;
	} | singleElementGen+=singleElement 
	{
		// Create return CST Node
		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mainRuleReturnNode.setKind("mainRule");
	    // Create a CST Node
		if($singleElementGen != null) {
	        for(Iterator it = $singleElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.singleElement_return r = (jsonParser.singleElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("singleElement");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$mainRule.returnNode = mainRuleReturnNode;
	};

complexElement returns [Node returnNode] 
:
	TK_0='[' singleElementGen+=singleElement (TK_1=',' singleElementGen_1+=singleElement)* TK_2=']' 
	{
		// Create return CST Node
		Node complexElementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		complexElementReturnNode.setKind("complexElement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		complexElementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($singleElementGen != null) {
	        for(Iterator it = $singleElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.singleElement_return r = (jsonParser.singleElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("singleElement");
	            	complexElementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal singleElementGen_1 aggregation
		if($singleElementGen_1 != null) {
	    for(int pos = 0; pos < $singleElementGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		complexElementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($singleElementGen_1 != null) {		
	    	jsonParser.singleElement_return r = (jsonParser.singleElement_return) $singleElementGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("singleElement");
	    		complexElementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		complexElementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$complexElement.returnNode = complexElementReturnNode;
	};

singleElement returns [Node returnNode] 
:
	TK_0='{' pairValueGen+=pairValue (TK_1=',' pairValueGen_1+=pairValue)* TK_2='}' 
	{
		// Create return CST Node
		Node singleElementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		singleElementReturnNode.setKind("singleElement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		singleElementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($pairValueGen != null) {
	        for(Iterator it = $pairValueGen.iterator(); it.hasNext(); )  { 
	            jsonParser.pairValue_return r = (jsonParser.pairValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pairValue");
	            	singleElementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal pairValueGen_1 aggregation
		if($pairValueGen_1 != null) {
	    for(int pos = 0; pos < $pairValueGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		singleElementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($pairValueGen_1 != null) {		
	    	jsonParser.pairValue_return r = (jsonParser.pairValue_return) $pairValueGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pairValue");
	    		singleElementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		singleElementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$singleElement.returnNode = singleElementReturnNode;
	};

pairValue returns [Node returnNode] 
:
	lhsGen+=lhs TK_0=':' rhsGen+=rhs 
	{
		// Create return CST Node
		Node pairValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pairValueReturnNode.setKind("pairValue");
	    // Create a CST Node
		if($lhsGen != null) {
	        for(Iterator it = $lhsGen.iterator(); it.hasNext(); )  { 
	            jsonParser.lhs_return r = (jsonParser.lhs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lhs");
	            	pairValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		pairValueReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rhsGen != null) {
	        for(Iterator it = $rhsGen.iterator(); it.hasNext(); )  { 
	            jsonParser.rhs_return r = (jsonParser.rhs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rhs");
	            	pairValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$pairValue.returnNode = pairValueReturnNode;
	};

lhs returns [Node returnNode] 
:
	valueGen+=value 
	{
		// Create return CST Node
		Node lhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lhsReturnNode.setKind("lhs");
	    // Create a CST Node
		if($valueGen != null) {
	        for(Iterator it = $valueGen.iterator(); it.hasNext(); )  { 
	            jsonParser.value_return r = (jsonParser.value_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value");
	            	lhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lhs.returnNode = lhsReturnNode;
	} | complexElementGen+=complexElement 
	{
		// Create return CST Node
		Node lhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lhsReturnNode.setKind("lhs");
	    // Create a CST Node
		if($complexElementGen != null) {
	        for(Iterator it = $complexElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.complexElement_return r = (jsonParser.complexElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("complexElement");
	            	lhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lhs.returnNode = lhsReturnNode;
	} | singleElementGen+=singleElement 
	{
		// Create return CST Node
		Node lhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lhsReturnNode.setKind("lhs");
	    // Create a CST Node
		if($singleElementGen != null) {
	        for(Iterator it = $singleElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.singleElement_return r = (jsonParser.singleElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("singleElement");
	            	lhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lhs.returnNode = lhsReturnNode;
	};

rhs returns [Node returnNode] 
:
	valueGen+=value 
	{
		// Create return CST Node
		Node rhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rhsReturnNode.setKind("rhs");
	    // Create a CST Node
		if($valueGen != null) {
	        for(Iterator it = $valueGen.iterator(); it.hasNext(); )  { 
	            jsonParser.value_return r = (jsonParser.value_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("value");
	            	rhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rhs.returnNode = rhsReturnNode;
	} | complexElementGen+=complexElement 
	{
		// Create return CST Node
		Node rhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rhsReturnNode.setKind("rhs");
	    // Create a CST Node
		if($complexElementGen != null) {
	        for(Iterator it = $complexElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.complexElement_return r = (jsonParser.complexElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("complexElement");
	            	rhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rhs.returnNode = rhsReturnNode;
	} | singleElementGen+=singleElement 
	{
		// Create return CST Node
		Node rhsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rhsReturnNode.setKind("rhs");
	    // Create a CST Node
		if($singleElementGen != null) {
	        for(Iterator it = $singleElementGen.iterator(); it.hasNext(); )  { 
	            jsonParser.singleElement_return r = (jsonParser.singleElement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("singleElement");
	            	rhsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rhs.returnNode = rhsReturnNode;
	};

value returns [Node returnNode] 
:
	IDGen=ID 
	{
		// Create return CST Node
		Node valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		valueReturnNode.setKind("value");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			valueReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$value.returnNode = valueReturnNode;
	} | DQVALUEGen=DQVALUE 
	{
		// Create return CST Node
		Node valueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		valueReturnNode.setKind("value");
	    // Create a CST Leaf
		if($DQVALUEGen != null) {
			Leaf DQVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DQVALUEGenLeaf.setKind("DQVALUE");
			DQVALUEGenLeaf.setValue($DQVALUEGen.text);
			DQVALUEGenLeaf.setPos(DQVALUEGen.getCharPositionInLine());
			DQVALUEGenLeaf.setLine(DQVALUEGen.getLine());
			valueReturnNode.getChildren().add(DQVALUEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$value.returnNode = valueReturnNode;
	};
	
ID: 			('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' )*;
DOUBLEQUOTE: 	'\u0022';
DQVALUE: 		DOUBLEQUOTE (options {greedy=false;} : .)* DOUBLEQUOTE;

WS: 			(' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};
COMMENT: 		'/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;};    
LINE_COMMENT: 	'//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;};
	
grammar DDL; 

// Autogenerated options
options {
	output=template;
}




// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
data_definition returns [Node returnNode] 
:
	(create_tableGen+=create_table | alter_tableGen+=alter_table | create_sequenceGen+=create_sequence | commentGen+=comment)+ 
	{
		// Create return CST Node
		Node data_definitionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		data_definitionReturnNode.setKind("data_definition");
	
		// Create a special CST Node for terminal create_tableGen aggregation
		if($create_tableGen != null) {
	    for(int pos = 0; pos < $create_tableGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($create_tableGen != null) {		
	    	DDLParser.create_table_return r = (DDLParser.create_table_return) $create_tableGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("create_table");
	    		data_definitionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal alter_tableGen aggregation
		if($alter_tableGen != null) {
	    for(int pos = 0; pos < $alter_tableGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($alter_tableGen != null) {		
	    	DDLParser.alter_table_return r = (DDLParser.alter_table_return) $alter_tableGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("alter_table");
	    		data_definitionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal create_sequenceGen aggregation
		if($create_sequenceGen != null) {
	    for(int pos = 0; pos < $create_sequenceGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($create_sequenceGen != null) {		
	    	DDLParser.create_sequence_return r = (DDLParser.create_sequence_return) $create_sequenceGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("create_sequence");
	    		data_definitionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal commentGen aggregation
		if($commentGen != null) {
	    for(int pos = 0; pos < $commentGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($commentGen != null) {		
	    	DDLParser.comment_return r = (DDLParser.comment_return) $commentGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("comment");
	    		data_definitionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$data_definition.returnNode = data_definitionReturnNode;
	}
;

create_table returns [Node returnNode] 
:
	TK_0='CREATE TABLE' IDGen=ID
	TK_1='('
		columnGen+=column (TK_2=',' columnGen_1+=column)*
		(TK_3=',' constraintGen+=constraint)*
	TK_4=')' TK_5=';' 
	{
		// Create return CST Node
		Node create_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_tableReturnNode.setKind("create_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		create_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			create_tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		create_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($columnGen != null) {
	        for(Iterator it = $columnGen.iterator(); it.hasNext(); )  { 
	            DDLParser.column_return r = (DDLParser.column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column");
	            	create_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal columnGen_1 aggregation
		if($columnGen_1 != null) {
	    for(int pos = 0; pos < $columnGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		create_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($columnGen_1 != null) {		
	    	DDLParser.column_return r = (DDLParser.column_return) $columnGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("column");
	    		create_tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal constraintGen aggregation
		if($constraintGen != null) {
	    for(int pos = 0; pos < $constraintGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		create_tableReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// No Terminal extractor
	    if($constraintGen != null) {		
	    	DDLParser.constraint_return r = (DDLParser.constraint_return) $constraintGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("constraint");
	    		create_tableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		create_tableReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		create_tableReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_table.returnNode = create_tableReturnNode;
	}
;

column returns [Node returnNode] 
:
	IDGen=ID TYPEGen=TYPE (TK_0='(' NUMBERGen=NUMBER TK_1=')')? ISNULLGen=ISNULL? 
	{
		// Create return CST Node
		Node columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		columnReturnNode.setKind("column");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			columnReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($TYPEGen != null) {
			Leaf TYPEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TYPEGenLeaf.setKind("TYPE");
			TYPEGenLeaf.setValue($TYPEGen.text);
			TYPEGenLeaf.setPos(TYPEGen.getCharPositionInLine());
			TYPEGenLeaf.setLine(TYPEGen.getLine());
			columnReturnNode.getChildren().add(TYPEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			columnReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		columnReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($ISNULLGen != null) {
			Leaf ISNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ISNULLGenLeaf.setKind("ISNULL");
			ISNULLGenLeaf.setValue($ISNULLGen.text);
			ISNULLGenLeaf.setPos(ISNULLGen.getCharPositionInLine());
			ISNULLGenLeaf.setLine(ISNULLGen.getLine());
			columnReturnNode.getChildren().add(ISNULLGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$column.returnNode = columnReturnNode;
	}
;

alter_table returns [Node returnNode] 
:
	TK_0='ALTER TABLE' tabnameGen+=tabname
		((add='ADD' constraintGen+=constraint) | (enable='ENABLE' TK_1='CONSTRAINT') IDGen=ID)
	TK_2=';' 
	{
		// Create return CST Node
		Node alter_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		alter_tableReturnNode.setKind("alter_table");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($tabnameGen != null) {
	        for(Iterator it = $tabnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.tabname_return r = (DDLParser.tabname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("tabname");
	            	alter_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($add != null) {
			Leaf addLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			addLeaf.setKind("add");
			addLeaf.setValue($add.text);
			addLeaf.setPos(add.getCharPositionInLine());
			addLeaf.setLine(add.getLine());
			alter_tableReturnNode.getChildren().add(addLeaf);
		}
	    // Create a CST Node
		if($constraintGen != null) {
	        for(Iterator it = $constraintGen.iterator(); it.hasNext(); )  { 
	            DDLParser.constraint_return r = (DDLParser.constraint_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constraint");
	            	alter_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($enable != null) {
			Leaf enableLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			enableLeaf.setKind("enable");
			enableLeaf.setValue($enable.text);
			enableLeaf.setPos(enable.getCharPositionInLine());
			enableLeaf.setLine(enable.getLine());
			alter_tableReturnNode.getChildren().add(enableLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			alter_tableReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		alter_tableReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$alter_table.returnNode = alter_tableReturnNode;
	}
;

comment returns [Node returnNode] 
:
	TK_0='COMMENT ON' ((TK_1='TABLE' tabnameGen+=tabname) | (TK_2='COLUMN' IDGen=ID TK_3='.' colnameGen+=colname)) TK_4='IS' STRINGGen=STRING TK_5=';' 
	{
		// Create return CST Node
		Node commentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		commentReturnNode.setKind("comment");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		commentReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		commentReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($tabnameGen != null) {
	        for(Iterator it = $tabnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.tabname_return r = (DDLParser.tabname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("tabname");
	            	commentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		commentReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			commentReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		commentReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($colnameGen != null) {
	        for(Iterator it = $colnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.colname_return r = (DDLParser.colname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("colname");
	            	commentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		commentReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($STRINGGen != null) {
			Leaf STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRINGGenLeaf.setKind("STRING");
			STRINGGenLeaf.setValue($STRINGGen.text);
			STRINGGenLeaf.setPos(STRINGGen.getCharPositionInLine());
			STRINGGenLeaf.setLine(STRINGGen.getLine());
			commentReturnNode.getChildren().add(STRINGGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		commentReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$comment.returnNode = commentReturnNode;
	}
;

create_sequence returns [Node returnNode] 
:
	TK_0='CREATE SEQUENCE' IDGen=ID sequence_optionsGen+=sequence_options* TK_1=';' 
	{
		// Create return CST Node
		Node create_sequenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_sequenceReturnNode.setKind("create_sequence");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		create_sequenceReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			create_sequenceReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($sequence_optionsGen != null) {
	        for(Iterator it = $sequence_optionsGen.iterator(); it.hasNext(); )  { 
	            DDLParser.sequence_options_return r = (DDLParser.sequence_options_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sequence_options");
	            	create_sequenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		create_sequenceReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$create_sequence.returnNode = create_sequenceReturnNode;
	}
;

sequence_options returns [Node returnNode] 
:
	increment='INCREMENT' TK_0='BY' NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($increment != null) {
			Leaf incrementLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			incrementLeaf.setKind("increment");
			incrementLeaf.setValue($increment.text);
			incrementLeaf.setPos(increment.getCharPositionInLine());
			incrementLeaf.setLine(increment.getLine());
			sequence_optionsReturnNode.getChildren().add(incrementLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		sequence_optionsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			sequence_optionsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | start='START' TK_0='WITH' NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($start != null) {
			Leaf startLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			startLeaf.setKind("start");
			startLeaf.setValue($start.text);
			startLeaf.setPos(start.getCharPositionInLine());
			startLeaf.setLine(start.getLine());
			sequence_optionsReturnNode.getChildren().add(startLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		sequence_optionsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			sequence_optionsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} |
	maxvalue='MAXVALUE' NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($maxvalue != null) {
			Leaf maxvalueLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			maxvalueLeaf.setKind("maxvalue");
			maxvalueLeaf.setValue($maxvalue.text);
			maxvalueLeaf.setPos(maxvalue.getCharPositionInLine());
			maxvalueLeaf.setLine(maxvalue.getLine());
			sequence_optionsReturnNode.getChildren().add(maxvalueLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			sequence_optionsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | nomaxvalue='NOMAXVALUE' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($nomaxvalue != null) {
			Leaf nomaxvalueLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			nomaxvalueLeaf.setKind("nomaxvalue");
			nomaxvalueLeaf.setValue($nomaxvalue.text);
			nomaxvalueLeaf.setPos(nomaxvalue.getCharPositionInLine());
			nomaxvalueLeaf.setLine(nomaxvalue.getLine());
			sequence_optionsReturnNode.getChildren().add(nomaxvalueLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} |
	minvalue='MINVALUE' NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($minvalue != null) {
			Leaf minvalueLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			minvalueLeaf.setKind("minvalue");
			minvalueLeaf.setValue($minvalue.text);
			minvalueLeaf.setPos(minvalue.getCharPositionInLine());
			minvalueLeaf.setLine(minvalue.getLine());
			sequence_optionsReturnNode.getChildren().add(minvalueLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			sequence_optionsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | nominvalue='NOMINVALUE' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($nominvalue != null) {
			Leaf nominvalueLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			nominvalueLeaf.setKind("nominvalue");
			nominvalueLeaf.setValue($nominvalue.text);
			nominvalueLeaf.setPos(nominvalue.getCharPositionInLine());
			nominvalueLeaf.setLine(nominvalue.getLine());
			sequence_optionsReturnNode.getChildren().add(nominvalueLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} |
	cycle='CYCLE' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($cycle != null) {
			Leaf cycleLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			cycleLeaf.setKind("cycle");
			cycleLeaf.setValue($cycle.text);
			cycleLeaf.setPos(cycle.getCharPositionInLine());
			cycleLeaf.setLine(cycle.getLine());
			sequence_optionsReturnNode.getChildren().add(cycleLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | nocycle='NOCYCLE' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($nocycle != null) {
			Leaf nocycleLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			nocycleLeaf.setKind("nocycle");
			nocycleLeaf.setValue($nocycle.text);
			nocycleLeaf.setPos(nocycle.getCharPositionInLine());
			nocycleLeaf.setLine(nocycle.getLine());
			sequence_optionsReturnNode.getChildren().add(nocycleLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} |
	cache='CACHE' NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($cache != null) {
			Leaf cacheLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			cacheLeaf.setKind("cache");
			cacheLeaf.setValue($cache.text);
			cacheLeaf.setPos(cache.getCharPositionInLine());
			cacheLeaf.setLine(cache.getLine());
			sequence_optionsReturnNode.getChildren().add(cacheLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			sequence_optionsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | nocache='NOCACHE' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($nocache != null) {
			Leaf nocacheLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			nocacheLeaf.setKind("nocache");
			nocacheLeaf.setValue($nocache.text);
			nocacheLeaf.setPos(nocache.getCharPositionInLine());
			nocacheLeaf.setLine(nocache.getLine());
			sequence_optionsReturnNode.getChildren().add(nocacheLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} |
	order='ORDER' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($order != null) {
			Leaf orderLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			orderLeaf.setKind("order");
			orderLeaf.setValue($order.text);
			orderLeaf.setPos(order.getCharPositionInLine());
			orderLeaf.setLine(order.getLine());
			sequence_optionsReturnNode.getChildren().add(orderLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	} | noorder='NOORDER' 
	{
		// Create return CST Node
		Node sequence_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sequence_optionsReturnNode.setKind("sequence_options");
	    // Create a CST Leaf
		if($noorder != null) {
			Leaf noorderLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			noorderLeaf.setKind("noorder");
			noorderLeaf.setValue($noorder.text);
			noorderLeaf.setPos(noorder.getCharPositionInLine());
			noorderLeaf.setLine(noorder.getLine());
			sequence_optionsReturnNode.getChildren().add(noorderLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$sequence_options.returnNode = sequence_optionsReturnNode;
	}
;

constraint returns [Node returnNode] 
:
	TK_0='CONSTRAINT' IDGen=ID (primary_keyGen+=primary_key | unique_keyGen+=unique_key | foreign_keyGen+=foreign_key) 
	{
		// Create return CST Node
		Node constraintReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constraintReturnNode.setKind("constraint");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		constraintReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			constraintReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Node
		if($primary_keyGen != null) {
	        for(Iterator it = $primary_keyGen.iterator(); it.hasNext(); )  { 
	            DDLParser.primary_key_return r = (DDLParser.primary_key_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("primary_key");
	            	constraintReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($unique_keyGen != null) {
	        for(Iterator it = $unique_keyGen.iterator(); it.hasNext(); )  { 
	            DDLParser.unique_key_return r = (DDLParser.unique_key_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("unique_key");
	            	constraintReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($foreign_keyGen != null) {
	        for(Iterator it = $foreign_keyGen.iterator(); it.hasNext(); )  { 
	            DDLParser.foreign_key_return r = (DDLParser.foreign_key_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("foreign_key");
	            	constraintReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constraint.returnNode = constraintReturnNode;
	}
;

primary_key returns [Node returnNode] 
:
	TK_0='PRIMARY KEY' TK_1='(' colnameGen+=colname (TK_2=',' colnameGen_1+=colname)* TK_3=')' 
	{
		// Create return CST Node
		Node primary_keyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		primary_keyReturnNode.setKind("primary_key");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		primary_keyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		primary_keyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($colnameGen != null) {
	        for(Iterator it = $colnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.colname_return r = (DDLParser.colname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("colname");
	            	primary_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal colnameGen_1 aggregation
		if($colnameGen_1 != null) {
	    for(int pos = 0; pos < $colnameGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		primary_keyReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($colnameGen_1 != null) {		
	    	DDLParser.colname_return r = (DDLParser.colname_return) $colnameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("colname");
	    		primary_keyReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		primary_keyReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$primary_key.returnNode = primary_keyReturnNode;
	}
;

unique_key returns [Node returnNode] 
:
	TK_0='UNIQUE' TK_1='(' colnameGen+=colname (TK_2=',' colnameGen_1+=colname)* TK_3=')' 
	{
		// Create return CST Node
		Node unique_keyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		unique_keyReturnNode.setKind("unique_key");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		unique_keyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		unique_keyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($colnameGen != null) {
	        for(Iterator it = $colnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.colname_return r = (DDLParser.colname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("colname");
	            	unique_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal colnameGen_1 aggregation
		if($colnameGen_1 != null) {
	    for(int pos = 0; pos < $colnameGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		unique_keyReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($colnameGen_1 != null) {		
	    	DDLParser.colname_return r = (DDLParser.colname_return) $colnameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("colname");
	    		unique_keyReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		unique_keyReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$unique_key.returnNode = unique_keyReturnNode;
	}
;

foreign_key returns [Node returnNode] 
:
	TK_0='FOREIGN KEY' TK_1='(' colnameGen+=colname TK_2=')'
	TK_3='REFERENCES' tabnameGen+=tabname TK_4='(' colnameGen_1+=colname TK_5=')' 
	{
		// Create return CST Node
		Node foreign_keyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		foreign_keyReturnNode.setKind("foreign_key");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($colnameGen != null) {
	        for(Iterator it = $colnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.colname_return r = (DDLParser.colname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("colname");
	            	foreign_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($tabnameGen != null) {
	        for(Iterator it = $tabnameGen.iterator(); it.hasNext(); )  { 
	            DDLParser.tabname_return r = (DDLParser.tabname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("tabname");
	            	foreign_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($colnameGen_1 != null) {
	        for(Iterator it = $colnameGen_1.iterator(); it.hasNext(); )  { 
	            DDLParser.colname_return r = (DDLParser.colname_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("colname");
	            	foreign_keyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		foreign_keyReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$foreign_key.returnNode = foreign_keyReturnNode;
	}
;

colname returns [Node returnNode] 
:
	IDGen=ID 
	{
		// Create return CST Node
		Node colnameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		colnameReturnNode.setKind("colname");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			colnameReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$colname.returnNode = colnameReturnNode;
	}
;

tabname returns [Node returnNode] 
:
	(IDGen=ID TK_0='.')? basename=ID 
	{
		// Create return CST Node
		Node tabnameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		tabnameReturnNode.setKind("tabname");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			tabnameReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		tabnameReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($basename != null) {
			Leaf basenameLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			basenameLeaf.setKind("basename");
			basenameLeaf.setValue($basename.text);
			basenameLeaf.setPos(basename.getCharPositionInLine());
			basenameLeaf.setLine(basename.getLine());
			tabnameReturnNode.getChildren().add(basenameLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$tabname.returnNode = tabnameReturnNode;
	}
;

ISNULL : 'NULL' | 'NOT NULL'
;

NUMBER : (('1'..'9')('0'..'9')*) | ('0')
;

TYPE : 'NUMBER' | 'VARCHAR2' | 'DATE' 
;

ID : ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' )*
  // ~(WS)+
;

STRING : '\'' ~('\'')* '\''
;

WS : (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;}
;

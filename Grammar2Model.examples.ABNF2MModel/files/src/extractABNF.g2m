-- *******************************************************************************
-- * Copyright (c) 2010
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- *    Javier Canovas (jlcanovas@um.es) 
-- *******************************************************************************


rule 'mapEPackage'
	from abnf_definition
	to EPackage
	queries
		classes_spec  : //#specification_rule/classId;
		classes_hier  : //#hierarchy_rule;
		classes_alone : //hierarchy_rule/#subclassId;
	mappings
		name = "astm";
		nsURI = "http://modelum.es/modernization/astm";
		nsPrefix = "astm";
		eClassifiers = classes_hier;
		eClassifiers = classes_spec;
		eClassifiers = execute skipEClassAlone classes_alone;
end_rule

-- Maps those rules which only is defined in a hierarchy rule
-- and not in a specification rule
rule 'mapAloneClass'
	from subclassId[unique] cId
	to EClass
	queries
		find_hier_rule : //#hierarchy_rule/subclassId{ID.eq(cId.ID)};
		hier_rule_id   : /find_hier_rule/#classId;
		find_spec_rule : //#specification_rule/classId{ID.eq(hier_rule_id.ID)};	
	
		isAbstract : //#hierarchy_rule/#subclassId{ID.eq(cId.ID) && ABSTRACT.exists};
	mappings
		name = cId.ID;
		
		if(find_spec_rule.hasResults) then
			eSuperTypes = find_spec_rule;
		else
			if(find_hier_rule.hasResults) then
				eSuperTypes = find_hier_rule;
			end_if
		end_if
		
		if(isAbstract.hasResults) then
			abstract = "true";
		end_if
end_rule

skip_rule 'skipEClassAlone'
	from subclassId sci
	to EClass
	queries
		find_spec_rule : //#specification_rule/classId{ID.eq(sci.ID)};
		find_hier_rule : //#hierarchy_rule/classId{ID.eq(sci.ID)};
	mappings
		if(find_spec_rule.hasResults || find_hier_rule.hasResults) then
		
		else
			skip sci;
		end_if
end_rule	


skip_rule 'skipEClassOther'
	from hierarchy_rule hr
	to EClass
	queries
		hier_rule_id   : /hr/#classId;		
		find_spec_rule : //#specification_rule/classId{ID.eq(hier_rule_id.ID)};
	mappings
		if(find_spec_rule.hasResults) then
		
		else
			skip hier_rule_id;		
		end_if
end_rule

rule 'mapSingleEClass'
	from classId[unique] cId
	to EClass
	queries
		isAbstract : //#hierarchy_rule/#subclassId{ID.eq(cId.ID) && ABSTRACT.exists};
	mappings
		name = cId.ID;
		
		if(isAbstract.hasResults) then
			abstract = "true";
		end_if
end_rule

rule 'mapEClass'
	from specification_rule[unique] sr
	to EClass
	queries
		iden  : /sr/#classId;
		
		props : /sr/#attribute{TYPE.eq("String") || TYPE.eq("Boolean") || TYPE.eq("Integer")};
		refs  : /sr/#attribute{!TYPE.eq("String") && !TYPE.eq("Boolean") && !TYPE.eq("Integer")};
		
		find_hier_rule : //#hierarchy_rule/subclassId{ID.eq(iden.ID)};
		hier_rule_id   : /find_hier_rule/#classId;
		find_spec_rule : //#specification_rule/classId{ID.eq(hier_rule_id.ID)};	
		
		isAbstract     : /find_hier_rule/#subclassId{ID.eq(iden.ID) && ABSTRACT.exists};
	mappings
		name = iden.ID;
		
		eStructuralFeatures = props;
		eStructuralFeatures = refs;
		
		eAttributes = props;
		eReferences = refs;
		
		if(find_spec_rule.hasResults) then
			eSuperTypes = find_spec_rule;
		else
			if(find_hier_rule.hasResults) then
				eSuperTypes = find_hier_rule;
			end_if
		end_if
		
		if(isAbstract.hasResults) then
			abstract = "true";
		end_if
end_rule

rule 'mapEAttribute'
	from attribute{TYPE.eq("String") || TYPE.eq("Boolean") || TYPE.eq("Integer")} at
	to EAttribute
	queries
		isString  : /#at{TYPE.eq("String")};
		isBoolean : /#at{TYPE.eq("Boolean")};
		isInteger : /#at{TYPE.eq("Integer")};
	
		idMultA    : /#at{MULTA.exists};
		idMultB    : /#at{MULTB.exists};
		idOpt      : /#at{OPTA.exists || OPTB.exists || OPTC.exists};
		idSem      : /#at{SEM.exists};
	mappings
		name = at.NAME;
		
		if(isString.hasResults) then
			eType = ext TypeHelperExtension("string");
		else
			if(isBoolean.hasResults) then
				eType = ext TypeHelperExtension("boolean");
			else
				if(isInteger.hasResults) then
					eType = ext TypeHelperExtension("int");
				end_if
			end_if
		end_if
				
		if(idMultA.hasResults) then
			lowerBound = 0;
			upperBound = -1;
		else
			if(idMultB.hasResults) then
				lowerBound = 1; -- Esto debería ser 1
				upperBound = -1;
			else
				if(idOpt.hasResults) then
					lowerBound = 0;
					upperBound = 1;
				else
					lowerBound = 0; -- Esto debería ser 1
					upperBound = 1;
				end_if
			end_if
		end_if
		
		if(idSem.hasResults) then
			--eAnnotations = at;
		end_if
end_rule

rule 'mapEReference'
	from attribute{!TYPE.eq("String") && !TYPE.eq("Boolean") && !TYPE.eq("Integer")} ref
	to EReference
	queries
		find_hier_rule : //#hierarchy_rule/subclassId{ID.eq(ref.TYPE)};
		hier_rule_id   : /find_hier_rule/#classId;
		find_spec_rule : //#specification_rule/classId{ID.eq(ref.TYPE)};
				
		idMultA    : /#ref{MULTA.exists};
		idMultB    : /#ref{MULTB.exists};
		idOpt      : /#ref{OPTA.exists || OPTB.exists || OPTC.exists};
		idSem      : /#ref{SEM.exists};	
	mappings
		name = ref.NAME;
		containment = "true";
		if(find_spec_rule.hasResults) then
			eType = find_spec_rule;
		else
			if(find_hier_rule.hasResults) then
				eType = find_hier_rule;
			end_if
		end_if
		
		if(idMultA.hasResults) then
			lowerBound = 0;
			upperBound = -1;
		else
			if(idMultB.hasResults) then
				lowerBound = 0; -- Esto debería ser 1
				upperBound = -1;
			else
				if(idOpt.hasResults) then
					lowerBound = 0;
					upperBound = 1;
				else
					lowerBound = 0; -- Esto debería ser 1
					upperBound = 1;
				end_if
			end_if
		end_if
		
		
		if(idSem.hasResults) then
			--eAnnotations = at;
		end_if
end_rule

rule 'mapAnnotation'
	from attribute at
	to eAnnotation
	queries
	mappings
		source = "This a semantic attribute";
end_rule
--------------------------------------------------------------------------------------
-- Gra2MoL transformation for extracting Maude Models
--
-- TODO: 
--  * Fill in!! :D
--------------------------------------------------------------------------------------

rule 'mapMaudeSpec'
	from file f
	to MaudeSpec
	queries
		mods : //#module;
	mappings
		els = mods;
end_rule

rule 'mapFMod'
	from module{TOKEN[0].exists && TOKEN[0].eq("fmod")} m
	to FModule
	queries
		mname  : /m/#modId;
		elems  : /m/#modElt{!TOKEN[0].eq("sort") && !TOKEN[0].eq("sorts") && !TOKEN[0].eq("subsorts") && !TOKEN[0].eq("vars")};
		sorts  : /m/modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort;
		ssorts : /m/modElt{TOKEN[0].eq("subsorts")}/#subsort;
		vars   : /m/modElt{TOKEN[0].eq("vars")}/#varId;
	mappings
		name = mname.ID;
		els  = elems;
		els  = sorts;
		els  = ssorts;
		els  = vars;
end_rule

rule 'mapMod'
	from module{TOKEN[0].exists && TOKEN[0].eq("mod")} m
	to SModule
	queries
		mname  : /m/#modId;
		elems  : /m//#modElt{!TOKEN[0].eq("sort") && !TOKEN[0].eq("sorts") && !TOKEN[0].eq("subsorts") && !TOKEN[0].eq("vars")};
		sorts  : /m//modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort;
		ssorts : /m//modElt{TOKEN[0].eq("subsorts")}/#subsort;
		vars   : /m//modElt{TOKEN[0].eq("vars")}/#varId;
	mappings
		name = mname.ID;
		els  = elems;
		els  = sorts;
		els  = ssorts;
		els  = vars;
end_rule


-----------------------------
-- Main module elements
-----------------------------

rule 'mapProtecting'
	from modElt{TOKEN[0].eq("protecting")} me
	to ModImportation
	queries
		importId   : /me//#modId;
		locatedMod : //#module/modId{ID.eq(importId.ID)};
	mappings
		imports = new Maude::ModuleIdModExp;
		imports.module = locatedMod;
		mode = "protecting";
end_rule

rule 'mapSort'
	from sort s
	to Sort
	queries
		sname : /s/#sortId;
	mappings
		name = sname.ID;
end_rule

rule 'mapOp'
	from modElt{TOKEN[0].eq("op")} me
	to Operation
	queries
		oname : /me/opForm/#opId;
		
		-- Seeking sorts located on the left
		left  : /me/#leftOp;
		
		-- Seeking sort located on the right
		rop       : /me/rightOp//#sortId;
		-- The following queries restrics the search to one module
		--container : //#module//modElt{this.check(me)};
		--right     : /container/modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort//sortId{ID.eq(rop.ID)};
		right     : //modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort//sortId{ID.eq(rop.ID)};
	mappings
		name    = oname.ID;
		arity   = left;
		coarity = right;
end_rule

skip_rule 'mapLeftOp'
	from leftOp lo
	to Type
	queries
		nsort     : /lo//#sortId;
		container : //#module//leftOp{this.check(lo)};
		located   : /container/modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort//sortId{ID.eq(nsort.ID)};
	mappings
		skip located;
end_rule

rule 'mapVar'
	from varId vId
	to Membership
	queries
		-- Locates the module container
		container : //#module//varId{this.check(vId)};
		-- Locates the modElem container (var definition)			
		modElem   : /container//#modElt{TOKEN[0].eq("vars")}//varId{this.check(vId)};
		-- Locates the sort Identifier
		typeId    : /modElem//type//#sortId;
		-- Locates the sort definition
		selem     : /container/modElt{TOKEN[0].eq("sort") || TOKEN[0].eq("sorts")}/#sort//sortId{ID.eq(typeId.ID)};
	mappings
		term      = new Variable;
		term.name = vId.ID;
		term.type = selem;
		sort      = selem;
end_rule

-----------------------------
-- Statements
-----------------------------



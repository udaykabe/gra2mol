/*******************************************************************************

DESCRIPTION:
		Oracle PL/SQL Grammar for ANTLR v3, target language Java
AUTHOR:
		Javier Canovas (jlcanovas@um.es)
DATE:
		03-Nov-2008
BASED ON:
		PLSQL3.g for ANTLR v3 and target language C#
		Andrey Kharitonkin (thikone@gmail.com)
		This grammar is for PL/SQL.
COMMENT:
		The grammar has been re-written from the same grammar
		created for target language C#, which fails for generating
		the parser.
KNOWN ISSUES:
		At the moment only supports CREATE PACKAGE and PACKAGE BODY.
		Symbol table and gate predicates needed to distinguish
			between function call and variable usage.

*******************************************************************************/

grammar PLSQL3;

options {
	k=*;
	backtrack=true;
	

	output=template;
}

@members {
    private boolean isSql = false;
}


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
start_rule returns [Node returnNode] 
:	(create_packageGen+=create_package)* EOFGen=EOF 
	{
		// Create return CST Node
		Node start_ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		start_ruleReturnNode.setKind("start_rule");
	    // Create a CST Node
		if($create_packageGen != null) {
	        for(Iterator it = $create_packageGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.create_package_return r = (PLSQL3Parser.create_package_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("create_package");
	            	start_ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EOFGen != null) {
			Leaf EOFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EOFGenLeaf.setKind("EOF");
			EOFGenLeaf.setValue($EOFGen.text);
			EOFGenLeaf.setPos(EOFGen.getCharPositionInLine());
			EOFGenLeaf.setLine(EOFGen.getLine());
			start_ruleReturnNode.getChildren().add(EOFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$start_rule.returnNode = start_ruleReturnNode;
	}
	;

alias returns [Node returnNode] 
:	( TK_0='AS' )? sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node aliasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		aliasReturnNode.setKind("alias");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		aliasReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	aliasReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$alias.returnNode = aliasReturnNode;
	} 
	;

argument returns [Node returnNode] 
:	argument_nameGen+=argument_name ( keyOUTGen+=keyOUT | TK_0='IN' keyOUTGen_1+=keyOUT | TK_1='IN' )? (argument_typeGen+=argument_type )?
		( ( ASSIGNGen=ASSIGN | TK_2='DEFAULT' ) plsql_expressionGen+=plsql_expression )? 
	{
		// Create return CST Node
		Node argumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		argumentReturnNode.setKind("argument");
	    // Create a CST Node
		if($argument_nameGen != null) {
	        for(Iterator it = $argument_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.argument_name_return r = (PLSQL3Parser.argument_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("argument_name");
	            	argumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyOUTGen != null) {
	        for(Iterator it = $keyOUTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyOUT_return r = (PLSQL3Parser.keyOUT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyOUT");
	            	argumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		argumentReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyOUTGen_1 != null) {
	        for(Iterator it = $keyOUTGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyOUT_return r = (PLSQL3Parser.keyOUT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyOUT");
	            	argumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		argumentReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($argument_typeGen != null) {
	        for(Iterator it = $argument_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.argument_type_return r = (PLSQL3Parser.argument_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("argument_type");
	            	argumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ASSIGNGen != null) {
			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASSIGNGenLeaf.setKind("ASSIGN");
			ASSIGNGenLeaf.setValue($ASSIGNGen.text);
			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
			argumentReturnNode.getChildren().add(ASSIGNGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		argumentReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	argumentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$argument.returnNode = argumentReturnNode;
	}
	;

arguments returns [Node returnNode] 
:	argumentGen+=argument ( COMMAGen_List+=COMMA argumentGen_1+=argument )* 
	{
		// Create return CST Node
		Node argumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		argumentsReturnNode.setKind("arguments");
	    // Create a CST Node
		if($argumentGen != null) {
	        for(Iterator it = $argumentGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("argument");
	            	argumentsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			argumentsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($argumentGen_1 != null) {		
	    	PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) $argumentGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("argument");
	    		argumentsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$arguments.returnNode = argumentsReturnNode;
	}
	;

argument_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node argument_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		argument_nameReturnNode.setKind("argument_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	argument_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$argument_name.returnNode = argument_nameReturnNode;
	}
	;

argument_type returns [Node returnNode] 
:	type_specGen+=type_spec 
	{
		// Create return CST Node
		Node argument_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		argument_typeReturnNode.setKind("argument_type");
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	argument_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$argument_type.returnNode = argument_typeReturnNode;
	}
	;

assignment_statement returns [Node returnNode] 
:	lvalueGen+=lvalue ASSIGNGen=ASSIGN plsql_expressionGen+=plsql_expression 
	{
		// Create return CST Node
		Node assignment_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignment_statementReturnNode.setKind("assignment_statement");
	    // Create a CST Node
		if($lvalueGen != null) {
	        for(Iterator it = $lvalueGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lvalue");
	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ASSIGNGen != null) {
			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASSIGNGenLeaf.setKind("ASSIGN");
			ASSIGNGenLeaf.setValue($ASSIGNGen.text);
			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
			assignment_statementReturnNode.getChildren().add(ASSIGNGenLeaf);
		}
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$assignment_statement.returnNode = assignment_statementReturnNode;
	}
//	|	function_call
	;

begin_block returns [Node returnNode] 
:	TK_0='BEGIN'
		( seq_of_statementsGen+=seq_of_statements )
		( TK_1='EXCEPTION' ( exception_handlerGen+=exception_handler )+ )?
		TK_2='END' 
	{
		// Create return CST Node
		Node begin_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		begin_blockReturnNode.setKind("begin_block");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		begin_blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	begin_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		begin_blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exception_handlerGen != null) {
	        for(Iterator it = $exception_handlerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_handler");
	            	begin_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		begin_blockReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$begin_block.returnNode = begin_blockReturnNode;
	}
	;

boolean_literal returns [Node returnNode] 
:	TK_0='TRUE' 
	{
		// Create return CST Node
		Node boolean_literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_literalReturnNode.setKind("boolean_literal");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boolean_literalReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$boolean_literal.returnNode = boolean_literalReturnNode;
	} | TK_0='FALSE' 
	{
		// Create return CST Node
		Node boolean_literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_literalReturnNode.setKind("boolean_literal");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boolean_literalReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$boolean_literal.returnNode = boolean_literalReturnNode;
	}
	;

bracket_literals returns [Node returnNode] 
:	LPARENGen=LPAREN literalsGen+=literals RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node bracket_literalsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		bracket_literalsReturnNode.setKind("bracket_literals");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			bracket_literalsReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($literalsGen != null) {
	        for(Iterator it = $literalsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literals_return r = (PLSQL3Parser.literals_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literals");
	            	bracket_literalsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			bracket_literalsReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$bracket_literals.returnNode = bracket_literalsReturnNode;
	}
	;
	
bracket_literals_list returns [Node returnNode] 
:	bracket_literalsGen+=bracket_literals ( COMMAGen_List+=COMMA bracket_literalsGen_1+=bracket_literals )* 
	{
		// Create return CST Node
		Node bracket_literals_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		bracket_literals_listReturnNode.setKind("bracket_literals_list");
	    // Create a CST Node
		if($bracket_literalsGen != null) {
	        for(Iterator it = $bracket_literalsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.bracket_literals_return r = (PLSQL3Parser.bracket_literals_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("bracket_literals");
	            	bracket_literals_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			bracket_literals_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($bracket_literalsGen_1 != null) {		
	    	PLSQL3Parser.bracket_literals_return r = (PLSQL3Parser.bracket_literals_return) $bracket_literalsGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("bracket_literals");
	    		bracket_literals_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$bracket_literals_list.returnNode = bracket_literals_listReturnNode;
	}
	;

call_parameter returns [Node returnNode] 
:	( parameter_nameGen+=parameter_name ARROWGen=ARROW )? nested_expressionGen+=nested_expression 
	{
		// Create return CST Node
		Node call_parameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		call_parameterReturnNode.setKind("call_parameter");
	    // Create a CST Node
		if($parameter_nameGen != null) {
	        for(Iterator it = $parameter_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.parameter_name_return r = (PLSQL3Parser.parameter_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parameter_name");
	            	call_parameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ARROWGen != null) {
			Leaf ARROWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARROWGenLeaf.setKind("ARROW");
			ARROWGenLeaf.setValue($ARROWGen.text);
			ARROWGenLeaf.setPos(ARROWGen.getCharPositionInLine());
			ARROWGenLeaf.setLine(ARROWGen.getLine());
			call_parameterReturnNode.getChildren().add(ARROWGenLeaf);
		}
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	call_parameterReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$call_parameter.returnNode = call_parameterReturnNode;
	}
	;

call_parameters returns [Node returnNode] 
:	call_parameterGen+=call_parameter ( COMMAGen_List+=COMMA call_parameterGen_1+=call_parameter )* 
	{
		// Create return CST Node
		Node call_parametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		call_parametersReturnNode.setKind("call_parameters");
	    // Create a CST Node
		if($call_parameterGen != null) {
	        for(Iterator it = $call_parameterGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.call_parameter_return r = (PLSQL3Parser.call_parameter_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("call_parameter");
	            	call_parametersReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			call_parametersReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($call_parameterGen_1 != null) {		
	    	PLSQL3Parser.call_parameter_return r = (PLSQL3Parser.call_parameter_return) $call_parameterGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("call_parameter");
	    		call_parametersReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$call_parameters.returnNode = call_parametersReturnNode;
	}
	;

case_expression returns [Node returnNode] 
:	TK_0='CASE' ( simple_case_expressionGen+=simple_case_expression | searched_case_expressionGen+=searched_case_expression ) ( else_case_expressionGen+=else_case_expression )? TK_1='END' 
	{
		// Create return CST Node
		Node case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		case_expressionReturnNode.setKind("case_expression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		case_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($simple_case_expressionGen != null) {
	        for(Iterator it = $simple_case_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.simple_case_expression_return r = (PLSQL3Parser.simple_case_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("simple_case_expression");
	            	case_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($searched_case_expressionGen != null) {
	        for(Iterator it = $searched_case_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.searched_case_expression_return r = (PLSQL3Parser.searched_case_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("searched_case_expression");
	            	case_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($else_case_expressionGen != null) {
	        for(Iterator it = $else_case_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.else_case_expression_return r = (PLSQL3Parser.else_case_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("else_case_expression");
	            	case_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		case_expressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$case_expression.returnNode = case_expressionReturnNode;
	}
	;

case_statement returns [Node returnNode] 
:	( label_nameGen+=label_name )? TK_0='CASE' ( simple_case_statementGen+=simple_case_statement | searched_case_statementGen+=searched_case_statement ) ( else_case_statementGen+=else_case_statement )? TK_1='END' TK_2='CASE' ( label_nameGen_1+=label_name )? 
	{
		// Create return CST Node
		Node case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		case_statementReturnNode.setKind("case_statement");
	    // Create a CST Node
		if($label_nameGen != null) {
	        for(Iterator it = $label_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($simple_case_statementGen != null) {
	        for(Iterator it = $simple_case_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.simple_case_statement_return r = (PLSQL3Parser.simple_case_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("simple_case_statement");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($searched_case_statementGen != null) {
	        for(Iterator it = $searched_case_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.searched_case_statement_return r = (PLSQL3Parser.searched_case_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("searched_case_statement");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($else_case_statementGen != null) {
	        for(Iterator it = $else_case_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.else_case_statement_return r = (PLSQL3Parser.else_case_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("else_case_statement");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		case_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		case_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($label_nameGen_1 != null) {
	        for(Iterator it = $label_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$case_statement.returnNode = case_statementReturnNode;
	}
	;

cell_assignment returns [Node returnNode] 
:	measure_columnGen+=measure_column LBRACKGen=LBRACK ( multi_column_for_loopGen+=multi_column_for_loop | cell_assignment_exprsGen+=cell_assignment_exprs ) RBRACKGen=RBRACK 
	{
		// Create return CST Node
		Node cell_assignmentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_assignmentReturnNode.setKind("cell_assignment");
	    // Create a CST Node
		if($measure_columnGen != null) {
	        for(Iterator it = $measure_columnGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.measure_column_return r = (PLSQL3Parser.measure_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("measure_column");
	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LBRACKGen != null) {
			Leaf LBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LBRACKGenLeaf.setKind("LBRACK");
			LBRACKGenLeaf.setValue($LBRACKGen.text);
			LBRACKGenLeaf.setPos(LBRACKGen.getCharPositionInLine());
			LBRACKGenLeaf.setLine(LBRACKGen.getLine());
			cell_assignmentReturnNode.getChildren().add(LBRACKGenLeaf);
		}
	    // Create a CST Node
		if($multi_column_for_loopGen != null) {
	        for(Iterator it = $multi_column_for_loopGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.multi_column_for_loop_return r = (PLSQL3Parser.multi_column_for_loop_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("multi_column_for_loop");
	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cell_assignment_exprsGen != null) {
	        for(Iterator it = $cell_assignment_exprsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_assignment_exprs_return r = (PLSQL3Parser.cell_assignment_exprs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_assignment_exprs");
	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RBRACKGen != null) {
			Leaf RBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RBRACKGenLeaf.setKind("RBRACK");
			RBRACKGenLeaf.setValue($RBRACKGen.text);
			RBRACKGenLeaf.setPos(RBRACKGen.getCharPositionInLine());
			RBRACKGenLeaf.setLine(RBRACKGen.getLine());
			cell_assignmentReturnNode.getChildren().add(RBRACKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$cell_assignment.returnNode = cell_assignmentReturnNode;
	}
	;
	
cell_assignment_expr returns [Node returnNode] 
:	sql_conditionGen+=sql_condition 
	{
		// Create return CST Node
		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cell_assignment_expr.returnNode = cell_assignment_exprReturnNode;
	} | sql_expressionGen+=sql_expression 
	{
		// Create return CST Node
		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cell_assignment_expr.returnNode = cell_assignment_exprReturnNode;
	} | single_column_for_loopGen+=single_column_for_loop 
	{
		// Create return CST Node
		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
	    // Create a CST Node
		if($single_column_for_loopGen != null) {
	        for(Iterator it = $single_column_for_loopGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.single_column_for_loop_return r = (PLSQL3Parser.single_column_for_loop_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("single_column_for_loop");
	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cell_assignment_expr.returnNode = cell_assignment_exprReturnNode;
	}
	;	
	
cell_assignment_exprs returns [Node returnNode] 
:	cell_assignment_exprGen+=cell_assignment_expr ( COMMAGen_List+=COMMA cell_assignment_exprGen_1+=cell_assignment_expr )* 
	{
		// Create return CST Node
		Node cell_assignment_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_assignment_exprsReturnNode.setKind("cell_assignment_exprs");
	    // Create a CST Node
		if($cell_assignment_exprGen != null) {
	        for(Iterator it = $cell_assignment_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_assignment_expr_return r = (PLSQL3Parser.cell_assignment_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_assignment_expr");
	            	cell_assignment_exprsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			cell_assignment_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($cell_assignment_exprGen_1 != null) {		
	    	PLSQL3Parser.cell_assignment_expr_return r = (PLSQL3Parser.cell_assignment_expr_return) $cell_assignment_exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("cell_assignment_expr");
	    		cell_assignment_exprsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$cell_assignment_exprs.returnNode = cell_assignment_exprsReturnNode;
	}
	;

cell_reference returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node cell_referenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_referenceReturnNode.setKind("cell_reference");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	cell_referenceReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cell_reference.returnNode = cell_referenceReturnNode;
	}
	;

cell_reference_options returns [Node returnNode] 
:	( ( keyIGNOREGen+=keyIGNORE | keyKEEPGen+=keyKEEP ) keyNAVGen+=keyNAV )?
		( TK_0='UNIQUE' ( keyDIMENSIONGen+=keyDIMENSION | keySINGLEGen+=keySINGLE keyREFERENCEGen+=keyREFERENCE ) )? 
	{
		// Create return CST Node
		Node cell_reference_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cell_reference_optionsReturnNode.setKind("cell_reference_options");
	    // Create a CST Node
		if($keyIGNOREGen != null) {
	        for(Iterator it = $keyIGNOREGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyIGNORE_return r = (PLSQL3Parser.keyIGNORE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyIGNORE");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyKEEPGen != null) {
	        for(Iterator it = $keyKEEPGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyKEEP_return r = (PLSQL3Parser.keyKEEP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyKEEP");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyNAVGen != null) {
	        for(Iterator it = $keyNAVGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNAV_return r = (PLSQL3Parser.keyNAV_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNAV");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		cell_reference_optionsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyDIMENSIONGen != null) {
	        for(Iterator it = $keyDIMENSIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyDIMENSION_return r = (PLSQL3Parser.keyDIMENSION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyDIMENSION");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keySINGLEGen != null) {
	        for(Iterator it = $keySINGLEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySINGLE_return r = (PLSQL3Parser.keySINGLE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySINGLE");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyREFERENCEGen != null) {
	        for(Iterator it = $keyREFERENCEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREFERENCE_return r = (PLSQL3Parser.keyREFERENCE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREFERENCE");
	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cell_reference_options.returnNode = cell_reference_optionsReturnNode;
	}
	;

column_name returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node column_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_nameReturnNode.setKind("column_name");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	column_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$column_name.returnNode = column_nameReturnNode;
	}
	;

column_spec returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier ( DOTGen_List+=DOT sql_identifierGen_1+=sql_identifier )* 
	{
		// Create return CST Node
		Node column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_specReturnNode.setKind("column_spec");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	column_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			column_specReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($sql_identifierGen_1 != null) {		
	    	PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) $sql_identifierGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("sql_identifier");
	    		column_specReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$column_spec.returnNode = column_specReturnNode;
	} 
//	|	{ isSql }?
//		(	ASTERISK
//		|	sql_identifier ( DOT sql_identifier )* ( DOT ASTERISK )
//		)
//		( ( schema_name DOT )? table_name DOT )? column_name
	;

column_specs returns [Node returnNode] 
:	column_specGen+=column_spec ( COMMAGen_List+=COMMA column_specGen_1+=column_spec )* 
	{
		// Create return CST Node
		Node column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		column_specsReturnNode.setKind("column_specs");
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	column_specsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($column_specGen_1 != null) {		
	    	PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) $column_specGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("column_spec");
	    		column_specsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$column_specs.returnNode = column_specsReturnNode;
	}
	;

close_statement returns [Node returnNode] 
:	keyCLOSEGen+=keyCLOSE cursor_nameGen+=cursor_name 
	{
		// Create return CST Node
		Node close_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		close_statementReturnNode.setKind("close_statement");
	    // Create a CST Node
		if($keyCLOSEGen != null) {
	        for(Iterator it = $keyCLOSEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCLOSE_return r = (PLSQL3Parser.keyCLOSE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCLOSE");
	            	close_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	close_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$close_statement.returnNode = close_statementReturnNode;
	}
	;

commit_statement returns [Node returnNode] 
:	TK_0='COMMIT' 
	{
		// Create return CST Node
		Node commit_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		commit_statementReturnNode.setKind("commit_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		commit_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$commit_statement.returnNode = commit_statementReturnNode;
	}
	;

condition_and returns [Node returnNode] 
:	condition_notGen+=condition_not ( TK_0='AND' condition_notGen_1+=condition_not )* 
	{
		// Create return CST Node
		Node condition_andReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_andReturnNode.setKind("condition_and");
	    // Create a CST Node
		if($condition_notGen != null) {
	        for(Iterator it = $condition_notGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_not_return r = (PLSQL3Parser.condition_not_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_not");
	            	condition_andReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal condition_notGen_1 aggregation
		if($condition_notGen_1 != null) {
	    for(int pos = 0; pos < $condition_notGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_andReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($condition_notGen_1 != null) {		
	    	PLSQL3Parser.condition_not_return r = (PLSQL3Parser.condition_not_return) $condition_notGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("condition_not");
	    		condition_andReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$condition_and.returnNode = condition_andReturnNode;
	}
	;	

condition_between returns [Node returnNode] 
:	sql_expressionGen+=sql_expression ( TK_0='NOT' )? TK_1='BETWEEN' sql_expressionGen_1+=sql_expression TK_2='AND' sql_expressionGen_2+=sql_expression 
	{
		// Create return CST Node
		Node condition_betweenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_betweenReturnNode.setKind("condition_between");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_betweenReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_betweenReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($sql_expressionGen_1 != null) {
	        for(Iterator it = $sql_expressionGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		condition_betweenReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($sql_expressionGen_2 != null) {
	        for(Iterator it = $sql_expressionGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_between.returnNode = condition_betweenReturnNode;
	}
	;

condition_comparison returns [Node returnNode] 
:	LPARENGen=LPAREN sql_expressionsGen+=sql_expressions RPARENGen=RPAREN ( outer_join_signGen+=outer_join_sign )? ( EQGen=EQ | NOT_EQGen=NOT_EQ ) LPARENGen_1=LPAREN select_commandGen+=select_command RPARENGen_1=RPAREN ( outer_join_signGen_1+=outer_join_sign )? 
	{
		// Create return CST Node
		Node condition_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_comparisonReturnNode.setKind("condition_comparison");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($outer_join_signGen != null) {
	        for(Iterator it = $outer_join_signGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_sign");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Leaf
		if($NOT_EQGen != null) {
			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOT_EQGenLeaf.setKind("NOT_EQ");
			NOT_EQGenLeaf.setValue($NOT_EQGen.text);
			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			condition_comparisonReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			condition_comparisonReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($outer_join_signGen_1 != null) {
	        for(Iterator it = $outer_join_signGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_sign");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_comparison.returnNode = condition_comparisonReturnNode;
	}
	|	( TK_0='PRIOR' )? sql_expressionGen+=sql_expression ( outer_join_signGen+=outer_join_sign )? ( EQGen=EQ | NOT_EQGen=NOT_EQ | GTHGen=GTH | GEQGen=GEQ | LTHGen=LTH | LEQGen=LEQ ) ( TK_1='PRIOR' )? ( sql_expressionGen_1+=sql_expression | LPARENGen=LPAREN select_commandGen+=select_command RPARENGen=RPAREN ) ( outer_join_signGen_1+=outer_join_sign )? 
	{
		// Create return CST Node
		Node condition_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_comparisonReturnNode.setKind("condition_comparison");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_comparisonReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($outer_join_signGen != null) {
	        for(Iterator it = $outer_join_signGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_sign");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Leaf
		if($NOT_EQGen != null) {
			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOT_EQGenLeaf.setKind("NOT_EQ");
			NOT_EQGenLeaf.setValue($NOT_EQGen.text);
			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
		}
	    // Create a CST Leaf
		if($GTHGen != null) {
			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GTHGenLeaf.setKind("GTH");
			GTHGenLeaf.setValue($GTHGen.text);
			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
			GTHGenLeaf.setLine(GTHGen.getLine());
			condition_comparisonReturnNode.getChildren().add(GTHGenLeaf);
		}
	    // Create a CST Leaf
		if($GEQGen != null) {
			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GEQGenLeaf.setKind("GEQ");
			GEQGenLeaf.setValue($GEQGen.text);
			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
			GEQGenLeaf.setLine(GEQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(GEQGenLeaf);
		}
	    // Create a CST Leaf
		if($LTHGen != null) {
			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LTHGenLeaf.setKind("LTH");
			LTHGenLeaf.setValue($LTHGen.text);
			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
			LTHGenLeaf.setLine(LTHGen.getLine());
			condition_comparisonReturnNode.getChildren().add(LTHGenLeaf);
		}
	    // Create a CST Leaf
		if($LEQGen != null) {
			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LEQGenLeaf.setKind("LEQ");
			LEQGenLeaf.setValue($LEQGen.text);
			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
			LEQGenLeaf.setLine(LEQGen.getLine());
			condition_comparisonReturnNode.getChildren().add(LEQGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_comparisonReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($sql_expressionGen_1 != null) {
	        for(Iterator it = $sql_expressionGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($outer_join_signGen_1 != null) {
	        for(Iterator it = $outer_join_signGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_sign");
	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_comparison.returnNode = condition_comparisonReturnNode;
	}
	;

condition_equals_path returns [Node returnNode] 
:	keyEQUALS_PATHGen+=keyEQUALS_PATH LPARENGen=LPAREN column_nameGen+=column_name COMMAGen=COMMA path_stringGen+=path_string ( COMMAGen_1=COMMA correlation_integerGen+=correlation_integer )? RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_equals_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_equals_pathReturnNode.setKind("condition_equals_path");
	    // Create a CST Node
		if($keyEQUALS_PATHGen != null) {
	        for(Iterator it = $keyEQUALS_PATHGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyEQUALS_PATH_return r = (PLSQL3Parser.keyEQUALS_PATH_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyEQUALS_PATH");
	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_equals_pathReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen != null) {
			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGenLeaf.setKind("COMMA");
			COMMAGenLeaf.setValue($COMMAGen.text);
			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
			COMMAGenLeaf.setLine(COMMAGen.getLine());
			condition_equals_pathReturnNode.getChildren().add(COMMAGenLeaf);
		}
	    // Create a CST Node
		if($path_stringGen != null) {
	        for(Iterator it = $path_stringGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.path_string_return r = (PLSQL3Parser.path_string_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path_string");
	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen_1 != null) {
			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_1Leaf.setKind("COMMA");
			COMMAGen_1Leaf.setValue($COMMAGen_1.text);
			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
			condition_equals_pathReturnNode.getChildren().add(COMMAGen_1Leaf);
		}
	    // Create a CST Node
		if($correlation_integerGen != null) {
	        for(Iterator it = $correlation_integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.correlation_integer_return r = (PLSQL3Parser.correlation_integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("correlation_integer");
	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_equals_pathReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_equals_path.returnNode = condition_equals_pathReturnNode;
	}
	;

condition_exists returns [Node returnNode] 
:	TK_0='EXISTS' LPARENGen=LPAREN select_commandGen+=select_command RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_existsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_existsReturnNode.setKind("condition_exists");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_existsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_existsReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_existsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_existsReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_exists.returnNode = condition_existsReturnNode;
	}
	;
	
condition_expr returns [Node returnNode] 
:	condition_existsGen+=condition_exists 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_existsGen != null) {
	        for(Iterator it = $condition_existsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_exists_return r = (PLSQL3Parser.condition_exists_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_exists");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_isGen+=condition_is 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_isGen != null) {
	        for(Iterator it = $condition_isGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_return r = (PLSQL3Parser.condition_is_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_comparisonGen+=condition_comparison 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_comparisonGen != null) {
	        for(Iterator it = $condition_comparisonGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_comparison_return r = (PLSQL3Parser.condition_comparison_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_comparison");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_group_comparisonGen+=condition_group_comparison 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_group_comparisonGen != null) {
	        for(Iterator it = $condition_group_comparisonGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_group_comparison_return r = (PLSQL3Parser.condition_group_comparison_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_group_comparison");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_inGen+=condition_in 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_inGen != null) {
	        for(Iterator it = $condition_inGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_in_return r = (PLSQL3Parser.condition_in_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_in");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_is_a_setGen+=condition_is_a_set 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_is_a_setGen != null) {
	        for(Iterator it = $condition_is_a_setGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_a_set_return r = (PLSQL3Parser.condition_is_a_set_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is_a_set");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_is_anyGen+=condition_is_any 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_is_anyGen != null) {
	        for(Iterator it = $condition_is_anyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_any_return r = (PLSQL3Parser.condition_is_any_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is_any");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_is_emptyGen+=condition_is_empty 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_is_emptyGen != null) {
	        for(Iterator it = $condition_is_emptyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_empty_return r = (PLSQL3Parser.condition_is_empty_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is_empty");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_is_of_typeGen+=condition_is_of_type 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_is_of_typeGen != null) {
	        for(Iterator it = $condition_is_of_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_of_type_return r = (PLSQL3Parser.condition_is_of_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is_of_type");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_is_presentGen+=condition_is_present 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_is_presentGen != null) {
	        for(Iterator it = $condition_is_presentGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_is_present_return r = (PLSQL3Parser.condition_is_present_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_is_present");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_likeGen+=condition_like 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_likeGen != null) {
	        for(Iterator it = $condition_likeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_like_return r = (PLSQL3Parser.condition_like_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_like");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_memberGen+=condition_member 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_memberGen != null) {
	        for(Iterator it = $condition_memberGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_member_return r = (PLSQL3Parser.condition_member_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_member");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_betweenGen+=condition_between 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_betweenGen != null) {
	        for(Iterator it = $condition_betweenGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_between_return r = (PLSQL3Parser.condition_between_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_between");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_regexp_likeGen+=condition_regexp_like 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_regexp_likeGen != null) {
	        for(Iterator it = $condition_regexp_likeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_regexp_like_return r = (PLSQL3Parser.condition_regexp_like_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_regexp_like");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_submultisetGen+=condition_submultiset 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_submultisetGen != null) {
	        for(Iterator it = $condition_submultisetGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_submultiset_return r = (PLSQL3Parser.condition_submultiset_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_submultiset");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_equals_pathGen+=condition_equals_path 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_equals_pathGen != null) {
	        for(Iterator it = $condition_equals_pathGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_equals_path_return r = (PLSQL3Parser.condition_equals_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_equals_path");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_under_pathGen+=condition_under_path 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_under_pathGen != null) {
	        for(Iterator it = $condition_under_pathGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_under_path_return r = (PLSQL3Parser.condition_under_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_under_path");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	|	condition_parenGen+=condition_paren 
	{
		// Create return CST Node
		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_exprReturnNode.setKind("condition_expr");
	    // Create a CST Node
		if($condition_parenGen != null) {
	        for(Iterator it = $condition_parenGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_paren_return r = (PLSQL3Parser.condition_paren_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_paren");
	            	condition_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_expr.returnNode = condition_exprReturnNode;
	}
	;

condition_group_comparison returns [Node returnNode] 
:	LPARENGen=LPAREN sql_expressionsGen+=sql_expressions RPARENGen=RPAREN ( EQGen=EQ | NOT_EQGen=NOT_EQ ) ( TK_0='ANY' | keySOMEGen+=keySOME | TK_1='ALL' ) LPARENGen_1=LPAREN ( grouping_expression_listGen+=grouping_expression_list | select_commandGen+=select_command ) RPARENGen_1=RPAREN 
	{
		// Create return CST Node
		Node condition_group_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_group_comparisonReturnNode.setKind("condition_group_comparison");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Leaf
		if($NOT_EQGen != null) {
			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOT_EQGenLeaf.setKind("NOT_EQ");
			NOT_EQGenLeaf.setValue($NOT_EQGen.text);
			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_group_comparisonReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keySOMEGen != null) {
	        for(Iterator it = $keySOMEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySOME_return r = (PLSQL3Parser.keySOME_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySOME");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_group_comparisonReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			condition_group_comparisonReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($grouping_expression_listGen != null) {
	        for(Iterator it = $grouping_expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_expression_list");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			condition_group_comparisonReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_group_comparison.returnNode = condition_group_comparisonReturnNode;
	}
	|	sql_expressionGen+=sql_expression ( EQGen=EQ | NOT_EQGen=NOT_EQ | GTHGen=GTH | GEQGen=GEQ | LTHGen=LTH | LEQGen=LEQ ) ( TK_0='ANY' | keySOMEGen+=keySOME | TK_1='ALL' ) LPARENGen=LPAREN ( sql_expressionsGen+=sql_expressions | select_commandGen+=select_command ) RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_group_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_group_comparisonReturnNode.setKind("condition_group_comparison");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Leaf
		if($NOT_EQGen != null) {
			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOT_EQGenLeaf.setKind("NOT_EQ");
			NOT_EQGenLeaf.setValue($NOT_EQGen.text);
			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
		}
	    // Create a CST Leaf
		if($GTHGen != null) {
			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GTHGenLeaf.setKind("GTH");
			GTHGenLeaf.setValue($GTHGen.text);
			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
			GTHGenLeaf.setLine(GTHGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(GTHGenLeaf);
		}
	    // Create a CST Leaf
		if($GEQGen != null) {
			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GEQGenLeaf.setKind("GEQ");
			GEQGenLeaf.setValue($GEQGen.text);
			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
			GEQGenLeaf.setLine(GEQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(GEQGenLeaf);
		}
	    // Create a CST Leaf
		if($LTHGen != null) {
			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LTHGenLeaf.setKind("LTH");
			LTHGenLeaf.setValue($LTHGen.text);
			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
			LTHGenLeaf.setLine(LTHGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(LTHGenLeaf);
		}
	    // Create a CST Leaf
		if($LEQGen != null) {
			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LEQGenLeaf.setKind("LEQ");
			LEQGenLeaf.setValue($LEQGen.text);
			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
			LEQGenLeaf.setLine(LEQGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(LEQGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_group_comparisonReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keySOMEGen != null) {
	        for(Iterator it = $keySOMEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySOME_return r = (PLSQL3Parser.keySOME_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySOME");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_group_comparisonReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_group_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_group_comparison.returnNode = condition_group_comparisonReturnNode;
	}
	;

condition_in returns [Node returnNode] 
:	LPARENGen=LPAREN sql_expressionsGen+=sql_expressions RPARENGen=RPAREN ( TK_0='NOT' )? TK_1='IN' LPARENGen_1=LPAREN ( grouping_expression_listGen+=grouping_expression_list | select_commandGen+=select_command ) RPARENGen_1=RPAREN 
	{
		// Create return CST Node
		Node condition_inReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_inReturnNode.setKind("condition_in");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_inReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_inReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_inReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_inReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			condition_inReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($grouping_expression_listGen != null) {
	        for(Iterator it = $grouping_expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_expression_list");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			condition_inReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_in.returnNode = condition_inReturnNode;
	}
	|	sql_expressionGen+=sql_expression ( TK_0='NOT' )? TK_1='IN' LPARENGen=LPAREN ( expression_listGen+=expression_list | select_commandGen+=select_command ) RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_inReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_inReturnNode.setKind("condition_in");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_inReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_inReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_inReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($expression_listGen != null) {
	        for(Iterator it = $expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression_list");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	condition_inReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_inReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_in.returnNode = condition_inReturnNode;
	}
	;

condition_is returns [Node returnNode] 
:	sql_expressionGen+=sql_expression TK_0='IS' ( TK_1='NOT' )? ( keyNANGen+=keyNAN | keyINFINITEGen+=keyINFINITE | TK_2='NULL' ) 
	{
		// Create return CST Node
		Node condition_isReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_isReturnNode.setKind("condition_is");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_isReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_isReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_isReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyNANGen != null) {
	        for(Iterator it = $keyNANGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNAN_return r = (PLSQL3Parser.keyNAN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNAN");
	            	condition_isReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyINFINITEGen != null) {
	        for(Iterator it = $keyINFINITEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINFINITE_return r = (PLSQL3Parser.keyINFINITE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINFINITE");
	            	condition_isReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		condition_isReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$condition_is.returnNode = condition_isReturnNode;
	}
	;

condition_is_any returns [Node returnNode] 
:	( column_nameGen+=column_name TK_0='IS' )? TK_1='ANY' 
	{
		// Create return CST Node
		Node condition_is_anyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_is_anyReturnNode.setKind("condition_is_any");
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	condition_is_anyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_is_anyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_is_anyReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$condition_is_any.returnNode = condition_is_anyReturnNode;
	}
	;

condition_is_empty returns [Node returnNode] 
:	nested_table_column_nameGen+=nested_table_column_name TK_0='IS' ( TK_1='NOT' )? keyEMPTYGen+=keyEMPTY 
	{
		// Create return CST Node
		Node condition_is_emptyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_is_emptyReturnNode.setKind("condition_is_empty");
	    // Create a CST Node
		if($nested_table_column_nameGen != null) {
	        for(Iterator it = $nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table_column_name");
	            	condition_is_emptyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_is_emptyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_is_emptyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyEMPTYGen != null) {
	        for(Iterator it = $keyEMPTYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyEMPTY_return r = (PLSQL3Parser.keyEMPTY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyEMPTY");
	            	condition_is_emptyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_is_empty.returnNode = condition_is_emptyReturnNode;
	}
	;
	
condition_is_a_set returns [Node returnNode] 
:	nested_table_column_nameGen+=nested_table_column_name TK_0='IS' ( TK_1='NOT' )? keyAGen+=keyA TK_2='SET' 
	{
		// Create return CST Node
		Node condition_is_a_setReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_is_a_setReturnNode.setKind("condition_is_a_set");
	    // Create a CST Node
		if($nested_table_column_nameGen != null) {
	        for(Iterator it = $nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table_column_name");
	            	condition_is_a_setReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_is_a_setReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_is_a_setReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyAGen != null) {
	        for(Iterator it = $keyAGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyA_return r = (PLSQL3Parser.keyA_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyA");
	            	condition_is_a_setReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		condition_is_a_setReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$condition_is_a_set.returnNode = condition_is_a_setReturnNode;
	}
	;
	
condition_is_of_type returns [Node returnNode] 
:	sql_expressionGen+=sql_expression TK_0='IS' ( TK_1='NOT' )? TK_2='OF' ( keyTYPEGen+=keyTYPE )? LPARENGen=LPAREN type_nameGen+=type_name RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_is_of_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_is_of_typeReturnNode.setKind("condition_is_of_type");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_is_of_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_is_of_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		condition_is_of_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyTYPEGen != null) {
	        for(Iterator it = $keyTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTYPE");
	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_is_of_typeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($type_nameGen != null) {
	        for(Iterator it = $type_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_name");
	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_is_of_typeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_is_of_type.returnNode = condition_is_of_typeReturnNode;
	}
	;

condition_is_present returns [Node returnNode] 
:	cell_referenceGen+=cell_reference TK_0='IS' keyPRESENTGen+=keyPRESENT 
	{
		// Create return CST Node
		Node condition_is_presentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_is_presentReturnNode.setKind("condition_is_present");
	    // Create a CST Node
		if($cell_referenceGen != null) {
	        for(Iterator it = $cell_referenceGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_reference_return r = (PLSQL3Parser.cell_reference_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_reference");
	            	condition_is_presentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_is_presentReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyPRESENTGen != null) {
	        for(Iterator it = $keyPRESENTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPRESENT_return r = (PLSQL3Parser.keyPRESENT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPRESENT");
	            	condition_is_presentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_is_present.returnNode = condition_is_presentReturnNode;
	}
	;

condition_like returns [Node returnNode] 
:	sql_expressionGen+=sql_expression ( TK_0='NOT' )? ( TK_1='LIKE' | keyLIKECGen+=keyLIKEC | keyLIKE2Gen+=keyLIKE2 | keyLIKE4Gen+=keyLIKE4 ) sql_expressionGen_1+=sql_expression ( keyESCAPEGen+=keyESCAPE sql_expressionGen_2+=sql_expression )? 
	{
		// Create return CST Node
		Node condition_likeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_likeReturnNode.setKind("condition_like");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_likeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_likeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyLIKECGen != null) {
	        for(Iterator it = $keyLIKECGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLIKEC_return r = (PLSQL3Parser.keyLIKEC_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLIKEC");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyLIKE2Gen != null) {
	        for(Iterator it = $keyLIKE2Gen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLIKE2_return r = (PLSQL3Parser.keyLIKE2_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLIKE2");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyLIKE4Gen != null) {
	        for(Iterator it = $keyLIKE4Gen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLIKE4_return r = (PLSQL3Parser.keyLIKE4_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLIKE4");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($sql_expressionGen_1 != null) {
	        for(Iterator it = $sql_expressionGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyESCAPEGen != null) {
	        for(Iterator it = $keyESCAPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyESCAPE_return r = (PLSQL3Parser.keyESCAPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyESCAPE");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($sql_expressionGen_2 != null) {
	        for(Iterator it = $sql_expressionGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_like.returnNode = condition_likeReturnNode;
	}
	;

condition_member returns [Node returnNode] 
:	sql_expressionGen+=sql_expression ( TK_0='NOT' )? keyMEMBERGen+=keyMEMBER ( TK_1='OF' )? nested_table_column_nameGen+=nested_table_column_name 
	{
		// Create return CST Node
		Node condition_memberReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_memberReturnNode.setKind("condition_member");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	condition_memberReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_memberReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyMEMBERGen != null) {
	        for(Iterator it = $keyMEMBERGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyMEMBER_return r = (PLSQL3Parser.keyMEMBER_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyMEMBER");
	            	condition_memberReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_memberReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($nested_table_column_nameGen != null) {
	        for(Iterator it = $nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table_column_name");
	            	condition_memberReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_member.returnNode = condition_memberReturnNode;
	}
	;

condition_not returns [Node returnNode] 
:	TK_0='NOT' condition_exprGen+=condition_expr 
	{
		// Create return CST Node
		Node condition_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_notReturnNode.setKind("condition_not");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_notReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($condition_exprGen != null) {
	        for(Iterator it = $condition_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_expr_return r = (PLSQL3Parser.condition_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_expr");
	            	condition_notReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_not.returnNode = condition_notReturnNode;
	}
	|	condition_exprGen+=condition_expr 
	{
		// Create return CST Node
		Node condition_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_notReturnNode.setKind("condition_not");
	    // Create a CST Node
		if($condition_exprGen != null) {
	        for(Iterator it = $condition_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_expr_return r = (PLSQL3Parser.condition_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_expr");
	            	condition_notReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_not.returnNode = condition_notReturnNode;
	}
	;

condition_or returns [Node returnNode] 
:	condition_andGen+=condition_and ( TK_0='OR' condition_andGen_1+=condition_and )* 
	{
		// Create return CST Node
		Node condition_orReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_orReturnNode.setKind("condition_or");
	    // Create a CST Node
		if($condition_andGen != null) {
	        for(Iterator it = $condition_andGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_and_return r = (PLSQL3Parser.condition_and_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_and");
	            	condition_orReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal condition_andGen_1 aggregation
		if($condition_andGen_1 != null) {
	    for(int pos = 0; pos < $condition_andGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_orReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($condition_andGen_1 != null) {		
	    	PLSQL3Parser.condition_and_return r = (PLSQL3Parser.condition_and_return) $condition_andGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("condition_and");
	    		condition_orReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$condition_or.returnNode = condition_orReturnNode;
	}
	;
		
condition_paren returns [Node returnNode] 
:	LPARENGen=LPAREN sql_conditionGen+=sql_condition RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_parenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_parenReturnNode.setKind("condition_paren");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_parenReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	condition_parenReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_parenReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_paren.returnNode = condition_parenReturnNode;
	}
	;
	
condition_regexp_like returns [Node returnNode] 
:	keyREGEXP_LIKEGen+=keyREGEXP_LIKE LPARENGen=LPAREN call_parametersGen+=call_parameters RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_regexp_likeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_regexp_likeReturnNode.setKind("condition_regexp_like");
	    // Create a CST Node
		if($keyREGEXP_LIKEGen != null) {
	        for(Iterator it = $keyREGEXP_LIKEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREGEXP_LIKE_return r = (PLSQL3Parser.keyREGEXP_LIKE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREGEXP_LIKE");
	            	condition_regexp_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_regexp_likeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($call_parametersGen != null) {
	        for(Iterator it = $call_parametersGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.call_parameters_return r = (PLSQL3Parser.call_parameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("call_parameters");
	            	condition_regexp_likeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_regexp_likeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_regexp_like.returnNode = condition_regexp_likeReturnNode;
	}
	;

condition_submultiset returns [Node returnNode] 
:	nested_table_column_nameGen+=nested_table_column_name ( TK_0='NOT' )? keySUBMULTISETGen+=keySUBMULTISET ( TK_1='OF' )? nested_table_column_nameGen_1+=nested_table_column_name 
	{
		// Create return CST Node
		Node condition_submultisetReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_submultisetReturnNode.setKind("condition_submultiset");
	    // Create a CST Node
		if($nested_table_column_nameGen != null) {
	        for(Iterator it = $nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table_column_name");
	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condition_submultisetReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keySUBMULTISETGen != null) {
	        for(Iterator it = $keySUBMULTISETGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySUBMULTISET_return r = (PLSQL3Parser.keySUBMULTISET_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySUBMULTISET");
	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condition_submultisetReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($nested_table_column_nameGen_1 != null) {
	        for(Iterator it = $nested_table_column_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table_column_name");
	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$condition_submultiset.returnNode = condition_submultisetReturnNode;
	}
	;

condition_under_path returns [Node returnNode] 
:	keyUNDER_PATHGen+=keyUNDER_PATH LPARENGen=LPAREN column_nameGen+=column_name ( COMMAGen=COMMA levelsGen+=levels )? COMMAGen_1=COMMA path_stringGen+=path_string ( COMMAGen_2=COMMA correlation_integerGen+=correlation_integer )? RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node condition_under_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condition_under_pathReturnNode.setKind("condition_under_path");
	    // Create a CST Node
		if($keyUNDER_PATHGen != null) {
	        for(Iterator it = $keyUNDER_PATHGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUNDER_PATH_return r = (PLSQL3Parser.keyUNDER_PATH_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUNDER_PATH");
	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			condition_under_pathReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen != null) {
			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGenLeaf.setKind("COMMA");
			COMMAGenLeaf.setValue($COMMAGen.text);
			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
			COMMAGenLeaf.setLine(COMMAGen.getLine());
			condition_under_pathReturnNode.getChildren().add(COMMAGenLeaf);
		}
	    // Create a CST Node
		if($levelsGen != null) {
	        for(Iterator it = $levelsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.levels_return r = (PLSQL3Parser.levels_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("levels");
	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen_1 != null) {
			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_1Leaf.setKind("COMMA");
			COMMAGen_1Leaf.setValue($COMMAGen_1.text);
			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
			condition_under_pathReturnNode.getChildren().add(COMMAGen_1Leaf);
		}
	    // Create a CST Node
		if($path_stringGen != null) {
	        for(Iterator it = $path_stringGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.path_string_return r = (PLSQL3Parser.path_string_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path_string");
	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen_2 != null) {
			Leaf COMMAGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_2Leaf.setKind("COMMA");
			COMMAGen_2Leaf.setValue($COMMAGen_2.text);
			COMMAGen_2Leaf.setPos(COMMAGen_2.getCharPositionInLine());
			COMMAGen_2Leaf.setLine(COMMAGen_2.getLine());
			condition_under_pathReturnNode.getChildren().add(COMMAGen_2Leaf);
		}
	    // Create a CST Node
		if($correlation_integerGen != null) {
	        for(Iterator it = $correlation_integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.correlation_integer_return r = (PLSQL3Parser.correlation_integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("correlation_integer");
	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			condition_under_pathReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$condition_under_path.returnNode = condition_under_pathReturnNode;
	}
	;

correlation_integer returns [Node returnNode] 
:	integerGen+=integer 
	{
		// Create return CST Node
		Node correlation_integerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		correlation_integerReturnNode.setKind("correlation_integer");
	    // Create a CST Node
		if($integerGen != null) {
	        for(Iterator it = $integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer");
	            	correlation_integerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$correlation_integer.returnNode = correlation_integerReturnNode;
	}
	;

create_package returns [Node returnNode] 
:	TK_0='CREATE' ( TK_1='OR' keyREPLACEGen+=keyREPLACE )?
		( package_specGen+=package_spec | package_bodyGen+=package_body ) 
	{
		// Create return CST Node
		Node create_packageReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		create_packageReturnNode.setKind("create_package");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		create_packageReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		create_packageReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyREPLACEGen != null) {
	        for(Iterator it = $keyREPLACEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREPLACE_return r = (PLSQL3Parser.keyREPLACE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREPLACE");
	            	create_packageReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($package_specGen != null) {
	        for(Iterator it = $package_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_spec_return r = (PLSQL3Parser.package_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_spec");
	            	create_packageReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($package_bodyGen != null) {
	        for(Iterator it = $package_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_body_return r = (PLSQL3Parser.package_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_body");
	            	create_packageReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$create_package.returnNode = create_packageReturnNode;
	}
	;

cursor_declaration returns [Node returnNode] 
:	keyCURSORGen+=keyCURSOR cursor_nameGen+=cursor_name
		( LPARENGen=LPAREN parameter_specsGen+=parameter_specs RPARENGen=RPAREN )?
		TK_0='IS' select_commandGen+=select_command SEMIGen=SEMI 
	{
		// Create return CST Node
		Node cursor_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cursor_declarationReturnNode.setKind("cursor_declaration");
	    // Create a CST Node
		if($keyCURSORGen != null) {
	        for(Iterator it = $keyCURSORGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCURSOR");
	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			cursor_declarationReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($parameter_specsGen != null) {
	        for(Iterator it = $parameter_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.parameter_specs_return r = (PLSQL3Parser.parameter_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parameter_specs");
	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			cursor_declarationReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		cursor_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			cursor_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$cursor_declaration.returnNode = cursor_declarationReturnNode;
	}
	;

cursor_expression returns [Node returnNode] 
:	keyCURSORGen+=keyCURSOR LPARENGen=LPAREN subqueryGen+=subquery RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node cursor_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cursor_expressionReturnNode.setKind("cursor_expression");
	    // Create a CST Node
		if($keyCURSORGen != null) {
	        for(Iterator it = $keyCURSORGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCURSOR");
	            	cursor_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			cursor_expressionReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	cursor_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			cursor_expressionReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$cursor_expression.returnNode = cursor_expressionReturnNode;
	}
	;
	
cursor_loop_param returns [Node returnNode] 
:	record_nameGen+=record_name TK_0='IN'
		(	cursor_nameGen+=cursor_name ( LPARENGen=LPAREN plsql_expressionsGen+=plsql_expressions RPARENGen=RPAREN )?
		|	LPARENGen_1=LPAREN select_statementGen+=select_statement RPARENGen_1=RPAREN
		) 
	{
		// Create return CST Node
		Node cursor_loop_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cursor_loop_paramReturnNode.setKind("cursor_loop_param");
	    // Create a CST Node
		if($record_nameGen != null) {
	        for(Iterator it = $record_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_name");
	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		cursor_loop_paramReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			cursor_loop_paramReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($plsql_expressionsGen != null) {
	        for(Iterator it = $plsql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expressions");
	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			cursor_loop_paramReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			cursor_loop_paramReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($select_statementGen != null) {
	        for(Iterator it = $select_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_statement");
	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			cursor_loop_paramReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$cursor_loop_param.returnNode = cursor_loop_paramReturnNode;
	}
	;
	
cursor_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node cursor_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cursor_nameReturnNode.setKind("cursor_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	cursor_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cursor_name.returnNode = cursor_nameReturnNode;
	}
	;

cursor_spec returns [Node returnNode] 
:	keyCURSORGen+=keyCURSOR cursor_nameGen+=cursor_name 
		( LPARENGen=LPAREN parameter_specsGen+=parameter_specs RPARENGen=RPAREN )?
		keyRETURNGen+=keyRETURN return_typeGen+=return_type SEMIGen=SEMI 
	{
		// Create return CST Node
		Node cursor_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cursor_specReturnNode.setKind("cursor_spec");
	    // Create a CST Node
		if($keyCURSORGen != null) {
	        for(Iterator it = $keyCURSORGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCURSOR");
	            	cursor_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	cursor_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			cursor_specReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($parameter_specsGen != null) {
	        for(Iterator it = $parameter_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.parameter_specs_return r = (PLSQL3Parser.parameter_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parameter_specs");
	            	cursor_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			cursor_specReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	cursor_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($return_typeGen != null) {
	        for(Iterator it = $return_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("return_type");
	            	cursor_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cursor_spec.returnNode = cursor_specReturnNode;
	} 
	;

datatype returns [Node returnNode] 
:	TK_0='BINARY_INTEGER' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	} 
	|	TK_0='BINARY_FLOAT' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='BINARY_DOUBLE' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NATURAL' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	} 
	|	TK_0='POSITIVE' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	} 
	|	( TK_0='NUMBER' | TK_1='NUMERIC' | TK_2='DECIMAL' | TK_3='DEC' ) ( LPARENGen=LPAREN NUMBERGen=NUMBER ( COMMAGen=COMMA NUMBERGen_1=NUMBER )? RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($COMMAGen != null) {
			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGenLeaf.setKind("COMMA");
			COMMAGenLeaf.setValue($COMMAGen.text);
			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
			COMMAGenLeaf.setLine(COMMAGen.getLine());
			datatypeReturnNode.getChildren().add(COMMAGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGen_1Leaf.setKind("NUMBER");
			NUMBERGen_1Leaf.setValue($NUMBERGen_1.text);
			NUMBERGen_1Leaf.setPos(NUMBERGen_1.getCharPositionInLine());
			NUMBERGen_1Leaf.setLine(NUMBERGen_1.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='LONG' ( TK_1='RAW')? ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='RAW' ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='BOOLEAN' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='DATE' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	keyINTERVALGen+=keyINTERVAL keyDAYGen+=keyDAY ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? TK_0='TO' keySECONDGen+=keySECOND ( LPARENGen_1=LPAREN NUMBERGen_1=NUMBER RPARENGen_1=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a CST Node
		if($keyINTERVALGen != null) {
	        for(Iterator it = $keyINTERVALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINTERVAL_return r = (PLSQL3Parser.keyINTERVAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINTERVAL");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyDAYGen != null) {
	        for(Iterator it = $keyDAYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyDAY_return r = (PLSQL3Parser.keyDAY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyDAY");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keySECONDGen != null) {
	        for(Iterator it = $keySECONDGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySECOND_return r = (PLSQL3Parser.keySECOND_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySECOND");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			datatypeReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGen_1Leaf.setKind("NUMBER");
			NUMBERGen_1Leaf.setValue($NUMBERGen_1.text);
			NUMBERGen_1Leaf.setPos(NUMBERGen_1.getCharPositionInLine());
			NUMBERGen_1Leaf.setLine(NUMBERGen_1.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			datatypeReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	keyINTERVALGen+=keyINTERVAL keyYEARGen+=keyYEAR ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? TK_0='TO' keyMONTHGen+=keyMONTH 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a CST Node
		if($keyINTERVALGen != null) {
	        for(Iterator it = $keyINTERVALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINTERVAL_return r = (PLSQL3Parser.keyINTERVAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINTERVAL");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyYEARGen != null) {
	        for(Iterator it = $keyYEARGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyYEAR_return r = (PLSQL3Parser.keyYEAR_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyYEAR");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyMONTHGen != null) {
	        for(Iterator it = $keyMONTHGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyMONTH_return r = (PLSQL3Parser.keyMONTH_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyMONTH");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	( keyTIMEGen+=keyTIME | keyTIMESTAMPGen+=keyTIMESTAMP ) ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? ( TK_0='WITH' ( keyLOCALGen+=keyLOCAL )? keyTIMEGen_1+=keyTIME keyZONEGen+=keyZONE)? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a CST Node
		if($keyTIMEGen != null) {
	        for(Iterator it = $keyTIMEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTIME_return r = (PLSQL3Parser.keyTIME_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTIME");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyTIMESTAMPGen != null) {
	        for(Iterator it = $keyTIMESTAMPGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTIMESTAMP_return r = (PLSQL3Parser.keyTIMESTAMP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTIMESTAMP");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyLOCALGen != null) {
	        for(Iterator it = $keyLOCALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLOCAL_return r = (PLSQL3Parser.keyLOCAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLOCAL");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyTIMEGen_1 != null) {
	        for(Iterator it = $keyTIMEGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTIME_return r = (PLSQL3Parser.keyTIME_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTIME");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyZONEGen != null) {
	        for(Iterator it = $keyZONEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyZONE_return r = (PLSQL3Parser.keyZONE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyZONE");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='INTEGER' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='INT' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='SMALLINT' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='FLOAT' ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='REAL' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='DOUBLE' keyPRECISIONGen+=keyPRECISION 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyPRECISIONGen != null) {
	        for(Iterator it = $keyPRECISIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPRECISION_return r = (PLSQL3Parser.keyPRECISION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPRECISION");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='CHAR'      ( keyVARYINGGen+=keyVARYING )? ( LPARENGen=LPAREN NUMBERGen=NUMBER ( keyBYTEGen+=keyBYTE | TK_1='CHAR' )? RPARENGen=RPAREN )? ( TK_2='CHARACTER' TK_3='SET' ( identifierGen+=identifier | column_specGen+=column_spec CHARSET_ATTRGen=CHARSET_ATTR ) )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyVARYINGGen != null) {
	        for(Iterator it = $keyVARYINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARYING");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Node
		if($keyBYTEGen != null) {
	        for(Iterator it = $keyBYTEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBYTE");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($CHARSET_ATTRGen != null) {
			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
			CHARSET_ATTRGenLeaf.setValue($CHARSET_ATTRGen.text);
			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='VARCHAR'                   ( LPARENGen=LPAREN NUMBERGen=NUMBER ( keyBYTEGen+=keyBYTE | TK_1='CHAR' )? RPARENGen=RPAREN )? ( TK_2='CHARACTER' TK_3='SET' ( identifierGen+=identifier | column_specGen+=column_spec CHARSET_ATTRGen=CHARSET_ATTR ) )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Node
		if($keyBYTEGen != null) {
	        for(Iterator it = $keyBYTEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBYTE");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($CHARSET_ATTRGen != null) {
			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
			CHARSET_ATTRGenLeaf.setValue($CHARSET_ATTRGen.text);
			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='VARCHAR2'                  ( LPARENGen=LPAREN NUMBERGen=NUMBER ( keyBYTEGen+=keyBYTE | TK_1='CHAR' )? RPARENGen=RPAREN )? ( TK_2='CHARACTER' TK_3='SET' ( identifierGen+=identifier | column_specGen+=column_spec CHARSET_ATTRGen=CHARSET_ATTR ) )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Node
		if($keyBYTEGen != null) {
	        for(Iterator it = $keyBYTEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBYTE");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($CHARSET_ATTRGen != null) {
			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
			CHARSET_ATTRGenLeaf.setValue($CHARSET_ATTRGen.text);
			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='CHARACTER' ( keyVARYINGGen+=keyVARYING )? ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyVARYINGGen != null) {
	        for(Iterator it = $keyVARYINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARYING");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NCHAR'     ( keyVARYINGGen+=keyVARYING )? ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyVARYINGGen != null) {
	        for(Iterator it = $keyVARYINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARYING");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NVARCHAR'  ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NVARCHAR2' ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NATIONAL'  ( TK_1='CHARACTER' | TK_2='CHAR' ) ( keyVARYINGGen+=keyVARYING )? ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyVARYINGGen != null) {
	        for(Iterator it = $keyVARYINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARYING");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='MLSLABEL' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='PLS_INTEGER' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='BLOB' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='CLOB' ( TK_1='CHARACTER' TK_2='SET' ( identifierGen+=identifier | column_specGen+=column_spec CHARSET_ATTRGen=CHARSET_ATTR ) )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	datatypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($CHARSET_ATTRGen != null) {
			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
			CHARSET_ATTRGenLeaf.setValue($CHARSET_ATTRGen.text);
			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='NCLOB' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='BFILE' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	|	TK_0='ROWID' 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	} 
	|	TK_0='UROWID' ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		datatypeReturnNode.setKind("datatype");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$datatype.returnNode = datatypeReturnNode;
	}
	;

declare_spec returns [Node returnNode] 
:	variable_declarationGen+=variable_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($variable_declarationGen != null) {
	        for(Iterator it = $variable_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	subtype_declarationGen+=subtype_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($subtype_declarationGen != null) {
	        for(Iterator it = $subtype_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subtype_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	cursor_declarationGen+=cursor_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($cursor_declarationGen != null) {
	        for(Iterator it = $cursor_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	exception_declarationGen+=exception_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($exception_declarationGen != null) {
	        for(Iterator it = $exception_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	record_declarationGen+=record_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($record_declarationGen != null) {
	        for(Iterator it = $record_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	plsql_table_declarationGen+=plsql_table_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($plsql_table_declarationGen != null) {
	        for(Iterator it = $plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_table_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	varray_declarationGen+=varray_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($varray_declarationGen != null) {
	        for(Iterator it = $varray_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("varray_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	}
	|	procedure_declarationGen+=procedure_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($procedure_declarationGen != null) {
	        for(Iterator it = $procedure_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_declaration_return r = (PLSQL3Parser.procedure_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	function_declarationGen+=function_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($function_declarationGen != null) {
	        for(Iterator it = $function_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_declaration_return r = (PLSQL3Parser.function_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	}
	|	type_declarationGen+=type_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($type_declarationGen != null) {
	        for(Iterator it = $type_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_declaration_return r = (PLSQL3Parser.type_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	} 
	|	pragma_declarationGen+=pragma_declaration 
	{
		// Create return CST Node
		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		declare_specReturnNode.setKind("declare_spec");
	    // Create a CST Node
		if($pragma_declarationGen != null) {
	        for(Iterator it = $pragma_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_declaration");
	            	declare_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$declare_spec.returnNode = declare_specReturnNode;
	}
	;

delete_command returns [Node returnNode] 
:	TK_0='DELETE' ( TK_1='FROM' )? selected_tableGen+=selected_table
		(	TK_2='WHERE'
			(	keyCURRENT_OFGen+=keyCURRENT_OF cursor_nameGen+=cursor_name
			|	sql_conditionGen+=sql_condition
			)
		)?
		( returning_clauseGen+=returning_clause )? 
	{
		// Create return CST Node
		Node delete_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		delete_commandReturnNode.setKind("delete_command");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		delete_commandReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		delete_commandReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($selected_tableGen != null) {
	        for(Iterator it = $selected_tableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("selected_table");
	            	delete_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		delete_commandReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyCURRENT_OFGen != null) {
	        for(Iterator it = $keyCURRENT_OFGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCURRENT_OF_return r = (PLSQL3Parser.keyCURRENT_OF_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCURRENT_OF");
	            	delete_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	delete_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	delete_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($returning_clauseGen != null) {
	        for(Iterator it = $returning_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("returning_clause");
	            	delete_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$delete_command.returnNode = delete_commandReturnNode;
	}
	;

displayed_column returns [Node returnNode] 
:	(	column_specGen+=column_spec DOTGen=DOT ASTERISKGen=ASTERISK
//		|	keyCOUNT LPAREN ( ASTERISK | 'DISTINCT' LPAREN sql_expression RPAREN ) RPAREN
//		|	
		|	sql_expressionGen+=sql_expression
		)
		( aliasGen+=alias )? 
	{
		// Create return CST Node
		Node displayed_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		displayed_columnReturnNode.setKind("displayed_column");
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			displayed_columnReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Leaf
		if($ASTERISKGen != null) {
			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASTERISKGenLeaf.setKind("ASTERISK");
			ASTERISKGenLeaf.setValue($ASTERISKGen.text);
			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
			displayed_columnReturnNode.getChildren().add(ASTERISKGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($aliasGen != null) {
	        for(Iterator it = $aliasGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.alias_return r = (PLSQL3Parser.alias_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("alias");
	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$displayed_column.returnNode = displayed_columnReturnNode;
	}
	;

else_case_statement returns [Node returnNode] 
:	TK_0='ELSE' seq_of_statementsGen+=seq_of_statements 
	{
		// Create return CST Node
		Node else_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		else_case_statementReturnNode.setKind("else_case_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		else_case_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	else_case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$else_case_statement.returnNode = else_case_statementReturnNode;
	}
	;

else_case_expression returns [Node returnNode] 
:	TK_0='ELSE' nested_expressionGen+=nested_expression 
	{
		// Create return CST Node
		Node else_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		else_case_expressionReturnNode.setKind("else_case_expression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		else_case_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	else_case_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$else_case_expression.returnNode = else_case_expressionReturnNode;
	}
	;	

exception_declaration returns [Node returnNode] 
:	exception_nameGen+=exception_name TK_0='EXCEPTION' SEMIGen=SEMI 
	{
		// Create return CST Node
		Node exception_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exception_declarationReturnNode.setKind("exception_declaration");
	    // Create a CST Node
		if($exception_nameGen != null) {
	        for(Iterator it = $exception_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_name");
	            	exception_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exception_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			exception_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$exception_declaration.returnNode = exception_declarationReturnNode;
	}
	;

exception_handler returns [Node returnNode] 
:	TK_0='WHEN' exception_namesGen+=exception_names TK_1='THEN'
		seq_of_statementsGen+=seq_of_statements 
	{
		// Create return CST Node
		Node exception_handlerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exception_handlerReturnNode.setKind("exception_handler");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exception_handlerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($exception_namesGen != null) {
	        for(Iterator it = $exception_namesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_names_return r = (PLSQL3Parser.exception_names_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_names");
	            	exception_handlerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		exception_handlerReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	exception_handlerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exception_handler.returnNode = exception_handlerReturnNode;
	}
	;

exception_names returns [Node returnNode] 
:	exception_nameGen+=exception_name ( TK_0='OR' exception_nameGen_1+=exception_name )* 
	{
		// Create return CST Node
		Node exception_namesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exception_namesReturnNode.setKind("exception_names");
	    // Create a CST Node
		if($exception_nameGen != null) {
	        for(Iterator it = $exception_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_name");
	            	exception_namesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal exception_nameGen_1 aggregation
		if($exception_nameGen_1 != null) {
	    for(int pos = 0; pos < $exception_nameGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exception_namesReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($exception_nameGen_1 != null) {		
	    	PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) $exception_nameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("exception_name");
	    		exception_namesReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$exception_names.returnNode = exception_namesReturnNode;
	}
	;

exception_name returns [Node returnNode] 
:	( exception_package_nameGen+=exception_package_name DOTGen=DOT )? identifierGen+=identifier 
	{
		// Create return CST Node
		Node exception_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exception_nameReturnNode.setKind("exception_name");
	    // Create a CST Node
		if($exception_package_nameGen != null) {
	        for(Iterator it = $exception_package_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_package_name_return r = (PLSQL3Parser.exception_package_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_package_name");
	            	exception_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			exception_nameReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	exception_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exception_name.returnNode = exception_nameReturnNode;
	}
	;

exception_package_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node exception_package_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exception_package_nameReturnNode.setKind("exception_package_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	exception_package_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exception_package_name.returnNode = exception_package_nameReturnNode;
	}
	;

exit_statement returns [Node returnNode] 
:	keyEXITGen+=keyEXIT ( label_nameGen+=label_name )? ( TK_0='WHEN' plsql_conditionGen+=plsql_condition )? 
	{
		// Create return CST Node
		Node exit_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exit_statementReturnNode.setKind("exit_statement");
	    // Create a CST Node
		if($keyEXITGen != null) {
	        for(Iterator it = $keyEXITGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyEXIT_return r = (PLSQL3Parser.keyEXIT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyEXIT");
	            	exit_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($label_nameGen != null) {
	        for(Iterator it = $label_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	exit_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exit_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($plsql_conditionGen != null) {
	        for(Iterator it = $plsql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_condition");
	            	exit_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exit_statement.returnNode = exit_statementReturnNode;
	}
	;

fetch_statement returns [Node returnNode] 
:	TK_0='FETCH' cursor_nameGen+=cursor_name TK_1='INTO' 
		(	variable_namesGen+=variable_names
		|	record_nameGen+=record_name
		) 
	{
		// Create return CST Node
		Node fetch_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fetch_statementReturnNode.setKind("fetch_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		fetch_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		fetch_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($variable_namesGen != null) {
	        for(Iterator it = $variable_namesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_names_return r = (PLSQL3Parser.variable_names_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_names");
	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($record_nameGen != null) {
	        for(Iterator it = $record_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_name");
	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$fetch_statement.returnNode = fetch_statementReturnNode;
	}
	;

field_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node field_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		field_nameReturnNode.setKind("field_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	field_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$field_name.returnNode = field_nameReturnNode;
	}
	;	

field_spec returns [Node returnNode] 
:	column_nameGen+=column_name type_specGen+=type_spec
		(TK_0='NOT' TK_1='NULL')? 
		( ( ASSIGNGen=ASSIGN | TK_2='DEFAULT' ) plsql_expressionGen+=plsql_expression)? 
	{
		// Create return CST Node
		Node field_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		field_specReturnNode.setKind("field_spec");
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	field_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	field_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		field_specReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		field_specReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($ASSIGNGen != null) {
			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASSIGNGenLeaf.setKind("ASSIGN");
			ASSIGNGenLeaf.setValue($ASSIGNGen.text);
			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
			field_specReturnNode.getChildren().add(ASSIGNGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		field_specReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	field_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$field_spec.returnNode = field_specReturnNode;
	}
	;

field_specs returns [Node returnNode] 
:	field_specGen+=field_spec ( COMMAGen_List+=COMMA field_specGen_1+=field_spec )* 
	{
		// Create return CST Node
		Node field_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		field_specsReturnNode.setKind("field_specs");
	    // Create a CST Node
		if($field_specGen != null) {
	        for(Iterator it = $field_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.field_spec_return r = (PLSQL3Parser.field_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("field_spec");
	            	field_specsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			field_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($field_specGen_1 != null) {		
	    	PLSQL3Parser.field_spec_return r = (PLSQL3Parser.field_spec_return) $field_specGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("field_spec");
	    		field_specsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$field_specs.returnNode = field_specsReturnNode;
	}
	;

function_body returns [Node returnNode] 
:	( proc_fun_startGen+=proc_fun_start )? TK_0='FUNCTION' function_nameGen+=function_name 
		( LPARENGen=LPAREN argumentsGen+=arguments RPARENGen=RPAREN )? 
		keyRETURNGen+=keyRETURN return_typeGen+=return_type ( TK_1='IS' | TK_2='AS' )
		//( keyPRAGMA keyAUTONOMOUS_TRANSACTION )?
		( declare_specGen+=declare_spec )* 
		( TK_3='BEGIN' )
		( seq_of_statementsGen+=seq_of_statements )
		( TK_4='EXCEPTION' ( exception_handlerGen+=exception_handler )+ )?
		TK_5='END' ( function_nameGen_1+=function_name )? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node function_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_bodyReturnNode.setKind("function_body");
	    // Create a CST Node
		if($proc_fun_startGen != null) {
	        for(Iterator it = $proc_fun_startGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.proc_fun_start_return r = (PLSQL3Parser.proc_fun_start_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("proc_fun_start");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($function_nameGen != null) {
	        for(Iterator it = $function_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_name");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			function_bodyReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			function_bodyReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($return_typeGen != null) {
	        for(Iterator it = $return_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("return_type");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		function_bodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		function_bodyReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($declare_specGen != null) {
	        for(Iterator it = $declare_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("declare_spec");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		function_bodyReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		function_bodyReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($exception_handlerGen != null) {
	        for(Iterator it = $exception_handlerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_handler");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		function_bodyReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($function_nameGen_1 != null) {
	        for(Iterator it = $function_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_name");
	            	function_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			function_bodyReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$function_body.returnNode = function_bodyReturnNode;
	}
	;

function_call returns [Node returnNode] 
:	user_defined_functionGen+=user_defined_function ( { input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN }? LPARENGen=LPAREN ( call_parametersGen+=call_parameters )? RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node function_callReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_callReturnNode.setKind("function_call");
	    // Create a CST Node
		if($user_defined_functionGen != null) {
	        for(Iterator it = $user_defined_functionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.user_defined_function_return r = (PLSQL3Parser.user_defined_function_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("user_defined_function");
	            	function_callReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			function_callReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($call_parametersGen != null) {
	        for(Iterator it = $call_parametersGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.call_parameters_return r = (PLSQL3Parser.call_parameters_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("call_parameters");
	            	function_callReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			function_callReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$function_call.returnNode = function_callReturnNode;
	}
//	|	//{ input.LA(1) == ID && input.LA(2) == LPAREN && input.LA(3) == ASTERISK && input.LA(4) == RPAREN }? 
//		{ isSql }?
//		keyCOUNT LPAREN ( ASTERISK | sql_expression ) RPAREN
//	|	{ isSql }?
//		'DISTINCT' LPAREN call_parameters RPAREN
	;

function_declaration returns [Node returnNode] 
:	function_bodyGen+=function_body 
	{
		// Create return CST Node
		Node function_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_declarationReturnNode.setKind("function_declaration");
	    // Create a CST Node
		if($function_bodyGen != null) {
	        for(Iterator it = $function_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_body_return r = (PLSQL3Parser.function_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_body");
	            	function_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_declaration.returnNode = function_declarationReturnNode;
	}
	;

function_expression returns [Node returnNode] 
:	function_callGen+=function_call ( DOTGen=DOT nested_expressionGen+=nested_expression )? 
	{
		// Create return CST Node
		Node function_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_expressionReturnNode.setKind("function_expression");
	    // Create a CST Node
		if($function_callGen != null) {
	        for(Iterator it = $function_callGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_call_return r = (PLSQL3Parser.function_call_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_call");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			function_expressionReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_expression.returnNode = function_expressionReturnNode;
	}
	|	{ isSql }?
		(	keyCOUNTGen+=keyCOUNT LPARENGen=LPAREN ( ASTERISKGen=ASTERISK | nested_expressionGen+=nested_expression ) RPARENGen=RPAREN
		|	TK_0='DISTINCT' ( LPARENGen_1=LPAREN nested_expressionGen_1+=nested_expression RPARENGen_1=RPAREN | nested_expressionGen_2+=nested_expression )
		) 
	{
		// Create return CST Node
		Node function_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_expressionReturnNode.setKind("function_expression");
	    // Create a CST Node
		if($keyCOUNTGen != null) {
	        for(Iterator it = $keyCOUNTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCOUNT_return r = (PLSQL3Parser.keyCOUNT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCOUNT");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			function_expressionReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($ASTERISKGen != null) {
			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASTERISKGenLeaf.setKind("ASTERISK");
			ASTERISKGenLeaf.setValue($ASTERISKGen.text);
			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
			function_expressionReturnNode.getChildren().add(ASTERISKGenLeaf);
		}
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			function_expressionReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		function_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			function_expressionReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($nested_expressionGen_1 != null) {
	        for(Iterator it = $nested_expressionGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			function_expressionReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($nested_expressionGen_2 != null) {
	        for(Iterator it = $nested_expressionGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	function_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_expression.returnNode = function_expressionReturnNode;
	}
	;

function_spec returns [Node returnNode] 
:	TK_0='FUNCTION' function_nameGen+=function_name 
		( LPARENGen=LPAREN argumentsGen+=arguments RPARENGen=RPAREN )?
		keyRETURNGen+=keyRETURN return_typeGen+=return_type (TK_1='DETERMINISTIC')? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node function_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_specReturnNode.setKind("function_spec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		function_specReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($function_nameGen != null) {
	        for(Iterator it = $function_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_name");
	            	function_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			function_specReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	function_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			function_specReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	function_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($return_typeGen != null) {
	        for(Iterator it = $return_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("return_type");
	            	function_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		function_specReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			function_specReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$function_spec.returnNode = function_specReturnNode;
	}
	;

function_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node function_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_nameReturnNode.setKind("function_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	function_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_name.returnNode = function_nameReturnNode;
	} | QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node function_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_nameReturnNode.setKind("function_name");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			function_nameReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$function_name.returnNode = function_nameReturnNode;
	} //( schema_name DOT )? identifier
	;

goto_statement returns [Node returnNode] 
:	TK_0='GOTO' label_nameGen+=label_name 
	{
		// Create return CST Node
		Node goto_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		goto_statementReturnNode.setKind("goto_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		goto_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($label_nameGen != null) {
	        for(Iterator it = $label_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	goto_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$goto_statement.returnNode = goto_statementReturnNode;
	}
	;

group_by_clause returns [Node returnNode] 
:	TK_0='GROUP' TK_1='BY' group_by_exprsGen+=group_by_exprs 
	{
		// Create return CST Node
		Node group_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_clauseReturnNode.setKind("group_by_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		group_by_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		group_by_clauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($group_by_exprsGen != null) {
	        for(Iterator it = $group_by_exprsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.group_by_exprs_return r = (PLSQL3Parser.group_by_exprs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group_by_exprs");
	            	group_by_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group_by_clause.returnNode = group_by_clauseReturnNode;
	}
	;

group_by_expr returns [Node returnNode] 
:	rollup_cube_clauseGen+=rollup_cube_clause 
	{
		// Create return CST Node
		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_exprReturnNode.setKind("group_by_expr");
	    // Create a CST Node
		if($rollup_cube_clauseGen != null) {
	        for(Iterator it = $rollup_cube_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.rollup_cube_clause_return r = (PLSQL3Parser.rollup_cube_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rollup_cube_clause");
	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group_by_expr.returnNode = group_by_exprReturnNode;
	}
	|	grouping_sets_clauseGen+=grouping_sets_clause 
	{
		// Create return CST Node
		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_exprReturnNode.setKind("group_by_expr");
	    // Create a CST Node
		if($grouping_sets_clauseGen != null) {
	        for(Iterator it = $grouping_sets_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_sets_clause_return r = (PLSQL3Parser.grouping_sets_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_sets_clause");
	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group_by_expr.returnNode = group_by_exprReturnNode;
	}
	|	grouping_expression_listGen+=grouping_expression_list 
	{
		// Create return CST Node
		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_exprReturnNode.setKind("group_by_expr");
	    // Create a CST Node
		if($grouping_expression_listGen != null) {
	        for(Iterator it = $grouping_expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_expression_list");
	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group_by_expr.returnNode = group_by_exprReturnNode;
	}
	;
	
group_by_exprs returns [Node returnNode] 
:	group_by_exprGen+=group_by_expr ( COMMAGen_List+=COMMA group_by_exprGen_1+=group_by_expr )* 
	{
		// Create return CST Node
		Node group_by_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		group_by_exprsReturnNode.setKind("group_by_exprs");
	    // Create a CST Node
		if($group_by_exprGen != null) {
	        for(Iterator it = $group_by_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.group_by_expr_return r = (PLSQL3Parser.group_by_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group_by_expr");
	            	group_by_exprsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			group_by_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($group_by_exprGen_1 != null) {		
	    	PLSQL3Parser.group_by_expr_return r = (PLSQL3Parser.group_by_expr_return) $group_by_exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("group_by_expr");
	    		group_by_exprsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$group_by_exprs.returnNode = group_by_exprsReturnNode;
	}
	;	

rollup_cube_clause returns [Node returnNode] 
:	( keyROLLUPGen+=keyROLLUP | keyCUBEGen+=keyCUBE ) LPARENGen=LPAREN grouping_expression_listGen+=grouping_expression_list RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node rollup_cube_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rollup_cube_clauseReturnNode.setKind("rollup_cube_clause");
	    // Create a CST Node
		if($keyROLLUPGen != null) {
	        for(Iterator it = $keyROLLUPGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyROLLUP_return r = (PLSQL3Parser.keyROLLUP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyROLLUP");
	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyCUBEGen != null) {
	        for(Iterator it = $keyCUBEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCUBE_return r = (PLSQL3Parser.keyCUBE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCUBE");
	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			rollup_cube_clauseReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($grouping_expression_listGen != null) {
	        for(Iterator it = $grouping_expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_expression_list");
	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			rollup_cube_clauseReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rollup_cube_clause.returnNode = rollup_cube_clauseReturnNode;
	}
	;

grouping_expression_list returns [Node returnNode] 
:	expression_listGen+=expression_list ( COMMAGen_List+=COMMA expression_listGen_1+=expression_list )* 
	{
		// Create return CST Node
		Node grouping_expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		grouping_expression_listReturnNode.setKind("grouping_expression_list");
	    // Create a CST Node
		if($expression_listGen != null) {
	        for(Iterator it = $expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression_list");
	            	grouping_expression_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			grouping_expression_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($expression_listGen_1 != null) {		
	    	PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) $expression_listGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expression_list");
	    		grouping_expression_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$grouping_expression_list.returnNode = grouping_expression_listReturnNode;
	}
	;
	
grouping_sets_clause returns [Node returnNode] 
:	keyGROUPINGGen+=keyGROUPING keySETSGen+=keySETS LPARENGen=LPAREN grouping_expression_listGen+=grouping_expression_list RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node grouping_sets_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		grouping_sets_clauseReturnNode.setKind("grouping_sets_clause");
	    // Create a CST Node
		if($keyGROUPINGGen != null) {
	        for(Iterator it = $keyGROUPINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyGROUPING_return r = (PLSQL3Parser.keyGROUPING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyGROUPING");
	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keySETSGen != null) {
	        for(Iterator it = $keySETSGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySETS_return r = (PLSQL3Parser.keySETS_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySETS");
	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			grouping_sets_clauseReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($grouping_expression_listGen != null) {
	        for(Iterator it = $grouping_expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("grouping_expression_list");
	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			grouping_sets_clauseReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$grouping_sets_clause.returnNode = grouping_sets_clauseReturnNode;
	}
	;

hierarchical_query_clause returns [Node returnNode] 
:	( TK_0='START' TK_1='WITH' sql_conditionGen+=sql_condition )? TK_2='CONNECT' TK_3='BY' ( keyNOCYCLEGen+=keyNOCYCLE )? sql_conditionGen_1+=sql_condition 
	{
		// Create return CST Node
		Node hierarchical_query_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		hierarchical_query_clauseReturnNode.setKind("hierarchical_query_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($keyNOCYCLEGen != null) {
	        for(Iterator it = $keyNOCYCLEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNOCYCLE_return r = (PLSQL3Parser.keyNOCYCLE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNOCYCLE");
	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($sql_conditionGen_1 != null) {
	        for(Iterator it = $sql_conditionGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$hierarchical_query_clause.returnNode = hierarchical_query_clauseReturnNode;
	}
	;

host_variable returns [Node returnNode] 
:	identifierGen+=identifier (DOTGen_List+=DOT identifierGen_1+=identifier)* 
	{
		// Create return CST Node
		Node host_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		host_variableReturnNode.setKind("host_variable");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	host_variableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			host_variableReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($identifierGen_1 != null) {		
	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) $identifierGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("identifier");
	    		host_variableReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$host_variable.returnNode = host_variableReturnNode;
	}
	;

identifier returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierReturnNode.setKind("identifier");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			identifierReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$identifier.returnNode = identifierReturnNode;
	}
	|	DOUBLEQUOTED_STRINGGen=DOUBLEQUOTED_STRING 
	{
		// Create return CST Node
		Node identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		identifierReturnNode.setKind("identifier");
	    // Create a CST Leaf
		if($DOUBLEQUOTED_STRINGGen != null) {
			Leaf DOUBLEQUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLEQUOTED_STRINGGenLeaf.setKind("DOUBLEQUOTED_STRING");
			DOUBLEQUOTED_STRINGGenLeaf.setValue($DOUBLEQUOTED_STRINGGen.text);
			DOUBLEQUOTED_STRINGGenLeaf.setPos(DOUBLEQUOTED_STRINGGen.getCharPositionInLine());
			DOUBLEQUOTED_STRINGGenLeaf.setLine(DOUBLEQUOTED_STRINGGen.getLine());
			identifierReturnNode.getChildren().add(DOUBLEQUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$identifier.returnNode = identifierReturnNode;
	} 
//	|	keyword
   	;
   
inner_cross_join_clause returns [Node returnNode] 
:	( keyINNERGen+=keyINNER )? keyJOINGen+=keyJOIN table_nameGen+=table_name ( TK_0='ON' sql_conditionGen+=sql_condition | keyUSINGGen+=keyUSING LPARENGen=LPAREN column_specsGen+=column_specs RPARENGen=RPAREN ) 
	{
		// Create return CST Node
		Node inner_cross_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		inner_cross_join_clauseReturnNode.setKind("inner_cross_join_clause");
	    // Create a CST Node
		if($keyINNERGen != null) {
	        for(Iterator it = $keyINNERGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINNER_return r = (PLSQL3Parser.keyINNER_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINNER");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyJOINGen != null) {
	        for(Iterator it = $keyJOINGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyJOIN");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		inner_cross_join_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyUSINGGen != null) {
	        for(Iterator it = $keyUSINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUSING_return r = (PLSQL3Parser.keyUSING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUSING");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			inner_cross_join_clauseReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_specsGen != null) {
	        for(Iterator it = $column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_specs");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			inner_cross_join_clauseReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$inner_cross_join_clause.returnNode = inner_cross_join_clauseReturnNode;
	}
	|	( keyCROSSGen+=keyCROSS | keyNATURALGen+=keyNATURAL ( keyINNERGen+=keyINNER ) ) keyJOINGen+=keyJOIN table_nameGen+=table_name 
	{
		// Create return CST Node
		Node inner_cross_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		inner_cross_join_clauseReturnNode.setKind("inner_cross_join_clause");
	    // Create a CST Node
		if($keyCROSSGen != null) {
	        for(Iterator it = $keyCROSSGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCROSS_return r = (PLSQL3Parser.keyCROSS_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCROSS");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyNATURALGen != null) {
	        for(Iterator it = $keyNATURALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNATURAL_return r = (PLSQL3Parser.keyNATURAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNATURAL");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyINNERGen != null) {
	        for(Iterator it = $keyINNERGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINNER_return r = (PLSQL3Parser.keyINNER_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINNER");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyJOINGen != null) {
	        for(Iterator it = $keyJOINGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyJOIN");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$inner_cross_join_clause.returnNode = inner_cross_join_clauseReturnNode;
	}
	;
   
if_statement returns [Node returnNode] 
:	TK_0='IF' plsql_conditionGen+=plsql_condition TK_1='THEN' seq_of_statementsGen+=seq_of_statements
		( keyELSIFGen+=keyELSIF plsql_conditionGen_1+=plsql_condition TK_2='THEN' seq_of_statementsGen_1+=seq_of_statements	)*
		( TK_3='ELSE' seq_of_statementsGen_2+=seq_of_statements )?
		TK_4='END' TK_5='IF' 
	{
		// Create return CST Node
		Node if_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		if_statementReturnNode.setKind("if_statement");
	    // Create a CST Node
		if($plsql_conditionGen != null) {
	        for(Iterator it = $plsql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_condition");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		if_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal keyELSIFGen aggregation
		if($keyELSIFGen != null) {
	    for(int pos = 0; pos < $keyELSIFGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($keyELSIFGen != null) {		
	    	PLSQL3Parser.keyELSIF_return r = (PLSQL3Parser.keyELSIF_return) $keyELSIFGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("keyELSIF");
	    		if_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($plsql_conditionGen_1 != null) {		
	    	PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) $plsql_conditionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("plsql_condition");
	    		if_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		if_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($seq_of_statementsGen_1 != null) {		
	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) $seq_of_statementsGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("seq_of_statements");
	    		if_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		if_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen_2 != null) {
	        for(Iterator it = $seq_of_statementsGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		if_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		if_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$if_statement.returnNode = if_statementReturnNode;
	}
	;

index_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node index_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		index_nameReturnNode.setKind("index_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	index_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$index_name.returnNode = index_nameReturnNode;
	}
	;

insert_command returns [Node returnNode] 
:	TK_0='INSERT' TK_1='INTO' table_reference_listGen+=table_reference_list
		( LPARENGen=LPAREN column_specsGen+=column_specs RPARENGen=RPAREN )?
		(	TK_2='VALUES' LPARENGen_1=LPAREN plsql_expressionsGen+=plsql_expressions RPARENGen_1=RPAREN
		|	select_statementGen+=select_statement
		)
		( returning_clauseGen+=returning_clause )? 
	{
		// Create return CST Node
		Node insert_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		insert_commandReturnNode.setKind("insert_command");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		insert_commandReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		insert_commandReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($table_reference_listGen != null) {
	        for(Iterator it = $table_reference_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_reference_list");
	            	insert_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			insert_commandReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_specsGen != null) {
	        for(Iterator it = $column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_specs");
	            	insert_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			insert_commandReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		insert_commandReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			insert_commandReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($plsql_expressionsGen != null) {
	        for(Iterator it = $plsql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expressions");
	            	insert_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			insert_commandReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($select_statementGen != null) {
	        for(Iterator it = $select_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_statement");
	            	insert_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($returning_clauseGen != null) {
	        for(Iterator it = $returning_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("returning_clause");
	            	insert_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$insert_command.returnNode = insert_commandReturnNode;
	}
	;

integer returns [Node returnNode] 
:	NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node integerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		integerReturnNode.setKind("integer");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			integerReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$integer.returnNode = integerReturnNode;
	}
	;

join_clause returns [Node returnNode] 
:	table_nameGen+=table_name ( inner_cross_join_clauseGen+=inner_cross_join_clause | outer_join_clauseGen+=outer_join_clause )+ 
	{
		// Create return CST Node
		Node join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		join_clauseReturnNode.setKind("join_clause");
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal inner_cross_join_clauseGen aggregation
		if($inner_cross_join_clauseGen != null) {
	    for(int pos = 0; pos < $inner_cross_join_clauseGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($inner_cross_join_clauseGen != null) {		
	    	PLSQL3Parser.inner_cross_join_clause_return r = (PLSQL3Parser.inner_cross_join_clause_return) $inner_cross_join_clauseGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("inner_cross_join_clause");
	    		join_clauseReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal outer_join_clauseGen aggregation
		if($outer_join_clauseGen != null) {
	    for(int pos = 0; pos < $outer_join_clauseGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($outer_join_clauseGen != null) {		
	    	PLSQL3Parser.outer_join_clause_return r = (PLSQL3Parser.outer_join_clause_return) $outer_join_clauseGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("outer_join_clause");
	    		join_clauseReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$join_clause.returnNode = join_clauseReturnNode;
	}
	;

label_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node label_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		label_nameReturnNode.setKind("label_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	label_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$label_name.returnNode = label_nameReturnNode;
	}
	;

levels returns [Node returnNode] 
:	integerGen+=integer 
	{
		// Create return CST Node
		Node levelsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		levelsReturnNode.setKind("levels");
	    // Create a CST Node
		if($integerGen != null) {
	        for(Iterator it = $integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer");
	            	levelsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$levels.returnNode = levelsReturnNode;
	}
	;

link_name returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node link_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		link_nameReturnNode.setKind("link_name");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	link_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$link_name.returnNode = link_nameReturnNode;
	}
	;

literal returns [Node returnNode] 
:	( PLUSGen=PLUS | MINUSGen=MINUS )? NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Leaf
		if($PLUSGen != null) {
			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			PLUSGenLeaf.setKind("PLUS");
			PLUSGenLeaf.setValue($PLUSGen.text);
			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
			PLUSGenLeaf.setLine(PLUSGen.getLine());
			literalReturnNode.getChildren().add(PLUSGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MINUSGenLeaf.setKind("MINUS");
			MINUSGenLeaf.setValue($MINUSGen.text);
			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
			MINUSGenLeaf.setLine(MINUSGen.getLine());
			literalReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			literalReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
	|	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalReturnNode.setKind("literal");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			literalReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$literal.returnNode = literalReturnNode;
	}
	;
	
literals returns [Node returnNode] 
:	literalGen+=literal ( COMMAGen_List+=COMMA literalGen_1+=literal )* 
	{
		// Create return CST Node
		Node literalsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		literalsReturnNode.setKind("literals");
	    // Create a CST Node
		if($literalGen != null) {
	        for(Iterator it = $literalGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	literalsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			literalsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($literalGen_1 != null) {		
	    	PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) $literalGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("literal");
	    		literalsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$literals.returnNode = literalsReturnNode;
	}
	;

lock_mode returns [Node returnNode] 
:	TK_0='ROW' TK_1='SHARE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	|	TK_0='ROW' TK_1='EXCLUSIVE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	|	TK_0='SHARE' TK_1='UPDATE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	|	TK_0='SHARE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	|	TK_0='SHARE' TK_1='ROW' TK_2='EXCLUSIVE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	|	TK_0='EXCLUSIVE' 
	{
		// Create return CST Node
		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_modeReturnNode.setKind("lock_mode");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_mode.returnNode = lock_modeReturnNode;
	}
	;

lock_table_statement returns [Node returnNode] 
:	TK_0='LOCK' TK_1='TABLE' table_reference_listGen+=table_reference_list
		TK_2='IN' lock_modeGen+=lock_mode TK_3='MODE' ( TK_4='NOWAIT' )? 
	{
		// Create return CST Node
		Node lock_table_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lock_table_statementReturnNode.setKind("lock_table_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		lock_table_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		lock_table_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($table_reference_listGen != null) {
	        for(Iterator it = $table_reference_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_reference_list");
	            	lock_table_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		lock_table_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($lock_modeGen != null) {
	        for(Iterator it = $lock_modeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lock_mode_return r = (PLSQL3Parser.lock_mode_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lock_mode");
	            	lock_table_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		lock_table_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		lock_table_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$lock_table_statement.returnNode = lock_table_statementReturnNode;
	}
	;

loop_statement returns [Node returnNode] 
:	( LLABELGen=LLABEL label_nameGen+=label_name RLABELGen=RLABEL )?
		(	keyWHILEGen+=keyWHILE plsql_conditionGen+=plsql_condition | 
			( TK_0='FOR' ( numeric_loop_paramGen+=numeric_loop_param | cursor_loop_paramGen+=cursor_loop_param )	) 
		)?
		keyLOOPGen+=keyLOOP
		seq_of_statementsGen+=seq_of_statements
		TK_1='END' keyLOOPGen_1+=keyLOOP 
		( label_nameGen_1+=label_name )? 
	{
		// Create return CST Node
		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		loop_statementReturnNode.setKind("loop_statement");
	    // Create a CST Leaf
		if($LLABELGen != null) {
			Leaf LLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LLABELGenLeaf.setKind("LLABEL");
			LLABELGenLeaf.setValue($LLABELGen.text);
			LLABELGenLeaf.setPos(LLABELGen.getCharPositionInLine());
			LLABELGenLeaf.setLine(LLABELGen.getLine());
			loop_statementReturnNode.getChildren().add(LLABELGenLeaf);
		}
	    // Create a CST Node
		if($label_nameGen != null) {
	        for(Iterator it = $label_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RLABELGen != null) {
			Leaf RLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RLABELGenLeaf.setKind("RLABEL");
			RLABELGenLeaf.setValue($RLABELGen.text);
			RLABELGenLeaf.setPos(RLABELGen.getCharPositionInLine());
			RLABELGenLeaf.setLine(RLABELGen.getLine());
			loop_statementReturnNode.getChildren().add(RLABELGenLeaf);
		}
	    // Create a CST Node
		if($plsql_conditionGen != null) {
	        for(Iterator it = $plsql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_condition");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($numeric_loop_paramGen != null) {
	        for(Iterator it = $numeric_loop_paramGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.numeric_loop_param_return r = (PLSQL3Parser.numeric_loop_param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("numeric_loop_param");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_loop_paramGen != null) {
	        for(Iterator it = $cursor_loop_paramGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_loop_param_return r = (PLSQL3Parser.cursor_loop_param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_loop_param");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyLOOPGen != null) {
	        for(Iterator it = $keyLOOPGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLOOP_return r = (PLSQL3Parser.keyLOOP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLOOP");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		loop_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyLOOPGen_1 != null) {
	        for(Iterator it = $keyLOOPGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLOOP_return r = (PLSQL3Parser.keyLOOP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLOOP");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($label_nameGen_1 != null) {
	        for(Iterator it = $label_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$loop_statement.returnNode = loop_statementReturnNode;
	}
	;

lvalues returns [Node returnNode] 
:	lvalueGen+=lvalue ( COMMAGen_List+=COMMA lvalueGen_1+=lvalue )* 
	{
		// Create return CST Node
		Node lvaluesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lvaluesReturnNode.setKind("lvalues");
	    // Create a CST Node
		if($lvalueGen != null) {
	        for(Iterator it = $lvalueGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lvalue");
	            	lvaluesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			lvaluesReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($lvalueGen_1 != null) {		
	    	PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) $lvalueGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("lvalue");
	    		lvaluesReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$lvalues.returnNode = lvaluesReturnNode;
	}
	;
lvalue returns [Node returnNode] 
:	variable_nameGen+=variable_name 
	{
		// Create return CST Node
		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lvalueReturnNode.setKind("lvalue");
	    // Create a CST Node
		if($variable_nameGen != null) {
	        for(Iterator it = $variable_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_name");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lvalue.returnNode = lvalueReturnNode;
	}
	|	record_nameGen+=record_name DOTGen=DOT field_nameGen+=field_name 
	{
		// Create return CST Node
		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lvalueReturnNode.setKind("lvalue");
	    // Create a CST Node
		if($record_nameGen != null) {
	        for(Iterator it = $record_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_name");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			lvalueReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($field_nameGen != null) {
	        for(Iterator it = $field_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.field_name_return r = (PLSQL3Parser.field_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("field_name");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lvalue.returnNode = lvalueReturnNode;
	}
	|	plsql_table_nameGen+=plsql_table_name LPARENGen=LPAREN subscriptGen+=subscript RPARENGen=RPAREN ( DOTGen_List+=DOT field_nameGen+=field_name )* 
	{
		// Create return CST Node
		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lvalueReturnNode.setKind("lvalue");
	    // Create a CST Node
		if($plsql_table_nameGen != null) {
	        for(Iterator it = $plsql_table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_table_name_return r = (PLSQL3Parser.plsql_table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_table_name");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			lvalueReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($subscriptGen != null) {
	        for(Iterator it = $subscriptGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subscript_return r = (PLSQL3Parser.subscript_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subscript");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			lvalueReturnNode.getChildren().add(RPARENGenLeaf);
		}
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			lvalueReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($field_nameGen != null) {		
	    	PLSQL3Parser.field_name_return r = (PLSQL3Parser.field_name_return) $field_nameGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("field_name");
	    		lvalueReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$lvalue.returnNode = lvalueReturnNode;
	}
	|	COLONGen=COLON host_variableGen+=host_variable ( COLONGen_1=COLON host_variableGen_1+=host_variable )? 
	{
		// Create return CST Node
		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		lvalueReturnNode.setKind("lvalue");
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COLONGenLeaf.setKind("COLON");
			COLONGenLeaf.setValue($COLONGen.text);
			COLONGenLeaf.setPos(COLONGen.getCharPositionInLine());
			COLONGenLeaf.setLine(COLONGen.getLine());
			lvalueReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($host_variableGen != null) {
	        for(Iterator it = $host_variableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("host_variable");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COLONGen_1 != null) {
			Leaf COLONGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COLONGen_1Leaf.setKind("COLON");
			COLONGen_1Leaf.setValue($COLONGen_1.text);
			COLONGen_1Leaf.setPos(COLONGen_1.getCharPositionInLine());
			COLONGen_1Leaf.setLine(COLONGen_1.getLine());
			lvalueReturnNode.getChildren().add(COLONGen_1Leaf);
		}
	    // Create a CST Node
		if($host_variableGen_1 != null) {
	        for(Iterator it = $host_variableGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("host_variable");
	            	lvalueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$lvalue.returnNode = lvalueReturnNode;
	}
	;

main_model returns [Node returnNode] 
:	( keyMAINGen+=keyMAIN main_model_nameGen+=main_model_name )? model_column_clausesGen+=model_column_clauses
		( cell_reference_optionsGen+=cell_reference_options ) model_rules_clauseGen+=model_rules_clause 
	{
		// Create return CST Node
		Node main_modelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		main_modelReturnNode.setKind("main_model");
	    // Create a CST Node
		if($keyMAINGen != null) {
	        for(Iterator it = $keyMAINGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyMAIN_return r = (PLSQL3Parser.keyMAIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyMAIN");
	            	main_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($main_model_nameGen != null) {
	        for(Iterator it = $main_model_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.main_model_name_return r = (PLSQL3Parser.main_model_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("main_model_name");
	            	main_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($model_column_clausesGen != null) {
	        for(Iterator it = $model_column_clausesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_column_clauses_return r = (PLSQL3Parser.model_column_clauses_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_column_clauses");
	            	main_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cell_reference_optionsGen != null) {
	        for(Iterator it = $cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_reference_options");
	            	main_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($model_rules_clauseGen != null) {
	        for(Iterator it = $model_rules_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_rules_clause_return r = (PLSQL3Parser.model_rules_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_rules_clause");
	            	main_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$main_model.returnNode = main_modelReturnNode;
	}
	;
	
main_model_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node main_model_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		main_model_nameReturnNode.setKind("main_model_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	main_model_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$main_model_name.returnNode = main_model_nameReturnNode;
	}
	;

measure_column returns [Node returnNode] 
:	column_nameGen+=column_name 
	{
		// Create return CST Node
		Node measure_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		measure_columnReturnNode.setKind("measure_column");
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	measure_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$measure_column.returnNode = measure_columnReturnNode;
	}
	;

model_clause returns [Node returnNode] 
:	keyMODELGen+=keyMODEL ( cell_reference_optionsGen+=cell_reference_options )
		( return_rows_clauseGen+=return_rows_clause )?
		( reference_modelGen+=reference_model )+ main_modelGen+=main_model 
	{
		// Create return CST Node
		Node model_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_clauseReturnNode.setKind("model_clause");
	    // Create a CST Node
		if($keyMODELGen != null) {
	        for(Iterator it = $keyMODELGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyMODEL_return r = (PLSQL3Parser.keyMODEL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyMODEL");
	            	model_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cell_reference_optionsGen != null) {
	        for(Iterator it = $cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_reference_options");
	            	model_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($return_rows_clauseGen != null) {
	        for(Iterator it = $return_rows_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.return_rows_clause_return r = (PLSQL3Parser.return_rows_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("return_rows_clause");
	            	model_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($reference_modelGen != null) {
	        for(Iterator it = $reference_modelGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.reference_model_return r = (PLSQL3Parser.reference_model_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("reference_model");
	            	model_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($main_modelGen != null) {
	        for(Iterator it = $main_modelGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.main_model_return r = (PLSQL3Parser.main_model_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("main_model");
	            	model_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$model_clause.returnNode = model_clauseReturnNode;
	}
	;

model_column_clauses returns [Node returnNode] 
:	( query_partition_clauseGen+=query_partition_clause ( column_specGen+=column_spec )? )?
		keyDIMENSIONGen+=keyDIMENSION TK_0='BY' LPARENGen=LPAREN model_columnsGen+=model_columns RPARENGen=RPAREN
		keyMEASURESGen+=keyMEASURES LPARENGen_1=LPAREN model_columnsGen_1+=model_columns RPARENGen_1=RPAREN 
	{
		// Create return CST Node
		Node model_column_clausesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_column_clausesReturnNode.setKind("model_column_clauses");
	    // Create a CST Node
		if($query_partition_clauseGen != null) {
	        for(Iterator it = $query_partition_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("query_partition_clause");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyDIMENSIONGen != null) {
	        for(Iterator it = $keyDIMENSIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyDIMENSION_return r = (PLSQL3Parser.keyDIMENSION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyDIMENSION");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		model_column_clausesReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			model_column_clausesReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($model_columnsGen != null) {
	        for(Iterator it = $model_columnsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_columns_return r = (PLSQL3Parser.model_columns_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_columns");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			model_column_clausesReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyMEASURESGen != null) {
	        for(Iterator it = $keyMEASURESGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyMEASURES_return r = (PLSQL3Parser.keyMEASURES_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyMEASURES");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			model_column_clausesReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($model_columnsGen_1 != null) {
	        for(Iterator it = $model_columnsGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_columns_return r = (PLSQL3Parser.model_columns_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_columns");
	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			model_column_clausesReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$model_column_clauses.returnNode = model_column_clausesReturnNode;
	}
	;
	
model_columns returns [Node returnNode] 
:	model_columnGen+=model_column ( COMMAGen_List+=COMMA model_columnGen_1+=model_column )* 
	{
		// Create return CST Node
		Node model_columnsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_columnsReturnNode.setKind("model_columns");
	    // Create a CST Node
		if($model_columnGen != null) {
	        for(Iterator it = $model_columnGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_column_return r = (PLSQL3Parser.model_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_column");
	            	model_columnsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			model_columnsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($model_columnGen_1 != null) {		
	    	PLSQL3Parser.model_column_return r = (PLSQL3Parser.model_column_return) $model_columnGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("model_column");
	    		model_columnsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$model_columns.returnNode = model_columnsReturnNode;
	}
	;
	
model_column returns [Node returnNode] 
:	sql_expressionGen+=sql_expression ( ( TK_0='AS' )? column_specGen+=column_spec )? 
	{
		// Create return CST Node
		Node model_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_columnReturnNode.setKind("model_column");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	model_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		model_columnReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	model_columnReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$model_column.returnNode = model_columnReturnNode;
	}
	;

model_rules_clause returns [Node returnNode] 
:	( keyRULESGen+=keyRULES ( TK_0='UPDATE' | keyUPSERTGen+=keyUPSERT ( TK_1='ALL' )? )? ( ( keyAUTOMATICGen+=keyAUTOMATIC | keySEQUENTIALGen+=keySEQUENTIAL ) TK_2='ORDER' )? )?
		( keyITERATEGen+=keyITERATE LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN ( keyUNTILGen+=keyUNTIL LPARENGen_1=LPAREN sql_conditionGen+=sql_condition RPARENGen_1=RPAREN )? )?
		LPARENGen_2=LPAREN model_rules_exprsGen+=model_rules_exprs RPARENGen_2=RPAREN 
	{
		// Create return CST Node
		Node model_rules_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_rules_clauseReturnNode.setKind("model_rules_clause");
	    // Create a CST Node
		if($keyRULESGen != null) {
	        for(Iterator it = $keyRULESGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRULES_return r = (PLSQL3Parser.keyRULES_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRULES");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		model_rules_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyUPSERTGen != null) {
	        for(Iterator it = $keyUPSERTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUPSERT_return r = (PLSQL3Parser.keyUPSERT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUPSERT");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		model_rules_clauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyAUTOMATICGen != null) {
	        for(Iterator it = $keyAUTOMATICGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyAUTOMATIC_return r = (PLSQL3Parser.keyAUTOMATIC_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyAUTOMATIC");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keySEQUENTIALGen != null) {
	        for(Iterator it = $keySEQUENTIALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySEQUENTIAL_return r = (PLSQL3Parser.keySEQUENTIAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySEQUENTIAL");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		model_rules_clauseReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyITERATEGen != null) {
	        for(Iterator it = $keyITERATEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyITERATE_return r = (PLSQL3Parser.keyITERATE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyITERATE");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			model_rules_clauseReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			model_rules_clauseReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			model_rules_clauseReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyUNTILGen != null) {
	        for(Iterator it = $keyUNTILGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUNTIL_return r = (PLSQL3Parser.keyUNTIL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUNTIL");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			model_rules_clauseReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			model_rules_clauseReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
	    // Create a CST Leaf
		if($LPARENGen_2 != null) {
			Leaf LPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_2Leaf.setKind("LPAREN");
			LPARENGen_2Leaf.setValue($LPARENGen_2.text);
			LPARENGen_2Leaf.setPos(LPARENGen_2.getCharPositionInLine());
			LPARENGen_2Leaf.setLine(LPARENGen_2.getLine());
			model_rules_clauseReturnNode.getChildren().add(LPARENGen_2Leaf);
		}
	    // Create a CST Node
		if($model_rules_exprsGen != null) {
	        for(Iterator it = $model_rules_exprsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_rules_exprs_return r = (PLSQL3Parser.model_rules_exprs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_rules_exprs");
	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_2 != null) {
			Leaf RPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_2Leaf.setKind("RPAREN");
			RPARENGen_2Leaf.setValue($RPARENGen_2.text);
			RPARENGen_2Leaf.setPos(RPARENGen_2.getCharPositionInLine());
			RPARENGen_2Leaf.setLine(RPARENGen_2.getLine());
			model_rules_clauseReturnNode.getChildren().add(RPARENGen_2Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$model_rules_clause.returnNode = model_rules_clauseReturnNode;
	}
	;

model_rules_expr returns [Node returnNode] 
:	( TK_0='UPDATE' | keyUPSERTGen+=keyUPSERT ( TK_1='ALL' )? )? cell_assignmentGen+=cell_assignment ( order_by_clauseGen+=order_by_clause )? EQGen=EQ sql_expressionGen+=sql_expression 
	{
		// Create return CST Node
		Node model_rules_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_rules_exprReturnNode.setKind("model_rules_expr");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		model_rules_exprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyUPSERTGen != null) {
	        for(Iterator it = $keyUPSERTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUPSERT_return r = (PLSQL3Parser.keyUPSERT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUPSERT");
	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		model_rules_exprReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($cell_assignmentGen != null) {
	        for(Iterator it = $cell_assignmentGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_assignment_return r = (PLSQL3Parser.cell_assignment_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_assignment");
	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($order_by_clauseGen != null) {
	        for(Iterator it = $order_by_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.order_by_clause_return r = (PLSQL3Parser.order_by_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("order_by_clause");
	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			model_rules_exprReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$model_rules_expr.returnNode = model_rules_exprReturnNode;
	}
	;

model_rules_exprs returns [Node returnNode] 
:	model_rules_exprGen+=model_rules_expr ( COMMAGen_List+=COMMA model_rules_exprGen_1+=model_rules_expr )* 
	{
		// Create return CST Node
		Node model_rules_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		model_rules_exprsReturnNode.setKind("model_rules_exprs");
	    // Create a CST Node
		if($model_rules_exprGen != null) {
	        for(Iterator it = $model_rules_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_rules_expr_return r = (PLSQL3Parser.model_rules_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_rules_expr");
	            	model_rules_exprsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			model_rules_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($model_rules_exprGen_1 != null) {		
	    	PLSQL3Parser.model_rules_expr_return r = (PLSQL3Parser.model_rules_expr_return) $model_rules_exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("model_rules_expr");
	    		model_rules_exprsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$model_rules_exprs.returnNode = model_rules_exprsReturnNode;
	}
	;

multi_column_for_loop returns [Node returnNode] 
:	TK_0='FOR' LPARENGen=LPAREN column_specsGen+=column_specs RPARENGen=RPAREN TK_1='IN' LPARENGen_1=LPAREN ( bracket_literals_listGen+=bracket_literals_list | subqueryGen+=subquery ) RPARENGen_1=RPAREN 
	{
		// Create return CST Node
		Node multi_column_for_loopReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		multi_column_for_loopReturnNode.setKind("multi_column_for_loop");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		multi_column_for_loopReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			multi_column_for_loopReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_specsGen != null) {
	        for(Iterator it = $column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_specs");
	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			multi_column_for_loopReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		multi_column_for_loopReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			multi_column_for_loopReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($bracket_literals_listGen != null) {
	        for(Iterator it = $bracket_literals_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.bracket_literals_list_return r = (PLSQL3Parser.bracket_literals_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("bracket_literals_list");
	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			multi_column_for_loopReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$multi_column_for_loop.returnNode = multi_column_for_loopReturnNode;
	}
	;

nested_condition returns [Node returnNode] 
:	{  isSql }? condition_orGen+=condition_or 
	{
		// Create return CST Node
		Node nested_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_conditionReturnNode.setKind("nested_condition");
	    // Create a CST Node
		if($condition_orGen != null) {
	        for(Iterator it = $condition_orGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_or_return r = (PLSQL3Parser.condition_or_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_or");
	            	nested_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_condition.returnNode = nested_conditionReturnNode;
	}
	|	{ !isSql }? expr_boolGen+=expr_bool 
	{
		// Create return CST Node
		Node nested_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_conditionReturnNode.setKind("nested_condition");
	    // Create a CST Node
		if($expr_boolGen != null) {
	        for(Iterator it = $expr_boolGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_bool");
	            	nested_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_condition.returnNode = nested_conditionReturnNode;
	}
	;

nested_table returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node nested_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_tableReturnNode.setKind("nested_table");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	nested_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_table.returnNode = nested_tableReturnNode;
	}
	;

nested_table_column_name returns [Node returnNode] 
:	( schema_nameGen+=schema_name DOTGen=DOT )? table_nameGen+=table_name DOTGen_1=DOT nested_tableGen+=nested_table DOTGen_2=DOT column_nameGen+=column_name 
	{
		// Create return CST Node
		Node nested_table_column_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_table_column_nameReturnNode.setKind("nested_table_column_name");
	    // Create a CST Node
		if($schema_nameGen != null) {
	        for(Iterator it = $schema_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_name");
	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			nested_table_column_nameReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen_1 != null) {
			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_1Leaf.setKind("DOT");
			DOTGen_1Leaf.setValue($DOTGen_1.text);
			DOTGen_1Leaf.setPos(DOTGen_1.getCharPositionInLine());
			DOTGen_1Leaf.setLine(DOTGen_1.getLine());
			nested_table_column_nameReturnNode.getChildren().add(DOTGen_1Leaf);
		}
	    // Create a CST Node
		if($nested_tableGen != null) {
	        for(Iterator it = $nested_tableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_table_return r = (PLSQL3Parser.nested_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_table");
	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen_2 != null) {
			Leaf DOTGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_2Leaf.setKind("DOT");
			DOTGen_2Leaf.setValue($DOTGen_2.text);
			DOTGen_2Leaf.setPos(DOTGen_2.getCharPositionInLine());
			DOTGen_2Leaf.setLine(DOTGen_2.getLine());
			nested_table_column_nameReturnNode.getChildren().add(DOTGen_2Leaf);
		}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_table_column_name.returnNode = nested_table_column_nameReturnNode;
	}
	;

null_statement returns [Node returnNode] 
:	TK_0='NULL' 
	{
		// Create return CST Node
		Node null_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		null_statementReturnNode.setKind("null_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		null_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$null_statement.returnNode = null_statementReturnNode;
	} 
	;

numeric_loop_param returns [Node returnNode] 
:	index_nameGen+=index_name TK_0='IN' ( keyREVERSEGen+=keyREVERSE )? integer_exprGen+=integer_expr DOUBLEDOTGen=DOUBLEDOT integer_exprGen_1+=integer_expr 
	{
		// Create return CST Node
		Node numeric_loop_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numeric_loop_paramReturnNode.setKind("numeric_loop_param");
	    // Create a CST Node
		if($index_nameGen != null) {
	        for(Iterator it = $index_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.index_name_return r = (PLSQL3Parser.index_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("index_name");
	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numeric_loop_paramReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyREVERSEGen != null) {
	        for(Iterator it = $keyREVERSEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREVERSE_return r = (PLSQL3Parser.keyREVERSE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREVERSE");
	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($integer_exprGen != null) {
	        for(Iterator it = $integer_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_expr_return r = (PLSQL3Parser.integer_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer_expr");
	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOUBLEDOTGen != null) {
			Leaf DOUBLEDOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLEDOTGenLeaf.setKind("DOUBLEDOT");
			DOUBLEDOTGenLeaf.setValue($DOUBLEDOTGen.text);
			DOUBLEDOTGenLeaf.setPos(DOUBLEDOTGen.getCharPositionInLine());
			DOUBLEDOTGenLeaf.setLine(DOUBLEDOTGen.getLine());
			numeric_loop_paramReturnNode.getChildren().add(DOUBLEDOTGenLeaf);
		}
	    // Create a CST Node
		if($integer_exprGen_1 != null) {
	        for(Iterator it = $integer_exprGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_expr_return r = (PLSQL3Parser.integer_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer_expr");
	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$numeric_loop_param.returnNode = numeric_loop_paramReturnNode;
	}
	;

open_statement returns [Node returnNode] 
:	keyOPENGen+=keyOPEN cursor_nameGen+=cursor_name ( LPARENGen=LPAREN plsql_expressionsGen+=plsql_expressions RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node open_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		open_statementReturnNode.setKind("open_statement");
	    // Create a CST Node
		if($keyOPENGen != null) {
	        for(Iterator it = $keyOPENGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyOPEN_return r = (PLSQL3Parser.keyOPEN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyOPEN");
	            	open_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	open_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			open_statementReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($plsql_expressionsGen != null) {
	        for(Iterator it = $plsql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expressions");
	            	open_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			open_statementReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$open_statement.returnNode = open_statementReturnNode;
	}
	;

order_by_clause returns [Node returnNode] 
:	TK_0='ORDER' ( keySIBLINGSGen+=keySIBLINGS )? TK_1='BY' order_by_exprsGen+=order_by_exprs 
	{
		// Create return CST Node
		Node order_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		order_by_clauseReturnNode.setKind("order_by_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		order_by_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keySIBLINGSGen != null) {
	        for(Iterator it = $keySIBLINGSGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySIBLINGS_return r = (PLSQL3Parser.keySIBLINGS_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySIBLINGS");
	            	order_by_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		order_by_clauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($order_by_exprsGen != null) {
	        for(Iterator it = $order_by_exprsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.order_by_exprs_return r = (PLSQL3Parser.order_by_exprs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("order_by_exprs");
	            	order_by_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$order_by_clause.returnNode = order_by_clauseReturnNode;
	}
	;

order_by_expr returns [Node returnNode] 
:	(	sql_expressionGen+=sql_expression
//		|	position
//		|	column_alias
		)
		( TK_0='ASC' | TK_1='DESC' )? ( keyNULLSGen+=keyNULLS keyFIRSTGen+=keyFIRST | keyNULLSGen_1+=keyNULLS keyLASTGen+=keyLAST )? 
	{
		// Create return CST Node
		Node order_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		order_by_exprReturnNode.setKind("order_by_expr");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		order_by_exprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		order_by_exprReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyNULLSGen != null) {
	        for(Iterator it = $keyNULLSGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNULLS_return r = (PLSQL3Parser.keyNULLS_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNULLS");
	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyFIRSTGen != null) {
	        for(Iterator it = $keyFIRSTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyFIRST_return r = (PLSQL3Parser.keyFIRST_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyFIRST");
	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyNULLSGen_1 != null) {
	        for(Iterator it = $keyNULLSGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNULLS_return r = (PLSQL3Parser.keyNULLS_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNULLS");
	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyLASTGen != null) {
	        for(Iterator it = $keyLASTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLAST_return r = (PLSQL3Parser.keyLAST_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLAST");
	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$order_by_expr.returnNode = order_by_exprReturnNode;
	}
	;

order_by_exprs returns [Node returnNode] 
:	order_by_exprGen+=order_by_expr ( COMMAGen_List+=COMMA order_by_exprGen_1+=order_by_expr )* 
	{
		// Create return CST Node
		Node order_by_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		order_by_exprsReturnNode.setKind("order_by_exprs");
	    // Create a CST Node
		if($order_by_exprGen != null) {
	        for(Iterator it = $order_by_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.order_by_expr_return r = (PLSQL3Parser.order_by_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("order_by_expr");
	            	order_by_exprsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			order_by_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($order_by_exprGen_1 != null) {		
	    	PLSQL3Parser.order_by_expr_return r = (PLSQL3Parser.order_by_expr_return) $order_by_exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("order_by_expr");
	    		order_by_exprsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$order_by_exprs.returnNode = order_by_exprsReturnNode;
	}
	;

outer_join_clause returns [Node returnNode] 
:	( query_partition_clauseGen+=query_partition_clause )?
		(	outer_join_typeGen+=outer_join_type keyJOINGen+=keyJOIN
		|	keyNATURALGen+=keyNATURAL ( outer_join_typeGen_1+=outer_join_type )? keyJOINGen_1+=keyJOIN
		)
		table_nameGen+=table_name ( query_partition_clauseGen_1+=query_partition_clause )?
		( TK_0='ON' sql_conditionGen+=sql_condition | keyUSINGGen+=keyUSING LPARENGen=LPAREN column_specsGen+=column_specs RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node outer_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		outer_join_clauseReturnNode.setKind("outer_join_clause");
	    // Create a CST Node
		if($query_partition_clauseGen != null) {
	        for(Iterator it = $query_partition_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("query_partition_clause");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($outer_join_typeGen != null) {
	        for(Iterator it = $outer_join_typeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_type_return r = (PLSQL3Parser.outer_join_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_type");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyJOINGen != null) {
	        for(Iterator it = $keyJOINGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyJOIN");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyNATURALGen != null) {
	        for(Iterator it = $keyNATURALGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNATURAL_return r = (PLSQL3Parser.keyNATURAL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNATURAL");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($outer_join_typeGen_1 != null) {
	        for(Iterator it = $outer_join_typeGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.outer_join_type_return r = (PLSQL3Parser.outer_join_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("outer_join_type");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyJOINGen_1 != null) {
	        for(Iterator it = $keyJOINGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyJOIN");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($query_partition_clauseGen_1 != null) {
	        for(Iterator it = $query_partition_clauseGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("query_partition_clause");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		outer_join_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyUSINGGen != null) {
	        for(Iterator it = $keyUSINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUSING_return r = (PLSQL3Parser.keyUSING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUSING");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			outer_join_clauseReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_specsGen != null) {
	        for(Iterator it = $column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_specs");
	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			outer_join_clauseReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$outer_join_clause.returnNode = outer_join_clauseReturnNode;
	}
	;

outer_join_sign returns [Node returnNode] 
:	LPARENGen=LPAREN PLUSGen=PLUS RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node outer_join_signReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		outer_join_signReturnNode.setKind("outer_join_sign");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			outer_join_signReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($PLUSGen != null) {
			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			PLUSGenLeaf.setKind("PLUS");
			PLUSGenLeaf.setValue($PLUSGen.text);
			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
			PLUSGenLeaf.setLine(PLUSGen.getLine());
			outer_join_signReturnNode.getChildren().add(PLUSGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			outer_join_signReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$outer_join_sign.returnNode = outer_join_signReturnNode;
	}
	;

outer_join_type returns [Node returnNode] 
:	( keyFULLGen+=keyFULL | keyLEFTGen+=keyLEFT | keyRIGHTGen+=keyRIGHT ) ( keyOUTERGen+=keyOUTER )? 
	{
		// Create return CST Node
		Node outer_join_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		outer_join_typeReturnNode.setKind("outer_join_type");
	    // Create a CST Node
		if($keyFULLGen != null) {
	        for(Iterator it = $keyFULLGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyFULL_return r = (PLSQL3Parser.keyFULL_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyFULL");
	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyLEFTGen != null) {
	        for(Iterator it = $keyLEFTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyLEFT_return r = (PLSQL3Parser.keyLEFT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyLEFT");
	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyRIGHTGen != null) {
	        for(Iterator it = $keyRIGHTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRIGHT_return r = (PLSQL3Parser.keyRIGHT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRIGHT");
	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyOUTERGen != null) {
	        for(Iterator it = $keyOUTERGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyOUTER_return r = (PLSQL3Parser.keyOUTER_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyOUTER");
	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$outer_join_type.returnNode = outer_join_typeReturnNode;
	}
	;
	
package_spec returns [Node returnNode] 
:	keyPACKAGEGen+=keyPACKAGE package_nameGen+=package_name ( TK_0='IS' | TK_1='AS' ) 
		( package_obj_specGen+=package_obj_spec )*
		TK_2='END' (package_nameGen_1+=package_name)? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node package_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_specReturnNode.setKind("package_spec");
	    // Create a CST Node
		if($keyPACKAGEGen != null) {
	        for(Iterator it = $keyPACKAGEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPACKAGE_return r = (PLSQL3Parser.keyPACKAGE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPACKAGE");
	            	package_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($package_nameGen != null) {
	        for(Iterator it = $package_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_name");
	            	package_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		package_specReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		package_specReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($package_obj_specGen != null) {
	        for(Iterator it = $package_obj_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_obj_spec_return r = (PLSQL3Parser.package_obj_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_obj_spec");
	            	package_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		package_specReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($package_nameGen_1 != null) {
	        for(Iterator it = $package_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_name");
	            	package_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			package_specReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$package_spec.returnNode = package_specReturnNode;
	}
	;
	
package_body returns [Node returnNode] 
:	keyPACKAGEGen+=keyPACKAGE ( keyBODYGen+=keyBODY ) package_nameGen+=package_name ( TK_0='IS' | TK_1='AS' )
		( package_obj_bodyGen+=package_obj_body )*
		( TK_2='BEGIN' seq_of_statementsGen+=seq_of_statements )?  
		TK_3='END' ( package_nameGen_1+=package_name )? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node package_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_bodyReturnNode.setKind("package_body");
	    // Create a CST Node
		if($keyPACKAGEGen != null) {
	        for(Iterator it = $keyPACKAGEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPACKAGE_return r = (PLSQL3Parser.keyPACKAGE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPACKAGE");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyBODYGen != null) {
	        for(Iterator it = $keyBODYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBODY_return r = (PLSQL3Parser.keyBODY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBODY");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($package_nameGen != null) {
	        for(Iterator it = $package_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_name");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		package_bodyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		package_bodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($package_obj_bodyGen != null) {
	        for(Iterator it = $package_obj_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_obj_body_return r = (PLSQL3Parser.package_obj_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_obj_body");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		package_bodyReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		package_bodyReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($package_nameGen_1 != null) {
	        for(Iterator it = $package_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("package_name");
	            	package_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			package_bodyReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$package_body.returnNode = package_bodyReturnNode;
	}
	;

package_name returns [Node returnNode] 
:	( schema_nameGen+=schema_name DOTGen=DOT )? identifierGen+=identifier 
	{
		// Create return CST Node
		Node package_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_nameReturnNode.setKind("package_name");
	    // Create a CST Node
		if($schema_nameGen != null) {
	        for(Iterator it = $schema_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_name");
	            	package_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			package_nameReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	package_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_name.returnNode = package_nameReturnNode;
	} 
	;

package_obj_spec returns [Node returnNode] 
:	variable_declarationGen+=variable_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($variable_declarationGen != null) {
	        for(Iterator it = $variable_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	subtype_declarationGen+=subtype_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($subtype_declarationGen != null) {
	        for(Iterator it = $subtype_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subtype_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	record_declarationGen+=record_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($record_declarationGen != null) {
	        for(Iterator it = $record_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	plsql_table_declarationGen+=plsql_table_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($plsql_table_declarationGen != null) {
	        for(Iterator it = $plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_table_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	varray_declarationGen+=varray_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($varray_declarationGen != null) {
	        for(Iterator it = $varray_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("varray_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	}
	|	cursor_declarationGen+=cursor_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($cursor_declarationGen != null) {
	        for(Iterator it = $cursor_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	cursor_specGen+=cursor_spec 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($cursor_specGen != null) {
	        for(Iterator it = $cursor_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_spec_return r = (PLSQL3Parser.cursor_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_spec");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	procedure_specGen+=procedure_spec 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($procedure_specGen != null) {
	        for(Iterator it = $procedure_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_spec_return r = (PLSQL3Parser.procedure_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_spec");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	function_specGen+=function_spec 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($function_specGen != null) {
	        for(Iterator it = $function_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_spec_return r = (PLSQL3Parser.function_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_spec");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	exception_declarationGen+=exception_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($exception_declarationGen != null) {
	        for(Iterator it = $exception_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	} 
	|	pragma_declarationGen+=pragma_declaration 
	{
		// Create return CST Node
		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_specReturnNode.setKind("package_obj_spec");
	    // Create a CST Node
		if($pragma_declarationGen != null) {
	        for(Iterator it = $pragma_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_declaration");
	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_spec.returnNode = package_obj_specReturnNode;
	}
	;
	
package_obj_body returns [Node returnNode] 
:	variable_declarationGen+=variable_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($variable_declarationGen != null) {
	        for(Iterator it = $variable_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	subtype_declarationGen+=subtype_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($subtype_declarationGen != null) {
	        for(Iterator it = $subtype_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subtype_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	cursor_declarationGen+=cursor_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($cursor_declarationGen != null) {
	        for(Iterator it = $cursor_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	exception_declarationGen+=exception_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($exception_declarationGen != null) {
	        for(Iterator it = $exception_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	record_declarationGen+=record_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($record_declarationGen != null) {
	        for(Iterator it = $record_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	plsql_table_declarationGen+=plsql_table_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($plsql_table_declarationGen != null) {
	        for(Iterator it = $plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_table_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	varray_declarationGen+=varray_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($varray_declarationGen != null) {
	        for(Iterator it = $varray_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("varray_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	}
	|	procedure_bodyGen+=procedure_body 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($procedure_bodyGen != null) {
	        for(Iterator it = $procedure_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_body_return r = (PLSQL3Parser.procedure_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_body");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	function_bodyGen+=function_body 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($function_bodyGen != null) {
	        for(Iterator it = $function_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_body_return r = (PLSQL3Parser.function_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_body");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	} 
	|	pragma_declarationGen+=pragma_declaration 
	{
		// Create return CST Node
		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		package_obj_bodyReturnNode.setKind("package_obj_body");
	    // Create a CST Node
		if($pragma_declarationGen != null) {
	        for(Iterator it = $pragma_declarationGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_declaration");
	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$package_obj_body.returnNode = package_obj_bodyReturnNode;
	}
	;
	
parameter_spec returns [Node returnNode] 
:	parameter_nameGen+=parameter_name ( TK_0='IN' )? ( type_specGen+=type_spec )? 
	{
		// Create return CST Node
		Node parameter_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		parameter_specReturnNode.setKind("parameter_spec");
	    // Create a CST Node
		if($parameter_nameGen != null) {
	        for(Iterator it = $parameter_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.parameter_name_return r = (PLSQL3Parser.parameter_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parameter_name");
	            	parameter_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		parameter_specReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	parameter_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$parameter_spec.returnNode = parameter_specReturnNode;
	}
	;
	
parameter_specs returns [Node returnNode] 
:	parameter_specGen+=parameter_spec ( COMMAGen_List+=COMMA parameter_specGen_1+=parameter_spec )* 
	{
		// Create return CST Node
		Node parameter_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		parameter_specsReturnNode.setKind("parameter_specs");
	    // Create a CST Node
		if($parameter_specGen != null) {
	        for(Iterator it = $parameter_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.parameter_spec_return r = (PLSQL3Parser.parameter_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parameter_spec");
	            	parameter_specsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			parameter_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($parameter_specGen_1 != null) {		
	    	PLSQL3Parser.parameter_spec_return r = (PLSQL3Parser.parameter_spec_return) $parameter_specGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("parameter_spec");
	    		parameter_specsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$parameter_specs.returnNode = parameter_specsReturnNode;
	}
	;

parameter_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node parameter_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		parameter_nameReturnNode.setKind("parameter_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	parameter_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$parameter_name.returnNode = parameter_nameReturnNode;
	}
	;

path_string returns [Node returnNode] 
:	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node path_stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		path_stringReturnNode.setKind("path_string");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			path_stringReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path_string.returnNode = path_stringReturnNode;
	}
	;

pattern returns [Node returnNode] 
:	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node patternReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		patternReturnNode.setKind("pattern");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			patternReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pattern.returnNode = patternReturnNode;
	}
	;

plsql_block returns [Node returnNode] 
:	( LLABELGen=LLABEL label_nameGen+=label_name RLABELGen=RLABEL )?
		( ( keyDECLAREGen+=keyDECLARE )? (declare_specGen+=declare_spec)+ )? 
		( TK_0='BEGIN' )
		seq_of_statementsGen+=seq_of_statements
		( TK_1='EXCEPTION' ( exception_handlerGen+=exception_handler )+ )? 
		( TK_2='END' ( label_nameGen_1+=label_name )? ) 
	{
		// Create return CST Node
		Node plsql_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_blockReturnNode.setKind("plsql_block");
	    // Create a CST Leaf
		if($LLABELGen != null) {
			Leaf LLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LLABELGenLeaf.setKind("LLABEL");
			LLABELGenLeaf.setValue($LLABELGen.text);
			LLABELGenLeaf.setPos(LLABELGen.getCharPositionInLine());
			LLABELGenLeaf.setLine(LLABELGen.getLine());
			plsql_blockReturnNode.getChildren().add(LLABELGenLeaf);
		}
	    // Create a CST Node
		if($label_nameGen != null) {
	        for(Iterator it = $label_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RLABELGen != null) {
			Leaf RLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RLABELGenLeaf.setKind("RLABEL");
			RLABELGenLeaf.setValue($RLABELGen.text);
			RLABELGenLeaf.setPos(RLABELGen.getCharPositionInLine());
			RLABELGenLeaf.setLine(RLABELGen.getLine());
			plsql_blockReturnNode.getChildren().add(RLABELGenLeaf);
		}
	    // Create a CST Node
		if($keyDECLAREGen != null) {
	        for(Iterator it = $keyDECLAREGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyDECLARE_return r = (PLSQL3Parser.keyDECLARE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyDECLARE");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($declare_specGen != null) {
	        for(Iterator it = $declare_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("declare_spec");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		plsql_blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		plsql_blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exception_handlerGen != null) {
	        for(Iterator it = $exception_handlerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_handler");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		plsql_blockReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($label_nameGen_1 != null) {
	        for(Iterator it = $label_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("label_name");
	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$plsql_block.returnNode = plsql_blockReturnNode;
	}
	;

plsql_condition returns [Node returnNode] 
@init { isSql = false; }
	:	expr_boolGen+=expr_bool 
	{
		// Create return CST Node
		Node plsql_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_conditionReturnNode.setKind("plsql_condition");
	    // Create a CST Node
		if($expr_boolGen != null) {
	        for(Iterator it = $expr_boolGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_bool");
	            	plsql_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$plsql_condition.returnNode = plsql_conditionReturnNode;
	}
	;

plsql_table_declaration returns [Node returnNode] 
:	table_type_decGen+=table_type_dec 
	{
		// Create return CST Node
		Node plsql_table_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_table_declarationReturnNode.setKind("plsql_table_declaration");
	    // Create a CST Node
		if($table_type_decGen != null) {
	        for(Iterator it = $table_type_decGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_type_dec_return r = (PLSQL3Parser.table_type_dec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_type_dec");
	            	plsql_table_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$plsql_table_declaration.returnNode = plsql_table_declarationReturnNode;
	}
//	|	table_var_dec
	;

plsql_table_name returns [Node returnNode] 
:	identifierGen+=identifier ( DOTGen_List+=DOT identifierGen_1+=identifier )* 
	{
		// Create return CST Node
		Node plsql_table_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_table_nameReturnNode.setKind("plsql_table_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	plsql_table_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			plsql_table_nameReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($identifierGen_1 != null) {		
	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) $identifierGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("identifier");
	    		plsql_table_nameReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$plsql_table_name.returnNode = plsql_table_nameReturnNode;
	}
	;


pragma_declaration returns [Node returnNode] 
:	keyPRAGMAGen+=keyPRAGMA 
		(	keyRESTRICT_REFERENCESGen+=keyRESTRICT_REFERENCES LPARENGen=LPAREN ( TK_0='DEFAULT' | function_nameGen+=function_name ) ( COMMAGen=COMMA pragma_paramGen+=pragma_param )+ RPARENGen=RPAREN 
		|	keyEXCEPTION_INITGen+=keyEXCEPTION_INIT LPARENGen_1=LPAREN exception_nameGen+=exception_name COMMAGen_1=COMMA literalGen+=literal RPARENGen_1=RPAREN
		|	keyAUTONOMOUS_TRANSACTIONGen+=keyAUTONOMOUS_TRANSACTION
		|	keySERIALLY_REUSABLEGen+=keySERIALLY_REUSABLE
		|	keyBUILTINGen+=keyBUILTIN LPARENGen_2=LPAREN pragma_paramsGen+=pragma_params RPARENGen_2=RPAREN
		|	keyFIPSFLAGGen+=keyFIPSFLAG LPARENGen_3=LPAREN pragma_paramsGen_1+=pragma_params RPARENGen_3=RPAREN
		|	keyINTERFACEGen+=keyINTERFACE LPARENGen_4=LPAREN pragma_paramsGen_2+=pragma_params RPARENGen_4=RPAREN
		|	keyNEW_NAMESGen+=keyNEW_NAMES LPARENGen_5=LPAREN pragma_paramsGen_3+=pragma_params RPARENGen_5=RPAREN
		|	keyTIMESTAMPGen+=keyTIMESTAMP LPARENGen_6=LPAREN pragma_paramsGen_4+=pragma_params RPARENGen_6=RPAREN
		)
		SEMIGen=SEMI 
	{
		// Create return CST Node
		Node pragma_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pragma_declarationReturnNode.setKind("pragma_declaration");
	    // Create a CST Node
		if($keyPRAGMAGen != null) {
	        for(Iterator it = $keyPRAGMAGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPRAGMA_return r = (PLSQL3Parser.keyPRAGMA_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPRAGMA");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyRESTRICT_REFERENCESGen != null) {
	        for(Iterator it = $keyRESTRICT_REFERENCESGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRESTRICT_REFERENCES_return r = (PLSQL3Parser.keyRESTRICT_REFERENCES_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRESTRICT_REFERENCES");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		pragma_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($function_nameGen != null) {
	        for(Iterator it = $function_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_name");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal pragma_paramGen aggregation
		if($pragma_paramGen != null) {
	    for(int pos = 0; pos < $pragma_paramGen.size(); pos++ )  { 
	    // Create a CST Leaf
		if($COMMAGen != null) {
			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGenLeaf.setKind("COMMA");
			COMMAGenLeaf.setValue($COMMAGen.text);
			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
			COMMAGenLeaf.setLine(COMMAGen.getLine());
			pragma_declarationReturnNode.getChildren().add(COMMAGenLeaf);
		}
		// No Terminal extractor
	    if($pragma_paramGen != null) {		
	    	PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) $pragma_paramGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pragma_param");
	    		pragma_declarationReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($keyEXCEPTION_INITGen != null) {
	        for(Iterator it = $keyEXCEPTION_INITGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyEXCEPTION_INIT_return r = (PLSQL3Parser.keyEXCEPTION_INIT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyEXCEPTION_INIT");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_1 != null) {
			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_1Leaf.setKind("LPAREN");
			LPARENGen_1Leaf.setValue($LPARENGen_1.text);
			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($exception_nameGen != null) {
	        for(Iterator it = $exception_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_name");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COMMAGen_1 != null) {
			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_1Leaf.setKind("COMMA");
			COMMAGen_1Leaf.setValue($COMMAGen_1.text);
			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
			pragma_declarationReturnNode.getChildren().add(COMMAGen_1Leaf);
		}
	    // Create a CST Node
		if($literalGen != null) {
	        for(Iterator it = $literalGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_1 != null) {
			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_1Leaf.setKind("RPAREN");
			RPARENGen_1Leaf.setValue($RPARENGen_1.text);
			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_1Leaf);
		}
	    // Create a CST Node
		if($keyAUTONOMOUS_TRANSACTIONGen != null) {
	        for(Iterator it = $keyAUTONOMOUS_TRANSACTIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return r = (PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyAUTONOMOUS_TRANSACTION");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keySERIALLY_REUSABLEGen != null) {
	        for(Iterator it = $keySERIALLY_REUSABLEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySERIALLY_REUSABLE_return r = (PLSQL3Parser.keySERIALLY_REUSABLE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySERIALLY_REUSABLE");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyBUILTINGen != null) {
	        for(Iterator it = $keyBUILTINGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBUILTIN_return r = (PLSQL3Parser.keyBUILTIN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBUILTIN");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_2 != null) {
			Leaf LPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_2Leaf.setKind("LPAREN");
			LPARENGen_2Leaf.setValue($LPARENGen_2.text);
			LPARENGen_2Leaf.setPos(LPARENGen_2.getCharPositionInLine());
			LPARENGen_2Leaf.setLine(LPARENGen_2.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_2Leaf);
		}
	    // Create a CST Node
		if($pragma_paramsGen != null) {
	        for(Iterator it = $pragma_paramsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_params");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_2 != null) {
			Leaf RPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_2Leaf.setKind("RPAREN");
			RPARENGen_2Leaf.setValue($RPARENGen_2.text);
			RPARENGen_2Leaf.setPos(RPARENGen_2.getCharPositionInLine());
			RPARENGen_2Leaf.setLine(RPARENGen_2.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_2Leaf);
		}
	    // Create a CST Node
		if($keyFIPSFLAGGen != null) {
	        for(Iterator it = $keyFIPSFLAGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyFIPSFLAG_return r = (PLSQL3Parser.keyFIPSFLAG_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyFIPSFLAG");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_3 != null) {
			Leaf LPARENGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_3Leaf.setKind("LPAREN");
			LPARENGen_3Leaf.setValue($LPARENGen_3.text);
			LPARENGen_3Leaf.setPos(LPARENGen_3.getCharPositionInLine());
			LPARENGen_3Leaf.setLine(LPARENGen_3.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_3Leaf);
		}
	    // Create a CST Node
		if($pragma_paramsGen_1 != null) {
	        for(Iterator it = $pragma_paramsGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_params");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_3 != null) {
			Leaf RPARENGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_3Leaf.setKind("RPAREN");
			RPARENGen_3Leaf.setValue($RPARENGen_3.text);
			RPARENGen_3Leaf.setPos(RPARENGen_3.getCharPositionInLine());
			RPARENGen_3Leaf.setLine(RPARENGen_3.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_3Leaf);
		}
	    // Create a CST Node
		if($keyINTERFACEGen != null) {
	        for(Iterator it = $keyINTERFACEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINTERFACE_return r = (PLSQL3Parser.keyINTERFACE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINTERFACE");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_4 != null) {
			Leaf LPARENGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_4Leaf.setKind("LPAREN");
			LPARENGen_4Leaf.setValue($LPARENGen_4.text);
			LPARENGen_4Leaf.setPos(LPARENGen_4.getCharPositionInLine());
			LPARENGen_4Leaf.setLine(LPARENGen_4.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_4Leaf);
		}
	    // Create a CST Node
		if($pragma_paramsGen_2 != null) {
	        for(Iterator it = $pragma_paramsGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_params");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_4 != null) {
			Leaf RPARENGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_4Leaf.setKind("RPAREN");
			RPARENGen_4Leaf.setValue($RPARENGen_4.text);
			RPARENGen_4Leaf.setPos(RPARENGen_4.getCharPositionInLine());
			RPARENGen_4Leaf.setLine(RPARENGen_4.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_4Leaf);
		}
	    // Create a CST Node
		if($keyNEW_NAMESGen != null) {
	        for(Iterator it = $keyNEW_NAMESGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNEW_NAMES_return r = (PLSQL3Parser.keyNEW_NAMES_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNEW_NAMES");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_5 != null) {
			Leaf LPARENGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_5Leaf.setKind("LPAREN");
			LPARENGen_5Leaf.setValue($LPARENGen_5.text);
			LPARENGen_5Leaf.setPos(LPARENGen_5.getCharPositionInLine());
			LPARENGen_5Leaf.setLine(LPARENGen_5.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_5Leaf);
		}
	    // Create a CST Node
		if($pragma_paramsGen_3 != null) {
	        for(Iterator it = $pragma_paramsGen_3.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_params");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_5 != null) {
			Leaf RPARENGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_5Leaf.setKind("RPAREN");
			RPARENGen_5Leaf.setValue($RPARENGen_5.text);
			RPARENGen_5Leaf.setPos(RPARENGen_5.getCharPositionInLine());
			RPARENGen_5Leaf.setLine(RPARENGen_5.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_5Leaf);
		}
	    // Create a CST Node
		if($keyTIMESTAMPGen != null) {
	        for(Iterator it = $keyTIMESTAMPGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTIMESTAMP_return r = (PLSQL3Parser.keyTIMESTAMP_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTIMESTAMP");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen_6 != null) {
			Leaf LPARENGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_6Leaf.setKind("LPAREN");
			LPARENGen_6Leaf.setValue($LPARENGen_6.text);
			LPARENGen_6Leaf.setPos(LPARENGen_6.getCharPositionInLine());
			LPARENGen_6Leaf.setLine(LPARENGen_6.getLine());
			pragma_declarationReturnNode.getChildren().add(LPARENGen_6Leaf);
		}
	    // Create a CST Node
		if($pragma_paramsGen_4 != null) {
	        for(Iterator it = $pragma_paramsGen_4.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_params");
	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen_6 != null) {
			Leaf RPARENGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_6Leaf.setKind("RPAREN");
			RPARENGen_6Leaf.setValue($RPARENGen_6.text);
			RPARENGen_6Leaf.setPos(RPARENGen_6.getCharPositionInLine());
			RPARENGen_6Leaf.setLine(RPARENGen_6.getLine());
			pragma_declarationReturnNode.getChildren().add(RPARENGen_6Leaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			pragma_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pragma_declaration.returnNode = pragma_declarationReturnNode;
	}
	;

pragma_param returns [Node returnNode] 
:	( PLUSGen=PLUS | MINUSGen=MINUS )? NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pragma_paramReturnNode.setKind("pragma_param");
	    // Create a CST Leaf
		if($PLUSGen != null) {
			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			PLUSGenLeaf.setKind("PLUS");
			PLUSGenLeaf.setValue($PLUSGen.text);
			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
			PLUSGenLeaf.setLine(PLUSGen.getLine());
			pragma_paramReturnNode.getChildren().add(PLUSGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MINUSGenLeaf.setKind("MINUS");
			MINUSGenLeaf.setValue($MINUSGen.text);
			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
			MINUSGenLeaf.setLine(MINUSGen.getLine());
			pragma_paramReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			pragma_paramReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pragma_param.returnNode = pragma_paramReturnNode;
	}
	|	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pragma_paramReturnNode.setKind("pragma_param");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			pragma_paramReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pragma_param.returnNode = pragma_paramReturnNode;
	}
	|	identifierGen+=identifier 
	{
		// Create return CST Node
		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pragma_paramReturnNode.setKind("pragma_param");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	pragma_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$pragma_param.returnNode = pragma_paramReturnNode;
	}
	;	

pragma_params returns [Node returnNode] 
:	pragma_paramGen+=pragma_param ( COMMAGen_List+=COMMA pragma_paramGen_1+=pragma_param )* 
	{
		// Create return CST Node
		Node pragma_paramsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pragma_paramsReturnNode.setKind("pragma_params");
	    // Create a CST Node
		if($pragma_paramGen != null) {
	        for(Iterator it = $pragma_paramGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pragma_param");
	            	pragma_paramsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			pragma_paramsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($pragma_paramGen_1 != null) {		
	    	PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) $pragma_paramGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pragma_param");
	    		pragma_paramsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$pragma_params.returnNode = pragma_paramsReturnNode;
	}
	;

proc_fun_start returns [Node returnNode] 
:	TK_0='CREATE' ( TK_1='OR' keyREPLACEGen+=keyREPLACE )? 
	{
		// Create return CST Node
		Node proc_fun_startReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		proc_fun_startReturnNode.setKind("proc_fun_start");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		proc_fun_startReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		proc_fun_startReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($keyREPLACEGen != null) {
	        for(Iterator it = $keyREPLACEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREPLACE_return r = (PLSQL3Parser.keyREPLACE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREPLACE");
	            	proc_fun_startReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$proc_fun_start.returnNode = proc_fun_startReturnNode;
	}
	;

procedure_body returns [Node returnNode] 
:	( proc_fun_startGen+=proc_fun_start )? TK_0='PROCEDURE' procedure_nameGen+=procedure_name 
		( LPARENGen=LPAREN argumentGen+=argument ( COMMAGen_List+=COMMA argumentGen_1+=argument )* RPARENGen=RPAREN )? 
		( TK_1='IS' | TK_2='AS' )
		//( keyPRAGMA keyAUTONOMOUS_TRANSACTION )?
		( declare_specGen+=declare_spec )* 
		( TK_3='BEGIN' )
		( seq_of_statementsGen+=seq_of_statements )
		( TK_4='EXCEPTION' ( exception_handlerGen+=exception_handler )* )?
		TK_5='END' ( procedure_nameGen_1+=procedure_name )? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node procedure_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		procedure_bodyReturnNode.setKind("procedure_body");
	    // Create a CST Node
		if($proc_fun_startGen != null) {
	        for(Iterator it = $proc_fun_startGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.proc_fun_start_return r = (PLSQL3Parser.proc_fun_start_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("proc_fun_start");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($procedure_nameGen != null) {
	        for(Iterator it = $procedure_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_name");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			procedure_bodyReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($argumentGen != null) {
	        for(Iterator it = $argumentGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("argument");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			procedure_bodyReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($argumentGen_1 != null) {		
	    	PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) $argumentGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("argument");
	    		procedure_bodyReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			procedure_bodyReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		procedure_bodyReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		procedure_bodyReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($declare_specGen != null) {
	        for(Iterator it = $declare_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("declare_spec");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		procedure_bodyReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($seq_of_statementsGen != null) {
	        for(Iterator it = $seq_of_statementsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("seq_of_statements");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		procedure_bodyReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($exception_handlerGen != null) {
	        for(Iterator it = $exception_handlerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_handler");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		procedure_bodyReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($procedure_nameGen_1 != null) {
	        for(Iterator it = $procedure_nameGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_name");
	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			procedure_bodyReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$procedure_body.returnNode = procedure_bodyReturnNode;
	}
	;

procedure_declaration returns [Node returnNode] 
:	procedure_bodyGen+=procedure_body 
	{
		// Create return CST Node
		Node procedure_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		procedure_declarationReturnNode.setKind("procedure_declaration");
	    // Create a CST Node
		if($procedure_bodyGen != null) {
	        for(Iterator it = $procedure_bodyGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_body_return r = (PLSQL3Parser.procedure_body_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_body");
	            	procedure_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$procedure_declaration.returnNode = procedure_declarationReturnNode;
	}
	;

procedure_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node procedure_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		procedure_nameReturnNode.setKind("procedure_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	procedure_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$procedure_name.returnNode = procedure_nameReturnNode;
	} | QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node procedure_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		procedure_nameReturnNode.setKind("procedure_name");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			procedure_nameReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$procedure_name.returnNode = procedure_nameReturnNode;
	} //( schema_name DOT )? identifier
	;

procedure_spec returns [Node returnNode] 
: 
	TK_0='PROCEDURE' procedure_nameGen+=procedure_name 
	( LPARENGen=LPAREN argumentsGen+=arguments RPARENGen=RPAREN )? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node procedure_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		procedure_specReturnNode.setKind("procedure_spec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		procedure_specReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($procedure_nameGen != null) {
	        for(Iterator it = $procedure_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("procedure_name");
	            	procedure_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			procedure_specReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($argumentsGen != null) {
	        for(Iterator it = $argumentsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arguments");
	            	procedure_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			procedure_specReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			procedure_specReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$procedure_spec.returnNode = procedure_specReturnNode;
	}
	;

query_partition_clause returns [Node returnNode] 
:	keyPARTITIONGen+=keyPARTITION TK_0='BY' expression_listGen+=expression_list 
	{
		// Create return CST Node
		Node query_partition_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		query_partition_clauseReturnNode.setKind("query_partition_clause");
	    // Create a CST Node
		if($keyPARTITIONGen != null) {
	        for(Iterator it = $keyPARTITIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyPARTITION_return r = (PLSQL3Parser.keyPARTITION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyPARTITION");
	            	query_partition_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		query_partition_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expression_listGen != null) {
	        for(Iterator it = $expression_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expression_list");
	            	query_partition_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$query_partition_clause.returnNode = query_partition_clauseReturnNode;
	}
	;

quoted_string returns [Node returnNode] 
:	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node quoted_stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		quoted_stringReturnNode.setKind("quoted_string");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			quoted_stringReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$quoted_string.returnNode = quoted_stringReturnNode;
	}
	;

raise_statement returns [Node returnNode] 
:	keyRAISEGen+=keyRAISE ( exception_nameGen+=exception_name )? 
	{
		// Create return CST Node
		Node raise_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		raise_statementReturnNode.setKind("raise_statement");
	    // Create a CST Node
		if($keyRAISEGen != null) {
	        for(Iterator it = $keyRAISEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRAISE_return r = (PLSQL3Parser.keyRAISE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRAISE");
	            	raise_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($exception_nameGen != null) {
	        for(Iterator it = $exception_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exception_name");
	            	raise_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$raise_statement.returnNode = raise_statementReturnNode;
	}
	;

record_declaration returns [Node returnNode] 
:	record_type_decGen+=record_type_dec 
	{
		// Create return CST Node
		Node record_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		record_declarationReturnNode.setKind("record_declaration");
	    // Create a CST Node
		if($record_type_decGen != null) {
	        for(Iterator it = $record_type_decGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.record_type_dec_return r = (PLSQL3Parser.record_type_dec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("record_type_dec");
	            	record_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$record_declaration.returnNode = record_declarationReturnNode;
	} 
//	|	record_var_dec
	;

record_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node record_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		record_nameReturnNode.setKind("record_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	record_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$record_name.returnNode = record_nameReturnNode;
	}
	;

record_type_dec returns [Node returnNode] 
:	keyTYPEGen+=keyTYPE type_nameGen+=type_name TK_0='IS' keyRECORDGen+=keyRECORD 
		LPARENGen=LPAREN field_specsGen+=field_specs RPARENGen=RPAREN SEMIGen=SEMI 
	{
		// Create return CST Node
		Node record_type_decReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		record_type_decReturnNode.setKind("record_type_dec");
	    // Create a CST Node
		if($keyTYPEGen != null) {
	        for(Iterator it = $keyTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTYPE");
	            	record_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_nameGen != null) {
	        for(Iterator it = $type_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_name");
	            	record_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		record_type_decReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyRECORDGen != null) {
	        for(Iterator it = $keyRECORDGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRECORD_return r = (PLSQL3Parser.keyRECORD_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRECORD");
	            	record_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			record_type_decReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($field_specsGen != null) {
	        for(Iterator it = $field_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.field_specs_return r = (PLSQL3Parser.field_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("field_specs");
	            	record_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			record_type_decReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			record_type_decReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$record_type_dec.returnNode = record_type_decReturnNode;
	}
	;

reference_model returns [Node returnNode] 
:	keyREFERENCEGen+=keyREFERENCE reference_model_nameGen+=reference_model_name TK_0='ON' LPARENGen=LPAREN subqueryGen+=subquery RPARENGen=RPAREN
		model_column_clausesGen+=model_column_clauses ( cell_reference_optionsGen+=cell_reference_options ) 
	{
		// Create return CST Node
		Node reference_modelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		reference_modelReturnNode.setKind("reference_model");
	    // Create a CST Node
		if($keyREFERENCEGen != null) {
	        for(Iterator it = $keyREFERENCEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREFERENCE_return r = (PLSQL3Parser.keyREFERENCE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREFERENCE");
	            	reference_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($reference_model_nameGen != null) {
	        for(Iterator it = $reference_model_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.reference_model_name_return r = (PLSQL3Parser.reference_model_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("reference_model_name");
	            	reference_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		reference_modelReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			reference_modelReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	reference_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			reference_modelReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($model_column_clausesGen != null) {
	        for(Iterator it = $model_column_clausesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_column_clauses_return r = (PLSQL3Parser.model_column_clauses_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_column_clauses");
	            	reference_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cell_reference_optionsGen != null) {
	        for(Iterator it = $cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cell_reference_options");
	            	reference_modelReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$reference_model.returnNode = reference_modelReturnNode;
	}
	;
reference_model_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node reference_model_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		reference_model_nameReturnNode.setKind("reference_model_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	reference_model_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$reference_model_name.returnNode = reference_model_nameReturnNode;
	}
	;

return_rows_clause returns [Node returnNode] 
:	keyRETURNGen+=keyRETURN ( keyUPDATEDGen+=keyUPDATED | TK_0='ALL' ) TK_1='ROWS' 
	{
		// Create return CST Node
		Node return_rows_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		return_rows_clauseReturnNode.setKind("return_rows_clause");
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	return_rows_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyUPDATEDGen != null) {
	        for(Iterator it = $keyUPDATEDGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyUPDATED_return r = (PLSQL3Parser.keyUPDATED_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyUPDATED");
	            	return_rows_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		return_rows_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		return_rows_clauseReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$return_rows_clause.returnNode = return_rows_clauseReturnNode;
	}
	;

return_type returns [Node returnNode] 
:	type_specGen+=type_spec 
	{
		// Create return CST Node
		Node return_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		return_typeReturnNode.setKind("return_type");
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	return_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$return_type.returnNode = return_typeReturnNode;
	}
	;

returning_clause returns [Node returnNode] 
:	( keyRETURNGen+=keyRETURN | keyRETURNINGGen+=keyRETURNING ) select_listGen+=select_list ( keyBULKGen+=keyBULK keyCOLLECTGen+=keyCOLLECT )? TK_0='INTO' lvaluesGen+=lvalues 
	{
		// Create return CST Node
		Node returning_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		returning_clauseReturnNode.setKind("returning_clause");
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyRETURNINGGen != null) {
	        for(Iterator it = $keyRETURNINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURNING_return r = (PLSQL3Parser.keyRETURNING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURNING");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($select_listGen != null) {
	        for(Iterator it = $select_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_list_return r = (PLSQL3Parser.select_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_list");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyBULKGen != null) {
	        for(Iterator it = $keyBULKGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBULK_return r = (PLSQL3Parser.keyBULK_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBULK");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyCOLLECTGen != null) {
	        for(Iterator it = $keyCOLLECTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCOLLECT_return r = (PLSQL3Parser.keyCOLLECT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCOLLECT");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		returning_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($lvaluesGen != null) {
	        for(Iterator it = $lvaluesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lvalues_return r = (PLSQL3Parser.lvalues_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lvalues");
	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$returning_clause.returnNode = returning_clauseReturnNode;
	}
	;

return_statement returns [Node returnNode] 
:	keyRETURNGen+=keyRETURN ( plsql_expressionGen+=plsql_expression )? 
	{
		// Create return CST Node
		Node return_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		return_statementReturnNode.setKind("return_statement");
	    // Create a CST Node
		if($keyRETURNGen != null) {
	        for(Iterator it = $keyRETURNGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRETURN");
	            	return_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	return_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$return_statement.returnNode = return_statementReturnNode;
	}
	;

rollback_statement returns [Node returnNode] 
:	keyROLLBACKGen+=keyROLLBACK ( keyWORKGen+=keyWORK )?
		( TK_0='TO' ( TK_1='SAVEPOINT' )? savepoint_nameGen+=savepoint_name )?
		( TK_2='COMMENT' quoted_stringGen+=quoted_string )? 
	{
		// Create return CST Node
		Node rollback_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rollback_statementReturnNode.setKind("rollback_statement");
	    // Create a CST Node
		if($keyROLLBACKGen != null) {
	        for(Iterator it = $keyROLLBACKGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyROLLBACK_return r = (PLSQL3Parser.keyROLLBACK_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyROLLBACK");
	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyWORKGen != null) {
	        for(Iterator it = $keyWORKGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyWORK_return r = (PLSQL3Parser.keyWORK_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyWORK");
	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rollback_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rollback_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($savepoint_nameGen != null) {
	        for(Iterator it = $savepoint_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.savepoint_name_return r = (PLSQL3Parser.savepoint_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("savepoint_name");
	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		rollback_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($quoted_stringGen != null) {
	        for(Iterator it = $quoted_stringGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.quoted_string_return r = (PLSQL3Parser.quoted_string_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("quoted_string");
	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rollback_statement.returnNode = rollback_statementReturnNode;
	}
	;

savepoint_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node savepoint_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		savepoint_nameReturnNode.setKind("savepoint_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	savepoint_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$savepoint_name.returnNode = savepoint_nameReturnNode;
	}
	;

savepoint_statement returns [Node returnNode] 
:	TK_0='SAVEPOINT' savepoint_nameGen+=savepoint_name 
	{
		// Create return CST Node
		Node savepoint_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		savepoint_statementReturnNode.setKind("savepoint_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		savepoint_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($savepoint_nameGen != null) {
	        for(Iterator it = $savepoint_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.savepoint_name_return r = (PLSQL3Parser.savepoint_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("savepoint_name");
	            	savepoint_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$savepoint_statement.returnNode = savepoint_statementReturnNode;
	}
	;

searched_case_statement returns [Node returnNode] 
:	( TK_0='WHEN' plsql_expressionGen+=plsql_expression TK_1='THEN' seq_of_statementsGen+=seq_of_statements )+ 
	{
		// Create return CST Node
		Node searched_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		searched_case_statementReturnNode.setKind("searched_case_statement");
	
		// Create a special CST Node for terminal plsql_expressionGen aggregation
		if($plsql_expressionGen != null) {
	    for(int pos = 0; pos < $plsql_expressionGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		searched_case_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($plsql_expressionGen != null) {		
	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) $plsql_expressionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("plsql_expression");
	    		searched_case_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		searched_case_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($seq_of_statementsGen != null) {		
	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) $seq_of_statementsGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("seq_of_statements");
	    		searched_case_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$searched_case_statement.returnNode = searched_case_statementReturnNode;
	}
	;

searched_case_expression returns [Node returnNode] 
:	( TK_0='WHEN' nested_conditionGen+=nested_condition TK_1='THEN' nested_expressionGen+=nested_expression )+ 
	{
		// Create return CST Node
		Node searched_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		searched_case_expressionReturnNode.setKind("searched_case_expression");
	
		// Create a special CST Node for terminal nested_conditionGen aggregation
		if($nested_conditionGen != null) {
	    for(int pos = 0; pos < $nested_conditionGen.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		searched_case_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($nested_conditionGen != null) {		
	    	PLSQL3Parser.nested_condition_return r = (PLSQL3Parser.nested_condition_return) $nested_conditionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_condition");
	    		searched_case_expressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		searched_case_expressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($nested_expressionGen != null) {		
	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) $nested_expressionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_expression");
	    		searched_case_expressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$searched_case_expression.returnNode = searched_case_expressionReturnNode;
	}
	;

select_command returns [Node returnNode] 
:	select_statementGen+=select_statement 
	{
		// Create return CST Node
		Node select_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		select_commandReturnNode.setKind("select_command");
	    // Create a CST Node
		if($select_statementGen != null) {
	        for(Iterator it = $select_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_statement");
	            	select_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$select_command.returnNode = select_commandReturnNode;
	} // ( 'UNION' select_statement )*
	;

select_expression returns [Node returnNode] 
:	
		TK_0='SELECT' ( TK_1='DISTINCT' | TK_2='UNIQUE' | TK_3='ALL' )? select_listGen+=select_list
		( keyBULKGen+=keyBULK keyCOLLECTGen+=keyCOLLECT )?
		( TK_4='INTO' lvaluesGen+=lvalues )?
		TK_5='FROM' ( table_reference_listGen+=table_reference_list | join_clauseGen+=join_clause | LPARENGen=LPAREN join_clauseGen_1+=join_clause RPARENGen=RPAREN )
		( where_clauseGen+=where_clause )? ( hierarchical_query_clauseGen+=hierarchical_query_clause )? ( group_by_clauseGen+=group_by_clause )?
		( TK_6='HAVING' sql_conditionGen+=sql_condition )? ( model_clauseGen+=model_clause )?
		(	(	TK_7='UNION' ( TK_8='ALL' )?
			|	TK_9='INTERSECT'
			|	TK_10='MINUS'
			)
			(	select_expressionGen+=select_expression //LPAREN subquery RPAREN
			|	subqueryGen+=subquery
			)
		)?
		( order_by_clauseGen+=order_by_clause )? 
	{
		// Create return CST Node
		Node select_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		select_expressionReturnNode.setKind("select_expression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($select_listGen != null) {
	        for(Iterator it = $select_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_list_return r = (PLSQL3Parser.select_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_list");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyBULKGen != null) {
	        for(Iterator it = $keyBULKGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyBULK_return r = (PLSQL3Parser.keyBULK_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyBULK");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyCOLLECTGen != null) {
	        for(Iterator it = $keyCOLLECTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCOLLECT_return r = (PLSQL3Parser.keyCOLLECT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCOLLECT");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($lvaluesGen != null) {
	        for(Iterator it = $lvaluesGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lvalues_return r = (PLSQL3Parser.lvalues_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lvalues");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($table_reference_listGen != null) {
	        for(Iterator it = $table_reference_listGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_reference_list");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($join_clauseGen != null) {
	        for(Iterator it = $join_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.join_clause_return r = (PLSQL3Parser.join_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("join_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			select_expressionReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($join_clauseGen_1 != null) {
	        for(Iterator it = $join_clauseGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.join_clause_return r = (PLSQL3Parser.join_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("join_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			select_expressionReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($where_clauseGen != null) {
	        for(Iterator it = $where_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.where_clause_return r = (PLSQL3Parser.where_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("where_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($hierarchical_query_clauseGen != null) {
	        for(Iterator it = $hierarchical_query_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.hierarchical_query_clause_return r = (PLSQL3Parser.hierarchical_query_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("hierarchical_query_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($group_by_clauseGen != null) {
	        for(Iterator it = $group_by_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.group_by_clause_return r = (PLSQL3Parser.group_by_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group_by_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($model_clauseGen != null) {
	        for(Iterator it = $model_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.model_clause_return r = (PLSQL3Parser.model_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("model_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_8Leaf.setKind("TOKEN");
	 		TK_8Leaf.setValue($TK_8.text);
			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
			TK_8Leaf.setLine(TK_8.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_9Leaf.setKind("TOKEN");
	 		TK_9Leaf.setValue($TK_9.text);
			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
			TK_9Leaf.setLine(TK_9.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_10Leaf.setKind("TOKEN");
	 		TK_10Leaf.setValue($TK_10.text);
			TK_10Leaf.setPos(TK_10.getCharPositionInLine());
			TK_10Leaf.setLine(TK_10.getLine());
	 		select_expressionReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Node
		if($select_expressionGen != null) {
	        for(Iterator it = $select_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_expression");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($order_by_clauseGen != null) {
	        for(Iterator it = $order_by_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.order_by_clause_return r = (PLSQL3Parser.order_by_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("order_by_clause");
	            	select_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$select_expression.returnNode = select_expressionReturnNode;
	}
	;

select_list returns [Node returnNode] 
:	ASTERISKGen=ASTERISK 
	{
		// Create return CST Node
		Node select_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		select_listReturnNode.setKind("select_list");
	    // Create a CST Leaf
		if($ASTERISKGen != null) {
			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASTERISKGenLeaf.setKind("ASTERISK");
			ASTERISKGenLeaf.setValue($ASTERISKGen.text);
			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
			select_listReturnNode.getChildren().add(ASTERISKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$select_list.returnNode = select_listReturnNode;
	}
	|	displayed_columnGen+=displayed_column ( COMMAGen_List+=COMMA displayed_columnGen_1+=displayed_column )* 
	{
		// Create return CST Node
		Node select_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		select_listReturnNode.setKind("select_list");
	    // Create a CST Node
		if($displayed_columnGen != null) {
	        for(Iterator it = $displayed_columnGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.displayed_column_return r = (PLSQL3Parser.displayed_column_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("displayed_column");
	            	select_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			select_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($displayed_columnGen_1 != null) {		
	    	PLSQL3Parser.displayed_column_return r = (PLSQL3Parser.displayed_column_return) $displayed_columnGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("displayed_column");
	    		select_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$select_list.returnNode = select_listReturnNode;
	}
	;	

select_statement returns [Node returnNode] 
:	select_expressionGen+=select_expression 
	{
		// Create return CST Node
		Node select_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		select_statementReturnNode.setKind("select_statement");
	    // Create a CST Node
		if($select_expressionGen != null) {
	        for(Iterator it = $select_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_expression");
	            	select_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$select_statement.returnNode = select_statementReturnNode;
	} 
//	|	LPAREN select_command RPAREN )
	;

selected_table returns [Node returnNode] 
:	( table_specGen+=table_spec | ( TK_0='TABLE' | keyTHEGen+=keyTHE )? subqueryGen+=subquery ) ( aliasGen+=alias )? 
	{
		// Create return CST Node
		Node selected_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		selected_tableReturnNode.setKind("selected_table");
	    // Create a CST Node
		if($table_specGen != null) {
	        for(Iterator it = $table_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_spec_return r = (PLSQL3Parser.table_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_spec");
	            	selected_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		selected_tableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyTHEGen != null) {
	        for(Iterator it = $keyTHEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTHE_return r = (PLSQL3Parser.keyTHE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTHE");
	            	selected_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	selected_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($aliasGen != null) {
	        for(Iterator it = $aliasGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.alias_return r = (PLSQL3Parser.alias_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("alias");
	            	selected_tableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$selected_table.returnNode = selected_tableReturnNode;
	}
	;

seq_of_statements returns [Node returnNode] 
:	statementGen+=statement SEMIGen=SEMI ( statementGen_1+=statement SEMIGen_1_List+=SEMI )* 
	{
		// Create return CST Node
		Node seq_of_statementsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		seq_of_statementsReturnNode.setKind("seq_of_statements");
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.statement_return r = (PLSQL3Parser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	seq_of_statementsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			seq_of_statementsReturnNode.getChildren().add(SEMIGenLeaf);
		}
	
		// Create a special CST Node for terminal statementGen_1 aggregation
		if($statementGen_1 != null) {
	    for(int pos = 0; pos < $statementGen_1.size(); pos++ )  { 
		// No Terminal extractor
	    if($statementGen_1 != null) {		
	    	PLSQL3Parser.statement_return r = (PLSQL3Parser.statement_return) $statementGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("statement");
	    		seq_of_statementsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// Terminal extractor
	    if($SEMIGen_1_List != null) {
		    Token t = (Token) $SEMIGen_1_List.get(pos); 
		    Leaf SEMIGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGen_1_ListLeaf.setKind("SEMI");
			SEMIGen_1_ListLeaf.setValue(t.getText());
			SEMIGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			SEMIGen_1_ListLeaf.setLine(t.getLine());
			seq_of_statementsReturnNode.getChildren().add(SEMIGen_1_ListLeaf);
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$seq_of_statements.returnNode = seq_of_statementsReturnNode;
	}
	;

set_transaction_command returns [Node returnNode] 
:	TK_0='SET' keyTRANSACTIONGen+=keyTRANSACTION keyREADGen+=keyREAD keyONLYGen+=keyONLY 
	{
		// Create return CST Node
		Node set_transaction_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		set_transaction_commandReturnNode.setKind("set_transaction_command");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		set_transaction_commandReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyTRANSACTIONGen != null) {
	        for(Iterator it = $keyTRANSACTIONGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTRANSACTION_return r = (PLSQL3Parser.keyTRANSACTION_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTRANSACTION");
	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyREADGen != null) {
	        for(Iterator it = $keyREADGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyREAD_return r = (PLSQL3Parser.keyREAD_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyREAD");
	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyONLYGen != null) {
	        for(Iterator it = $keyONLYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyONLY_return r = (PLSQL3Parser.keyONLY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyONLY");
	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$set_transaction_command.returnNode = set_transaction_commandReturnNode;
	}
	;
	
schema_name returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node schema_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schema_nameReturnNode.setKind("schema_name");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	schema_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$schema_name.returnNode = schema_nameReturnNode;
	}
	;
	
simple_expression returns [Node returnNode] 
:	boolean_literalGen+=boolean_literal 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a CST Node
		if($boolean_literalGen != null) {
	        for(Iterator it = $boolean_literalGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.boolean_literal_return r = (PLSQL3Parser.boolean_literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("boolean_literal");
	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	|	TK_0='SQL' ( FOUND_ATTRGen=FOUND_ATTR | NOTFOUND_ATTRGen=NOTFOUND_ATTR | ISOPEN_ATTRGen=ISOPEN_ATTR | ROWCOUNT_ATTRGen=ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen=BULK_ROWCOUNT_ATTR ) 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		simple_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($FOUND_ATTRGen != null) {
			Leaf FOUND_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			FOUND_ATTRGenLeaf.setKind("FOUND_ATTR");
			FOUND_ATTRGenLeaf.setValue($FOUND_ATTRGen.text);
			FOUND_ATTRGenLeaf.setPos(FOUND_ATTRGen.getCharPositionInLine());
			FOUND_ATTRGenLeaf.setLine(FOUND_ATTRGen.getLine());
			simple_expressionReturnNode.getChildren().add(FOUND_ATTRGenLeaf);
		}
	    // Create a CST Leaf
		if($NOTFOUND_ATTRGen != null) {
			Leaf NOTFOUND_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOTFOUND_ATTRGenLeaf.setKind("NOTFOUND_ATTR");
			NOTFOUND_ATTRGenLeaf.setValue($NOTFOUND_ATTRGen.text);
			NOTFOUND_ATTRGenLeaf.setPos(NOTFOUND_ATTRGen.getCharPositionInLine());
			NOTFOUND_ATTRGenLeaf.setLine(NOTFOUND_ATTRGen.getLine());
			simple_expressionReturnNode.getChildren().add(NOTFOUND_ATTRGenLeaf);
		}
	    // Create a CST Leaf
		if($ISOPEN_ATTRGen != null) {
			Leaf ISOPEN_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ISOPEN_ATTRGenLeaf.setKind("ISOPEN_ATTR");
			ISOPEN_ATTRGenLeaf.setValue($ISOPEN_ATTRGen.text);
			ISOPEN_ATTRGenLeaf.setPos(ISOPEN_ATTRGen.getCharPositionInLine());
			ISOPEN_ATTRGenLeaf.setLine(ISOPEN_ATTRGen.getLine());
			simple_expressionReturnNode.getChildren().add(ISOPEN_ATTRGenLeaf);
		}
	    // Create a CST Leaf
		if($ROWCOUNT_ATTRGen != null) {
			Leaf ROWCOUNT_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ROWCOUNT_ATTRGenLeaf.setKind("ROWCOUNT_ATTR");
			ROWCOUNT_ATTRGenLeaf.setValue($ROWCOUNT_ATTRGen.text);
			ROWCOUNT_ATTRGenLeaf.setPos(ROWCOUNT_ATTRGen.getCharPositionInLine());
			ROWCOUNT_ATTRGenLeaf.setLine(ROWCOUNT_ATTRGen.getLine());
			simple_expressionReturnNode.getChildren().add(ROWCOUNT_ATTRGenLeaf);
		}
	    // Create a CST Leaf
		if($BULK_ROWCOUNT_ATTRGen != null) {
			Leaf BULK_ROWCOUNT_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			BULK_ROWCOUNT_ATTRGenLeaf.setKind("BULK_ROWCOUNT_ATTR");
			BULK_ROWCOUNT_ATTRGenLeaf.setValue($BULK_ROWCOUNT_ATTRGen.text);
			BULK_ROWCOUNT_ATTRGenLeaf.setPos(BULK_ROWCOUNT_ATTRGen.getCharPositionInLine());
			BULK_ROWCOUNT_ATTRGenLeaf.setLine(BULK_ROWCOUNT_ATTRGen.getLine());
			simple_expressionReturnNode.getChildren().add(BULK_ROWCOUNT_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	|	column_specGen+=column_spec 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	|	QUOTED_STRINGGen=QUOTED_STRING 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a CST Leaf
		if($QUOTED_STRINGGen != null) {
			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
			QUOTED_STRINGGenLeaf.setValue($QUOTED_STRINGGen.text);
			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
			simple_expressionReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	|	NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			simple_expressionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	| 	COLONGen=COLON host_variableGen+=host_variable ( COLONGen_1=COLON host_variableGen_1+=host_variable )? 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COLONGenLeaf.setKind("COLON");
			COLONGenLeaf.setValue($COLONGen.text);
			COLONGenLeaf.setPos(COLONGen.getCharPositionInLine());
			COLONGenLeaf.setLine(COLONGen.getLine());
			simple_expressionReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($host_variableGen != null) {
	        for(Iterator it = $host_variableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("host_variable");
	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COLONGen_1 != null) {
			Leaf COLONGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COLONGen_1Leaf.setKind("COLON");
			COLONGen_1Leaf.setValue($COLONGen_1.text);
			COLONGen_1Leaf.setPos(COLONGen_1.getCharPositionInLine());
			COLONGen_1Leaf.setLine(COLONGen_1.getLine());
			simple_expressionReturnNode.getChildren().add(COLONGen_1Leaf);
		}
	    // Create a CST Node
		if($host_variableGen_1 != null) {
	        for(Iterator it = $host_variableGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("host_variable");
	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	} //// Mio
//	| 	COLON host_variable ( DOT host_variable )? //// Mio
//	|	sequence_name DOT ( 'CURRVAL' | 'NEXTVAL' )
//	|	'ROWID'
//	|	'ROWNUM'
	|	TK_0='NULL' 
	{
		// Create return CST Node
		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_expressionReturnNode.setKind("simple_expression");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		simple_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$simple_expression.returnNode = simple_expressionReturnNode;
	}
	;
	
simple_case_statement returns [Node returnNode] 
:	plsql_expressionGen+=plsql_expression ( TK_0='WHEN' plsql_expressionGen_1+=plsql_expression TK_1='THEN' seq_of_statementsGen+=seq_of_statements )+ 
	{
		// Create return CST Node
		Node simple_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_case_statementReturnNode.setKind("simple_case_statement");
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	simple_case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal plsql_expressionGen_1 aggregation
		if($plsql_expressionGen_1 != null) {
	    for(int pos = 0; pos < $plsql_expressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		simple_case_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($plsql_expressionGen_1 != null) {		
	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) $plsql_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("plsql_expression");
	    		simple_case_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		simple_case_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($seq_of_statementsGen != null) {		
	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) $seq_of_statementsGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("seq_of_statements");
	    		simple_case_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$simple_case_statement.returnNode = simple_case_statementReturnNode;
	}
	;

simple_case_expression returns [Node returnNode] 
:	nested_expressionGen+=nested_expression ( TK_0='WHEN' nested_expressionGen_1+=nested_expression TK_1='THEN' nested_expressionGen_2+=nested_expression )+ 
	{
		// Create return CST Node
		Node simple_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_case_expressionReturnNode.setKind("simple_case_expression");
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	simple_case_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal nested_expressionGen_1 aggregation
		if($nested_expressionGen_1 != null) {
	    for(int pos = 0; pos < $nested_expressionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		simple_case_expressionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($nested_expressionGen_1 != null) {		
	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) $nested_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_expression");
	    		simple_case_expressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		simple_case_expressionReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($nested_expressionGen_2 != null) {		
	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) $nested_expressionGen_2.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_expression");
	    		simple_case_expressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$simple_case_expression.returnNode = simple_case_expressionReturnNode;
	}
	;

single_column_for_loop returns [Node returnNode] 
:	TK_0='FOR' column_nameGen+=column_name
		(	TK_1='IN' LPARENGen=LPAREN ( literalsGen+=literals | subqueryGen+=subquery ) RPARENGen=RPAREN
		|	( TK_2='LIKE' patternGen+=pattern )? TK_3='FROM' literalGen+=literal TK_4='TO' literalGen_1+=literal ( keyINCREMENTGen+=keyINCREMENT | keyDECREMENTGen+=keyDECREMENT ) literalGen_2+=literal
		) 
	{
		// Create return CST Node
		Node single_column_for_loopReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		single_column_for_loopReturnNode.setKind("single_column_for_loop");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		single_column_for_loopReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($column_nameGen != null) {
	        for(Iterator it = $column_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_name");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		single_column_for_loopReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			single_column_for_loopReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($literalsGen != null) {
	        for(Iterator it = $literalsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literals_return r = (PLSQL3Parser.literals_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literals");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			single_column_for_loopReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		single_column_for_loopReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($patternGen != null) {
	        for(Iterator it = $patternGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.pattern_return r = (PLSQL3Parser.pattern_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pattern");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		single_column_for_loopReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($literalGen != null) {
	        for(Iterator it = $literalGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		single_column_for_loopReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($literalGen_1 != null) {
	        for(Iterator it = $literalGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyINCREMENTGen != null) {
	        for(Iterator it = $keyINCREMENTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyINCREMENT_return r = (PLSQL3Parser.keyINCREMENT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyINCREMENT");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyDECREMENTGen != null) {
	        for(Iterator it = $keyDECREMENTGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyDECREMENT_return r = (PLSQL3Parser.keyDECREMENT_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyDECREMENT");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($literalGen_2 != null) {
	        for(Iterator it = $literalGen_2.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$single_column_for_loop.returnNode = single_column_for_loopReturnNode;
	}
	;

sql_condition returns [Node returnNode] 
@init { isSql = true; }
	:	condition_orGen+=condition_or 
	{
		// Create return CST Node
		Node sql_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_conditionReturnNode.setKind("sql_condition");
	    // Create a CST Node
		if($condition_orGen != null) {
	        for(Iterator it = $condition_orGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.condition_or_return r = (PLSQL3Parser.condition_or_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition_or");
	            	sql_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_condition.returnNode = sql_conditionReturnNode;
	}
//	|	column 'IS' 'NOT' 'NULL' // TODO must be any boolean expression with table columns
	;
	
sql_identifier returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node sql_identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_identifierReturnNode.setKind("sql_identifier");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	sql_identifierReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_identifier.returnNode = sql_identifierReturnNode;
	}
	|	TK_0='ROWID' 
	{
		// Create return CST Node
		Node sql_identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_identifierReturnNode.setKind("sql_identifier");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		sql_identifierReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$sql_identifier.returnNode = sql_identifierReturnNode;
	}
//	|	'ROWNUM'
	;	
	
sql_statement returns [Node returnNode] 
:	sql_commandGen+=sql_command 
	{
		// Create return CST Node
		Node sql_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_statementReturnNode.setKind("sql_statement");
	    // Create a CST Node
		if($sql_commandGen != null) {
	        for(Iterator it = $sql_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_command_return r = (PLSQL3Parser.sql_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_command");
	            	sql_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_statement.returnNode = sql_statementReturnNode;
	}
	;

sql_command returns [Node returnNode] 
:	to_modify_dataGen+=to_modify_data 
	{
		// Create return CST Node
		Node sql_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_commandReturnNode.setKind("sql_command");
	    // Create a CST Node
		if($to_modify_dataGen != null) {
	        for(Iterator it = $to_modify_dataGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.to_modify_data_return r = (PLSQL3Parser.to_modify_data_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("to_modify_data");
	            	sql_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_command.returnNode = sql_commandReturnNode;
	}
	|	to_control_dataGen+=to_control_data 
	{
		// Create return CST Node
		Node sql_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_commandReturnNode.setKind("sql_command");
	    // Create a CST Node
		if($to_control_dataGen != null) {
	        for(Iterator it = $to_control_dataGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.to_control_data_return r = (PLSQL3Parser.to_control_data_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("to_control_data");
	            	sql_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_command.returnNode = sql_commandReturnNode;
	}
	;

subquery returns [Node returnNode] 
:	LPARENGen=LPAREN select_commandGen+=select_command RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node subqueryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		subqueryReturnNode.setKind("subquery");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			subqueryReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	subqueryReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			subqueryReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$subquery.returnNode = subqueryReturnNode;
	}
	;

subscript returns [Node returnNode] 
:	plsql_expressionGen+=plsql_expression 
	{
		// Create return CST Node
		Node subscriptReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		subscriptReturnNode.setKind("subscript");
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	subscriptReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$subscript.returnNode = subscriptReturnNode;
	} 
	;

subtype_declaration returns [Node returnNode] 
:	keySUBTYPEGen+=keySUBTYPE type_specGen+=type_spec TK_0='IS' type_specGen_1+=type_spec ( TK_1='NOT' TK_2='NULL' | keyRANGEGen+=keyRANGE literalGen+=literal DOUBLEDOTGen=DOUBLEDOT literalGen_1+=literal )? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node subtype_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		subtype_declarationReturnNode.setKind("subtype_declaration");
	    // Create a CST Node
		if($keySUBTYPEGen != null) {
	        for(Iterator it = $keySUBTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keySUBTYPE_return r = (PLSQL3Parser.keySUBTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keySUBTYPE");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		subtype_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($type_specGen_1 != null) {
	        for(Iterator it = $type_specGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		subtype_declarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		subtype_declarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyRANGEGen != null) {
	        for(Iterator it = $keyRANGEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyRANGE_return r = (PLSQL3Parser.keyRANGE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyRANGE");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($literalGen != null) {
	        for(Iterator it = $literalGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOUBLEDOTGen != null) {
			Leaf DOUBLEDOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLEDOTGenLeaf.setKind("DOUBLEDOT");
			DOUBLEDOTGenLeaf.setValue($DOUBLEDOTGen.text);
			DOUBLEDOTGenLeaf.setPos(DOUBLEDOTGen.getCharPositionInLine());
			DOUBLEDOTGenLeaf.setLine(DOUBLEDOTGen.getLine());
			subtype_declarationReturnNode.getChildren().add(DOUBLEDOTGenLeaf);
		}
	    // Create a CST Node
		if($literalGen_1 != null) {
	        for(Iterator it = $literalGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("literal");
	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			subtype_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$subtype_declaration.returnNode = subtype_declarationReturnNode;
	}
	;
	
statement returns [Node returnNode] 
:	assignment_statementGen+=assignment_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($assignment_statementGen != null) {
	        for(Iterator it = $assignment_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.assignment_statement_return r = (PLSQL3Parser.assignment_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("assignment_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	exit_statementGen+=exit_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($exit_statementGen != null) {
	        for(Iterator it = $exit_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.exit_statement_return r = (PLSQL3Parser.exit_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exit_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	goto_statementGen+=goto_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($goto_statementGen != null) {
	        for(Iterator it = $goto_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.goto_statement_return r = (PLSQL3Parser.goto_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("goto_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	case_statementGen+=case_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($case_statementGen != null) {
	        for(Iterator it = $case_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.case_statement_return r = (PLSQL3Parser.case_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("case_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	if_statementGen+=if_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($if_statementGen != null) {
	        for(Iterator it = $if_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.if_statement_return r = (PLSQL3Parser.if_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("if_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	} 
	|	loop_statementGen+=loop_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($loop_statementGen != null) {
	        for(Iterator it = $loop_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.loop_statement_return r = (PLSQL3Parser.loop_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("loop_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	} 
	|	null_statementGen+=null_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($null_statementGen != null) {
	        for(Iterator it = $null_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.null_statement_return r = (PLSQL3Parser.null_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("null_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	raise_statementGen+=raise_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($raise_statementGen != null) {
	        for(Iterator it = $raise_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.raise_statement_return r = (PLSQL3Parser.raise_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("raise_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	return_statementGen+=return_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($return_statementGen != null) {
	        for(Iterator it = $return_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.return_statement_return r = (PLSQL3Parser.return_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("return_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	sql_statementGen+=sql_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($sql_statementGen != null) {
	        for(Iterator it = $sql_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_statement_return r = (PLSQL3Parser.sql_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|	plsql_blockGen+=plsql_block 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($plsql_blockGen != null) {
	        for(Iterator it = $plsql_blockGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_block_return r = (PLSQL3Parser.plsql_block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_block");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
//	|	begin_block
	|	function_callGen+=function_call 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($function_callGen != null) {
	        for(Iterator it = $function_callGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_call_return r = (PLSQL3Parser.function_call_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_call");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	;

table_name returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier 
	{
		// Create return CST Node
		Node table_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_nameReturnNode.setKind("table_name");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	table_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$table_name.returnNode = table_nameReturnNode;
	}
	;

table_reference_list returns [Node returnNode] 
:	selected_tableGen+=selected_table ( COMMAGen_List+=COMMA selected_tableGen_1+=selected_table )* 
	{
		// Create return CST Node
		Node table_reference_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_reference_listReturnNode.setKind("table_reference_list");
	    // Create a CST Node
		if($selected_tableGen != null) {
	        for(Iterator it = $selected_tableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("selected_table");
	            	table_reference_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			table_reference_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($selected_tableGen_1 != null) {		
	    	PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) $selected_tableGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("selected_table");
	    		table_reference_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$table_reference_list.returnNode = table_reference_listReturnNode;
	}
	;

table_spec returns [Node returnNode] 
:	( schema_nameGen+=schema_name DOTGen=DOT )? table_nameGen+=table_name ( AT_SIGNGen=AT_SIGN link_nameGen+=link_name )? 
	{
		// Create return CST Node
		Node table_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_specReturnNode.setKind("table_spec");
	    // Create a CST Node
		if($schema_nameGen != null) {
	        for(Iterator it = $schema_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schema_name");
	            	table_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGenLeaf.setKind("DOT");
			DOTGenLeaf.setValue($DOTGen.text);
			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
			DOTGenLeaf.setLine(DOTGen.getLine());
			table_specReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Node
		if($table_nameGen != null) {
	        for(Iterator it = $table_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_name");
	            	table_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($AT_SIGNGen != null) {
			Leaf AT_SIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			AT_SIGNGenLeaf.setKind("AT_SIGN");
			AT_SIGNGenLeaf.setValue($AT_SIGNGen.text);
			AT_SIGNGenLeaf.setPos(AT_SIGNGen.getCharPositionInLine());
			AT_SIGNGenLeaf.setLine(AT_SIGNGen.getLine());
			table_specReturnNode.getChildren().add(AT_SIGNGenLeaf);
		}
	    // Create a CST Node
		if($link_nameGen != null) {
	        for(Iterator it = $link_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.link_name_return r = (PLSQL3Parser.link_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("link_name");
	            	table_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$table_spec.returnNode = table_specReturnNode;
	}
	;

table_type_dec returns [Node returnNode] 
:	keyTYPEGen+=keyTYPE type_nameGen+=type_name TK_0='IS' TK_1='TABLE' 
		TK_2='OF' type_specGen+=type_spec ( TK_3='NOT' TK_4='NULL' )?
		(	TK_5='INDEX' TK_6='BY' 
			(	TK_7='BINARY_INTEGER'
			|	TK_8='PLS_INTEGER'
			|	TK_9='VARCHAR2' LPARENGen=LPAREN integerGen+=integer RPARENGen=RPAREN
			)
		)?
		SEMIGen=SEMI 
	{
		// Create return CST Node
		Node table_type_decReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		table_type_decReturnNode.setKind("table_type_dec");
	    // Create a CST Node
		if($keyTYPEGen != null) {
	        for(Iterator it = $keyTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTYPE");
	            	table_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_nameGen != null) {
	        for(Iterator it = $type_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_name");
	            	table_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	table_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_8Leaf.setKind("TOKEN");
	 		TK_8Leaf.setValue($TK_8.text);
			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
			TK_8Leaf.setLine(TK_8.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_9Leaf.setKind("TOKEN");
	 		TK_9Leaf.setValue($TK_9.text);
			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
			TK_9Leaf.setLine(TK_9.getLine());
	 		table_type_decReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			table_type_decReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($integerGen != null) {
	        for(Iterator it = $integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer");
	            	table_type_decReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			table_type_decReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			table_type_decReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$table_type_dec.returnNode = table_type_decReturnNode;
	}
	;

to_modify_data returns [Node returnNode] 
:	select_commandGen+=select_command 
	{
		// Create return CST Node
		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_modify_dataReturnNode.setKind("to_modify_data");
	    // Create a CST Node
		if($select_commandGen != null) {
	        for(Iterator it = $select_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_command");
	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_modify_data.returnNode = to_modify_dataReturnNode;
	}
	|	insert_commandGen+=insert_command 
	{
		// Create return CST Node
		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_modify_dataReturnNode.setKind("to_modify_data");
	    // Create a CST Node
		if($insert_commandGen != null) {
	        for(Iterator it = $insert_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.insert_command_return r = (PLSQL3Parser.insert_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("insert_command");
	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_modify_data.returnNode = to_modify_dataReturnNode;
	}
	|	update_commandGen+=update_command 
	{
		// Create return CST Node
		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_modify_dataReturnNode.setKind("to_modify_data");
	    // Create a CST Node
		if($update_commandGen != null) {
	        for(Iterator it = $update_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.update_command_return r = (PLSQL3Parser.update_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("update_command");
	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_modify_data.returnNode = to_modify_dataReturnNode;
	}
	|	delete_commandGen+=delete_command 
	{
		// Create return CST Node
		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_modify_dataReturnNode.setKind("to_modify_data");
	    // Create a CST Node
		if($delete_commandGen != null) {
	        for(Iterator it = $delete_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.delete_command_return r = (PLSQL3Parser.delete_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("delete_command");
	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_modify_data.returnNode = to_modify_dataReturnNode;
	}
	|	set_transaction_commandGen+=set_transaction_command 
	{
		// Create return CST Node
		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_modify_dataReturnNode.setKind("to_modify_data");
	    // Create a CST Node
		if($set_transaction_commandGen != null) {
	        for(Iterator it = $set_transaction_commandGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.set_transaction_command_return r = (PLSQL3Parser.set_transaction_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("set_transaction_command");
	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_modify_data.returnNode = to_modify_dataReturnNode;
	}
	;

to_control_data returns [Node returnNode] 
:	close_statementGen+=close_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($close_statementGen != null) {
	        for(Iterator it = $close_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.close_statement_return r = (PLSQL3Parser.close_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("close_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	commit_statementGen+=commit_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($commit_statementGen != null) {
	        for(Iterator it = $commit_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.commit_statement_return r = (PLSQL3Parser.commit_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("commit_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	fetch_statementGen+=fetch_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($fetch_statementGen != null) {
	        for(Iterator it = $fetch_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.fetch_statement_return r = (PLSQL3Parser.fetch_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("fetch_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	lock_table_statementGen+=lock_table_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($lock_table_statementGen != null) {
	        for(Iterator it = $lock_table_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.lock_table_statement_return r = (PLSQL3Parser.lock_table_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("lock_table_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	open_statementGen+=open_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($open_statementGen != null) {
	        for(Iterator it = $open_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.open_statement_return r = (PLSQL3Parser.open_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("open_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	rollback_statementGen+=rollback_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($rollback_statementGen != null) {
	        for(Iterator it = $rollback_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.rollback_statement_return r = (PLSQL3Parser.rollback_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rollback_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	|	savepoint_statementGen+=savepoint_statement 
	{
		// Create return CST Node
		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		to_control_dataReturnNode.setKind("to_control_data");
	    // Create a CST Node
		if($savepoint_statementGen != null) {
	        for(Iterator it = $savepoint_statementGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.savepoint_statement_return r = (PLSQL3Parser.savepoint_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("savepoint_statement");
	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$to_control_data.returnNode = to_control_dataReturnNode;
	}
	;
	
type_declaration returns [Node returnNode] 
:	keyTYPEGen+=keyTYPE type_specGen+=type_spec TK_0='IS' ( keyNEWGen+=keyNEW )? ( type_specGen_1+=type_spec ( TK_1='NOT' TK_2='NULL' )? | LPARENGen=LPAREN plsql_expressionsGen+=plsql_expressions RPARENGen=RPAREN ) SEMIGen=SEMI 
	{
		// Create return CST Node
		Node type_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_declarationReturnNode.setKind("type_declaration");
	    // Create a CST Node
		if($keyTYPEGen != null) {
	        for(Iterator it = $keyTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTYPE");
	            	type_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	type_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		type_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyNEWGen != null) {
	        for(Iterator it = $keyNEWGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyNEW_return r = (PLSQL3Parser.keyNEW_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyNEW");
	            	type_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_specGen_1 != null) {
	        for(Iterator it = $type_specGen_1.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	type_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		type_declarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		type_declarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			type_declarationReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($plsql_expressionsGen != null) {
	        for(Iterator it = $plsql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expressions");
	            	type_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			type_declarationReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			type_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$type_declaration.returnNode = type_declarationReturnNode;
	}
	;

type_name returns [Node returnNode] 
:	identifierGen+=identifier ( DOTGen_List+=DOT identifierGen_1+=identifier )* 
	{
		// Create return CST Node
		Node type_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_nameReturnNode.setKind("type_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	type_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			type_nameReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($identifierGen_1 != null) {		
	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) $identifierGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("identifier");
	    		type_nameReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$type_name.returnNode = type_nameReturnNode;
	}
	;

type_spec returns [Node returnNode] 
:	datatypeGen+=datatype 
	{
		// Create return CST Node
		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_specReturnNode.setKind("type_spec");
	    // Create a CST Node
		if($datatypeGen != null) {
	        for(Iterator it = $datatypeGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.datatype_return r = (PLSQL3Parser.datatype_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("datatype");
	            	type_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$type_spec.returnNode = type_specReturnNode;
	} 
//	|	variable_name TYPE_ATTR
	|	column_specGen+=column_spec TYPE_ATTRGen=TYPE_ATTR 
	{
		// Create return CST Node
		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_specReturnNode.setKind("type_spec");
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	type_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($TYPE_ATTRGen != null) {
			Leaf TYPE_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TYPE_ATTRGenLeaf.setKind("TYPE_ATTR");
			TYPE_ATTRGenLeaf.setValue($TYPE_ATTRGen.text);
			TYPE_ATTRGenLeaf.setPos(TYPE_ATTRGen.getCharPositionInLine());
			TYPE_ATTRGenLeaf.setLine(TYPE_ATTRGen.getLine());
			type_specReturnNode.getChildren().add(TYPE_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$type_spec.returnNode = type_specReturnNode;
	}
//	|	package_name DOT variable_name
	|	table_specGen+=table_spec ROWTYPE_ATTRGen=ROWTYPE_ATTR 
	{
		// Create return CST Node
		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_specReturnNode.setKind("type_spec");
	    // Create a CST Node
		if($table_specGen != null) {
	        for(Iterator it = $table_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.table_spec_return r = (PLSQL3Parser.table_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("table_spec");
	            	type_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ROWTYPE_ATTRGen != null) {
			Leaf ROWTYPE_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ROWTYPE_ATTRGenLeaf.setKind("ROWTYPE_ATTR");
			ROWTYPE_ATTRGenLeaf.setValue($ROWTYPE_ATTRGen.text);
			ROWTYPE_ATTRGenLeaf.setPos(ROWTYPE_ATTRGen.getCharPositionInLine());
			ROWTYPE_ATTRGenLeaf.setLine(ROWTYPE_ATTRGen.getLine());
			type_specReturnNode.getChildren().add(ROWTYPE_ATTRGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$type_spec.returnNode = type_specReturnNode;
	}
//	|	keyREF ( keyCURSOR | type_name )
	|	type_nameGen+=type_name ( LPARENGen=LPAREN NUMBERGen=NUMBER RPARENGen=RPAREN )? 
	{
		// Create return CST Node
		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		type_specReturnNode.setKind("type_spec");
	    // Create a CST Node
		if($type_nameGen != null) {
	        for(Iterator it = $type_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_name");
	            	type_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			type_specReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NUMBERGenLeaf.setKind("NUMBER");
			NUMBERGenLeaf.setValue($NUMBERGen.text);
			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
			type_specReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			type_specReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$type_spec.returnNode = type_specReturnNode;
	}
	;
update_column_specs returns [Node returnNode] 
:	update_column_specGen+=update_column_spec ( COMMAGen_List+=COMMA update_column_specGen_1+=update_column_spec )* 
	{
		// Create return CST Node
		Node update_column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		update_column_specsReturnNode.setKind("update_column_specs");
	    // Create a CST Node
		if($update_column_specGen != null) {
	        for(Iterator it = $update_column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.update_column_spec_return r = (PLSQL3Parser.update_column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("update_column_spec");
	            	update_column_specsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			update_column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($update_column_specGen_1 != null) {		
	    	PLSQL3Parser.update_column_spec_return r = (PLSQL3Parser.update_column_spec_return) $update_column_specGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("update_column_spec");
	    		update_column_specsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$update_column_specs.returnNode = update_column_specsReturnNode;
	}
	;

update_column_spec returns [Node returnNode] 
:	column_specGen+=column_spec EQGen=EQ sql_expressionGen+=sql_expression 
	{
		// Create return CST Node
		Node update_column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		update_column_specReturnNode.setKind("update_column_spec");
	    // Create a CST Node
		if($column_specGen != null) {
	        for(Iterator it = $column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_spec");
	            	update_column_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			update_column_specReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	update_column_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$update_column_spec.returnNode = update_column_specReturnNode;
	}
	;

update_command returns [Node returnNode] 
:	TK_0='UPDATE' selected_tableGen+=selected_table
		TK_1='SET' 
		(	update_nested_column_specsGen+=update_nested_column_specs
		|	update_column_specsGen+=update_column_specs
		)
		(	TK_2='WHERE'
			(	keyCURRENT_OFGen+=keyCURRENT_OF cursor_nameGen+=cursor_name
			|	sql_conditionGen+=sql_condition
			)
		)?
		( returning_clauseGen+=returning_clause )? 
	{
		// Create return CST Node
		Node update_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		update_commandReturnNode.setKind("update_command");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		update_commandReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($selected_tableGen != null) {
	        for(Iterator it = $selected_tableGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("selected_table");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		update_commandReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($update_nested_column_specsGen != null) {
	        for(Iterator it = $update_nested_column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.update_nested_column_specs_return r = (PLSQL3Parser.update_nested_column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("update_nested_column_specs");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($update_column_specsGen != null) {
	        for(Iterator it = $update_column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.update_column_specs_return r = (PLSQL3Parser.update_column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("update_column_specs");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		update_commandReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($keyCURRENT_OFGen != null) {
	        for(Iterator it = $keyCURRENT_OFGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyCURRENT_OF_return r = (PLSQL3Parser.keyCURRENT_OF_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyCURRENT_OF");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($cursor_nameGen != null) {
	        for(Iterator it = $cursor_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_name");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($returning_clauseGen != null) {
	        for(Iterator it = $returning_clauseGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("returning_clause");
	            	update_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$update_command.returnNode = update_commandReturnNode;
	}
	;

update_nested_column_specs returns [Node returnNode] 
:	update_nested_column_specGen+=update_nested_column_spec ( COMMAGen_List+=COMMA update_nested_column_specGen_1+=update_nested_column_spec )* 
	{
		// Create return CST Node
		Node update_nested_column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		update_nested_column_specsReturnNode.setKind("update_nested_column_specs");
	    // Create a CST Node
		if($update_nested_column_specGen != null) {
	        for(Iterator it = $update_nested_column_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.update_nested_column_spec_return r = (PLSQL3Parser.update_nested_column_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("update_nested_column_spec");
	            	update_nested_column_specsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			update_nested_column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($update_nested_column_specGen_1 != null) {		
	    	PLSQL3Parser.update_nested_column_spec_return r = (PLSQL3Parser.update_nested_column_spec_return) $update_nested_column_specGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("update_nested_column_spec");
	    		update_nested_column_specsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$update_nested_column_specs.returnNode = update_nested_column_specsReturnNode;
	}
	;

update_nested_column_spec returns [Node returnNode] 
:	LPARENGen=LPAREN column_specsGen+=column_specs RPARENGen=RPAREN EQGen=EQ subqueryGen+=subquery 
	{
		// Create return CST Node
		Node update_nested_column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		update_nested_column_specReturnNode.setKind("update_nested_column_spec");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			update_nested_column_specReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($column_specsGen != null) {
	        for(Iterator it = $column_specsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("column_specs");
	            	update_nested_column_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			update_nested_column_specReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			update_nested_column_specReturnNode.getChildren().add(EQGenLeaf);
		}
	    // Create a CST Node
		if($subqueryGen != null) {
	        for(Iterator it = $subqueryGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("subquery");
	            	update_nested_column_specReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$update_nested_column_spec.returnNode = update_nested_column_specReturnNode;
	}
	;

user_defined_function returns [Node returnNode] 
:	sql_identifierGen+=sql_identifier ( DOTGen_List+=DOT sql_identifierGen_1+=sql_identifier )* ( DOTGen_1=DOT ( TK_0='EXISTS' | TK_1='PRIOR' | TK_2='DELETE' ) )? 
	{
		// Create return CST Node
		Node user_defined_functionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		user_defined_functionReturnNode.setKind("user_defined_function");
	    // Create a CST Node
		if($sql_identifierGen != null) {
	        for(Iterator it = $sql_identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_identifier");
	            	user_defined_functionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_ListLeaf.setKind("DOT");
			DOTGen_ListLeaf.setValue(t.getText());
			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
			DOTGen_ListLeaf.setLine(t.getLine());
			user_defined_functionReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($sql_identifierGen_1 != null) {		
	    	PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) $sql_identifierGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("sql_identifier");
	    		user_defined_functionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a CST Leaf
		if($DOTGen_1 != null) {
			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOTGen_1Leaf.setKind("DOT");
			DOTGen_1Leaf.setValue($DOTGen_1.text);
			DOTGen_1Leaf.setPos(DOTGen_1.getCharPositionInLine());
			DOTGen_1Leaf.setLine(DOTGen_1.getLine());
			user_defined_functionReturnNode.getChildren().add(DOTGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		user_defined_functionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		user_defined_functionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		user_defined_functionReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$user_defined_function.returnNode = user_defined_functionReturnNode;
	} //( ( schema_name DOT )? package_name DOT )? identifier // sql_identifier ( DOT sql_identifier )*
	;

variable_declaration returns [Node returnNode] 
:	variable_nameGen+=variable_name (TK_0='CONSTANT')?
		type_specGen+=type_spec (TK_1='NOT' TK_2='NULL')? 
		( ( ASSIGNGen=ASSIGN | TK_3='DEFAULT' ) plsql_expressionGen+=plsql_expression)? SEMIGen=SEMI 
	{
		// Create return CST Node
		Node variable_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variable_declarationReturnNode.setKind("variable_declaration");
	    // Create a CST Node
		if($variable_nameGen != null) {
	        for(Iterator it = $variable_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_name");
	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		variable_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		variable_declarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		variable_declarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($ASSIGNGen != null) {
			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASSIGNGenLeaf.setKind("ASSIGN");
			ASSIGNGenLeaf.setValue($ASSIGNGen.text);
			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
			variable_declarationReturnNode.getChildren().add(ASSIGNGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		variable_declarationReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMIGenLeaf.setKind("SEMI");
			SEMIGenLeaf.setValue($SEMIGen.text);
			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
			SEMIGenLeaf.setLine(SEMIGen.getLine());
			variable_declarationReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$variable_declaration.returnNode = variable_declarationReturnNode;
	}
	;

variable_expression returns [Node returnNode] 
:	variable_nameGen+=variable_name 
	{
		// Create return CST Node
		Node variable_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variable_expressionReturnNode.setKind("variable_expression");
	    // Create a CST Node
		if($variable_nameGen != null) {
	        for(Iterator it = $variable_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_name");
	            	variable_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variable_expression.returnNode = variable_expressionReturnNode;
	}
	;
	
variable_name returns [Node returnNode] 
:	identifierGen+=identifier 
	{
		// Create return CST Node
		Node variable_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variable_nameReturnNode.setKind("variable_name");
	    // Create a CST Node
		if($identifierGen != null) {
	        for(Iterator it = $identifierGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("identifier");
	            	variable_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$variable_name.returnNode = variable_nameReturnNode;
	}
	;
	
variable_names returns [Node returnNode] 
:	variable_nameGen+=variable_name ( COMMAGen_List+=COMMA variable_nameGen_1+=variable_name )* 
	{
		// Create return CST Node
		Node variable_namesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variable_namesReturnNode.setKind("variable_names");
	    // Create a CST Node
		if($variable_nameGen != null) {
	        for(Iterator it = $variable_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable_name");
	            	variable_namesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			variable_namesReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($variable_nameGen_1 != null) {		
	    	PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) $variable_nameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("variable_name");
	    		variable_namesReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$variable_names.returnNode = variable_namesReturnNode;
	}
	;

varray_declaration returns [Node returnNode] 
:	keyTYPEGen+=keyTYPE type_nameGen+=type_name TK_0='IS' 
		( keyVARRAYGen+=keyVARRAY | keyVARYINGGen+=keyVARYING keyARRAYGen+=keyARRAY ) LPARENGen=LPAREN integerGen+=integer RPARENGen=RPAREN
		TK_1='OF' type_specGen+=type_spec ( TK_2='NOT' TK_3='NULL' )? 
	{
		// Create return CST Node
		Node varray_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varray_declarationReturnNode.setKind("varray_declaration");
	    // Create a CST Node
		if($keyTYPEGen != null) {
	        for(Iterator it = $keyTYPEGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyTYPE");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($type_nameGen != null) {
	        for(Iterator it = $type_nameGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_name");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		varray_declarationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($keyVARRAYGen != null) {
	        for(Iterator it = $keyVARRAYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARRAY_return r = (PLSQL3Parser.keyVARRAY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARRAY");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyVARYINGGen != null) {
	        for(Iterator it = $keyVARYINGGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyVARYING");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($keyARRAYGen != null) {
	        for(Iterator it = $keyARRAYGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.keyARRAY_return r = (PLSQL3Parser.keyARRAY_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("keyARRAY");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			varray_declarationReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($integerGen != null) {
	        for(Iterator it = $integerGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("integer");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			varray_declarationReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		varray_declarationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($type_specGen != null) {
	        for(Iterator it = $type_specGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("type_spec");
	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		varray_declarationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		varray_declarationReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$varray_declaration.returnNode = varray_declarationReturnNode;
	}
	;

where_clause returns [Node returnNode] 
:	TK_0='WHERE' sql_conditionGen+=sql_condition 
	{
		// Create return CST Node
		Node where_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		where_clauseReturnNode.setKind("where_clause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		where_clauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($sql_conditionGen != null) {
	        for(Iterator it = $sql_conditionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_condition");
	            	where_clauseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$where_clause.returnNode = where_clauseReturnNode;
	}
	;

	

/*---------------------------------------------------------------------*/
/* Expressions */
expression_list returns [Node returnNode] 
:	LPARENGen=LPAREN sql_expressionsGen+=sql_expressions RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expression_listReturnNode.setKind("expression_list");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			expression_listReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	expression_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			expression_listReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$expression_list.returnNode = expression_listReturnNode;
	}
	|	sql_expressionsGen+=sql_expressions 
	{
		// Create return CST Node
		Node expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expression_listReturnNode.setKind("expression_list");
	    // Create a CST Node
		if($sql_expressionsGen != null) {
	        for(Iterator it = $sql_expressionsGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expressions");
	            	expression_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expression_list.returnNode = expression_listReturnNode;
	}
	;

plsql_expressions returns [Node returnNode] 
:	plsql_expressionGen+=plsql_expression ( COMMAGen_List+=COMMA plsql_expressionGen_1+=plsql_expression )* 
	{
		// Create return CST Node
		Node plsql_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_expressionsReturnNode.setKind("plsql_expressions");
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	plsql_expressionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			plsql_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($plsql_expressionGen_1 != null) {		
	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) $plsql_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("plsql_expression");
	    		plsql_expressionsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$plsql_expressions.returnNode = plsql_expressionsReturnNode;
	}
	;
	
plsql_expression returns [Node returnNode] 
@init { isSql = false; }
	:	expr_boolGen+=expr_bool 
	{
		// Create return CST Node
		Node plsql_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		plsql_expressionReturnNode.setKind("plsql_expression");
	    // Create a CST Node
		if($expr_boolGen != null) {
	        for(Iterator it = $expr_boolGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_bool");
	            	plsql_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$plsql_expression.returnNode = plsql_expressionReturnNode;
	}
	;

sql_expressions returns [Node returnNode] 
:	sql_expressionGen+=sql_expression ( COMMAGen_List+=COMMA sql_expressionGen_1+=sql_expression )* 
	{
		// Create return CST Node
		Node sql_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_expressionsReturnNode.setKind("sql_expressions");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	sql_expressionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			sql_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($sql_expressionGen_1 != null) {		
	    	PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) $sql_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("sql_expression");
	    		sql_expressionsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$sql_expressions.returnNode = sql_expressionsReturnNode;
	}
	;
	
sql_expression returns [Node returnNode] 
@init { isSql = true; }
	:	expr_addGen+=expr_add 
	{
		// Create return CST Node
		Node sql_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sql_expressionReturnNode.setKind("sql_expression");
	    // Create a CST Node
		if($expr_addGen != null) {
	        for(Iterator it = $expr_addGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_add");
	            	sql_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$sql_expression.returnNode = sql_expressionReturnNode;
	}
	;
	
nested_expressions returns [Node returnNode] 
:	nested_expressionGen+=nested_expression ( COMMAGen_List+=COMMA nested_expressionGen_1+=nested_expression )* 
	{
		// Create return CST Node
		Node nested_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_expressionsReturnNode.setKind("nested_expressions");
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	nested_expressionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			COMMAGen_ListLeaf.setKind("COMMA");
			COMMAGen_ListLeaf.setValue(t.getText());
			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
			COMMAGen_ListLeaf.setLine(t.getLine());
			nested_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($nested_expressionGen_1 != null) {		
	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) $nested_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_expression");
	    		nested_expressionsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$nested_expressions.returnNode = nested_expressionsReturnNode;
	}
	;
	
nested_expression returns [Node returnNode] 
:	{  isSql }? sql_expressionGen+=sql_expression 
	{
		// Create return CST Node
		Node nested_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_expressionReturnNode.setKind("nested_expression");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	nested_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_expression.returnNode = nested_expressionReturnNode;
	}
	|	{ !isSql }? plsql_expressionGen+=plsql_expression 
	{
		// Create return CST Node
		Node nested_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nested_expressionReturnNode.setKind("nested_expression");
	    // Create a CST Node
		if($plsql_expressionGen != null) {
	        for(Iterator it = $plsql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("plsql_expression");
	            	nested_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nested_expression.returnNode = nested_expressionReturnNode;
	}
	;
	
expr_bool returns [Node returnNode] 
:	expr_orGen+=expr_or ( TK_0='OR' expr_orGen_1+=expr_or )* 
	{
		// Create return CST Node
		Node expr_boolReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_boolReturnNode.setKind("expr_bool");
	    // Create a CST Node
		if($expr_orGen != null) {
	        for(Iterator it = $expr_orGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_or_return r = (PLSQL3Parser.expr_or_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_or");
	            	expr_boolReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal expr_orGen_1 aggregation
		if($expr_orGen_1 != null) {
	    for(int pos = 0; pos < $expr_orGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expr_boolReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($expr_orGen_1 != null) {		
	    	PLSQL3Parser.expr_or_return r = (PLSQL3Parser.expr_or_return) $expr_orGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_or");
	    		expr_boolReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_bool.returnNode = expr_boolReturnNode;
	}
	;
	
expr_or returns [Node returnNode] 
:	expr_andGen+=expr_and ( TK_0='AND' expr_andGen_1+=expr_and )* 
	{
		// Create return CST Node
		Node expr_orReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_orReturnNode.setKind("expr_or");
	    // Create a CST Node
		if($expr_andGen != null) {
	        for(Iterator it = $expr_andGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_and_return r = (PLSQL3Parser.expr_and_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_and");
	            	expr_orReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal expr_andGen_1 aggregation
		if($expr_andGen_1 != null) {
	    for(int pos = 0; pos < $expr_andGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expr_orReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($expr_andGen_1 != null) {		
	    	PLSQL3Parser.expr_and_return r = (PLSQL3Parser.expr_and_return) $expr_andGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_and");
	    		expr_orReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_or.returnNode = expr_orReturnNode;
	}
	;
	
expr_and returns [Node returnNode] 
:	( TK_0='NOT' )? expr_notGen+=expr_not 
	{
		// Create return CST Node
		Node expr_andReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_andReturnNode.setKind("expr_and");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expr_andReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expr_notGen != null) {
	        for(Iterator it = $expr_notGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_not_return r = (PLSQL3Parser.expr_not_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_not");
	            	expr_andReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_and.returnNode = expr_andReturnNode;
	}
	;
	
expr_not returns [Node returnNode] 
:	expr_addGen+=expr_add 
		(	relational_opGen+=relational_op expr_addGen_1+=expr_add
		|	FOUND_ATTRGen_List+=FOUND_ATTR | NOTFOUND_ATTRGen_List+=NOTFOUND_ATTR | ISOPEN_ATTRGen_List+=ISOPEN_ATTR | ROWCOUNT_ATTRGen_List+=ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen_List+=BULK_ROWCOUNT_ATTR
		|	TK_0='IS' ( TK_1='NOT' )? TK_2='NULL'
		|	( TK_3='NOT' )? TK_4='LIKE' expr_addGen_2+=expr_add
		|	( TK_5='NOT' )? TK_6='BETWEEN' expr_addGen_3+=expr_add TK_7='AND' expr_addGen_4+=expr_add
		|	( TK_8='NOT' )? TK_9='IN' LPARENGen_List+=LPAREN nested_expressionsGen+=nested_expressions RPARENGen_List+=RPAREN
		)* 
	{
		// Create return CST Node
		Node expr_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_notReturnNode.setKind("expr_not");
	    // Create a CST Node
		if($expr_addGen != null) {
	        for(Iterator it = $expr_addGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_add");
	            	expr_notReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal relational_opGen aggregation
		if($relational_opGen != null) {
	    for(int pos = 0; pos < $relational_opGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($relational_opGen != null) {		
	    	PLSQL3Parser.relational_op_return r = (PLSQL3Parser.relational_op_return) $relational_opGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("relational_op");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($expr_addGen_1 != null) {		
	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) $expr_addGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_add");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal FOUND_ATTRGen_List aggregation
		if($FOUND_ATTRGen_List != null) {
	    for(int pos = 0; pos < $FOUND_ATTRGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($FOUND_ATTRGen_List != null) {
		    Token t = (Token) $FOUND_ATTRGen_List.get(pos); 
		    Leaf FOUND_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			FOUND_ATTRGen_ListLeaf.setKind("FOUND_ATTR");
			FOUND_ATTRGen_ListLeaf.setValue(t.getText());
			FOUND_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
			FOUND_ATTRGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(FOUND_ATTRGen_ListLeaf);
		}
		}
		}
	
	
		// Create a special CST Node for terminal NOTFOUND_ATTRGen_List aggregation
		if($NOTFOUND_ATTRGen_List != null) {
	    for(int pos = 0; pos < $NOTFOUND_ATTRGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($NOTFOUND_ATTRGen_List != null) {
		    Token t = (Token) $NOTFOUND_ATTRGen_List.get(pos); 
		    Leaf NOTFOUND_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOTFOUND_ATTRGen_ListLeaf.setKind("NOTFOUND_ATTR");
			NOTFOUND_ATTRGen_ListLeaf.setValue(t.getText());
			NOTFOUND_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
			NOTFOUND_ATTRGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(NOTFOUND_ATTRGen_ListLeaf);
		}
		}
		}
	
	
		// Create a special CST Node for terminal ISOPEN_ATTRGen_List aggregation
		if($ISOPEN_ATTRGen_List != null) {
	    for(int pos = 0; pos < $ISOPEN_ATTRGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($ISOPEN_ATTRGen_List != null) {
		    Token t = (Token) $ISOPEN_ATTRGen_List.get(pos); 
		    Leaf ISOPEN_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ISOPEN_ATTRGen_ListLeaf.setKind("ISOPEN_ATTR");
			ISOPEN_ATTRGen_ListLeaf.setValue(t.getText());
			ISOPEN_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
			ISOPEN_ATTRGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(ISOPEN_ATTRGen_ListLeaf);
		}
		}
		}
	
	
		// Create a special CST Node for terminal ROWCOUNT_ATTRGen_List aggregation
		if($ROWCOUNT_ATTRGen_List != null) {
	    for(int pos = 0; pos < $ROWCOUNT_ATTRGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($ROWCOUNT_ATTRGen_List != null) {
		    Token t = (Token) $ROWCOUNT_ATTRGen_List.get(pos); 
		    Leaf ROWCOUNT_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ROWCOUNT_ATTRGen_ListLeaf.setKind("ROWCOUNT_ATTR");
			ROWCOUNT_ATTRGen_ListLeaf.setValue(t.getText());
			ROWCOUNT_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
			ROWCOUNT_ATTRGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(ROWCOUNT_ATTRGen_ListLeaf);
		}
		}
		}
	
	
		// Create a special CST Node for terminal BULK_ROWCOUNT_ATTRGen_List aggregation
		if($BULK_ROWCOUNT_ATTRGen_List != null) {
	    for(int pos = 0; pos < $BULK_ROWCOUNT_ATTRGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($BULK_ROWCOUNT_ATTRGen_List != null) {
		    Token t = (Token) $BULK_ROWCOUNT_ATTRGen_List.get(pos); 
		    Leaf BULK_ROWCOUNT_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			BULK_ROWCOUNT_ATTRGen_ListLeaf.setKind("BULK_ROWCOUNT_ATTR");
			BULK_ROWCOUNT_ATTRGen_ListLeaf.setValue(t.getText());
			BULK_ROWCOUNT_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
			BULK_ROWCOUNT_ATTRGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(BULK_ROWCOUNT_ATTRGen_ListLeaf);
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expr_notReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		expr_notReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		expr_notReturnNode.getChildren().add(TK_2Leaf);
	 	}
	
		// Create a special CST Node for terminal expr_addGen_2 aggregation
		if($expr_addGen_2 != null) {
	    for(int pos = 0; pos < $expr_addGen_2.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		expr_notReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		expr_notReturnNode.getChildren().add(TK_4Leaf);
	 	}
		// No Terminal extractor
	    if($expr_addGen_2 != null) {		
	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) $expr_addGen_2.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_add");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal expr_addGen_3 aggregation
		if($expr_addGen_3 != null) {
	    for(int pos = 0; pos < $expr_addGen_3.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		expr_notReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		expr_notReturnNode.getChildren().add(TK_6Leaf);
	 	}
		// No Terminal extractor
	    if($expr_addGen_3 != null) {		
	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) $expr_addGen_3.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_add");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		expr_notReturnNode.getChildren().add(TK_7Leaf);
	 	}
		// No Terminal extractor
	    if($expr_addGen_4 != null) {		
	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) $expr_addGen_4.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_add");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	
		// Create a special CST Node for terminal LPARENGen_List aggregation
		if($LPARENGen_List != null) {
	    for(int pos = 0; pos < $LPARENGen_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_8Leaf.setKind("TOKEN");
	 		TK_8Leaf.setValue($TK_8.text);
			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
			TK_8Leaf.setLine(TK_8.getLine());
	 		expr_notReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_9Leaf.setKind("TOKEN");
	 		TK_9Leaf.setValue($TK_9.text);
			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
			TK_9Leaf.setLine(TK_9.getLine());
	 		expr_notReturnNode.getChildren().add(TK_9Leaf);
	 	}
		// Terminal extractor
	    if($LPARENGen_List != null) {
		    Token t = (Token) $LPARENGen_List.get(pos); 
		    Leaf LPARENGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGen_ListLeaf.setKind("LPAREN");
			LPARENGen_ListLeaf.setValue(t.getText());
			LPARENGen_ListLeaf.setPos(t.getCharPositionInLine());
			LPARENGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(LPARENGen_ListLeaf);
		}
		// No Terminal extractor
	    if($nested_expressionsGen != null) {		
	    	PLSQL3Parser.nested_expressions_return r = (PLSQL3Parser.nested_expressions_return) $nested_expressionsGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("nested_expressions");
	    		expr_notReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// Terminal extractor
	    if($RPARENGen_List != null) {
		    Token t = (Token) $RPARENGen_List.get(pos); 
		    Leaf RPARENGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGen_ListLeaf.setKind("RPAREN");
			RPARENGen_ListLeaf.setValue(t.getText());
			RPARENGen_ListLeaf.setPos(t.getCharPositionInLine());
			RPARENGen_ListLeaf.setLine(t.getLine());
			expr_notReturnNode.getChildren().add(RPARENGen_ListLeaf);
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_not.returnNode = expr_notReturnNode;
	}
	;
	
relational_op returns [Node returnNode] 
:	EQGen=EQ 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($EQGen != null) {
			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EQGenLeaf.setKind("EQ");
			EQGenLeaf.setValue($EQGen.text);
			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
			EQGenLeaf.setLine(EQGen.getLine());
			relational_opReturnNode.getChildren().add(EQGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	} | LTHGen=LTH 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($LTHGen != null) {
			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LTHGenLeaf.setKind("LTH");
			LTHGenLeaf.setValue($LTHGen.text);
			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
			LTHGenLeaf.setLine(LTHGen.getLine());
			relational_opReturnNode.getChildren().add(LTHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	} | GTHGen=GTH 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($GTHGen != null) {
			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GTHGenLeaf.setKind("GTH");
			GTHGenLeaf.setValue($GTHGen.text);
			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
			GTHGenLeaf.setLine(GTHGen.getLine());
			relational_opReturnNode.getChildren().add(GTHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	} | NOT_EQGen=NOT_EQ 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($NOT_EQGen != null) {
			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NOT_EQGenLeaf.setKind("NOT_EQ");
			NOT_EQGenLeaf.setValue($NOT_EQGen.text);
			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
			relational_opReturnNode.getChildren().add(NOT_EQGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	} | LEQGen=LEQ 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($LEQGen != null) {
			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LEQGenLeaf.setKind("LEQ");
			LEQGenLeaf.setValue($LEQGen.text);
			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
			LEQGenLeaf.setLine(LEQGen.getLine());
			relational_opReturnNode.getChildren().add(LEQGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	} | GEQGen=GEQ 
	{
		// Create return CST Node
		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relational_opReturnNode.setKind("relational_op");
	    // Create a CST Leaf
		if($GEQGen != null) {
			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			GEQGenLeaf.setKind("GEQ");
			GEQGenLeaf.setValue($GEQGen.text);
			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
			GEQGenLeaf.setLine(GEQGen.getLine());
			relational_opReturnNode.getChildren().add(GEQGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$relational_op.returnNode = relational_opReturnNode;
	}
	;
	
expr_add returns [Node returnNode] 
:	expr_mulGen+=expr_mul ( ( PLUSGen=PLUS | MINUSGen=MINUS | DOUBLEVERTBARGen=DOUBLEVERTBAR ) expr_mulGen_1+=expr_mul )* 
	{
		// Create return CST Node
		Node expr_addReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_addReturnNode.setKind("expr_add");
	    // Create a CST Node
		if($expr_mulGen != null) {
	        for(Iterator it = $expr_mulGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_mul_return r = (PLSQL3Parser.expr_mul_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_mul");
	            	expr_addReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal expr_mulGen_1 aggregation
		if($expr_mulGen_1 != null) {
	    for(int pos = 0; pos < $expr_mulGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($PLUSGen != null) {
			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			PLUSGenLeaf.setKind("PLUS");
			PLUSGenLeaf.setValue($PLUSGen.text);
			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
			PLUSGenLeaf.setLine(PLUSGen.getLine());
			expr_addReturnNode.getChildren().add(PLUSGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MINUSGenLeaf.setKind("MINUS");
			MINUSGenLeaf.setValue($MINUSGen.text);
			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
			MINUSGenLeaf.setLine(MINUSGen.getLine());
			expr_addReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a CST Leaf
		if($DOUBLEVERTBARGen != null) {
			Leaf DOUBLEVERTBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLEVERTBARGenLeaf.setKind("DOUBLEVERTBAR");
			DOUBLEVERTBARGenLeaf.setValue($DOUBLEVERTBARGen.text);
			DOUBLEVERTBARGenLeaf.setPos(DOUBLEVERTBARGen.getCharPositionInLine());
			DOUBLEVERTBARGenLeaf.setLine(DOUBLEVERTBARGen.getLine());
			expr_addReturnNode.getChildren().add(DOUBLEVERTBARGenLeaf);
		}
		// No Terminal extractor
	    if($expr_mulGen_1 != null) {		
	    	PLSQL3Parser.expr_mul_return r = (PLSQL3Parser.expr_mul_return) $expr_mulGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_mul");
	    		expr_addReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_add.returnNode = expr_addReturnNode;
	}
	;
	
expr_mul returns [Node returnNode] 
:	expr_signGen+=expr_sign ( ( ASTERISKGen=ASTERISK | DIVIDEGen=DIVIDE ) expr_signGen_1+=expr_sign )* 
	{
		// Create return CST Node
		Node expr_mulReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_mulReturnNode.setKind("expr_mul");
	    // Create a CST Node
		if($expr_signGen != null) {
	        for(Iterator it = $expr_signGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_sign_return r = (PLSQL3Parser.expr_sign_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_sign");
	            	expr_mulReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal expr_signGen_1 aggregation
		if($expr_signGen_1 != null) {
	    for(int pos = 0; pos < $expr_signGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ASTERISKGen != null) {
			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ASTERISKGenLeaf.setKind("ASTERISK");
			ASTERISKGenLeaf.setValue($ASTERISKGen.text);
			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
			expr_mulReturnNode.getChildren().add(ASTERISKGenLeaf);
		}
	    // Create a CST Leaf
		if($DIVIDEGen != null) {
			Leaf DIVIDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIVIDEGenLeaf.setKind("DIVIDE");
			DIVIDEGenLeaf.setValue($DIVIDEGen.text);
			DIVIDEGenLeaf.setPos(DIVIDEGen.getCharPositionInLine());
			DIVIDEGenLeaf.setLine(DIVIDEGen.getLine());
			expr_mulReturnNode.getChildren().add(DIVIDEGenLeaf);
		}
		// No Terminal extractor
	    if($expr_signGen_1 != null) {		
	    	PLSQL3Parser.expr_sign_return r = (PLSQL3Parser.expr_sign_return) $expr_signGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_sign");
	    		expr_mulReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_mul.returnNode = expr_mulReturnNode;
	}
	;
	
expr_sign returns [Node returnNode] 
:	( PLUSGen=PLUS | MINUSGen=MINUS )? expr_powGen+=expr_pow 
	{
		// Create return CST Node
		Node expr_signReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_signReturnNode.setKind("expr_sign");
	    // Create a CST Leaf
		if($PLUSGen != null) {
			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			PLUSGenLeaf.setKind("PLUS");
			PLUSGenLeaf.setValue($PLUSGen.text);
			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
			PLUSGenLeaf.setLine(PLUSGen.getLine());
			expr_signReturnNode.getChildren().add(PLUSGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MINUSGenLeaf.setKind("MINUS");
			MINUSGenLeaf.setValue($MINUSGen.text);
			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
			MINUSGenLeaf.setLine(MINUSGen.getLine());
			expr_signReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a CST Node
		if($expr_powGen != null) {
	        for(Iterator it = $expr_powGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_pow_return r = (PLSQL3Parser.expr_pow_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_pow");
	            	expr_signReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_sign.returnNode = expr_signReturnNode;
	}
	;

expr_paren returns [Node returnNode] 
:	LPARENGen=LPAREN nested_expressionGen+=nested_expression RPARENGen=RPAREN 
	{
		// Create return CST Node
		Node expr_parenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_parenReturnNode.setKind("expr_paren");
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			LPARENGenLeaf.setKind("LPAREN");
			LPARENGenLeaf.setValue($LPARENGen.text);
			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
			LPARENGenLeaf.setLine(LPARENGen.getLine());
			expr_parenReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($nested_expressionGen != null) {
	        for(Iterator it = $nested_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nested_expression");
	            	expr_parenReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RPARENGenLeaf.setKind("RPAREN");
			RPARENGenLeaf.setValue($RPARENGen.text);
			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
			RPARENGenLeaf.setLine(RPARENGen.getLine());
			expr_parenReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$expr_paren.returnNode = expr_parenReturnNode;
	}
	;
	
expr_pow returns [Node returnNode] 
:	expr_exprGen+=expr_expr ( EXPONENTGen_List+=EXPONENT expr_exprGen_1+=expr_expr )* 
	{
		// Create return CST Node
		Node expr_powReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_powReturnNode.setKind("expr_pow");
	    // Create a CST Node
		if($expr_exprGen != null) {
	        for(Iterator it = $expr_exprGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_expr_return r = (PLSQL3Parser.expr_expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_expr");
	            	expr_powReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal EXPONENTGen_List aggregation
		if($EXPONENTGen_List != null) {
	    for(int pos = 0; pos < $EXPONENTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($EXPONENTGen_List != null) {
		    Token t = (Token) $EXPONENTGen_List.get(pos); 
		    Leaf EXPONENTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EXPONENTGen_ListLeaf.setKind("EXPONENT");
			EXPONENTGen_ListLeaf.setValue(t.getText());
			EXPONENTGen_ListLeaf.setPos(t.getCharPositionInLine());
			EXPONENTGen_ListLeaf.setLine(t.getLine());
			expr_powReturnNode.getChildren().add(EXPONENTGen_ListLeaf);
		}
		// No Terminal extractor
	    if($expr_exprGen_1 != null) {		
	    	PLSQL3Parser.expr_expr_return r = (PLSQL3Parser.expr_expr_return) $expr_exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr_expr");
	    		expr_powReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$expr_pow.returnNode = expr_powReturnNode;
	}
	;
	
expr_expr returns [Node returnNode] 
:	expr_parenGen+=expr_paren 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($expr_parenGen != null) {
	        for(Iterator it = $expr_parenGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.expr_paren_return r = (PLSQL3Parser.expr_paren_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr_paren");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
	|	function_expressionGen+=function_expression 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($function_expressionGen != null) {
	        for(Iterator it = $function_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.function_expression_return r = (PLSQL3Parser.function_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_expression");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
//	|	( compound_expression ) => compound_expression
	|	case_expressionGen+=case_expression 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($case_expressionGen != null) {
	        for(Iterator it = $case_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.case_expression_return r = (PLSQL3Parser.case_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("case_expression");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
	|	cursor_expressionGen+=cursor_expression 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($cursor_expressionGen != null) {
	        for(Iterator it = $cursor_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.cursor_expression_return r = (PLSQL3Parser.cursor_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cursor_expression");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
	|	simple_expressionGen+=simple_expression 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($simple_expressionGen != null) {
	        for(Iterator it = $simple_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.simple_expression_return r = (PLSQL3Parser.simple_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("simple_expression");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
	|	select_expressionGen+=select_expression 
	{
		// Create return CST Node
		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expr_exprReturnNode.setKind("expr_expr");
	    // Create a CST Node
		if($select_expressionGen != null) {
	        for(Iterator it = $select_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("select_expression");
	            	expr_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr_expr.returnNode = expr_exprReturnNode;
	}
//	|	( special_expression ) => special_expression
//	|	datetime_expression
//	|	interval_expression
//	|	object_access_expression
//	|	scalar_subquery_expression
//	|	model_expression
//	|	type_constructor_expression
//	|	variable_expression
//	:	'NULL' | NUMBER | QUOTED_STRING | IDENTIFIER
	;

integer_expr returns [Node returnNode] 
:	sql_expressionGen+=sql_expression 
	{
		// Create return CST Node
		Node integer_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		integer_exprReturnNode.setKind("integer_expr");
	    // Create a CST Node
		if($sql_expressionGen != null) {
	        for(Iterator it = $sql_expressionGen.iterator(); it.hasNext(); )  { 
	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("sql_expression");
	            	integer_exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$integer_expr.returnNode = integer_exprReturnNode;
	}
	;


/* Keys */

keyA returns [Node returnNode] 
: TK_0='A' 
	{
		// Create return CST Node
		Node keyAReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyAReturnNode.setKind("keyA");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyAReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyA.returnNode = keyAReturnNode;
	};
keyAUTOMATIC returns [Node returnNode] 
: TK_0='AUTOMATIC' 
	{
		// Create return CST Node
		Node keyAUTOMATICReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyAUTOMATICReturnNode.setKind("keyAUTOMATIC");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyAUTOMATICReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyAUTOMATIC.returnNode = keyAUTOMATICReturnNode;
	};
keyCOUNT returns [Node returnNode] 
: TK_0='COUNT' 
	{
		// Create return CST Node
		Node keyCOUNTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCOUNTReturnNode.setKind("keyCOUNT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCOUNTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCOUNT.returnNode = keyCOUNTReturnNode;
	};
keyCROSS returns [Node returnNode] 
: TK_0='CROSS' 
	{
		// Create return CST Node
		Node keyCROSSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCROSSReturnNode.setKind("keyCROSS");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCROSSReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCROSS.returnNode = keyCROSSReturnNode;
	};
keyCUBE returns [Node returnNode] 
: TK_0='CUBE' 
	{
		// Create return CST Node
		Node keyCUBEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCUBEReturnNode.setKind("keyCUBE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCUBEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCUBE.returnNode = keyCUBEReturnNode;
	};
keyCURRENT_OF returns [Node returnNode] 
: TK_0='CURRENT_OF' 
	{
		// Create return CST Node
		Node keyCURRENT_OFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCURRENT_OFReturnNode.setKind("keyCURRENT_OF");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCURRENT_OFReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCURRENT_OF.returnNode = keyCURRENT_OFReturnNode;
	};
keyDAY returns [Node returnNode] 
: TK_0='DAY' 
	{
		// Create return CST Node
		Node keyDAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyDAYReturnNode.setKind("keyDAY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyDAYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyDAY.returnNode = keyDAYReturnNode;
	};
keyDBTIMEZONE returns [Node returnNode] 
: TK_0='DBTIMEZONE' 
	{
		// Create return CST Node
		Node keyDBTIMEZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyDBTIMEZONEReturnNode.setKind("keyDBTIMEZONE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyDBTIMEZONEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyDBTIMEZONE.returnNode = keyDBTIMEZONEReturnNode;
	};
keyDECLARE returns [Node returnNode] 
: TK_0='DECLARE' 
	{
		// Create return CST Node
		Node keyDECLAREReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyDECLAREReturnNode.setKind("keyDECLARE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyDECLAREReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyDECLARE.returnNode = keyDECLAREReturnNode;
	};
keyDECREMENT returns [Node returnNode] 
: TK_0='DECREMENT' 
	{
		// Create return CST Node
		Node keyDECREMENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyDECREMENTReturnNode.setKind("keyDECREMENT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyDECREMENTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyDECREMENT.returnNode = keyDECREMENTReturnNode;
	};
keyDIMENSION returns [Node returnNode] 
: TK_0='DIMENSION' 
	{
		// Create return CST Node
		Node keyDIMENSIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyDIMENSIONReturnNode.setKind("keyDIMENSION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyDIMENSIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyDIMENSION.returnNode = keyDIMENSIONReturnNode;
	};
keyEMPTY returns [Node returnNode] 
: TK_0='EMPTY' 
	{
		// Create return CST Node
		Node keyEMPTYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyEMPTYReturnNode.setKind("keyEMPTY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyEMPTYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyEMPTY.returnNode = keyEMPTYReturnNode;
	};
keyEQUALS_PATH returns [Node returnNode] 
: TK_0='EQUALS_PATH' 
	{
		// Create return CST Node
		Node keyEQUALS_PATHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyEQUALS_PATHReturnNode.setKind("keyEQUALS_PATH");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyEQUALS_PATHReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyEQUALS_PATH.returnNode = keyEQUALS_PATHReturnNode;
	};
keyESCAPE returns [Node returnNode] 
: TK_0='ESCAPE' 
	{
		// Create return CST Node
		Node keyESCAPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyESCAPEReturnNode.setKind("keyESCAPE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyESCAPEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyESCAPE.returnNode = keyESCAPEReturnNode;
	};
keyFIRST returns [Node returnNode] 
: TK_0='FIRST' 
	{
		// Create return CST Node
		Node keyFIRSTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyFIRSTReturnNode.setKind("keyFIRST");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyFIRSTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyFIRST.returnNode = keyFIRSTReturnNode;
	};
keyFULL returns [Node returnNode] 
: TK_0='FULL' 
	{
		// Create return CST Node
		Node keyFULLReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyFULLReturnNode.setKind("keyFULL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyFULLReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyFULL.returnNode = keyFULLReturnNode;
	};
keyGROUPING returns [Node returnNode] 
: TK_0='GROUPING' 
	{
		// Create return CST Node
		Node keyGROUPINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyGROUPINGReturnNode.setKind("keyGROUPING");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyGROUPINGReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyGROUPING.returnNode = keyGROUPINGReturnNode;
	};
keyIGNORE returns [Node returnNode] 
: TK_0='IGNORE' 
	{
		// Create return CST Node
		Node keyIGNOREReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyIGNOREReturnNode.setKind("keyIGNORE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyIGNOREReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyIGNORE.returnNode = keyIGNOREReturnNode;
	};
keyINCREMENT returns [Node returnNode] 
: TK_0='INCREMENT' 
	{
		// Create return CST Node
		Node keyINCREMENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyINCREMENTReturnNode.setKind("keyINCREMENT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyINCREMENTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyINCREMENT.returnNode = keyINCREMENTReturnNode;
	};
keyINFINITE returns [Node returnNode] 
: TK_0='INFINITE' 
	{
		// Create return CST Node
		Node keyINFINITEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyINFINITEReturnNode.setKind("keyINFINITE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyINFINITEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyINFINITE.returnNode = keyINFINITEReturnNode;
	};
keyINNER returns [Node returnNode] 
: TK_0='INNER' 
	{
		// Create return CST Node
		Node keyINNERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyINNERReturnNode.setKind("keyINNER");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyINNERReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyINNER.returnNode = keyINNERReturnNode;
	};
keyINTERVAL returns [Node returnNode] 
: TK_0='INTERVAL' 
	{
		// Create return CST Node
		Node keyINTERVALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyINTERVALReturnNode.setKind("keyINTERVAL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyINTERVALReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyINTERVAL.returnNode = keyINTERVALReturnNode;
	};
keyITERATE returns [Node returnNode] 
: TK_0='ITERATE' 
	{
		// Create return CST Node
		Node keyITERATEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyITERATEReturnNode.setKind("keyITERATE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyITERATEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyITERATE.returnNode = keyITERATEReturnNode;
	};
keyJOIN returns [Node returnNode] 
: TK_0='JOIN' 
	{
		// Create return CST Node
		Node keyJOINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyJOINReturnNode.setKind("keyJOIN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyJOINReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyJOIN.returnNode = keyJOINReturnNode;
	};
keyKEEP returns [Node returnNode] 
: TK_0='KEEP' 
	{
		// Create return CST Node
		Node keyKEEPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyKEEPReturnNode.setKind("keyKEEP");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyKEEPReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyKEEP.returnNode = keyKEEPReturnNode;
	};
keyLAST returns [Node returnNode] 
: TK_0='LAST' 
	{
		// Create return CST Node
		Node keyLASTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLASTReturnNode.setKind("keyLAST");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLASTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLAST.returnNode = keyLASTReturnNode;
	};
keyLEFT returns [Node returnNode] 
: TK_0='LEFT' 
	{
		// Create return CST Node
		Node keyLEFTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLEFTReturnNode.setKind("keyLEFT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLEFTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLEFT.returnNode = keyLEFTReturnNode;
	};
keyLIKE2 returns [Node returnNode] 
: TK_0='LIKE2' 
	{
		// Create return CST Node
		Node keyLIKE2ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLIKE2ReturnNode.setKind("keyLIKE2");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLIKE2ReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLIKE2.returnNode = keyLIKE2ReturnNode;
	};
keyLIKE4 returns [Node returnNode] 
: TK_0='LIKE4' 
	{
		// Create return CST Node
		Node keyLIKE4ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLIKE4ReturnNode.setKind("keyLIKE4");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLIKE4ReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLIKE4.returnNode = keyLIKE4ReturnNode;
	};
keyLIKEC returns [Node returnNode] 
: TK_0='LIKEC' 
	{
		// Create return CST Node
		Node keyLIKECReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLIKECReturnNode.setKind("keyLIKEC");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLIKECReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLIKEC.returnNode = keyLIKECReturnNode;
	};
keyLOCAL returns [Node returnNode] 
: TK_0='LOCAL' 
	{
		// Create return CST Node
		Node keyLOCALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLOCALReturnNode.setKind("keyLOCAL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLOCALReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLOCAL.returnNode = keyLOCALReturnNode;
	};
keyMAIN returns [Node returnNode] 
: TK_0='MAIN' 
	{
		// Create return CST Node
		Node keyMAINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyMAINReturnNode.setKind("keyMAIN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyMAINReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyMAIN.returnNode = keyMAINReturnNode;
	};
keyMEASURES returns [Node returnNode] 
: TK_0='MEASURES' 
	{
		// Create return CST Node
		Node keyMEASURESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyMEASURESReturnNode.setKind("keyMEASURES");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyMEASURESReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyMEASURES.returnNode = keyMEASURESReturnNode;
	};
keyMEMBER returns [Node returnNode] 
: TK_0='MEMBER' 
	{
		// Create return CST Node
		Node keyMEMBERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyMEMBERReturnNode.setKind("keyMEMBER");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyMEMBERReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyMEMBER.returnNode = keyMEMBERReturnNode;
	};
keyMODEL returns [Node returnNode] 
: TK_0='MODEL' 
	{
		// Create return CST Node
		Node keyMODELReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyMODELReturnNode.setKind("keyMODEL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyMODELReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyMODEL.returnNode = keyMODELReturnNode;
	};
keyMONTH returns [Node returnNode] 
: TK_0='MONTH' 
	{
		// Create return CST Node
		Node keyMONTHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyMONTHReturnNode.setKind("keyMONTH");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyMONTHReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyMONTH.returnNode = keyMONTHReturnNode;
	};
keyNAN returns [Node returnNode] 
: TK_0='NAN' 
	{
		// Create return CST Node
		Node keyNANReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNANReturnNode.setKind("keyNAN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNANReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNAN.returnNode = keyNANReturnNode;
	};
keyNATURAL returns [Node returnNode] 
: TK_0='NATURAL' 
	{
		// Create return CST Node
		Node keyNATURALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNATURALReturnNode.setKind("keyNATURAL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNATURALReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNATURAL.returnNode = keyNATURALReturnNode;
	};
keyNAV returns [Node returnNode] 
: TK_0='NAV' 
	{
		// Create return CST Node
		Node keyNAVReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNAVReturnNode.setKind("keyNAV");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNAVReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNAV.returnNode = keyNAVReturnNode;
	};
keyNOCYCLE returns [Node returnNode] 
: TK_0='NOCYCLE' 
	{
		// Create return CST Node
		Node keyNOCYCLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNOCYCLEReturnNode.setKind("keyNOCYCLE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNOCYCLEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNOCYCLE.returnNode = keyNOCYCLEReturnNode;
	};
keyNULLS returns [Node returnNode] 
: TK_0='NULLS' 
	{
		// Create return CST Node
		Node keyNULLSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNULLSReturnNode.setKind("keyNULLS");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNULLSReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNULLS.returnNode = keyNULLSReturnNode;
	};
keyONLY returns [Node returnNode] 
: TK_0='ONLY' 
	{
		// Create return CST Node
		Node keyONLYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyONLYReturnNode.setKind("keyONLY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyONLYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyONLY.returnNode = keyONLYReturnNode;
	};
keyOUTER returns [Node returnNode] 
: TK_0='OUTER' 
	{
		// Create return CST Node
		Node keyOUTERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyOUTERReturnNode.setKind("keyOUTER");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyOUTERReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyOUTER.returnNode = keyOUTERReturnNode;
	};
keyPARTITION returns [Node returnNode] 
: TK_0='PARTITION' 
	{
		// Create return CST Node
		Node keyPARTITIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyPARTITIONReturnNode.setKind("keyPARTITION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyPARTITIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyPARTITION.returnNode = keyPARTITIONReturnNode;
	};
keyPRECISION returns [Node returnNode] 
: TK_0='PRECISION' 
	{
		// Create return CST Node
		Node keyPRECISIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyPRECISIONReturnNode.setKind("keyPRECISION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyPRECISIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyPRECISION.returnNode = keyPRECISIONReturnNode;
	};
keyPRESENT returns [Node returnNode] 
: TK_0='PRESENT' 
	{
		// Create return CST Node
		Node keyPRESENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyPRESENTReturnNode.setKind("keyPRESENT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyPRESENTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyPRESENT.returnNode = keyPRESENTReturnNode;
	};
keyREFERENCE returns [Node returnNode] 
: TK_0='REFERENCE' 
	{
		// Create return CST Node
		Node keyREFERENCEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREFERENCEReturnNode.setKind("keyREFERENCE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREFERENCEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREFERENCE.returnNode = keyREFERENCEReturnNode;
	};
keyREGEXP_LIKE returns [Node returnNode] 
: TK_0='REGEXP_LIKE' 
	{
		// Create return CST Node
		Node keyREGEXP_LIKEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREGEXP_LIKEReturnNode.setKind("keyREGEXP_LIKE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREGEXP_LIKEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREGEXP_LIKE.returnNode = keyREGEXP_LIKEReturnNode;
	};
keyRIGHT returns [Node returnNode] 
: TK_0='RIGHT' 
	{
		// Create return CST Node
		Node keyRIGHTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRIGHTReturnNode.setKind("keyRIGHT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRIGHTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRIGHT.returnNode = keyRIGHTReturnNode;
	};
keyROLLUP returns [Node returnNode] 
: TK_0='ROLLUP' 
	{
		// Create return CST Node
		Node keyROLLUPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyROLLUPReturnNode.setKind("keyROLLUP");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyROLLUPReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyROLLUP.returnNode = keyROLLUPReturnNode;
	};
keyRULES returns [Node returnNode] 
: TK_0='RULES' 
	{
		// Create return CST Node
		Node keyRULESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRULESReturnNode.setKind("keyRULES");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRULESReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRULES.returnNode = keyRULESReturnNode;
	};
keySECOND returns [Node returnNode] 
: TK_0='SECOND' 
	{
		// Create return CST Node
		Node keySECONDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySECONDReturnNode.setKind("keySECOND");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySECONDReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySECOND.returnNode = keySECONDReturnNode;
	};
keySECONDS returns [Node returnNode] 
: TK_0='SECONDS' 
	{
		// Create return CST Node
		Node keySECONDSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySECONDSReturnNode.setKind("keySECONDS");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySECONDSReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySECONDS.returnNode = keySECONDSReturnNode;
	};
keySEQUENTIAL returns [Node returnNode] 
: TK_0='SEQUENTIAL' 
	{
		// Create return CST Node
		Node keySEQUENTIALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySEQUENTIALReturnNode.setKind("keySEQUENTIAL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySEQUENTIALReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySEQUENTIAL.returnNode = keySEQUENTIALReturnNode;
	};
keySESSIONTIMEZONE returns [Node returnNode] 
: TK_0='SESSIONTIMEZONE' 
	{
		// Create return CST Node
		Node keySESSIONTIMEZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySESSIONTIMEZONEReturnNode.setKind("keySESSIONTIMEZONE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySESSIONTIMEZONEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySESSIONTIMEZONE.returnNode = keySESSIONTIMEZONEReturnNode;
	};
keySETS returns [Node returnNode] 
: TK_0='SETS' 
	{
		// Create return CST Node
		Node keySETSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySETSReturnNode.setKind("keySETS");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySETSReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySETS.returnNode = keySETSReturnNode;
	};
keySIBLINGS returns [Node returnNode] 
: TK_0='SIBLINGS' 
	{
		// Create return CST Node
		Node keySIBLINGSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySIBLINGSReturnNode.setKind("keySIBLINGS");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySIBLINGSReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySIBLINGS.returnNode = keySIBLINGSReturnNode;
	};
keySINGLE returns [Node returnNode] 
: TK_0='SINGLE' 
	{
		// Create return CST Node
		Node keySINGLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySINGLEReturnNode.setKind("keySINGLE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySINGLEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySINGLE.returnNode = keySINGLEReturnNode;
	};
keySOME returns [Node returnNode] 
: TK_0='SOME' 
	{
		// Create return CST Node
		Node keySOMEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySOMEReturnNode.setKind("keySOME");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySOMEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySOME.returnNode = keySOMEReturnNode;
	};
keySUBMULTISET returns [Node returnNode] 
: TK_0='SUBMULTISET' 
	{
		// Create return CST Node
		Node keySUBMULTISETReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySUBMULTISETReturnNode.setKind("keySUBMULTISET");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySUBMULTISETReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySUBMULTISET.returnNode = keySUBMULTISETReturnNode;
	};
keyTIME returns [Node returnNode] 
: TK_0='TIME' 
	{
		// Create return CST Node
		Node keyTIMEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyTIMEReturnNode.setKind("keyTIME");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyTIMEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyTIME.returnNode = keyTIMEReturnNode;
	};
keyTIMESTAMP returns [Node returnNode] 
: TK_0='TIMESTAMP' 
	{
		// Create return CST Node
		Node keyTIMESTAMPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyTIMESTAMPReturnNode.setKind("keyTIMESTAMP");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyTIMESTAMPReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyTIMESTAMP.returnNode = keyTIMESTAMPReturnNode;
	};
keyTHE returns [Node returnNode] 
: TK_0='THE' 
	{
		// Create return CST Node
		Node keyTHEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyTHEReturnNode.setKind("keyTHE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyTHEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyTHE.returnNode = keyTHEReturnNode;
	};
keyUNDER_PATH returns [Node returnNode] 
: TK_0='UNDER_PATH' 
	{
		// Create return CST Node
		Node keyUNDER_PATHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyUNDER_PATHReturnNode.setKind("keyUNDER_PATH");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyUNDER_PATHReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyUNDER_PATH.returnNode = keyUNDER_PATHReturnNode;
	};
keyUNTIL returns [Node returnNode] 
: TK_0='UNTIL' 
	{
		// Create return CST Node
		Node keyUNTILReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyUNTILReturnNode.setKind("keyUNTIL");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyUNTILReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyUNTIL.returnNode = keyUNTILReturnNode;
	};
keyUPDATED returns [Node returnNode] 
: TK_0='UPDATED' 
	{
		// Create return CST Node
		Node keyUPDATEDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyUPDATEDReturnNode.setKind("keyUPDATED");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyUPDATEDReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyUPDATED.returnNode = keyUPDATEDReturnNode;
	};
keyUPSERT returns [Node returnNode] 
: TK_0='UPSERT' 
	{
		// Create return CST Node
		Node keyUPSERTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyUPSERTReturnNode.setKind("keyUPSERT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyUPSERTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyUPSERT.returnNode = keyUPSERTReturnNode;
	};
keyWAIT returns [Node returnNode] 
: TK_0='WAIT' 
	{
		// Create return CST Node
		Node keyWAITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyWAITReturnNode.setKind("keyWAIT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyWAITReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyWAIT.returnNode = keyWAITReturnNode;
	};
keyYEAR returns [Node returnNode] 
: TK_0='YEAR' 
	{
		// Create return CST Node
		Node keyYEARReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyYEARReturnNode.setKind("keyYEAR");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyYEARReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyYEAR.returnNode = keyYEARReturnNode;
	};
keyZONE returns [Node returnNode] 
: TK_0='ZONE' 
	{
		// Create return CST Node
		Node keyZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyZONEReturnNode.setKind("keyZONE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyZONEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyZONE.returnNode = keyZONEReturnNode;
	};
keyARRAY returns [Node returnNode] 
: TK_0='ARRAY' 
	{
		// Create return CST Node
		Node keyARRAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyARRAYReturnNode.setKind("keyARRAY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyARRAYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyARRAY.returnNode = keyARRAYReturnNode;
	};
keyAUTONOMOUS_TRANSACTION returns [Node returnNode] 
: TK_0='AUTONOMOUS_TRANSACTION' 
	{
		// Create return CST Node
		Node keyAUTONOMOUS_TRANSACTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyAUTONOMOUS_TRANSACTIONReturnNode.setKind("keyAUTONOMOUS_TRANSACTION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyAUTONOMOUS_TRANSACTIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyAUTONOMOUS_TRANSACTION.returnNode = keyAUTONOMOUS_TRANSACTIONReturnNode;
	};
keyBODY returns [Node returnNode] 
: TK_0='BODY' 
	{
		// Create return CST Node
		Node keyBODYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyBODYReturnNode.setKind("keyBODY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyBODYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyBODY.returnNode = keyBODYReturnNode;
	};
keyBUILTIN returns [Node returnNode] 
: TK_0='BUILTIN' 
	{
		// Create return CST Node
		Node keyBUILTINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyBUILTINReturnNode.setKind("keyBUILTIN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyBUILTINReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyBUILTIN.returnNode = keyBUILTINReturnNode;
	};
keyBULK returns [Node returnNode] 
: TK_0='BULK' 
	{
		// Create return CST Node
		Node keyBULKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyBULKReturnNode.setKind("keyBULK");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyBULKReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyBULK.returnNode = keyBULKReturnNode;
	};
keyBYTE returns [Node returnNode] 
: TK_0='BYTE' 
	{
		// Create return CST Node
		Node keyBYTEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyBYTEReturnNode.setKind("keyBYTE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyBYTEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyBYTE.returnNode = keyBYTEReturnNode;
	};
keyCLOSE returns [Node returnNode] 
: TK_0='CLOSE' 
	{
		// Create return CST Node
		Node keyCLOSEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCLOSEReturnNode.setKind("keyCLOSE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCLOSEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCLOSE.returnNode = keyCLOSEReturnNode;
	};
keyCOLLECT returns [Node returnNode] 
: TK_0='COLLECT' 
	{
		// Create return CST Node
		Node keyCOLLECTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCOLLECTReturnNode.setKind("keyCOLLECT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCOLLECTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCOLLECT.returnNode = keyCOLLECTReturnNode;
	};
keyCURSOR returns [Node returnNode] 
: TK_0='CURSOR' 
	{
		// Create return CST Node
		Node keyCURSORReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyCURSORReturnNode.setKind("keyCURSOR");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyCURSORReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyCURSOR.returnNode = keyCURSORReturnNode;
	};
keyELSIF returns [Node returnNode] 
: TK_0='ELSIF' 
	{
		// Create return CST Node
		Node keyELSIFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyELSIFReturnNode.setKind("keyELSIF");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyELSIFReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyELSIF.returnNode = keyELSIFReturnNode;
	}; 
keyEXCEPTION_INIT returns [Node returnNode] 
: TK_0='EXCEPTION_INIT' 
	{
		// Create return CST Node
		Node keyEXCEPTION_INITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyEXCEPTION_INITReturnNode.setKind("keyEXCEPTION_INIT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyEXCEPTION_INITReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyEXCEPTION_INIT.returnNode = keyEXCEPTION_INITReturnNode;
	};
keyEXIT returns [Node returnNode] 
: TK_0='EXIT' 
	{
		// Create return CST Node
		Node keyEXITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyEXITReturnNode.setKind("keyEXIT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyEXITReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyEXIT.returnNode = keyEXITReturnNode;
	};
keyFIPSFLAG returns [Node returnNode] 
: TK_0='FIPSFLAG' 
	{
		// Create return CST Node
		Node keyFIPSFLAGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyFIPSFLAGReturnNode.setKind("keyFIPSFLAG");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyFIPSFLAGReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyFIPSFLAG.returnNode = keyFIPSFLAGReturnNode;
	};
keyFUNCTION returns [Node returnNode] 
: TK_0='FUNCTION' 
	{
		// Create return CST Node
		Node keyFUNCTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyFUNCTIONReturnNode.setKind("keyFUNCTION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyFUNCTIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyFUNCTION.returnNode = keyFUNCTIONReturnNode;
	};
keyINTERFACE returns [Node returnNode] 
: TK_0='INTERFACE' 
	{
		// Create return CST Node
		Node keyINTERFACEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyINTERFACEReturnNode.setKind("keyINTERFACE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyINTERFACEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyINTERFACE.returnNode = keyINTERFACEReturnNode;
	};
keyLOOP returns [Node returnNode] 
: TK_0='LOOP' 
	{
		// Create return CST Node
		Node keyLOOPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyLOOPReturnNode.setKind("keyLOOP");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyLOOPReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyLOOP.returnNode = keyLOOPReturnNode;
	}; 
keyNEW returns [Node returnNode] 
: TK_0='NEW' 
	{
		// Create return CST Node
		Node keyNEWReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNEWReturnNode.setKind("keyNEW");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNEWReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNEW.returnNode = keyNEWReturnNode;
	};
keyNEW_NAMES returns [Node returnNode] 
: TK_0='NEW_NAMES' 
	{
		// Create return CST Node
		Node keyNEW_NAMESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyNEW_NAMESReturnNode.setKind("keyNEW_NAMES");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyNEW_NAMESReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyNEW_NAMES.returnNode = keyNEW_NAMESReturnNode;
	};
keyOPEN returns [Node returnNode] 
: TK_0='OPEN' 
	{
		// Create return CST Node
		Node keyOPENReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyOPENReturnNode.setKind("keyOPEN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyOPENReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyOPEN.returnNode = keyOPENReturnNode;
	};
keyOUT returns [Node returnNode] 
: TK_0='OUT' 
	{
		// Create return CST Node
		Node keyOUTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyOUTReturnNode.setKind("keyOUT");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyOUTReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyOUT.returnNode = keyOUTReturnNode;
	}; 
keyPACKAGE returns [Node returnNode] 
: TK_0='PACKAGE' 
	{
		// Create return CST Node
		Node keyPACKAGEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyPACKAGEReturnNode.setKind("keyPACKAGE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyPACKAGEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyPACKAGE.returnNode = keyPACKAGEReturnNode;
	}; 
keyPRAGMA returns [Node returnNode] 
: TK_0='PRAGMA' 
	{
		// Create return CST Node
		Node keyPRAGMAReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyPRAGMAReturnNode.setKind("keyPRAGMA");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyPRAGMAReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyPRAGMA.returnNode = keyPRAGMAReturnNode;
	}; 
keyRAISE returns [Node returnNode] 
: TK_0='RAISE' 
	{
		// Create return CST Node
		Node keyRAISEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRAISEReturnNode.setKind("keyRAISE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRAISEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRAISE.returnNode = keyRAISEReturnNode;
	}; 
keyRANGE returns [Node returnNode] 
: TK_0='RANGE' 
	{
		// Create return CST Node
		Node keyRANGEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRANGEReturnNode.setKind("keyRANGE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRANGEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRANGE.returnNode = keyRANGEReturnNode;
	};
keyREAD returns [Node returnNode] 
: TK_0='READ' 
	{
		// Create return CST Node
		Node keyREADReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREADReturnNode.setKind("keyREAD");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREADReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREAD.returnNode = keyREADReturnNode;
	};
keyRECORD returns [Node returnNode] 
: TK_0='RECORD' 
	{
		// Create return CST Node
		Node keyRECORDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRECORDReturnNode.setKind("keyRECORD");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRECORDReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRECORD.returnNode = keyRECORDReturnNode;
	}; 
keyREF returns [Node returnNode] 
: TK_0='REF' 
	{
		// Create return CST Node
		Node keyREFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREFReturnNode.setKind("keyREF");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREFReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREF.returnNode = keyREFReturnNode;
	};
keyREPLACE returns [Node returnNode] 
: TK_0='REPLACE' 
	{
		// Create return CST Node
		Node keyREPLACEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREPLACEReturnNode.setKind("keyREPLACE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREPLACEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREPLACE.returnNode = keyREPLACEReturnNode;
	};
keyRESTRICT_REFERENCES returns [Node returnNode] 
: TK_0='RESTRICT_REFERENCES' 
	{
		// Create return CST Node
		Node keyRESTRICT_REFERENCESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRESTRICT_REFERENCESReturnNode.setKind("keyRESTRICT_REFERENCES");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRESTRICT_REFERENCESReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRESTRICT_REFERENCES.returnNode = keyRESTRICT_REFERENCESReturnNode;
	};
keyRETURN returns [Node returnNode] 
: TK_0='RETURN' 
	{
		// Create return CST Node
		Node keyRETURNReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRETURNReturnNode.setKind("keyRETURN");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRETURNReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRETURN.returnNode = keyRETURNReturnNode;
	}; 
keyRETURNING returns [Node returnNode] 
: TK_0='RETURNING' 
	{
		// Create return CST Node
		Node keyRETURNINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyRETURNINGReturnNode.setKind("keyRETURNING");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyRETURNINGReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyRETURNING.returnNode = keyRETURNINGReturnNode;
	}; 
keyREVERSE returns [Node returnNode] 
: TK_0='REVERSE' 
	{
		// Create return CST Node
		Node keyREVERSEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyREVERSEReturnNode.setKind("keyREVERSE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyREVERSEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyREVERSE.returnNode = keyREVERSEReturnNode;
	};
keyROLLBACK returns [Node returnNode] 
: TK_0='ROLLBACK' 
	{
		// Create return CST Node
		Node keyROLLBACKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyROLLBACKReturnNode.setKind("keyROLLBACK");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyROLLBACKReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyROLLBACK.returnNode = keyROLLBACKReturnNode;
	};
keySERIALLY_REUSABLE returns [Node returnNode] 
: TK_0='SERIALLY_REUSABLE' 
	{
		// Create return CST Node
		Node keySERIALLY_REUSABLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySERIALLY_REUSABLEReturnNode.setKind("keySERIALLY_REUSABLE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySERIALLY_REUSABLEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySERIALLY_REUSABLE.returnNode = keySERIALLY_REUSABLEReturnNode;
	};
keySUBTYPE returns [Node returnNode] 
: TK_0='SUBTYPE' 
	{
		// Create return CST Node
		Node keySUBTYPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keySUBTYPEReturnNode.setKind("keySUBTYPE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keySUBTYPEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keySUBTYPE.returnNode = keySUBTYPEReturnNode;
	};
keyTRANSACTION returns [Node returnNode] 
: TK_0='TRANSACTION' 
	{
		// Create return CST Node
		Node keyTRANSACTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyTRANSACTIONReturnNode.setKind("keyTRANSACTION");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyTRANSACTIONReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyTRANSACTION.returnNode = keyTRANSACTIONReturnNode;
	};
keyTYPE returns [Node returnNode] 
: TK_0='TYPE' 
	{
		// Create return CST Node
		Node keyTYPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyTYPEReturnNode.setKind("keyTYPE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyTYPEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyTYPE.returnNode = keyTYPEReturnNode;
	};
keyUSING returns [Node returnNode] 
: TK_0='USING' 
	{
		// Create return CST Node
		Node keyUSINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyUSINGReturnNode.setKind("keyUSING");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyUSINGReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyUSING.returnNode = keyUSINGReturnNode;
	};
keyVARRAY returns [Node returnNode] 
: TK_0='VARRAY' 
	{
		// Create return CST Node
		Node keyVARRAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyVARRAYReturnNode.setKind("keyVARRAY");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyVARRAYReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyVARRAY.returnNode = keyVARRAYReturnNode;
	};
keyVARYING returns [Node returnNode] 
: TK_0='VARYING' 
	{
		// Create return CST Node
		Node keyVARYINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyVARYINGReturnNode.setKind("keyVARYING");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyVARYINGReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyVARYING.returnNode = keyVARYINGReturnNode;
	};
keyWHILE returns [Node returnNode] 
: TK_0='WHILE' 
	{
		// Create return CST Node
		Node keyWHILEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyWHILEReturnNode.setKind("keyWHILE");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyWHILEReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyWHILE.returnNode = keyWHILEReturnNode;
	}; 
keyWORK returns [Node returnNode] 
: TK_0='WORK' 
	{
		// Create return CST Node
		Node keyWORKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		keyWORKReturnNode.setKind("keyWORK");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		keyWORKReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$keyWORK.returnNode = keyWORKReturnNode;
	};

/* Lexer Rules */

QUOTED_STRING
	:	( 'n' )? '\'' ( '\'\'' | ~('\'') )* '\''
	;
ID /*options { testLiterals=true; }*/
    :	('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' )*
    |	DOUBLEQUOTED_STRING
    ;
SEMI
	:	';'
	;
COLON
	:	':'
	;
DOUBLEDOT
	:	POINT POINT
	;
DOT
	:	POINT
	;
fragment
POINT
	:	'.'
	;
COMMA
	:	','
	;
EXPONENT
	:	'**'
	;
ASTERISK
	:	'*'
	;
AT_SIGN
	:	'@'
	;
RPAREN
	:	')'
	;
LPAREN
	:	'('
	;
RBRACK
	:	']'
	;
LBRACK
	:	'['
	;
PLUS
	:	'+'
	;
MINUS
	:	'-'
	;
DIVIDE
	:	'/'
	;
EQ
	:	'='
	;
PERCENTAGE
	:	'%'
	;
LLABEL
	:	'<<'
	;
RLABEL
	:	'>>'
	;
ASSIGN
	:	':='
	;
ARROW
	:	'=>'
	;
VERTBAR
	:	'|'
	;
DOUBLEVERTBAR
	:	'||'
	;
NOT_EQ
	:	'<>' | '!=' | '^='
	;
LTH
	:	'<'
	;
LEQ
	:	'<='
	;
GTH
	:	'>'
	;
GEQ
	:	'>='
	;
NUMBER
	:	(	N POINT N |	POINT N	| N	) ( 'E' ( PLUS | MINUS )? N )?
    ;
fragment
N
	: '0' .. '9' ( '0' .. '9' )*
	;
QUOTE
	:	'\''
	;
fragment
DOUBLEQUOTED_STRING
	:	'"' ( ~('"') )* '"'
	;
WS	:	(' '|'\r'|'\t'|'\n') {$channel=HIDDEN;}
	;
SL_COMMENT
	:	'--' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
	;
ML_COMMENT
	:	'/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
	;
TYPE_ATTR
	:	'%TYPE'
	;
ROWTYPE_ATTR
	:	'%ROWTYPE'
	;
NOTFOUND_ATTR
	:	'%NOTFOUND'
	;
FOUND_ATTR
	:	'%FOUND'
	;
ISOPEN_ATTR
	:	'%ISOPEN'
	;
ROWCOUNT_ATTR
	:	'%ROWCOUNT'
	;
BULK_ROWCOUNT_ATTR
	:	'%BULK_ROWCOUNT'
	;
CHARSET_ATTR
	:	'%CHARSET'
	;

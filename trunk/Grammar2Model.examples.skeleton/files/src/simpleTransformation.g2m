--------------------------------------------------------------------------------------
-- Gra2MoL transformation definition
-- Author: Martina De Sanctis
--------------------------------------------------------------------------------------

rule 'createAemiliaSpec'
	from file f
	to AEmiliaSpecification 
	queries
		mains : //#archi_type;
	mappings
		archiTypeDecl = mains;
end_rule

rule 'mapArchiType'
	from archi_type at  
	to ArchiType 
	queries
		name : /at/#word;
		intest : /at//#archi_header;
		aet : /at//#archi_elem_types;
		topology : /at//#archi_topology;
	mappings
		atName = extract name; 		
		header = intest;
		aetDeclaration = aet;
		atDeclaration = topology;
end_rule

rule 'mapArchiHeader'
	from archi_header ah
	to Headers::AT_Header
	queries
		const : /ah/init_constant_list/#init_constant;	
	mappings
		initConst = const;
end_rule

rule 'constInitialization'
	from init_constant i
	to Headers::ConstInit
	queries
		name : /i/constName/#word;
		typeNormal : /i/dataType/#normalType{TOKEN.exists};
		typeSpecial : /i/dataType/#specialType{TOKEN.exists};
		exp : /i/#expr;
	mappings
		name = extract name;
		if(typeNormal.hasResults) then
			initConstData = typeNormal;
		else
			initConstData = typeSpecial;
		end_if
		initConstExpr = exp;
end_rule

rule 'mapSpecialType'
	from specialType st
	to DataType::Special
	queries
		typeName : /#st;
	mappings
		type = typeName.TOKEN;
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("boolean")} nt
	to DataType::Boolean
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("real")} nt
	to DataType::Real
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("integer")  && !TOKEN[1].exists && !TOKEN[2].exists} nt
	to DataType::Integer
	queries		
	mappings		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("integer") && TOKEN[1].exists && TOKEN[2].exists} nt
	to DataType::RangeInt
	queries
		minv : /#nt;
		maxv : /#nt;	
	mappings
		minVal = minv.DIGIT[0];
		maxVal = maxv.DIGIT[1];		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("list")} nt
	to DataType::List
	queries
		type : /nt/#elemType;
	mappings	
		elementType = type.TOKEN;	
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("array")} nt
	to DataType::Array
	queries
		len : /#nt;
		type : /nt/#elemType;
	mappings
		lenght = len.DIGIT;
		elemType = type.TOKEN;		
end_rule

rule 'mapNormalType'
	from normalType{TOKEN.eq("record")} nt
	to DataType::Record
	queries
		var : /nt/#recordList;
	mappings
		field_decl_seq = extract var;
end_rule

rule 'mapArchiElemTypes'
	from archi_elem_types aet
	to ArchiElemTypes
	queries
		elemTypes : /aet//#elem_type;		
	mappings
		etDeclaration = elemTypes;
end_rule

rule 'mapElemTypes'
	from elem_type et
	to ElemType
	queries
		name : /et/#word;
		elemHeader : /et/#et_header;
		inputInt : /et//interaction_list_input//#interaction;	
		outputInt : /et//interaction_list_output//#interaction;
		behavior : /et/#behavior_equation_list;
	mappings
		etName = extract name;
		elemHeader = elemHeader;
		iiDecl = inputInt;
		oiDecl = outputInt;
		behaviorDecl = behavior;
end_rule

rule 'mapBehaviorEquations'
	from behavior_equation_list bel
	to Behavior::Behavior
	queries
		first_eq : /bel/#first_equation;
		list : /bel/equations_list/#equations;
	mappings
		equations = first_eq;
		equations = list;
end_rule

rule 'mapEquation'
	from first_equation equation
	to Behavior::BehavEquation
	queries
		name : /equation/eqName/#word;
		h : /equation/#behavior_header_first;
		process : /equation/#processTerm;
	mappings
		name = extract name;
		pt = process;
		bHeader = h;
end_rule

rule 'mapHeaderFirstEq'
	from behavior_header_first bhf
	to Headers::BehavHeader
	queries
		leftPart : /bhf/#leftSide_first;
		rightPart : /bhf/#rightSide;
	mappings
		left = leftPart;
		right = rightPart;
end_rule

rule 'mapLeftSideFirst'
	from leftSide_first lf
	to Headers::LeftSide
	queries
		var : /lf/#varInit;
	mappings
		initVar = var;
end_rule

rule 'mapVarInitialization'
	from varInit vi
	to Headers::VarInit
	queries
		name : /vi/#word;
		type : /vi/#normalType;
		exp : /vi/#expr;
	mappings
		name = extract name;
		initVarType = type;
		initVarExpr = exp;
end_rule

rule 'mapRightSideFirst'
	from rightSide rs
	to Headers::RightSide
	queries
		loc : /rs/#local;
	mappings
		localDef = loc;
end_rule

rule 'mapLocalVar'
	from local loc
	to Headers::Local
	queries
		name : /loc/#word;
		type : /loc/#normalType;
	mappings
		name = extract name;
		localType = type;
end_rule

rule 'mapEquation'
	from equations equation
	to Behavior::BehavEquation
	queries
		name : /equation/eqName/#word;
		h : /equation/#behavior_header;
		process : /equation/#processTerm;
	mappings
		name = extract name;
		bHeader = h;
		pt = process;
end_rule

rule 'mapHeaderEq'
	from behavior_header bh
	to Headers::BehavHeader
	queries
		leftPart : /bh/#leftSide;
		rightPart : /bh/#rightSide;
	mappings
		left = leftPart;
		right = rightPart;
end_rule

rule 'mapLeftSide'
	from leftSide lf
	to Headers::LeftSide
	queries
		var : /lf/#var;
	mappings
		varDef = var;
end_rule

rule 'mapVar'
	from var v
	to Headers::Var
	queries
		name : /v/#word;
		type : /v/#normalType;
	mappings
		name = extract name;
		varType = type;
end_rule

rule 'mapElemHeader'
	from et_header eh
	to Headers::ET_Header
	queries
		const : /eh/constant_list/#constant;	
	mappings
		costant = const;
end_rule

rule 'constantDef'
	from constant i
	to Headers::Const
	queries
		name : /i/constName/#word;
		typeNormal : /i/dataType/#normalType{TOKEN.exists};
		typeSpecial : /i/dataType/#specialType{TOKEN.exists};
	mappings
		name = extract name;
		if(typeNormal.hasResults) then
			constantData = typeNormal;
		else
			constantData = typeSpecial;
		end_if
end_rule

rule 'mapInteractionListInput'
	from interaction int
	to InputInteraction
	queries
		name : /int/interactionName/#word;
		type : /int/#interaction_type;
	mappings
		intName = extract name;
		type = type.TOKEN;

end_rule

rule 'mapInteractionListOutput'
	from interaction int
	to OutputInteraction
	queries
		name : /int/interactionName/#word;	
		type : /int/#interaction_type;
	mappings
		intName = extract name;
		type = type.TOKEN;

end_rule

rule 'mapArchiTopology'
	from archi_topology at
	to ArchiTopology
	queries
		istances : /at/archi_elem_instances//#instances;	
		attach : /at/archi_attachments/attachment_list/#attachment;	
	mappings
		aeiDecl = istances;
		attDecl = attach;
end_rule

rule 'mapIstances'
	from instances i
	to ArchiElemInstance
	queries
		name : /i//istanceName/#word;
		param : /i//parList/#word;
		type : /i//elementType//#word;
	mappings
		instanceName = extract name;
		actualParam = param.LETTER;
		TypeOf = type.TOKEN;
end_rule

rule 'mapAttachement'
	from attachment att
	to Attachement 
	queries
		end : /att/#istanceNameTo;
		start : /att/#istanceNameFrom;
	mappings
		end = end;
		start = start;
end_rule

rule 'mapTo'
	from istanceNameTo name
	to To
	queries
		
	mappings
		
end_rule

rule 'mapFrom'
	from istanceNameFrom name
	to From
	queries
		
	mappings
		
end_rule
	
--------------------------------------------------
--RULES FOR PROCESS TERM
--------------------------------------------------

rule'mapProcessTermAction'
	from processTerm/#action{TOKEN.exists} pt
	to Behavior::ActionProcess
	queries
		next : /pt/process_term_1/#processTerm{TOKEN.exists};
		next2 : /pt/process_term_1/#behavEqInvocation{TOKEN.exists};
		action : /pt/#action;
	mappings
		if(next.hasResults) then
			process = next;
		else
			process = next2;
		end_if
		act = action;
end_rule

rule 'mapAction'
	from action act
	to Behavior::Action
	queries
		name : /act/actionName/#word;
		type : /act/#action_type{TOKEN.exists};
		rate : /act/#action_rate;
	mappings
		name = extract name;
		type = type;
		rate = rate;
end_rule

rule'mapActionTypeInput'
 	from action_type{TOKEN.eq("?")} at
 	to Behavior::ActionInput 
 	queries
 		var : /at/#word{TOKEN.exists};
 	mappings
 		if(var.hasResults)then
 			var = var.LETTER;
 		end_if
end_rule

rule'mapActionTypeOutput'
 	from action_type{TOKEN.eq("!")} at
 	to Behavior::ActionOutput 
 	queries
 		var : /at/#expr{TOKEN.exists};
 	mappings
 		if(var.hasResults)then
 			exprOutput = var;
 		end_if
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("exp")} ar
 	to Behavior::RateExp
 	queries
 		expr : /ar/#expr;
 	mappings
 		expr = expr;
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("inf") && !TOKEN[1].exists && !TOKEN[2].exists} ar
 	to Behavior::RateInf
 	queries
 	mappings
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("inf") && TOKEN[1].exists && TOKEN[2].exists} ar
 	to Behavior::RateInf
 	queries
 		prio : /ar/#expr[0];
 		wei : /ar/#expr[1];
 	mappings
 		if(prio.hasResults)then
 			inf_priority = prio;
 		end_if
 		if(wei.hasResults)then
 			inf_weight = wei;
 		end_if
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("_") && !TOKEN[1].exists && !TOKEN[2].exists} ar
 	to Behavior::Rate_
 	queries
 	mappings
end_rule

rule'mapActionRate'
 	from action_rate{TOKEN.eq("_") && TOKEN[1].exists && TOKEN[2].exists} ar
 	to Behavior::Rate_
 	queries
 		prio : /ar/#expr[0];
 		wei : /ar/#expr[1];
 	mappings
 		if(prio.hasResults)then
 			priority = prio;
 		end_if
 		if(wei.hasResults)then
 			weight = wei;
 		end_if
end_rule

rule'mapEquationInvocation'
	from behavEqInvocation bei
	to Behavior::BehavProcess
	queries
		exp : /bei/expressionList/#expr;
	mappings
		if(exp.hasResults)then
 			exprs = exp;
 		end_if
		
end_rule

rule'mapProcessTermChoice'
	from processTerm{TOKEN.exists && TOKEN.eq("choice")} choice
	to Behavior::ChoiceProcess
	queries
		next : /choice/process_term_2/#processTerm{TOKEN.exists};
		cond : /choice/process_term_2/condExpr/#expr;	
	mappings
		processes = next;
		condition = cond;
end_rule

rule 'mapProcessTermStop'
	from processTerm{TOKEN.exists && TOKEN.eq("stop")} stop
	to Behavior::Stop
	queries		
	mappings		
end_rule

--------------------------------------------------
--RULES FOR EXPRESSIONS
--------------------------------------------------

rule 'mapExpression'  
	from expr//arithExpr a
	to Expressions::ArithExpr
	queries
		left : /a//#term[0];
		op : /a//#arithOp;
		right : /a//#term[1];
	mappings
		leftExprArith = left;
		operator = op.TOKEN;
		rightExprArith = right;
end_rule

rule 'mapExpression'  
	from expr//relationalExpr a
	to Expressions::RelationalExpr
	queries
		left : /a//#term[0];
		op : /a//#relatOp;
		right : /a//#term[1];
	mappings
		leftExprRel = left;
		operator = op.TOKEN;
		rightExprRel = right;
end_rule

rule 'mapExpression'  
	from expr//booleanExpr a
	to Expressions::BooleanExpr
	queries
		left : /a//#term[0];
		op : /a//#boolOp;
		right : /a//#term[1];
	mappings
		if(left.hasResults)then
			leftExprBool = left;
		end_if
		operator = op.TOKEN;
		rightExprBool = right;
end_rule

rule 'mapExpression'  
	from expr//recordExpr a
	to Expressions::RecordExpr
	queries
		op : /a//#recordOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		record_operands = operands;
end_rule

rule 'mapExpression'  
	from expr//arrayExpr a
	to Expressions::ArrayExpr
	queries
		op : /a//#arrayOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		array_operands = operands;
end_rule

rule 'mapExpression'  
	from expr//listExpr a
	to Expressions::ListExpr
	queries
		op : /a//#listOp;
		operands : /a//#expr;
	mappings
		operation = op.TOKEN;
		list_operands = operands;
end_rule

rule 'mapExpression'  
	from expr//mathExpr a
	to Expressions::MathFunctions
	queries
		left : /a//#expr[0];
		op : /a//#mathOp;
		right : /a//#expr[1];
	mappings
		leftExprMath = left;
		name = op.TOKEN;
		if(right.hasResults)then
			rightExprMath = right;
		end_if
end_rule

rule 'mapExpression'  
	from expr//numGenExpr a
	to Expressions::Pseudo_random_num_gen
	queries
	    op : /a//#numGenOp;
		firstEl : /a//#expr[0];		
		second : /a//#expr[1];
		third : /a//#expr[2];
	mappings
		name = op.TOKEN;
		firstNumGenOp = firstEl;
		if(second.hasResults)then
			secondNumGenOp = second;
		end_if
		if(third.hasResults)then
			thirdNumGenOp = third;
		end_if
end_rule

----TERM RULES

rule 'mapTerm'
	from term t
	to Expressions::IdentExpr
	queries
		name : //#t;
		--truthVal : /t//#word{TOKEN.eq("true") || TOKEN.eq("false")};
		typeWord : /t//#word;
		typeNum : /t//#number;
	mappings
		name = extract name;
		if(typeNum.hasResults)then
			type = "NUMERIC_CONST";
		end_if
		--if(truthVal.hasResults)then
			--type = "TRUTH_VAL";
		--end_if
		if(typeWord.hasResults)then
			type = "TYPED_IDENT";
		end_if
end_rule

rule 'mapTerm'
	from expr//term t
	to Expressions::IdentExpr
	queries
		name : //#t;
		--truthVal : /t//#word{TOKEN.eq("true") || TOKEN.eq("false")};
		typeWord : /t//#word;
		typeNum : /t//#number;
	mappings
		name = extract name;
		if(typeNum.hasResults)then
			type = "NUMERIC_CONST";
		end_if
		--if(truthVal.hasResults)then
			--type = "TRUTH_VAL";
		--end_if
		if(typeWord.hasResults)then
			type = "TYPED_IDENT";
		end_if
end_rule




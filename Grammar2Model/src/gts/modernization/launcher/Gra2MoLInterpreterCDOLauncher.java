/*******************************************************************************
 * Copyright (c) 2008, 2011
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Javier Canovas (jlcanovas@um.es) 
 *******************************************************************************/


package gts.modernization.launcher;

import gts.modernization.model.CST.CSTPackage;
import gts.modernization.model.CST.Element;
import gts.modernization.model.CST.Node;

import java.io.File;
import java.util.List;

import org.eclipse.emf.cdo.eresource.CDOResource;
import org.eclipse.emf.cdo.net4j.CDONet4jUtil;
import org.eclipse.emf.cdo.net4j.CDOSessionConfiguration;
import org.eclipse.emf.cdo.session.CDOSession;
import org.eclipse.emf.cdo.transaction.CDOTransaction;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.net4j.Net4jUtil;
import org.eclipse.net4j.connector.IConnector;
import org.eclipse.net4j.tcp.TCPUtil;
import org.eclipse.net4j.util.container.ContainerUtil;
import org.eclipse.net4j.util.container.IManagedContainer;
import org.eclipse.net4j.util.om.OMPlatform;
import org.eclipse.net4j.util.om.log.PrintLogHandler;
import org.eclipse.net4j.util.om.trace.PrintTraceHandler;
 
/**
 * This class executing a Gra2MoL transformation by using CDO to store the models
 * It requires the existence of the Parser/Lexer in the classpath to obtain the particular CST for 
 * each file to be parsed. Such Parser/Lexer must have been generated by the Gra2MoL enricher tool.
 * 
 * @author jlcanovas
 *
 */
public class Gra2MoLInterpreterCDOLauncher extends Gra2MoLInterpreterLauncher {
	private static EPackage ePackage = CSTPackage.eINSTANCE;
	
	private CDOHelper cdoHelper;	
	private String CDOResource;
	
	/**
	 * This is the session which will be used while the interpreter traverses the CST
	 */
	private CDOSession preInterpreterSession;
	/**
	 * This is the transaction which will be used while the interpreter traverses the CST
	 */
	private CDOTransaction preTransaction;
	
	public Gra2MoLInterpreterCDOLauncher(File pathTransformation,
			File pathMetamodel, String targetMetamodel, File resultModelPath,
			String grammarName, String grammarMainRule,
			List<File> sourceFilePaths, String CDOServer, String CDORepository, String CDOResource) {
		super(pathTransformation, pathMetamodel, targetMetamodel, resultModelPath,
				grammarName, grammarMainRule, sourceFilePaths);
		
		this.cdoHelper = new CDOHelper(CDOServer, CDORepository, ePackage);
		this.CDOResource = CDOResource;
	}
	
	public Gra2MoLInterpreterCDOLauncher(File pathTransformation, File pathMetamodel,
			String targetMetamodel, File resultModelPath, String grammarName,
			String grammarMainRule, File sourceFilePath, String CDOServer, String CDORepository, String CDOResource) {
		super(pathTransformation, pathMetamodel, targetMetamodel, resultModelPath,
				grammarName, grammarMainRule, sourceFilePath);
		this.cdoHelper = new CDOHelper(CDOServer, CDORepository, ePackage);
		this.CDOResource = CDOResource;
	}
		
	@Override
	protected void preprocess() {
		cdoHelper.configure();
	}
	
	@Override
	protected void postprocess() {
		preTransaction.commit();
		preInterpreterSession.close();
		cdoHelper.deactivate();
	}
	
	@Override
	protected void initializeCST() {
	    // Open session
	    CDOSession session = cdoHelper.openSession();
	    // Open transaction
	    CDOTransaction transaction = session.openTransaction();	    
	    // Get or create resource
	    CDOResource resource = transaction.getOrCreateResource(CDOResource); //$NON-NLS-1$
	    // Creates the main root of the CST
	    Node node = CSTPackage.eINSTANCE.getCSTFactory().createNode();
	    node.setKind("CST");
	    
	    resource.getContents().clear();
	    resource.getContents().add(node);
	    
	    transaction.commit();
	    session.close();
	}


	@Override
	public void addCST(Element child, String sourceFilePath) {
	    // Open session
	    CDOSession session = cdoHelper.openSession();
	    // Open transaction
	    CDOTransaction transaction = session.openTransaction();	    
	    // Get or create resource
	    CDOResource resource = transaction.getResource(CDOResource); //$NON-NLS-1$
	    
	    // Work with the resource and commit the transaction
	    Element parcialCST = (Element) resource.getContents().get(0);
	    
		if (parcialCST instanceof Node && child instanceof Node) {
			Node file = createRootNode(child, sourceFilePath);
			((Node) parcialCST).getChildren().add(file);
		} 
	    transaction.commit();  
	    
	    // Cleanup
	    session.close();
	}
	
	@Override
	protected Element getCST() {
	    // Open session
		preInterpreterSession = cdoHelper.openSession();
	    // Open transaction
	    preTransaction = preInterpreterSession.openTransaction();	    
	    // Get or create resource
	    CDOResource resource = preTransaction.getResource(CDOResource); //$NON-NLS-1$
	    // Work with the resource and commit the transaction
	    Element globalCST = (Element) resource.getContents().get(0);
	    
	    return globalCST;
	}
		
	
	/**
	 * For testing purposes
	 * @param args
	 */
	public static void main(String[] args) {
		Gra2MoLInterpreterCDOLauncher launcher = new Gra2MoLInterpreterCDOLauncher(
				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/files/src/delphi2astm.g2m"), 
				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/files/metamodels/astm.ecore"), 
				"astm", 
				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/resultModel.ecore.xmi"), 
				"delphi", 
				"mainRule", 
				new File("../Grammar2Model.examples.Delphi2Model/delphiSrc/untClArchivo.pas"),
				"localhost:2036", 
				"repo1", 
				"/t2");
		launcher.setCaseSensitive(true);
		launcher.launch();
	}
	
	/**
	 * This class helps to manage the CDO conections. It is in charge of creating 
	 * CDOSessions from a conection. It is very important to call to deactivate method
	 * when it is not going to be used. 
	 * @author jlcanovas
	 *
	 */
	class CDOHelper {
		private String CDOServer;
		private String CDORepository;
		private CDOSessionConfiguration configuration;
		private IManagedContainer container;
		private IConnector connector;
		private EPackage ePackage;
	
		/**
		 * The main constructor
		 * @param CDOServer Path to the server
		 * @param CDORepository Path to the repository
		 * @param ePackage EPackage to which conforms the models
		 */
		CDOHelper(String CDOServer, String CDORepository, EPackage ePackage) {
			this.CDOServer = CDOServer;
			this.CDORepository = CDORepository;
			this.ePackage = ePackage;
		}
		
		/**
		 * Deactivate the CDO conection
		 */
		public void deactivate() {
			if(connector.isConnected()) {
				connector.close(); 
			}
			if(container.isActive()) {
				container.deactivate();
			}
		}
		
		/**
		 * Configures the CDO connection to be used
		 */
		private void configure() {
		    OMPlatform.INSTANCE.setDebugging(false);
		    OMPlatform.INSTANCE.addLogHandler(PrintLogHandler.CONSOLE);
		    OMPlatform.INSTANCE.addTraceHandler(PrintTraceHandler.CONSOLE);
		    
		    // Prepare container
		    container = ContainerUtil.createContainer();
		    Net4jUtil.prepareContainer(container); // Register Net4j factories
		    TCPUtil.prepareContainer(container); // Register TCP factories
		    CDONet4jUtil.prepareContainer(container); // Register CDO factories
		    
		    // Activation
		    container.activate(); 		    

		    // Create connector
		    connector = TCPUtil.getConnector(container, CDOServer); //$NON-NLS-1$		    

		    // Create configuration
		    configuration = CDONet4jUtil.createSessionConfiguration();
		    configuration.setConnector(connector);
		    configuration.setRepositoryName(CDORepository); //$NON-NLS-1$
		}
				
		/**
		 * Opens a new session from the CDO connection
		 * @return
		 */
		public CDOSession openSession() {
		    // Open session
		    CDOSession session = configuration.openSession();
		    session.getPackageRegistry().putEPackage(ePackage);
		    return session;
		}		
	}
	
	@Override
	public void saveCST(String path, Node n) {
	}
}

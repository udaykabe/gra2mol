// $ANTLR 3.0.1 /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3 2009-09-21 18:49:22

	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/*******************************************************************************

DESCRIPTION:
		Oracle PL/SQL Grammar for ANTLR v3, target language Java
AUTHOR:
		Javier Canovas (jlcanovas@um.es)
DATE:
		03-Nov-2008
BASED ON:
		PLSQL3.g for ANTLR v3 and target language C#
		Andrey Kharitonkin (thikone@gmail.com)
		This grammar is for PL/SQL.
COMMENT:
		The grammar has been re-written from the same grammar
		created for target language C#, which fails for generating
		the parser.
KNOWN ISSUES:
		At the moment only supports CREATE PACKAGE and PACKAGE BODY.
		Symbol table and gate predicates needed to distinguish
			between function call and variable usage.

*******************************************************************************/
public class PLSQL3Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGN", "COMMA", "LPAREN", "RPAREN", "ARROW", "LBRACK", "RBRACK", "DOT", "EQ", "NOT_EQ", "GTH", "GEQ", "LTH", "LEQ", "SEMI", "NUMBER", "CHARSET_ATTR", "ASTERISK", "QUOTED_STRING", "ID", "DOUBLEQUOTED_STRING", "PLUS", "MINUS", "LLABEL", "RLABEL", "COLON", "DOUBLEDOT", "FOUND_ATTR", "NOTFOUND_ATTR", "ISOPEN_ATTR", "ROWCOUNT_ATTR", "BULK_ROWCOUNT_ATTR", "AT_SIGN", "TYPE_ATTR", "ROWTYPE_ATTR", "DOUBLEVERTBAR", "DIVIDE", "EXPONENT", "POINT", "PERCENTAGE", "VERTBAR", "N", "QUOTE", "WS", "SL_COMMENT", "ML_COMMENT", "'AS'", "'IN'", "'DEFAULT'", "'BEGIN'", "'EXCEPTION'", "'END'", "'TRUE'", "'FALSE'", "'CASE'", "'UNIQUE'", "'COMMIT'", "'AND'", "'NOT'", "'BETWEEN'", "'PRIOR'", "'EXISTS'", "'ANY'", "'ALL'", "'IS'", "'NULL'", "'SET'", "'OF'", "'LIKE'", "'OR'", "'CREATE'", "'BINARY_INTEGER'", "'BINARY_FLOAT'", "'BINARY_DOUBLE'", "'NATURAL'", "'POSITIVE'", "'NUMBER'", "'NUMERIC'", "'DECIMAL'", "'DEC'", "'LONG'", "'RAW'", "'BOOLEAN'", "'DATE'", "'TO'", "'WITH'", "'INTEGER'", "'INT'", "'SMALLINT'", "'FLOAT'", "'REAL'", "'DOUBLE'", "'CHAR'", "'CHARACTER'", "'VARCHAR'", "'VARCHAR2'", "'NCHAR'", "'NVARCHAR'", "'NVARCHAR2'", "'NATIONAL'", "'MLSLABEL'", "'PLS_INTEGER'", "'BLOB'", "'CLOB'", "'NCLOB'", "'BFILE'", "'ROWID'", "'UROWID'", "'DELETE'", "'FROM'", "'WHERE'", "'ELSE'", "'WHEN'", "'THEN'", "'FETCH'", "'INTO'", "'FUNCTION'", "'DISTINCT'", "'DETERMINISTIC'", "'GOTO'", "'GROUP'", "'BY'", "'START'", "'CONNECT'", "'ON'", "'IF'", "'INSERT'", "'VALUES'", "'ROW'", "'SHARE'", "'EXCLUSIVE'", "'UPDATE'", "'LOCK'", "'TABLE'", "'MODE'", "'NOWAIT'", "'FOR'", "'ORDER'", "'ASC'", "'DESC'", "'PROCEDURE'", "'ROWS'", "'SAVEPOINT'", "'COMMENT'", "'SELECT'", "'HAVING'", "'UNION'", "'INTERSECT'", "'MINUS'", "'SQL'", "'INDEX'", "'CONSTANT'", "'A'", "'AUTOMATIC'", "'COUNT'", "'CROSS'", "'CUBE'", "'CURRENT_OF'", "'DAY'", "'DBTIMEZONE'", "'DECLARE'", "'DECREMENT'", "'DIMENSION'", "'EMPTY'", "'EQUALS_PATH'", "'ESCAPE'", "'FIRST'", "'FULL'", "'GROUPING'", "'IGNORE'", "'INCREMENT'", "'INFINITE'", "'INNER'", "'INTERVAL'", "'ITERATE'", "'JOIN'", "'KEEP'", "'LAST'", "'LEFT'", "'LIKE2'", "'LIKE4'", "'LIKEC'", "'LOCAL'", "'MAIN'", "'MEASURES'", "'MEMBER'", "'MODEL'", "'MONTH'", "'NAN'", "'NAV'", "'NOCYCLE'", "'NULLS'", "'ONLY'", "'OUTER'", "'PARTITION'", "'PRECISION'", "'PRESENT'", "'REFERENCE'", "'REGEXP_LIKE'", "'RIGHT'", "'ROLLUP'", "'RULES'", "'SECOND'", "'SECONDS'", "'SEQUENTIAL'", "'SESSIONTIMEZONE'", "'SETS'", "'SIBLINGS'", "'SINGLE'", "'SOME'", "'SUBMULTISET'", "'TIME'", "'TIMESTAMP'", "'THE'", "'UNDER_PATH'", "'UNTIL'", "'UPDATED'", "'UPSERT'", "'WAIT'", "'YEAR'", "'ZONE'", "'ARRAY'", "'AUTONOMOUS_TRANSACTION'", "'BODY'", "'BUILTIN'", "'BULK'", "'BYTE'", "'CLOSE'", "'COLLECT'", "'CURSOR'", "'ELSIF'", "'EXCEPTION_INIT'", "'EXIT'", "'FIPSFLAG'", "'INTERFACE'", "'LOOP'", "'NEW'", "'NEW_NAMES'", "'OPEN'", "'OUT'", "'PACKAGE'", "'PRAGMA'", "'RAISE'", "'RANGE'", "'READ'", "'RECORD'", "'REF'", "'REPLACE'", "'RESTRICT_REFERENCES'", "'RETURN'", "'RETURNING'", "'REVERSE'", "'ROLLBACK'", "'SERIALLY_REUSABLE'", "'SUBTYPE'", "'TRANSACTION'", "'TYPE'", "'USING'", "'VARRAY'", "'VARYING'", "'WHILE'", "'WORK'"
    };
    public static final int BULK_ROWCOUNT_ATTR=35;
    public static final int EXPONENT=41;
    public static final int LBRACK=9;
    public static final int POINT=42;
    public static final int GTH=14;
    public static final int LLABEL=27;
    public static final int DOUBLEDOT=30;
    public static final int ID=23;
    public static final int FOUND_ATTR=31;
    public static final int EOF=-1;
    public static final int LPAREN=6;
    public static final int ASTERISK=21;
    public static final int TYPE_ATTR=37;
    public static final int RLABEL=28;
    public static final int ML_COMMENT=49;
    public static final int QUOTE=46;
    public static final int RPAREN=7;
    public static final int COMMA=5;
    public static final int QUOTED_STRING=22;
    public static final int PLUS=25;
    public static final int GEQ=15;
    public static final int EQ=12;
    public static final int DOT=11;
    public static final int ISOPEN_ATTR=33;
    public static final int DIVIDE=40;
    public static final int NOTFOUND_ATTR=32;
    public static final int RBRACK=10;
    public static final int N=45;
    public static final int DOUBLEQUOTED_STRING=24;
    public static final int NUMBER=19;
    public static final int AT_SIGN=36;
    public static final int ROWCOUNT_ATTR=34;
    public static final int DOUBLEVERTBAR=39;
    public static final int MINUS=26;
    public static final int SEMI=18;
    public static final int PERCENTAGE=43;
    public static final int NOT_EQ=13;
    public static final int VERTBAR=44;
    public static final int LTH=16;
    public static final int COLON=29;
    public static final int WS=47;
    public static final int SL_COMMENT=48;
    public static final int ASSIGN=4;
    public static final int ARROW=8;
    public static final int CHARSET_ATTR=20;
    public static final int ROWTYPE_ATTR=38;
    public static final int LEQ=17;

        public PLSQL3Parser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[862+1];
         }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("PLSQL3ParserTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3"; }

    
        private boolean isSql = false;


    public static class start_rule_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start start_rule
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:47:1: start_rule returns [Node returnNode] : (create_packageGen+= create_package )* EOFGen= EOF ;
    public final start_rule_return start_rule() throws RecognitionException {
        start_rule_return retval = new start_rule_return();
        retval.start = input.LT(1);

        Token EOFGen=null;
        List list_create_packageGen=null;
        RuleReturnScope create_packageGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:48:1: ( (create_packageGen+= create_package )* EOFGen= EOF )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:48:3: (create_packageGen+= create_package )* EOFGen= EOF
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:48:3: (create_packageGen+= create_package )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==74) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:48:4: create_packageGen+= create_package
            	    {
            	    pushFollow(FOLLOW_create_package_in_start_rule62);
            	    create_packageGen=create_package();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_create_packageGen==null) list_create_packageGen=new ArrayList();
            	    list_create_packageGen.add(create_packageGen);


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            EOFGen=(Token)input.LT(1);
            match(input,EOF,FOLLOW_EOF_in_start_rule68); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node start_ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		start_ruleReturnNode.setKind("start_rule");
              	    // Create a CST Node
              		if(list_create_packageGen != null) {
              	        for(Iterator it = list_create_packageGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.create_package_return r = (PLSQL3Parser.create_package_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("create_package");
              	            	start_ruleReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(EOFGen != null) {
              			Leaf EOFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			EOFGenLeaf.setKind("EOF");
              			EOFGenLeaf.setValue(EOFGen.getText());
              			EOFGenLeaf.setPos(EOFGen.getCharPositionInLine());
              			EOFGenLeaf.setLine(EOFGen.getLine());
              			start_ruleReturnNode.getChildren().add(EOFGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = start_ruleReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end start_rule

    public static class alias_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start alias
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:77:1: alias returns [Node returnNode] : (TK_0= 'AS' )? sql_identifierGen+= sql_identifier ;
    public final alias_return alias() throws RecognitionException {
        alias_return retval = new alias_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:78:1: ( (TK_0= 'AS' )? sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:78:3: (TK_0= 'AS' )? sql_identifierGen+= sql_identifier
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:78:3: (TK_0= 'AS' )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==50) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:78:5: TK_0= 'AS'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_alias91); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_identifier_in_alias98);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node aliasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		aliasReturnNode.setKind("alias");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		aliasReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	aliasReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = aliasReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alias

    public static class argument_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start argument
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:107:1: argument returns [Node returnNode] : argument_nameGen+= argument_name (keyOUTGen+= keyOUT | TK_0= 'IN' keyOUTGen_1+= keyOUT | TK_1= 'IN' )? (argument_typeGen+= argument_type )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? ;
    public final argument_return argument() throws RecognitionException {
        argument_return retval = new argument_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token ASSIGNGen=null;
        Token TK_2=null;
        List list_argument_nameGen=null;
        List list_keyOUTGen=null;
        List list_keyOUTGen_1=null;
        List list_argument_typeGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope argument_nameGen = null;
        RuleReturnScope keyOUTGen = null;
        RuleReturnScope keyOUTGen_1 = null;
        RuleReturnScope argument_typeGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:1: (argument_nameGen+= argument_name (keyOUTGen+= keyOUT | TK_0= 'IN' keyOUTGen_1+= keyOUT | TK_1= 'IN' )? (argument_typeGen+= argument_type )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:3: argument_nameGen+= argument_name (keyOUTGen+= keyOUT | TK_0= 'IN' keyOUTGen_1+= keyOUT | TK_1= 'IN' )? (argument_typeGen+= argument_type )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )?
            {
            pushFollow(FOLLOW_argument_name_in_argument120);
            argument_nameGen=argument_name();
            _fsp--;
            if (failed) return retval;
            if (list_argument_nameGen==null) list_argument_nameGen=new ArrayList();
            list_argument_nameGen.add(argument_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:35: (keyOUTGen+= keyOUT | TK_0= 'IN' keyOUTGen_1+= keyOUT | TK_1= 'IN' )?
            int alt3=4;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==243) ) {
                alt3=1;
            }
            else if ( (LA3_0==51) ) {
                int LA3_2 = input.LA(2);

                if ( (LA3_2==EOF||(LA3_2>=ASSIGN && LA3_2<=COMMA)||LA3_2==RPAREN||(LA3_2>=ID && LA3_2<=DOUBLEQUOTED_STRING)||LA3_2==52||(LA3_2>=75 && LA3_2<=87)||(LA3_2>=90 && LA3_2<=111)||LA3_2==177||(LA3_2>=215 && LA3_2<=216)) ) {
                    alt3=3;
                }
                else if ( (LA3_2==243) ) {
                    alt3=2;
                }
            }
            switch (alt3) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:37: keyOUTGen+= keyOUT
                    {
                    pushFollow(FOLLOW_keyOUT_in_argument126);
                    keyOUTGen=keyOUT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyOUTGen==null) list_keyOUTGen=new ArrayList();
                    list_keyOUTGen.add(keyOUTGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:57: TK_0= 'IN' keyOUTGen_1+= keyOUT
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_argument132); if (failed) return retval;
                    pushFollow(FOLLOW_keyOUT_in_argument136);
                    keyOUTGen_1=keyOUT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyOUTGen_1==null) list_keyOUTGen_1=new ArrayList();
                    list_keyOUTGen_1.add(keyOUTGen_1);


                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:89: TK_1= 'IN'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_argument142); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:102: (argument_typeGen+= argument_type )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( ((LA4_0>=ID && LA4_0<=DOUBLEQUOTED_STRING)||(LA4_0>=75 && LA4_0<=87)||(LA4_0>=90 && LA4_0<=111)||LA4_0==177||(LA4_0>=215 && LA4_0<=216)) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:108:103: argument_typeGen+= argument_type
                    {
                    pushFollow(FOLLOW_argument_type_in_argument150);
                    argument_typeGen=argument_type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argument_typeGen==null) list_argument_typeGen=new ArrayList();
                    list_argument_typeGen.add(argument_typeGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:109:3: ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==ASSIGN||LA6_0==52) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:109:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:109:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' )
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==ASSIGN) ) {
                        alt5=1;
                    }
                    else if ( (LA5_0==52) ) {
                        alt5=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("109:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' )", 5, 0, input);

                        throw nvae;
                    }
                    switch (alt5) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:109:7: ASSIGNGen= ASSIGN
                            {
                            ASSIGNGen=(Token)input.LT(1);
                            match(input,ASSIGN,FOLLOW_ASSIGN_in_argument163); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:109:26: TK_2= 'DEFAULT'
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,52,FOLLOW_52_in_argument169); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_plsql_expression_in_argument175);
                    plsql_expressionGen=plsql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
                    list_plsql_expressionGen.add(plsql_expressionGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node argumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argumentReturnNode.setKind("argument");
              	    // Create a CST Node
              		if(list_argument_nameGen != null) {
              	        for(Iterator it = list_argument_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.argument_name_return r = (PLSQL3Parser.argument_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("argument_name");
              	            	argumentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyOUTGen != null) {
              	        for(Iterator it = list_keyOUTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyOUT_return r = (PLSQL3Parser.keyOUT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyOUT");
              	            	argumentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		argumentReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyOUTGen_1 != null) {
              	        for(Iterator it = list_keyOUTGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyOUT_return r = (PLSQL3Parser.keyOUT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyOUT");
              	            	argumentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		argumentReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_argument_typeGen != null) {
              	        for(Iterator it = list_argument_typeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.argument_type_return r = (PLSQL3Parser.argument_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("argument_type");
              	            	argumentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(ASSIGNGen != null) {
              			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASSIGNGenLeaf.setKind("ASSIGN");
              			ASSIGNGenLeaf.setValue(ASSIGNGen.getText());
              			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
              			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
              			argumentReturnNode.getChildren().add(ASSIGNGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		argumentReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	argumentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argumentReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end argument

    public static class arguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start arguments
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:205:1: arguments returns [Node returnNode] : argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* ;
    public final arguments_return arguments() throws RecognitionException {
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_argumentGen=null;
        List list_argumentGen_1=null;
        RuleReturnScope argumentGen = null;
        RuleReturnScope argumentGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:206:1: (argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:206:3: argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )*
            {
            pushFollow(FOLLOW_argument_in_arguments199);
            argumentGen=argument();
            _fsp--;
            if (failed) return retval;
            if (list_argumentGen==null) list_argumentGen=new ArrayList();
            list_argumentGen.add(argumentGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:206:25: (COMMAGen_List+= COMMA argumentGen_1+= argument )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:206:27: COMMAGen_List+= COMMA argumentGen_1+= argument
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_arguments205); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_argument_in_arguments209);
            	    argumentGen_1=argument();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_argumentGen_1==null) list_argumentGen_1=new ArrayList();
            	    list_argumentGen_1.add(argumentGen_1);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node argumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argumentsReturnNode.setKind("arguments");
              	    // Create a CST Node
              		if(list_argumentGen != null) {
              	        for(Iterator it = list_argumentGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("argument");
              	            	argumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			argumentsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_argumentGen_1 != null) {		
              	    	PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) list_argumentGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("argument");
              	    		argumentsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end arguments

    public static class argument_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start argument_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:251:1: argument_name returns [Node returnNode] : identifierGen+= identifier ;
    public final argument_name_return argument_name() throws RecognitionException {
        argument_name_return retval = new argument_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:252:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:252:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_argument_name233);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node argument_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argument_nameReturnNode.setKind("argument_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	argument_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argument_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end argument_name

    public static class argument_type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start argument_type
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:272:1: argument_type returns [Node returnNode] : type_specGen+= type_spec ;
    public final argument_type_return argument_type() throws RecognitionException {
        argument_type_return retval = new argument_type_return();
        retval.start = input.LT(1);

        List list_type_specGen=null;
        RuleReturnScope type_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:273:1: (type_specGen+= type_spec )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:273:3: type_specGen+= type_spec
            {
            pushFollow(FOLLOW_type_spec_in_argument_type254);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node argument_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argument_typeReturnNode.setKind("argument_type");
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	argument_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argument_typeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end argument_type

    public static class assignment_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start assignment_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:293:1: assignment_statement returns [Node returnNode] : lvalueGen+= lvalue ASSIGNGen= ASSIGN plsql_expressionGen+= plsql_expression ;
    public final assignment_statement_return assignment_statement() throws RecognitionException {
        assignment_statement_return retval = new assignment_statement_return();
        retval.start = input.LT(1);

        Token ASSIGNGen=null;
        List list_lvalueGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope lvalueGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:294:1: (lvalueGen+= lvalue ASSIGNGen= ASSIGN plsql_expressionGen+= plsql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:294:3: lvalueGen+= lvalue ASSIGNGen= ASSIGN plsql_expressionGen+= plsql_expression
            {
            pushFollow(FOLLOW_lvalue_in_assignment_statement275);
            lvalueGen=lvalue();
            _fsp--;
            if (failed) return retval;
            if (list_lvalueGen==null) list_lvalueGen=new ArrayList();
            list_lvalueGen.add(lvalueGen);

            ASSIGNGen=(Token)input.LT(1);
            match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement279); if (failed) return retval;
            pushFollow(FOLLOW_plsql_expression_in_assignment_statement283);
            plsql_expressionGen=plsql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
            list_plsql_expressionGen.add(plsql_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node assignment_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		assignment_statementReturnNode.setKind("assignment_statement");
              	    // Create a CST Node
              		if(list_lvalueGen != null) {
              	        for(Iterator it = list_lvalueGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("lvalue");
              	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(ASSIGNGen != null) {
              			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASSIGNGenLeaf.setKind("ASSIGN");
              			ASSIGNGenLeaf.setValue(ASSIGNGen.getText());
              			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
              			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
              			assignment_statementReturnNode.getChildren().add(ASSIGNGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = assignment_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assignment_statement

    public static class begin_block_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start begin_block
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:334:1: begin_block returns [Node returnNode] : TK_0= 'BEGIN' (seq_of_statementsGen+= seq_of_statements ) (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_2= 'END' ;
    public final begin_block_return begin_block() throws RecognitionException {
        begin_block_return retval = new begin_block_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_seq_of_statementsGen=null;
        List list_exception_handlerGen=null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope exception_handlerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:335:1: (TK_0= 'BEGIN' (seq_of_statementsGen+= seq_of_statements ) (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_2= 'END' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:335:3: TK_0= 'BEGIN' (seq_of_statementsGen+= seq_of_statements ) (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_2= 'END'
            {
            TK_0=(Token)input.LT(1);
            match(input,53,FOLLOW_53_in_begin_block305); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:336:3: (seq_of_statementsGen+= seq_of_statements )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:336:5: seq_of_statementsGen+= seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_begin_block313);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:337:3: (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==54) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:337:5: TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_begin_block323); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:337:22: (exception_handlerGen+= exception_handler )+
                    int cnt8=0;
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==116) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:337:24: exception_handlerGen+= exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_begin_block329);
                    	    exception_handlerGen=exception_handler();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_exception_handlerGen==null) list_exception_handlerGen=new ArrayList();
                    	    list_exception_handlerGen.add(exception_handlerGen);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt8 >= 1 ) break loop8;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(8, input);
                                throw eee;
                        }
                        cnt8++;
                    } while (true);


                    }
                    break;

            }

            TK_2=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_begin_block341); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node begin_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		begin_blockReturnNode.setKind("begin_block");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		begin_blockReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	begin_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		begin_blockReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exception_handlerGen != null) {
              	        for(Iterator it = list_exception_handlerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_handler");
              	            	begin_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		begin_blockReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = begin_blockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end begin_block

    public static class boolean_literal_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start boolean_literal
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:395:1: boolean_literal returns [Node returnNode] : (TK_0= 'TRUE' | TK_0= 'FALSE' );
    public final boolean_literal_return boolean_literal() throws RecognitionException {
        boolean_literal_return retval = new boolean_literal_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:396:1: (TK_0= 'TRUE' | TK_0= 'FALSE' )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==56) ) {
                alt10=1;
            }
            else if ( (LA10_0==57) ) {
                alt10=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("395:1: boolean_literal returns [Node returnNode] : (TK_0= 'TRUE' | TK_0= 'FALSE' );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:396:3: TK_0= 'TRUE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,56,FOLLOW_56_in_boolean_literal362); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node boolean_literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		boolean_literalReturnNode.setKind("boolean_literal");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		boolean_literalReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = boolean_literalReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:412:6: TK_0= 'FALSE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,57,FOLLOW_57_in_boolean_literal372); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node boolean_literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		boolean_literalReturnNode.setKind("boolean_literal");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		boolean_literalReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = boolean_literalReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end boolean_literal

    public static class bracket_literals_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start bracket_literals
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:431:1: bracket_literals returns [Node returnNode] : LPARENGen= LPAREN literalsGen+= literals RPARENGen= RPAREN ;
    public final bracket_literals_return bracket_literals() throws RecognitionException {
        bracket_literals_return retval = new bracket_literals_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_literalsGen=null;
        RuleReturnScope literalsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:432:1: (LPARENGen= LPAREN literalsGen+= literals RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:432:3: LPARENGen= LPAREN literalsGen+= literals RPARENGen= RPAREN
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_bracket_literals393); if (failed) return retval;
            pushFollow(FOLLOW_literals_in_bracket_literals397);
            literalsGen=literals();
            _fsp--;
            if (failed) return retval;
            if (list_literalsGen==null) list_literalsGen=new ArrayList();
            list_literalsGen.add(literalsGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_bracket_literals401); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node bracket_literalsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		bracket_literalsReturnNode.setKind("bracket_literals");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			bracket_literalsReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_literalsGen != null) {
              	        for(Iterator it = list_literalsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literals_return r = (PLSQL3Parser.literals_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literals");
              	            	bracket_literalsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			bracket_literalsReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = bracket_literalsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end bracket_literals

    public static class bracket_literals_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start bracket_literals_list
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:470:1: bracket_literals_list returns [Node returnNode] : bracket_literalsGen+= bracket_literals (COMMAGen_List+= COMMA bracket_literalsGen_1+= bracket_literals )* ;
    public final bracket_literals_list_return bracket_literals_list() throws RecognitionException {
        bracket_literals_list_return retval = new bracket_literals_list_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_bracket_literalsGen=null;
        List list_bracket_literalsGen_1=null;
        RuleReturnScope bracket_literalsGen = null;
        RuleReturnScope bracket_literalsGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:471:1: (bracket_literalsGen+= bracket_literals (COMMAGen_List+= COMMA bracket_literalsGen_1+= bracket_literals )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:471:3: bracket_literalsGen+= bracket_literals (COMMAGen_List+= COMMA bracket_literalsGen_1+= bracket_literals )*
            {
            pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list423);
            bracket_literalsGen=bracket_literals();
            _fsp--;
            if (failed) return retval;
            if (list_bracket_literalsGen==null) list_bracket_literalsGen=new ArrayList();
            list_bracket_literalsGen.add(bracket_literalsGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:471:41: (COMMAGen_List+= COMMA bracket_literalsGen_1+= bracket_literals )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:471:43: COMMAGen_List+= COMMA bracket_literalsGen_1+= bracket_literals
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_bracket_literals_list429); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list433);
            	    bracket_literalsGen_1=bracket_literals();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_bracket_literalsGen_1==null) list_bracket_literalsGen_1=new ArrayList();
            	    list_bracket_literalsGen_1.add(bracket_literalsGen_1);


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node bracket_literals_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		bracket_literals_listReturnNode.setKind("bracket_literals_list");
              	    // Create a CST Node
              		if(list_bracket_literalsGen != null) {
              	        for(Iterator it = list_bracket_literalsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.bracket_literals_return r = (PLSQL3Parser.bracket_literals_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("bracket_literals");
              	            	bracket_literals_listReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			bracket_literals_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_bracket_literalsGen_1 != null) {		
              	    	PLSQL3Parser.bracket_literals_return r = (PLSQL3Parser.bracket_literals_return) list_bracket_literalsGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("bracket_literals");
              	    		bracket_literals_listReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = bracket_literals_listReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end bracket_literals_list

    public static class call_parameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start call_parameter
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:516:1: call_parameter returns [Node returnNode] : (parameter_nameGen+= parameter_name ARROWGen= ARROW )? nested_expressionGen+= nested_expression ;
    public final call_parameter_return call_parameter() throws RecognitionException {
        call_parameter_return retval = new call_parameter_return();
        retval.start = input.LT(1);

        Token ARROWGen=null;
        List list_parameter_nameGen=null;
        List list_nested_expressionGen=null;
        RuleReturnScope parameter_nameGen = null;
        RuleReturnScope nested_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:517:1: ( (parameter_nameGen+= parameter_name ARROWGen= ARROW )? nested_expressionGen+= nested_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:517:3: (parameter_nameGen+= parameter_name ARROWGen= ARROW )? nested_expressionGen+= nested_expression
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:517:3: (parameter_nameGen+= parameter_name ARROWGen= ARROW )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ID) ) {
                int LA12_1 = input.LA(2);

                if ( (LA12_1==ARROW) ) {
                    alt12=1;
                }
            }
            else if ( (LA12_0==DOUBLEQUOTED_STRING) ) {
                int LA12_2 = input.LA(2);

                if ( (LA12_2==ARROW) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:517:5: parameter_nameGen+= parameter_name ARROWGen= ARROW
                    {
                    pushFollow(FOLLOW_parameter_name_in_call_parameter459);
                    parameter_nameGen=parameter_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parameter_nameGen==null) list_parameter_nameGen=new ArrayList();
                    list_parameter_nameGen.add(parameter_nameGen);

                    ARROWGen=(Token)input.LT(1);
                    match(input,ARROW,FOLLOW_ARROW_in_call_parameter463); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_expression_in_call_parameter470);
            nested_expressionGen=nested_expression();
            _fsp--;
            if (failed) return retval;
            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            list_nested_expressionGen.add(nested_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node call_parameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		call_parameterReturnNode.setKind("call_parameter");
              	    // Create a CST Node
              		if(list_parameter_nameGen != null) {
              	        for(Iterator it = list_parameter_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.parameter_name_return r = (PLSQL3Parser.parameter_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter_name");
              	            	call_parameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(ARROWGen != null) {
              			Leaf ARROWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ARROWGenLeaf.setKind("ARROW");
              			ARROWGenLeaf.setValue(ARROWGen.getText());
              			ARROWGenLeaf.setPos(ARROWGen.getCharPositionInLine());
              			ARROWGenLeaf.setLine(ARROWGen.getLine());
              			call_parameterReturnNode.getChildren().add(ARROWGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_nested_expressionGen != null) {
              	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_expression");
              	            	call_parameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = call_parameterReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end call_parameter

    public static class call_parameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start call_parameters
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:556:1: call_parameters returns [Node returnNode] : call_parameterGen+= call_parameter (COMMAGen_List+= COMMA call_parameterGen_1+= call_parameter )* ;
    public final call_parameters_return call_parameters() throws RecognitionException {
        call_parameters_return retval = new call_parameters_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_call_parameterGen=null;
        List list_call_parameterGen_1=null;
        RuleReturnScope call_parameterGen = null;
        RuleReturnScope call_parameterGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:557:1: (call_parameterGen+= call_parameter (COMMAGen_List+= COMMA call_parameterGen_1+= call_parameter )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:557:3: call_parameterGen+= call_parameter (COMMAGen_List+= COMMA call_parameterGen_1+= call_parameter )*
            {
            pushFollow(FOLLOW_call_parameter_in_call_parameters491);
            call_parameterGen=call_parameter();
            _fsp--;
            if (failed) return retval;
            if (list_call_parameterGen==null) list_call_parameterGen=new ArrayList();
            list_call_parameterGen.add(call_parameterGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:557:37: (COMMAGen_List+= COMMA call_parameterGen_1+= call_parameter )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==COMMA) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:557:39: COMMAGen_List+= COMMA call_parameterGen_1+= call_parameter
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_call_parameters497); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_call_parameter_in_call_parameters501);
            	    call_parameterGen_1=call_parameter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_call_parameterGen_1==null) list_call_parameterGen_1=new ArrayList();
            	    list_call_parameterGen_1.add(call_parameterGen_1);


            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node call_parametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		call_parametersReturnNode.setKind("call_parameters");
              	    // Create a CST Node
              		if(list_call_parameterGen != null) {
              	        for(Iterator it = list_call_parameterGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.call_parameter_return r = (PLSQL3Parser.call_parameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("call_parameter");
              	            	call_parametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			call_parametersReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_call_parameterGen_1 != null) {		
              	    	PLSQL3Parser.call_parameter_return r = (PLSQL3Parser.call_parameter_return) list_call_parameterGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("call_parameter");
              	    		call_parametersReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = call_parametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end call_parameters

    public static class case_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start case_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:602:1: case_expression returns [Node returnNode] : TK_0= 'CASE' (simple_case_expressionGen+= simple_case_expression | searched_case_expressionGen+= searched_case_expression ) (else_case_expressionGen+= else_case_expression )? TK_1= 'END' ;
    public final case_expression_return case_expression() throws RecognitionException {
        case_expression_return retval = new case_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_simple_case_expressionGen=null;
        List list_searched_case_expressionGen=null;
        List list_else_case_expressionGen=null;
        RuleReturnScope simple_case_expressionGen = null;
        RuleReturnScope searched_case_expressionGen = null;
        RuleReturnScope else_case_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:1: (TK_0= 'CASE' (simple_case_expressionGen+= simple_case_expression | searched_case_expressionGen+= searched_case_expression ) (else_case_expressionGen+= else_case_expression )? TK_1= 'END' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:3: TK_0= 'CASE' (simple_case_expressionGen+= simple_case_expression | searched_case_expressionGen+= searched_case_expression ) (else_case_expressionGen+= else_case_expression )? TK_1= 'END'
            {
            TK_0=(Token)input.LT(1);
            match(input,58,FOLLOW_58_in_case_expression525); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:15: (simple_case_expressionGen+= simple_case_expression | searched_case_expressionGen+= searched_case_expression )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==LPAREN||LA14_0==NUMBER||(LA14_0>=QUOTED_STRING && LA14_0<=MINUS)||LA14_0==COLON||(LA14_0>=56 && LA14_0<=58)||LA14_0==62||LA14_0==69||LA14_0==110||LA14_0==121||LA14_0==148||LA14_0==153||LA14_0==158||LA14_0==233) ) {
                alt14=1;
            }
            else if ( (LA14_0==116) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("603:15: (simple_case_expressionGen+= simple_case_expression | searched_case_expressionGen+= searched_case_expression )", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:17: simple_case_expressionGen+= simple_case_expression
                    {
                    pushFollow(FOLLOW_simple_case_expression_in_case_expression531);
                    simple_case_expressionGen=simple_case_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_simple_case_expressionGen==null) list_simple_case_expressionGen=new ArrayList();
                    list_simple_case_expressionGen.add(simple_case_expressionGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:69: searched_case_expressionGen+= searched_case_expression
                    {
                    pushFollow(FOLLOW_searched_case_expression_in_case_expression537);
                    searched_case_expressionGen=searched_case_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_searched_case_expressionGen==null) list_searched_case_expressionGen=new ArrayList();
                    list_searched_case_expressionGen.add(searched_case_expressionGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:125: (else_case_expressionGen+= else_case_expression )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==115) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:603:127: else_case_expressionGen+= else_case_expression
                    {
                    pushFollow(FOLLOW_else_case_expression_in_case_expression545);
                    else_case_expressionGen=else_case_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_else_case_expressionGen==null) list_else_case_expressionGen=new ArrayList();
                    list_else_case_expressionGen.add(else_case_expressionGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_case_expression552); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		case_expressionReturnNode.setKind("case_expression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		case_expressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_simple_case_expressionGen != null) {
              	        for(Iterator it = list_simple_case_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.simple_case_expression_return r = (PLSQL3Parser.simple_case_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simple_case_expression");
              	            	case_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_searched_case_expressionGen != null) {
              	        for(Iterator it = list_searched_case_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.searched_case_expression_return r = (PLSQL3Parser.searched_case_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("searched_case_expression");
              	            	case_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_else_case_expressionGen != null) {
              	        for(Iterator it = list_else_case_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.else_case_expression_return r = (PLSQL3Parser.else_case_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("else_case_expression");
              	            	case_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		case_expressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = case_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end case_expression

    public static class case_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start case_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:661:1: case_statement returns [Node returnNode] : (label_nameGen+= label_name )? TK_0= 'CASE' (simple_case_statementGen+= simple_case_statement | searched_case_statementGen+= searched_case_statement ) (else_case_statementGen+= else_case_statement )? TK_1= 'END' TK_2= 'CASE' (label_nameGen_1+= label_name )? ;
    public final case_statement_return case_statement() throws RecognitionException {
        case_statement_return retval = new case_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_label_nameGen=null;
        List list_simple_case_statementGen=null;
        List list_searched_case_statementGen=null;
        List list_else_case_statementGen=null;
        List list_label_nameGen_1=null;
        RuleReturnScope label_nameGen = null;
        RuleReturnScope simple_case_statementGen = null;
        RuleReturnScope searched_case_statementGen = null;
        RuleReturnScope else_case_statementGen = null;
        RuleReturnScope label_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:1: ( (label_nameGen+= label_name )? TK_0= 'CASE' (simple_case_statementGen+= simple_case_statement | searched_case_statementGen+= searched_case_statement ) (else_case_statementGen+= else_case_statement )? TK_1= 'END' TK_2= 'CASE' (label_nameGen_1+= label_name )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:3: (label_nameGen+= label_name )? TK_0= 'CASE' (simple_case_statementGen+= simple_case_statement | searched_case_statementGen+= searched_case_statement ) (else_case_statementGen+= else_case_statement )? TK_1= 'END' TK_2= 'CASE' (label_nameGen_1+= label_name )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:3: (label_nameGen+= label_name )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=ID && LA16_0<=DOUBLEQUOTED_STRING)) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:5: label_nameGen+= label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement575);
                    label_nameGen=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen==null) list_label_nameGen=new ArrayList();
                    list_label_nameGen.add(label_nameGen);


                    }
                    break;

            }

            TK_0=(Token)input.LT(1);
            match(input,58,FOLLOW_58_in_case_statement582); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:46: (simple_case_statementGen+= simple_case_statement | searched_case_statementGen+= searched_case_statement )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==LPAREN||LA17_0==NUMBER||(LA17_0>=QUOTED_STRING && LA17_0<=MINUS)||LA17_0==COLON||(LA17_0>=56 && LA17_0<=58)||LA17_0==62||LA17_0==69||LA17_0==110||LA17_0==121||LA17_0==148||LA17_0==153||LA17_0==158||LA17_0==233) ) {
                alt17=1;
            }
            else if ( (LA17_0==116) ) {
                alt17=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("662:46: (simple_case_statementGen+= simple_case_statement | searched_case_statementGen+= searched_case_statement )", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:48: simple_case_statementGen+= simple_case_statement
                    {
                    pushFollow(FOLLOW_simple_case_statement_in_case_statement588);
                    simple_case_statementGen=simple_case_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_simple_case_statementGen==null) list_simple_case_statementGen=new ArrayList();
                    list_simple_case_statementGen.add(simple_case_statementGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:98: searched_case_statementGen+= searched_case_statement
                    {
                    pushFollow(FOLLOW_searched_case_statement_in_case_statement594);
                    searched_case_statementGen=searched_case_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_searched_case_statementGen==null) list_searched_case_statementGen=new ArrayList();
                    list_searched_case_statementGen.add(searched_case_statementGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:152: (else_case_statementGen+= else_case_statement )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==115) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:154: else_case_statementGen+= else_case_statement
                    {
                    pushFollow(FOLLOW_else_case_statement_in_case_statement602);
                    else_case_statementGen=else_case_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_else_case_statementGen==null) list_else_case_statementGen=new ArrayList();
                    list_else_case_statementGen.add(else_case_statementGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_case_statement609); if (failed) return retval;
            TK_2=(Token)input.LT(1);
            match(input,58,FOLLOW_58_in_case_statement613); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:224: (label_nameGen_1+= label_name )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( ((LA19_0>=ID && LA19_0<=DOUBLEQUOTED_STRING)) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:662:226: label_nameGen_1+= label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement619);
                    label_nameGen_1=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen_1==null) list_label_nameGen_1=new ArrayList();
                    list_label_nameGen_1.add(label_nameGen_1);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		case_statementReturnNode.setKind("case_statement");
              	    // Create a CST Node
              		if(list_label_nameGen != null) {
              	        for(Iterator it = list_label_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_simple_case_statementGen != null) {
              	        for(Iterator it = list_simple_case_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.simple_case_statement_return r = (PLSQL3Parser.simple_case_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simple_case_statement");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_searched_case_statementGen != null) {
              	        for(Iterator it = list_searched_case_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.searched_case_statement_return r = (PLSQL3Parser.searched_case_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("searched_case_statement");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_else_case_statementGen != null) {
              	        for(Iterator it = list_else_case_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.else_case_statement_return r = (PLSQL3Parser.else_case_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("else_case_statement");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_label_nameGen_1 != null) {
              	        for(Iterator it = list_label_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = case_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end case_statement

    public static class cell_assignment_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cell_assignment
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:740:1: cell_assignment returns [Node returnNode] : measure_columnGen+= measure_column LBRACKGen= LBRACK (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs ) RBRACKGen= RBRACK ;
    public final cell_assignment_return cell_assignment() throws RecognitionException {
        cell_assignment_return retval = new cell_assignment_return();
        retval.start = input.LT(1);

        Token LBRACKGen=null;
        Token RBRACKGen=null;
        List list_measure_columnGen=null;
        List list_multi_column_for_loopGen=null;
        List list_cell_assignment_exprsGen=null;
        RuleReturnScope measure_columnGen = null;
        RuleReturnScope multi_column_for_loopGen = null;
        RuleReturnScope cell_assignment_exprsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:741:1: (measure_columnGen+= measure_column LBRACKGen= LBRACK (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs ) RBRACKGen= RBRACK )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:741:3: measure_columnGen+= measure_column LBRACKGen= LBRACK (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs ) RBRACKGen= RBRACK
            {
            pushFollow(FOLLOW_measure_column_in_cell_assignment643);
            measure_columnGen=measure_column();
            _fsp--;
            if (failed) return retval;
            if (list_measure_columnGen==null) list_measure_columnGen=new ArrayList();
            list_measure_columnGen.add(measure_columnGen);

            LBRACKGen=(Token)input.LT(1);
            match(input,LBRACK,FOLLOW_LBRACK_in_cell_assignment647); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:741:54: (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==140) ) {
                int LA20_1 = input.LA(2);

                if ( (LA20_1==LPAREN) ) {
                    alt20=1;
                }
                else if ( ((LA20_1>=ID && LA20_1<=DOUBLEQUOTED_STRING)||LA20_1==110) ) {
                    alt20=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("741:54: (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs )", 20, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA20_0==LPAREN||LA20_0==NUMBER||(LA20_0>=QUOTED_STRING && LA20_0<=MINUS)||LA20_0==COLON||(LA20_0>=56 && LA20_0<=58)||LA20_0==62||(LA20_0>=64 && LA20_0<=66)||LA20_0==69||LA20_0==110||LA20_0==121||LA20_0==148||LA20_0==153||LA20_0==158||LA20_0==168||LA20_0==202||LA20_0==218||LA20_0==233) ) {
                alt20=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("741:54: (multi_column_for_loopGen+= multi_column_for_loop | cell_assignment_exprsGen+= cell_assignment_exprs )", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:741:56: multi_column_for_loopGen+= multi_column_for_loop
                    {
                    pushFollow(FOLLOW_multi_column_for_loop_in_cell_assignment653);
                    multi_column_for_loopGen=multi_column_for_loop();
                    _fsp--;
                    if (failed) return retval;
                    if (list_multi_column_for_loopGen==null) list_multi_column_for_loopGen=new ArrayList();
                    list_multi_column_for_loopGen.add(multi_column_for_loopGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:741:106: cell_assignment_exprsGen+= cell_assignment_exprs
                    {
                    pushFollow(FOLLOW_cell_assignment_exprs_in_cell_assignment659);
                    cell_assignment_exprsGen=cell_assignment_exprs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cell_assignment_exprsGen==null) list_cell_assignment_exprsGen=new ArrayList();
                    list_cell_assignment_exprsGen.add(cell_assignment_exprsGen);


                    }
                    break;

            }

            RBRACKGen=(Token)input.LT(1);
            match(input,RBRACK,FOLLOW_RBRACK_in_cell_assignment665); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cell_assignmentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cell_assignmentReturnNode.setKind("cell_assignment");
              	    // Create a CST Node
              		if(list_measure_columnGen != null) {
              	        for(Iterator it = list_measure_columnGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.measure_column_return r = (PLSQL3Parser.measure_column_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("measure_column");
              	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LBRACKGen != null) {
              			Leaf LBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LBRACKGenLeaf.setKind("LBRACK");
              			LBRACKGenLeaf.setValue(LBRACKGen.getText());
              			LBRACKGenLeaf.setPos(LBRACKGen.getCharPositionInLine());
              			LBRACKGenLeaf.setLine(LBRACKGen.getLine());
              			cell_assignmentReturnNode.getChildren().add(LBRACKGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_multi_column_for_loopGen != null) {
              	        for(Iterator it = list_multi_column_for_loopGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.multi_column_for_loop_return r = (PLSQL3Parser.multi_column_for_loop_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("multi_column_for_loop");
              	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cell_assignment_exprsGen != null) {
              	        for(Iterator it = list_cell_assignment_exprsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_assignment_exprs_return r = (PLSQL3Parser.cell_assignment_exprs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_assignment_exprs");
              	            	cell_assignmentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RBRACKGen != null) {
              			Leaf RBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RBRACKGenLeaf.setKind("RBRACK");
              			RBRACKGenLeaf.setValue(RBRACKGen.getText());
              			RBRACKGenLeaf.setPos(RBRACKGen.getCharPositionInLine());
              			RBRACKGenLeaf.setLine(RBRACKGen.getLine());
              			cell_assignmentReturnNode.getChildren().add(RBRACKGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cell_assignmentReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cell_assignment

    public static class cell_assignment_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cell_assignment_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );
    public final cell_assignment_expr_return cell_assignment_expr() throws RecognitionException {
        cell_assignment_expr_return retval = new cell_assignment_expr_return();
        retval.start = input.LT(1);

        List list_sql_conditionGen=null;
        List list_sql_expressionGen=null;
        List list_single_column_for_loopGen=null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope single_column_for_loopGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:800:1: (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop )
            int alt21=3;
            switch ( input.LA(1) ) {
            case 62:
            case 64:
            case 65:
            case 66:
            case 168:
            case 202:
            case 218:
                {
                alt21=1;
                }
                break;
            case PLUS:
                {
                int LA21_3 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 3, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA21_4 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA21_5 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 5, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA21_6 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 6, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA21_7 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 7, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA21_8 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 8, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA21_9 = input.LA(2);

                if ( (((synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql ))) ) {
                    alt21=1;
                }
                else if ( ((synpred24()&& isSql )) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 9, input);

                    throw nvae;
                }
                }
                break;
            case 121:
                {
                int LA21_10 = input.LA(2);

                if ( (((synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql )||(synpred23()&& isSql ))) ) {
                    alt21=1;
                }
                else if ( ((synpred24()&& isSql )) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 10, input);

                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA21_11 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 11, input);

                    throw nvae;
                }
                }
                break;
            case 233:
                {
                int LA21_12 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 12, input);

                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA21_13 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 13, input);

                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA21_14 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 14, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA21_15 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 15, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA21_16 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 16, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA21_17 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 17, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                int LA21_18 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 18, input);

                    throw nvae;
                }
                }
                break;
            case 69:
                {
                int LA21_19 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 19, input);

                    throw nvae;
                }
                }
                break;
            case 148:
                {
                int LA21_20 = input.LA(2);

                if ( (synpred23()) ) {
                    alt21=1;
                }
                else if ( (synpred24()) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 20, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                alt21=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("799:1: cell_assignment_expr returns [Node returnNode] : (sql_conditionGen+= sql_condition | sql_expressionGen+= sql_expression | single_column_for_loopGen+= single_column_for_loop );", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:800:3: sql_conditionGen+= sql_condition
                    {
                    pushFollow(FOLLOW_sql_condition_in_cell_assignment_expr687);
                    sql_conditionGen=sql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                    list_sql_conditionGen.add(sql_conditionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
                      	    // Create a CST Node
                      		if(list_sql_conditionGen != null) {
                      	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_condition");
                      	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = cell_assignment_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:817:6: sql_expressionGen+= sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_cell_assignment_expr697);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
                      	    // Create a CST Node
                      		if(list_sql_expressionGen != null) {
                      	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = cell_assignment_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:834:6: single_column_for_loopGen+= single_column_for_loop
                    {
                    pushFollow(FOLLOW_single_column_for_loop_in_cell_assignment_expr707);
                    single_column_for_loopGen=single_column_for_loop();
                    _fsp--;
                    if (failed) return retval;
                    if (list_single_column_for_loopGen==null) list_single_column_for_loopGen=new ArrayList();
                    list_single_column_for_loopGen.add(single_column_for_loopGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node cell_assignment_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		cell_assignment_exprReturnNode.setKind("cell_assignment_expr");
                      	    // Create a CST Node
                      		if(list_single_column_for_loopGen != null) {
                      	        for(Iterator it = list_single_column_for_loopGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.single_column_for_loop_return r = (PLSQL3Parser.single_column_for_loop_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("single_column_for_loop");
                      	            	cell_assignment_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = cell_assignment_exprReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cell_assignment_expr

    public static class cell_assignment_exprs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cell_assignment_exprs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:854:1: cell_assignment_exprs returns [Node returnNode] : cell_assignment_exprGen+= cell_assignment_expr (COMMAGen_List+= COMMA cell_assignment_exprGen_1+= cell_assignment_expr )* ;
    public final cell_assignment_exprs_return cell_assignment_exprs() throws RecognitionException {
        cell_assignment_exprs_return retval = new cell_assignment_exprs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_cell_assignment_exprGen=null;
        List list_cell_assignment_exprGen_1=null;
        RuleReturnScope cell_assignment_exprGen = null;
        RuleReturnScope cell_assignment_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:855:1: (cell_assignment_exprGen+= cell_assignment_expr (COMMAGen_List+= COMMA cell_assignment_exprGen_1+= cell_assignment_expr )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:855:3: cell_assignment_exprGen+= cell_assignment_expr (COMMAGen_List+= COMMA cell_assignment_exprGen_1+= cell_assignment_expr )*
            {
            pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs730);
            cell_assignment_exprGen=cell_assignment_expr();
            _fsp--;
            if (failed) return retval;
            if (list_cell_assignment_exprGen==null) list_cell_assignment_exprGen=new ArrayList();
            list_cell_assignment_exprGen.add(cell_assignment_exprGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:855:49: (COMMAGen_List+= COMMA cell_assignment_exprGen_1+= cell_assignment_expr )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==COMMA) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:855:51: COMMAGen_List+= COMMA cell_assignment_exprGen_1+= cell_assignment_expr
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_cell_assignment_exprs736); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs740);
            	    cell_assignment_exprGen_1=cell_assignment_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_cell_assignment_exprGen_1==null) list_cell_assignment_exprGen_1=new ArrayList();
            	    list_cell_assignment_exprGen_1.add(cell_assignment_exprGen_1);


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cell_assignment_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cell_assignment_exprsReturnNode.setKind("cell_assignment_exprs");
              	    // Create a CST Node
              		if(list_cell_assignment_exprGen != null) {
              	        for(Iterator it = list_cell_assignment_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_assignment_expr_return r = (PLSQL3Parser.cell_assignment_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_assignment_expr");
              	            	cell_assignment_exprsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			cell_assignment_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_cell_assignment_exprGen_1 != null) {		
              	    	PLSQL3Parser.cell_assignment_expr_return r = (PLSQL3Parser.cell_assignment_expr_return) list_cell_assignment_exprGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("cell_assignment_expr");
              	    		cell_assignment_exprsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cell_assignment_exprsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cell_assignment_exprs

    public static class cell_reference_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cell_reference
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:900:1: cell_reference returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final cell_reference_return cell_reference() throws RecognitionException {
        cell_reference_return retval = new cell_reference_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:901:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:901:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_cell_reference764);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cell_referenceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cell_referenceReturnNode.setKind("cell_reference");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	cell_referenceReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cell_referenceReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cell_reference

    public static class cell_reference_options_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cell_reference_options
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:921:1: cell_reference_options returns [Node returnNode] : ( (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP ) keyNAVGen+= keyNAV )? (TK_0= 'UNIQUE' (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE ) )? ;
    public final cell_reference_options_return cell_reference_options() throws RecognitionException {
        cell_reference_options_return retval = new cell_reference_options_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_keyIGNOREGen=null;
        List list_keyKEEPGen=null;
        List list_keyNAVGen=null;
        List list_keyDIMENSIONGen=null;
        List list_keySINGLEGen=null;
        List list_keyREFERENCEGen=null;
        RuleReturnScope keyIGNOREGen = null;
        RuleReturnScope keyKEEPGen = null;
        RuleReturnScope keyNAVGen = null;
        RuleReturnScope keyDIMENSIONGen = null;
        RuleReturnScope keySINGLEGen = null;
        RuleReturnScope keyREFERENCEGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:1: ( ( (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP ) keyNAVGen+= keyNAV )? (TK_0= 'UNIQUE' (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE ) )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:3: ( (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP ) keyNAVGen+= keyNAV )? (TK_0= 'UNIQUE' (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE ) )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:3: ( (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP ) keyNAVGen+= keyNAV )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==173||LA24_0==180) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:5: (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP ) keyNAVGen+= keyNAV
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:5: (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP )
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==173) ) {
                        alt23=1;
                    }
                    else if ( (LA23_0==180) ) {
                        alt23=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("922:5: (keyIGNOREGen+= keyIGNORE | keyKEEPGen+= keyKEEP )", 23, 0, input);

                        throw nvae;
                    }
                    switch (alt23) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:7: keyIGNOREGen+= keyIGNORE
                            {
                            pushFollow(FOLLOW_keyIGNORE_in_cell_reference_options789);
                            keyIGNOREGen=keyIGNORE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyIGNOREGen==null) list_keyIGNOREGen=new ArrayList();
                            list_keyIGNOREGen.add(keyIGNOREGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:922:33: keyKEEPGen+= keyKEEP
                            {
                            pushFollow(FOLLOW_keyKEEP_in_cell_reference_options795);
                            keyKEEPGen=keyKEEP();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyKEEPGen==null) list_keyKEEPGen=new ArrayList();
                            list_keyKEEPGen.add(keyKEEPGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyNAV_in_cell_reference_options801);
                    keyNAVGen=keyNAV();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNAVGen==null) list_keyNAVGen=new ArrayList();
                    list_keyNAVGen.add(keyNAVGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:923:3: (TK_0= 'UNIQUE' (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==59) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:923:5: TK_0= 'UNIQUE' (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE )
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_cell_reference_options812); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:923:19: (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE )
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==166) ) {
                        alt25=1;
                    }
                    else if ( (LA25_0==212) ) {
                        alt25=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("923:19: (keyDIMENSIONGen+= keyDIMENSION | keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE )", 25, 0, input);

                        throw nvae;
                    }
                    switch (alt25) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:923:21: keyDIMENSIONGen+= keyDIMENSION
                            {
                            pushFollow(FOLLOW_keyDIMENSION_in_cell_reference_options818);
                            keyDIMENSIONGen=keyDIMENSION();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyDIMENSIONGen==null) list_keyDIMENSIONGen=new ArrayList();
                            list_keyDIMENSIONGen.add(keyDIMENSIONGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:923:53: keySINGLEGen+= keySINGLE keyREFERENCEGen+= keyREFERENCE
                            {
                            pushFollow(FOLLOW_keySINGLE_in_cell_reference_options824);
                            keySINGLEGen=keySINGLE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keySINGLEGen==null) list_keySINGLEGen=new ArrayList();
                            list_keySINGLEGen.add(keySINGLEGen);

                            pushFollow(FOLLOW_keyREFERENCE_in_cell_reference_options828);
                            keyREFERENCEGen=keyREFERENCE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyREFERENCEGen==null) list_keyREFERENCEGen=new ArrayList();
                            list_keyREFERENCEGen.add(keyREFERENCEGen);


                            }
                            break;

                    }


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cell_reference_optionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cell_reference_optionsReturnNode.setKind("cell_reference_options");
              	    // Create a CST Node
              		if(list_keyIGNOREGen != null) {
              	        for(Iterator it = list_keyIGNOREGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyIGNORE_return r = (PLSQL3Parser.keyIGNORE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyIGNORE");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyKEEPGen != null) {
              	        for(Iterator it = list_keyKEEPGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyKEEP_return r = (PLSQL3Parser.keyKEEP_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyKEEP");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyNAVGen != null) {
              	        for(Iterator it = list_keyNAVGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNAV_return r = (PLSQL3Parser.keyNAV_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNAV");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		cell_reference_optionsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyDIMENSIONGen != null) {
              	        for(Iterator it = list_keyDIMENSIONGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyDIMENSION_return r = (PLSQL3Parser.keyDIMENSION_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyDIMENSION");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keySINGLEGen != null) {
              	        for(Iterator it = list_keySINGLEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySINGLE_return r = (PLSQL3Parser.keySINGLE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySINGLE");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyREFERENCEGen != null) {
              	        for(Iterator it = list_keyREFERENCEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREFERENCE_return r = (PLSQL3Parser.keyREFERENCE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREFERENCE");
              	            	cell_reference_optionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cell_reference_optionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cell_reference_options

    public static class column_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start column_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1002:1: column_name returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final column_name_return column_name() throws RecognitionException {
        column_name_return retval = new column_name_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1003:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1003:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_column_name854);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node column_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		column_nameReturnNode.setKind("column_name");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	column_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = column_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end column_name

    public static class column_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start column_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1023:1: column_spec returns [Node returnNode] : sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )* ;
    public final column_spec_return column_spec() throws RecognitionException {
        column_spec_return retval = new column_spec_return();
        retval.start = input.LT(1);

        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_sql_identifierGen=null;
        List list_sql_identifierGen_1=null;
        RuleReturnScope sql_identifierGen = null;
        RuleReturnScope sql_identifierGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1024:1: (sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1024:3: sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )*
            {
            pushFollow(FOLLOW_sql_identifier_in_column_spec875);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1024:37: (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==DOT) ) {
                    int LA27_2 = input.LA(2);

                    if ( ((LA27_2>=ID && LA27_2<=DOUBLEQUOTED_STRING)||LA27_2==110) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1024:39: DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier
            	    {
            	    DOTGen_List=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_column_spec881); if (failed) return retval;
            	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
            	    list_DOTGen_List.add(DOTGen_List);

            	    pushFollow(FOLLOW_sql_identifier_in_column_spec885);
            	    sql_identifierGen_1=sql_identifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_sql_identifierGen_1==null) list_sql_identifierGen_1=new ArrayList();
            	    list_sql_identifierGen_1.add(sql_identifierGen_1);


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		column_specReturnNode.setKind("column_spec");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	column_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal DOTGen_List aggregation
              		if(list_DOTGen_List != null) {
              	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_DOTGen_List != null) {
              		    Token t = (Token) list_DOTGen_List.get(pos); 
              		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_ListLeaf.setKind("DOT");
              			DOTGen_ListLeaf.setValue(t.getText());
              			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			DOTGen_ListLeaf.setLine(t.getLine());
              			column_specReturnNode.getChildren().add(DOTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_sql_identifierGen_1 != null) {		
              	    	PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) list_sql_identifierGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("sql_identifier");
              	    		column_specReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = column_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end column_spec

    public static class column_specs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start column_specs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1074:1: column_specs returns [Node returnNode] : column_specGen+= column_spec (COMMAGen_List+= COMMA column_specGen_1+= column_spec )* ;
    public final column_specs_return column_specs() throws RecognitionException {
        column_specs_return retval = new column_specs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_column_specGen=null;
        List list_column_specGen_1=null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope column_specGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1075:1: (column_specGen+= column_spec (COMMAGen_List+= COMMA column_specGen_1+= column_spec )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1075:3: column_specGen+= column_spec (COMMAGen_List+= COMMA column_specGen_1+= column_spec )*
            {
            pushFollow(FOLLOW_column_spec_in_column_specs915);
            column_specGen=column_spec();
            _fsp--;
            if (failed) return retval;
            if (list_column_specGen==null) list_column_specGen=new ArrayList();
            list_column_specGen.add(column_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1075:31: (COMMAGen_List+= COMMA column_specGen_1+= column_spec )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1075:33: COMMAGen_List+= COMMA column_specGen_1+= column_spec
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_column_specs921); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_column_spec_in_column_specs925);
            	    column_specGen_1=column_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_column_specGen_1==null) list_column_specGen_1=new ArrayList();
            	    list_column_specGen_1.add(column_specGen_1);


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		column_specsReturnNode.setKind("column_specs");
              	    // Create a CST Node
              		if(list_column_specGen != null) {
              	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_spec");
              	            	column_specsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_column_specGen_1 != null) {		
              	    	PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) list_column_specGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("column_spec");
              	    		column_specsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = column_specsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end column_specs

    public static class close_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start close_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1120:1: close_statement returns [Node returnNode] : keyCLOSEGen+= keyCLOSE cursor_nameGen+= cursor_name ;
    public final close_statement_return close_statement() throws RecognitionException {
        close_statement_return retval = new close_statement_return();
        retval.start = input.LT(1);

        List list_keyCLOSEGen=null;
        List list_cursor_nameGen=null;
        RuleReturnScope keyCLOSEGen = null;
        RuleReturnScope cursor_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1121:1: (keyCLOSEGen+= keyCLOSE cursor_nameGen+= cursor_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1121:3: keyCLOSEGen+= keyCLOSE cursor_nameGen+= cursor_name
            {
            pushFollow(FOLLOW_keyCLOSE_in_close_statement949);
            keyCLOSEGen=keyCLOSE();
            _fsp--;
            if (failed) return retval;
            if (list_keyCLOSEGen==null) list_keyCLOSEGen=new ArrayList();
            list_keyCLOSEGen.add(keyCLOSEGen);

            pushFollow(FOLLOW_cursor_name_in_close_statement953);
            cursor_nameGen=cursor_name();
            _fsp--;
            if (failed) return retval;
            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
            list_cursor_nameGen.add(cursor_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node close_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		close_statementReturnNode.setKind("close_statement");
              	    // Create a CST Node
              		if(list_keyCLOSEGen != null) {
              	        for(Iterator it = list_keyCLOSEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCLOSE_return r = (PLSQL3Parser.keyCLOSE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCLOSE");
              	            	close_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	close_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = close_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end close_statement

    public static class commit_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start commit_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1151:1: commit_statement returns [Node returnNode] : TK_0= 'COMMIT' ;
    public final commit_statement_return commit_statement() throws RecognitionException {
        commit_statement_return retval = new commit_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1152:1: (TK_0= 'COMMIT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1152:3: TK_0= 'COMMIT'
            {
            TK_0=(Token)input.LT(1);
            match(input,60,FOLLOW_60_in_commit_statement974); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node commit_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		commit_statementReturnNode.setKind("commit_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		commit_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = commit_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end commit_statement

    public static class condition_and_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_and
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1171:1: condition_and returns [Node returnNode] : condition_notGen+= condition_not (TK_0= 'AND' condition_notGen_1+= condition_not )* ;
    public final condition_and_return condition_and() throws RecognitionException {
        condition_and_return retval = new condition_and_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_condition_notGen=null;
        List list_condition_notGen_1=null;
        RuleReturnScope condition_notGen = null;
        RuleReturnScope condition_notGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:1: (condition_notGen+= condition_not (TK_0= 'AND' condition_notGen_1+= condition_not )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:3: condition_notGen+= condition_not (TK_0= 'AND' condition_notGen_1+= condition_not )*
            {
            pushFollow(FOLLOW_condition_not_in_condition_and995);
            condition_notGen=condition_not();
            _fsp--;
            if (failed) return retval;
            if (list_condition_notGen==null) list_condition_notGen=new ArrayList();
            list_condition_notGen.add(condition_notGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:35: (TK_0= 'AND' condition_notGen_1+= condition_not )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==61) ) {
                    int LA29_2 = input.LA(2);

                    if ( (synpred32()) ) {
                        alt29=1;
                    }


                }


                switch (alt29) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:37: TK_0= 'AND' condition_notGen_1+= condition_not
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,61,FOLLOW_61_in_condition_and1001); if (failed) return retval;
            	    pushFollow(FOLLOW_condition_not_in_condition_and1005);
            	    condition_notGen_1=condition_not();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_condition_notGen_1==null) list_condition_notGen_1=new ArrayList();
            	    list_condition_notGen_1.add(condition_notGen_1);


            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_andReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_andReturnNode.setKind("condition_and");
              	    // Create a CST Node
              		if(list_condition_notGen != null) {
              	        for(Iterator it = list_condition_notGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.condition_not_return r = (PLSQL3Parser.condition_not_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition_not");
              	            	condition_andReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal condition_notGen_1 aggregation
              		if(list_condition_notGen_1 != null) {
              	    for(int pos = 0; pos < list_condition_notGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_andReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_condition_notGen_1 != null) {		
              	    	PLSQL3Parser.condition_not_return r = (PLSQL3Parser.condition_not_return) list_condition_notGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("condition_not");
              	    		condition_andReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_andReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_and

    public static class condition_between_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_between
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1216:1: condition_between returns [Node returnNode] : sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'BETWEEN' sql_expressionGen_1+= sql_expression TK_2= 'AND' sql_expressionGen_2+= sql_expression ;
    public final condition_between_return condition_between() throws RecognitionException {
        condition_between_return retval = new condition_between_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_sql_expressionGen=null;
        List list_sql_expressionGen_1=null;
        List list_sql_expressionGen_2=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope sql_expressionGen_1 = null;
        RuleReturnScope sql_expressionGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1217:1: (sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'BETWEEN' sql_expressionGen_1+= sql_expression TK_2= 'AND' sql_expressionGen_2+= sql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1217:3: sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'BETWEEN' sql_expressionGen_1+= sql_expression TK_2= 'AND' sql_expressionGen_2+= sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_condition_between1030);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1217:37: (TK_0= 'NOT' )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==62) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1217:39: TK_0= 'NOT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_between1036); if (failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,63,FOLLOW_63_in_condition_between1043); if (failed) return retval;
            pushFollow(FOLLOW_sql_expression_in_condition_between1047);
            sql_expressionGen_1=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen_1==null) list_sql_expressionGen_1=new ArrayList();
            list_sql_expressionGen_1.add(sql_expressionGen_1);

            TK_2=(Token)input.LT(1);
            match(input,61,FOLLOW_61_in_condition_between1051); if (failed) return retval;
            pushFollow(FOLLOW_sql_expression_in_condition_between1055);
            sql_expressionGen_2=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen_2==null) list_sql_expressionGen_2=new ArrayList();
            list_sql_expressionGen_2.add(sql_expressionGen_2);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_betweenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_betweenReturnNode.setKind("condition_between");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_betweenReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_betweenReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_expressionGen_1 != null) {
              	        for(Iterator it = list_sql_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		condition_betweenReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_expressionGen_2 != null) {
              	        for(Iterator it = list_sql_expressionGen_2.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_betweenReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_betweenReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_between

    public static class condition_comparison_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_comparison
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1284:1: condition_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ ) LPARENGen_1= LPAREN select_commandGen+= select_command RPARENGen_1= RPAREN (outer_join_signGen_1+= outer_join_sign )? | (TK_0= 'PRIOR' )? sql_expressionGen+= sql_expression (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_1= 'PRIOR' )? (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ) (outer_join_signGen_1+= outer_join_sign )? );
    public final condition_comparison_return condition_comparison() throws RecognitionException {
        condition_comparison_return retval = new condition_comparison_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token EQGen=null;
        Token NOT_EQGen=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        Token TK_0=null;
        Token GTHGen=null;
        Token GEQGen=null;
        Token LTHGen=null;
        Token LEQGen=null;
        Token TK_1=null;
        List list_sql_expressionsGen=null;
        List list_outer_join_signGen=null;
        List list_select_commandGen=null;
        List list_outer_join_signGen_1=null;
        List list_sql_expressionGen=null;
        List list_sql_expressionGen_1=null;
        RuleReturnScope sql_expressionsGen = null;
        RuleReturnScope outer_join_signGen = null;
        RuleReturnScope select_commandGen = null;
        RuleReturnScope outer_join_signGen_1 = null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope sql_expressionGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:1: (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ ) LPARENGen_1= LPAREN select_commandGen+= select_command RPARENGen_1= RPAREN (outer_join_signGen_1+= outer_join_sign )? | (TK_0= 'PRIOR' )? sql_expressionGen+= sql_expression (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_1= 'PRIOR' )? (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ) (outer_join_signGen_1+= outer_join_sign )? )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==LPAREN) ) {
                int LA40_1 = input.LA(2);

                if ( (synpred37()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1284:1: condition_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ ) LPARENGen_1= LPAREN select_commandGen+= select_command RPARENGen_1= RPAREN (outer_join_signGen_1+= outer_join_sign )? | (TK_0= 'PRIOR' )? sql_expressionGen+= sql_expression (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_1= 'PRIOR' )? (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ) (outer_join_signGen_1+= outer_join_sign )? );", 40, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA40_0==NUMBER||(LA40_0>=QUOTED_STRING && LA40_0<=MINUS)||LA40_0==COLON||(LA40_0>=56 && LA40_0<=58)||LA40_0==64||LA40_0==69||LA40_0==110||LA40_0==121||LA40_0==148||LA40_0==153||LA40_0==158||LA40_0==233) ) {
                alt40=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1284:1: condition_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ ) LPARENGen_1= LPAREN select_commandGen+= select_command RPARENGen_1= RPAREN (outer_join_signGen_1+= outer_join_sign )? | (TK_0= 'PRIOR' )? sql_expressionGen+= sql_expression (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_1= 'PRIOR' )? (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ) (outer_join_signGen_1+= outer_join_sign )? );", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:3: LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ ) LPARENGen_1= LPAREN select_commandGen+= select_command RPARENGen_1= RPAREN (outer_join_signGen_1+= outer_join_sign )?
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison1076); if (failed) return retval;
                    pushFollow(FOLLOW_sql_expressions_in_condition_comparison1080);
                    sql_expressionsGen=sql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                    list_sql_expressionsGen.add(sql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison1084); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:73: (outer_join_signGen+= outer_join_sign )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==LPAREN) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:75: outer_join_signGen+= outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison1090);
                            outer_join_signGen=outer_join_sign();
                            _fsp--;
                            if (failed) return retval;
                            if (list_outer_join_signGen==null) list_outer_join_signGen=new ArrayList();
                            list_outer_join_signGen.add(outer_join_signGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:114: (EQGen= EQ | NOT_EQGen= NOT_EQ )
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==EQ) ) {
                        alt32=1;
                    }
                    else if ( (LA32_0==NOT_EQ) ) {
                        alt32=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1285:114: (EQGen= EQ | NOT_EQGen= NOT_EQ )", 32, 0, input);

                        throw nvae;
                    }
                    switch (alt32) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:116: EQGen= EQ
                            {
                            EQGen=(Token)input.LT(1);
                            match(input,EQ,FOLLOW_EQ_in_condition_comparison1099); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:127: NOT_EQGen= NOT_EQ
                            {
                            NOT_EQGen=(Token)input.LT(1);
                            match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_comparison1105); if (failed) return retval;

                            }
                            break;

                    }

                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison1111); if (failed) return retval;
                    pushFollow(FOLLOW_select_command_in_condition_comparison1115);
                    select_commandGen=select_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                    list_select_commandGen.add(select_commandGen);

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison1119); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:218: (outer_join_signGen_1+= outer_join_sign )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LPAREN) ) {
                        int LA33_1 = input.LA(2);

                        if ( (LA33_1==PLUS) ) {
                            int LA33_3 = input.LA(3);

                            if ( (LA33_3==RPAREN) ) {
                                int LA33_4 = input.LA(4);

                                if ( (synpred36()) ) {
                                    alt33=1;
                                }
                            }
                        }
                    }
                    switch (alt33) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:220: outer_join_signGen_1+= outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison1125);
                            outer_join_signGen_1=outer_join_sign();
                            _fsp--;
                            if (failed) return retval;
                            if (list_outer_join_signGen_1==null) list_outer_join_signGen_1=new ArrayList();
                            list_outer_join_signGen_1.add(outer_join_signGen_1);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_comparisonReturnNode.setKind("condition_comparison");
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_outer_join_signGen != null) {
                      	        for(Iterator it = list_outer_join_signGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("outer_join_sign");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(EQGen != null) {
                      			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			EQGenLeaf.setKind("EQ");
                      			EQGenLeaf.setValue(EQGen.getText());
                      			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
                      			EQGenLeaf.setLine(EQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOT_EQGen != null) {
                      			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOT_EQGenLeaf.setKind("NOT_EQ");
                      			NOT_EQGenLeaf.setValue(NOT_EQGen.getText());
                      			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
                      			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LPARENGen_1 != null) {
                      			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGen_1Leaf.setKind("LPAREN");
                      			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
                      			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
                      			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
                      			condition_comparisonReturnNode.getChildren().add(LPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen_1 != null) {
                      			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGen_1Leaf.setKind("RPAREN");
                      			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
                      			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
                      			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
                      			condition_comparisonReturnNode.getChildren().add(RPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_outer_join_signGen_1 != null) {
                      	        for(Iterator it = list_outer_join_signGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("outer_join_sign");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_comparisonReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:4: (TK_0= 'PRIOR' )? sql_expressionGen+= sql_expression (outer_join_signGen+= outer_join_sign )? (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_1= 'PRIOR' )? (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ) (outer_join_signGen_1+= outer_join_sign )?
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:4: (TK_0= 'PRIOR' )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==64) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:6: TK_0= 'PRIOR'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,64,FOLLOW_64_in_condition_comparison1141); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_sql_expression_in_condition_comparison1148);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:56: (outer_join_signGen+= outer_join_sign )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==LPAREN) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:58: outer_join_signGen+= outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison1154);
                            outer_join_signGen=outer_join_sign();
                            _fsp--;
                            if (failed) return retval;
                            if (list_outer_join_signGen==null) list_outer_join_signGen=new ArrayList();
                            list_outer_join_signGen.add(outer_join_signGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:97: (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ )
                    int alt36=6;
                    switch ( input.LA(1) ) {
                    case EQ:
                        {
                        alt36=1;
                        }
                        break;
                    case NOT_EQ:
                        {
                        alt36=2;
                        }
                        break;
                    case GTH:
                        {
                        alt36=3;
                        }
                        break;
                    case GEQ:
                        {
                        alt36=4;
                        }
                        break;
                    case LTH:
                        {
                        alt36=5;
                        }
                        break;
                    case LEQ:
                        {
                        alt36=6;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1387:97: (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ )", 36, 0, input);

                        throw nvae;
                    }

                    switch (alt36) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:99: EQGen= EQ
                            {
                            EQGen=(Token)input.LT(1);
                            match(input,EQ,FOLLOW_EQ_in_condition_comparison1163); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:110: NOT_EQGen= NOT_EQ
                            {
                            NOT_EQGen=(Token)input.LT(1);
                            match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_comparison1169); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:129: GTHGen= GTH
                            {
                            GTHGen=(Token)input.LT(1);
                            match(input,GTH,FOLLOW_GTH_in_condition_comparison1175); if (failed) return retval;

                            }
                            break;
                        case 4 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:142: GEQGen= GEQ
                            {
                            GEQGen=(Token)input.LT(1);
                            match(input,GEQ,FOLLOW_GEQ_in_condition_comparison1181); if (failed) return retval;

                            }
                            break;
                        case 5 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:155: LTHGen= LTH
                            {
                            LTHGen=(Token)input.LT(1);
                            match(input,LTH,FOLLOW_LTH_in_condition_comparison1187); if (failed) return retval;

                            }
                            break;
                        case 6 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:168: LEQGen= LEQ
                            {
                            LEQGen=(Token)input.LT(1);
                            match(input,LEQ,FOLLOW_LEQ_in_condition_comparison1193); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:181: (TK_1= 'PRIOR' )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==64) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:183: TK_1= 'PRIOR'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,64,FOLLOW_64_in_condition_comparison1201); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:199: (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN )
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NUMBER||(LA38_0>=QUOTED_STRING && LA38_0<=MINUS)||LA38_0==COLON||(LA38_0>=56 && LA38_0<=58)||LA38_0==69||LA38_0==110||LA38_0==121||LA38_0==148||LA38_0==153||LA38_0==158||LA38_0==233) ) {
                        alt38=1;
                    }
                    else if ( (LA38_0==LPAREN) ) {
                        int LA38_3 = input.LA(2);

                        if ( (synpred46()) ) {
                            alt38=1;
                        }
                        else if ( (true) ) {
                            alt38=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("1387:199: (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN )", 38, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1387:199: (sql_expressionGen_1+= sql_expression | LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN )", 38, 0, input);

                        throw nvae;
                    }
                    switch (alt38) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:201: sql_expressionGen_1+= sql_expression
                            {
                            pushFollow(FOLLOW_sql_expression_in_condition_comparison1210);
                            sql_expressionGen_1=sql_expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_expressionGen_1==null) list_sql_expressionGen_1=new ArrayList();
                            list_sql_expressionGen_1.add(sql_expressionGen_1);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:239: LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison1216); if (failed) return retval;
                            pushFollow(FOLLOW_select_command_in_condition_comparison1220);
                            select_commandGen=select_command();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                            list_select_commandGen.add(select_commandGen);

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison1224); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:309: (outer_join_signGen_1+= outer_join_sign )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==LPAREN) ) {
                        int LA39_1 = input.LA(2);

                        if ( (synpred47()) ) {
                            alt39=1;
                        }
                    }
                    switch (alt39) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:311: outer_join_signGen_1+= outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison1232);
                            outer_join_signGen_1=outer_join_sign();
                            _fsp--;
                            if (failed) return retval;
                            if (list_outer_join_signGen_1==null) list_outer_join_signGen_1=new ArrayList();
                            list_outer_join_signGen_1.add(outer_join_signGen_1);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_comparisonReturnNode.setKind("condition_comparison");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_comparisonReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_sql_expressionGen != null) {
                      	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_outer_join_signGen != null) {
                      	        for(Iterator it = list_outer_join_signGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("outer_join_sign");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(EQGen != null) {
                      			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			EQGenLeaf.setKind("EQ");
                      			EQGenLeaf.setValue(EQGen.getText());
                      			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
                      			EQGenLeaf.setLine(EQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOT_EQGen != null) {
                      			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOT_EQGenLeaf.setKind("NOT_EQ");
                      			NOT_EQGenLeaf.setValue(NOT_EQGen.getText());
                      			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
                      			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GTHGen != null) {
                      			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GTHGenLeaf.setKind("GTH");
                      			GTHGenLeaf.setValue(GTHGen.getText());
                      			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
                      			GTHGenLeaf.setLine(GTHGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(GTHGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GEQGen != null) {
                      			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GEQGenLeaf.setKind("GEQ");
                      			GEQGenLeaf.setValue(GEQGen.getText());
                      			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
                      			GEQGenLeaf.setLine(GEQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(GEQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LTHGen != null) {
                      			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LTHGenLeaf.setKind("LTH");
                      			LTHGenLeaf.setValue(LTHGen.getText());
                      			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
                      			LTHGenLeaf.setLine(LTHGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(LTHGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LEQGen != null) {
                      			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LEQGenLeaf.setKind("LEQ");
                      			LEQGenLeaf.setValue(LEQGen.getText());
                      			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
                      			LEQGenLeaf.setLine(LEQGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(LEQGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		condition_comparisonReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_sql_expressionGen_1 != null) {
                      	        for(Iterator it = list_sql_expressionGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_outer_join_signGen_1 != null) {
                      	        for(Iterator it = list_outer_join_signGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.outer_join_sign_return r = (PLSQL3Parser.outer_join_sign_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("outer_join_sign");
                      	            	condition_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_comparisonReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_comparison

    public static class condition_equals_path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_equals_path
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1537:1: condition_equals_path returns [Node returnNode] : keyEQUALS_PATHGen+= keyEQUALS_PATH LPARENGen= LPAREN column_nameGen+= column_name COMMAGen= COMMA path_stringGen+= path_string (COMMAGen_1= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN ;
    public final condition_equals_path_return condition_equals_path() throws RecognitionException {
        condition_equals_path_return retval = new condition_equals_path_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token COMMAGen=null;
        Token COMMAGen_1=null;
        Token RPARENGen=null;
        List list_keyEQUALS_PATHGen=null;
        List list_column_nameGen=null;
        List list_path_stringGen=null;
        List list_correlation_integerGen=null;
        RuleReturnScope keyEQUALS_PATHGen = null;
        RuleReturnScope column_nameGen = null;
        RuleReturnScope path_stringGen = null;
        RuleReturnScope correlation_integerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1538:1: (keyEQUALS_PATHGen+= keyEQUALS_PATH LPARENGen= LPAREN column_nameGen+= column_name COMMAGen= COMMA path_stringGen+= path_string (COMMAGen_1= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1538:3: keyEQUALS_PATHGen+= keyEQUALS_PATH LPARENGen= LPAREN column_nameGen+= column_name COMMAGen= COMMA path_stringGen+= path_string (COMMAGen_1= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_keyEQUALS_PATH_in_condition_equals_path1256);
            keyEQUALS_PATHGen=keyEQUALS_PATH();
            _fsp--;
            if (failed) return retval;
            if (list_keyEQUALS_PATHGen==null) list_keyEQUALS_PATHGen=new ArrayList();
            list_keyEQUALS_PATHGen.add(keyEQUALS_PATHGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_equals_path1260); if (failed) return retval;
            pushFollow(FOLLOW_column_name_in_condition_equals_path1264);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            COMMAGen=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path1268); if (failed) return retval;
            pushFollow(FOLLOW_path_string_in_condition_equals_path1272);
            path_stringGen=path_string();
            _fsp--;
            if (failed) return retval;
            if (list_path_stringGen==null) list_path_stringGen=new ArrayList();
            list_path_stringGen.add(path_stringGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1538:125: (COMMAGen_1= COMMA correlation_integerGen+= correlation_integer )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==COMMA) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1538:127: COMMAGen_1= COMMA correlation_integerGen+= correlation_integer
                    {
                    COMMAGen_1=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path1278); if (failed) return retval;
                    pushFollow(FOLLOW_correlation_integer_in_condition_equals_path1282);
                    correlation_integerGen=correlation_integer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_correlation_integerGen==null) list_correlation_integerGen=new ArrayList();
                    list_correlation_integerGen.add(correlation_integerGen);


                    }
                    break;

            }

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_equals_path1289); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_equals_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_equals_pathReturnNode.setKind("condition_equals_path");
              	    // Create a CST Node
              		if(list_keyEQUALS_PATHGen != null) {
              	        for(Iterator it = list_keyEQUALS_PATHGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyEQUALS_PATH_return r = (PLSQL3Parser.keyEQUALS_PATH_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyEQUALS_PATH");
              	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_equals_pathReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen != null) {
              			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGenLeaf.setKind("COMMA");
              			COMMAGenLeaf.setValue(COMMAGen.getText());
              			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
              			COMMAGenLeaf.setLine(COMMAGen.getLine());
              			condition_equals_pathReturnNode.getChildren().add(COMMAGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_path_stringGen != null) {
              	        for(Iterator it = list_path_stringGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.path_string_return r = (PLSQL3Parser.path_string_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("path_string");
              	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen_1 != null) {
              			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_1Leaf.setKind("COMMA");
              			COMMAGen_1Leaf.setValue(COMMAGen_1.getText());
              			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
              			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
              			condition_equals_pathReturnNode.getChildren().add(COMMAGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_correlation_integerGen != null) {
              	        for(Iterator it = list_correlation_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.correlation_integer_return r = (PLSQL3Parser.correlation_integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("correlation_integer");
              	            	condition_equals_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_equals_pathReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_equals_pathReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_equals_path

    public static class condition_exists_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_exists
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1624:1: condition_exists returns [Node returnNode] : TK_0= 'EXISTS' LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ;
    public final condition_exists_return condition_exists() throws RecognitionException {
        condition_exists_return retval = new condition_exists_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_select_commandGen=null;
        RuleReturnScope select_commandGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1625:1: (TK_0= 'EXISTS' LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1625:3: TK_0= 'EXISTS' LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN
            {
            TK_0=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_condition_exists1310); if (failed) return retval;
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_exists1314); if (failed) return retval;
            pushFollow(FOLLOW_select_command_in_condition_exists1318);
            select_commandGen=select_command();
            _fsp--;
            if (failed) return retval;
            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
            list_select_commandGen.add(select_commandGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_exists1322); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_existsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_existsReturnNode.setKind("condition_exists");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_existsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_existsReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_select_commandGen != null) {
              	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_command");
              	            	condition_existsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_existsReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_existsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_exists

    public static class condition_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );
    public final condition_expr_return condition_expr() throws RecognitionException {
        condition_expr_return retval = new condition_expr_return();
        retval.start = input.LT(1);

        List list_condition_existsGen=null;
        List list_condition_isGen=null;
        List list_condition_comparisonGen=null;
        List list_condition_group_comparisonGen=null;
        List list_condition_inGen=null;
        List list_condition_is_a_setGen=null;
        List list_condition_is_anyGen=null;
        List list_condition_is_emptyGen=null;
        List list_condition_is_of_typeGen=null;
        List list_condition_is_presentGen=null;
        List list_condition_likeGen=null;
        List list_condition_memberGen=null;
        List list_condition_betweenGen=null;
        List list_condition_regexp_likeGen=null;
        List list_condition_submultisetGen=null;
        List list_condition_equals_pathGen=null;
        List list_condition_under_pathGen=null;
        List list_condition_parenGen=null;
        RuleReturnScope condition_existsGen = null;
        RuleReturnScope condition_isGen = null;
        RuleReturnScope condition_comparisonGen = null;
        RuleReturnScope condition_group_comparisonGen = null;
        RuleReturnScope condition_inGen = null;
        RuleReturnScope condition_is_a_setGen = null;
        RuleReturnScope condition_is_anyGen = null;
        RuleReturnScope condition_is_emptyGen = null;
        RuleReturnScope condition_is_of_typeGen = null;
        RuleReturnScope condition_is_presentGen = null;
        RuleReturnScope condition_likeGen = null;
        RuleReturnScope condition_memberGen = null;
        RuleReturnScope condition_betweenGen = null;
        RuleReturnScope condition_regexp_likeGen = null;
        RuleReturnScope condition_submultisetGen = null;
        RuleReturnScope condition_equals_pathGen = null;
        RuleReturnScope condition_under_pathGen = null;
        RuleReturnScope condition_parenGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1673:1: (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren )
            int alt42=18;
            switch ( input.LA(1) ) {
            case 65:
                {
                alt42=1;
                }
                break;
            case PLUS:
                {
                int LA42_2 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 2, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA42_3 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 3, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA42_4 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else if ( (true) ) {
                    alt42=18;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 4, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA42_5 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred54()) ) {
                    alt42=6;
                }
                else if ( (synpred55()) ) {
                    alt42=7;
                }
                else if ( (synpred56()) ) {
                    alt42=8;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred58()) ) {
                    alt42=10;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else if ( (synpred63()) ) {
                    alt42=15;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA42_6 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred54()) ) {
                    alt42=6;
                }
                else if ( (synpred55()) ) {
                    alt42=7;
                }
                else if ( (synpred56()) ) {
                    alt42=8;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred58()) ) {
                    alt42=10;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else if ( (synpred63()) ) {
                    alt42=15;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 6, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA42_7 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred54()) ) {
                    alt42=6;
                }
                else if ( (synpred55()) ) {
                    alt42=7;
                }
                else if ( (synpred56()) ) {
                    alt42=8;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred58()) ) {
                    alt42=10;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else if ( (synpred63()) ) {
                    alt42=15;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 7, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA42_8 = input.LA(2);

                if ( ((synpred50()&& isSql )) ) {
                    alt42=2;
                }
                else if ( ((synpred51()&& isSql )) ) {
                    alt42=3;
                }
                else if ( ((synpred52()&& isSql )) ) {
                    alt42=4;
                }
                else if ( ((synpred53()&& isSql )) ) {
                    alt42=5;
                }
                else if ( ((synpred57()&& isSql )) ) {
                    alt42=9;
                }
                else if ( ((synpred59()&& isSql )) ) {
                    alt42=11;
                }
                else if ( ((synpred60()&& isSql )) ) {
                    alt42=12;
                }
                else if ( ((synpred61()&& isSql )) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 8, input);

                    throw nvae;
                }
                }
                break;
            case 121:
                {
                int LA42_9 = input.LA(2);

                if ( ((synpred50()&& isSql )) ) {
                    alt42=2;
                }
                else if ( ((synpred51()&& isSql )) ) {
                    alt42=3;
                }
                else if ( ((synpred52()&& isSql )) ) {
                    alt42=4;
                }
                else if ( ((synpred53()&& isSql )) ) {
                    alt42=5;
                }
                else if ( ((synpred57()&& isSql )) ) {
                    alt42=9;
                }
                else if ( ((synpred59()&& isSql )) ) {
                    alt42=11;
                }
                else if ( ((synpred60()&& isSql )) ) {
                    alt42=12;
                }
                else if ( ((synpred61()&& isSql )) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 9, input);

                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA42_10 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 10, input);

                    throw nvae;
                }
                }
                break;
            case 233:
                {
                int LA42_11 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 11, input);

                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA42_12 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 12, input);

                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA42_13 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 13, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA42_14 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 14, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA42_15 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 15, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA42_16 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 16, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                int LA42_17 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 17, input);

                    throw nvae;
                }
                }
                break;
            case 69:
                {
                int LA42_18 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 18, input);

                    throw nvae;
                }
                }
                break;
            case 148:
                {
                int LA42_19 = input.LA(2);

                if ( (synpred50()) ) {
                    alt42=2;
                }
                else if ( (synpred51()) ) {
                    alt42=3;
                }
                else if ( (synpred52()) ) {
                    alt42=4;
                }
                else if ( (synpred53()) ) {
                    alt42=5;
                }
                else if ( (synpred57()) ) {
                    alt42=9;
                }
                else if ( (synpred59()) ) {
                    alt42=11;
                }
                else if ( (synpred60()) ) {
                    alt42=12;
                }
                else if ( (synpred61()) ) {
                    alt42=13;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 19, input);

                    throw nvae;
                }
                }
                break;
            case 64:
                {
                alt42=3;
                }
                break;
            case 66:
                {
                alt42=7;
                }
                break;
            case 202:
                {
                alt42=14;
                }
                break;
            case 168:
                {
                alt42=16;
                }
                break;
            case 218:
                {
                alt42=17;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1672:1: condition_expr returns [Node returnNode] : (condition_existsGen+= condition_exists | condition_isGen+= condition_is | condition_comparisonGen+= condition_comparison | condition_group_comparisonGen+= condition_group_comparison | condition_inGen+= condition_in | condition_is_a_setGen+= condition_is_a_set | condition_is_anyGen+= condition_is_any | condition_is_emptyGen+= condition_is_empty | condition_is_of_typeGen+= condition_is_of_type | condition_is_presentGen+= condition_is_present | condition_likeGen+= condition_like | condition_memberGen+= condition_member | condition_betweenGen+= condition_between | condition_regexp_likeGen+= condition_regexp_like | condition_submultisetGen+= condition_submultiset | condition_equals_pathGen+= condition_equals_path | condition_under_pathGen+= condition_under_path | condition_parenGen+= condition_paren );", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1673:3: condition_existsGen+= condition_exists
                    {
                    pushFollow(FOLLOW_condition_exists_in_condition_expr1344);
                    condition_existsGen=condition_exists();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_existsGen==null) list_condition_existsGen=new ArrayList();
                    list_condition_existsGen.add(condition_existsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_existsGen != null) {
                      	        for(Iterator it = list_condition_existsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_exists_return r = (PLSQL3Parser.condition_exists_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_exists");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1691:4: condition_isGen+= condition_is
                    {
                    pushFollow(FOLLOW_condition_is_in_condition_expr1355);
                    condition_isGen=condition_is();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_isGen==null) list_condition_isGen=new ArrayList();
                    list_condition_isGen.add(condition_isGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_isGen != null) {
                      	        for(Iterator it = list_condition_isGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_return r = (PLSQL3Parser.condition_is_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1709:4: condition_comparisonGen+= condition_comparison
                    {
                    pushFollow(FOLLOW_condition_comparison_in_condition_expr1366);
                    condition_comparisonGen=condition_comparison();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_comparisonGen==null) list_condition_comparisonGen=new ArrayList();
                    list_condition_comparisonGen.add(condition_comparisonGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_comparisonGen != null) {
                      	        for(Iterator it = list_condition_comparisonGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_comparison_return r = (PLSQL3Parser.condition_comparison_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_comparison");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1727:4: condition_group_comparisonGen+= condition_group_comparison
                    {
                    pushFollow(FOLLOW_condition_group_comparison_in_condition_expr1377);
                    condition_group_comparisonGen=condition_group_comparison();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_group_comparisonGen==null) list_condition_group_comparisonGen=new ArrayList();
                    list_condition_group_comparisonGen.add(condition_group_comparisonGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_group_comparisonGen != null) {
                      	        for(Iterator it = list_condition_group_comparisonGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_group_comparison_return r = (PLSQL3Parser.condition_group_comparison_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_group_comparison");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1745:4: condition_inGen+= condition_in
                    {
                    pushFollow(FOLLOW_condition_in_in_condition_expr1388);
                    condition_inGen=condition_in();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_inGen==null) list_condition_inGen=new ArrayList();
                    list_condition_inGen.add(condition_inGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_inGen != null) {
                      	        for(Iterator it = list_condition_inGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_in_return r = (PLSQL3Parser.condition_in_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_in");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1763:4: condition_is_a_setGen+= condition_is_a_set
                    {
                    pushFollow(FOLLOW_condition_is_a_set_in_condition_expr1399);
                    condition_is_a_setGen=condition_is_a_set();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_is_a_setGen==null) list_condition_is_a_setGen=new ArrayList();
                    list_condition_is_a_setGen.add(condition_is_a_setGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_is_a_setGen != null) {
                      	        for(Iterator it = list_condition_is_a_setGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_a_set_return r = (PLSQL3Parser.condition_is_a_set_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is_a_set");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1781:4: condition_is_anyGen+= condition_is_any
                    {
                    pushFollow(FOLLOW_condition_is_any_in_condition_expr1410);
                    condition_is_anyGen=condition_is_any();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_is_anyGen==null) list_condition_is_anyGen=new ArrayList();
                    list_condition_is_anyGen.add(condition_is_anyGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_is_anyGen != null) {
                      	        for(Iterator it = list_condition_is_anyGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_any_return r = (PLSQL3Parser.condition_is_any_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is_any");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1799:4: condition_is_emptyGen+= condition_is_empty
                    {
                    pushFollow(FOLLOW_condition_is_empty_in_condition_expr1421);
                    condition_is_emptyGen=condition_is_empty();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_is_emptyGen==null) list_condition_is_emptyGen=new ArrayList();
                    list_condition_is_emptyGen.add(condition_is_emptyGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_is_emptyGen != null) {
                      	        for(Iterator it = list_condition_is_emptyGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_empty_return r = (PLSQL3Parser.condition_is_empty_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is_empty");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1817:4: condition_is_of_typeGen+= condition_is_of_type
                    {
                    pushFollow(FOLLOW_condition_is_of_type_in_condition_expr1432);
                    condition_is_of_typeGen=condition_is_of_type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_is_of_typeGen==null) list_condition_is_of_typeGen=new ArrayList();
                    list_condition_is_of_typeGen.add(condition_is_of_typeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_is_of_typeGen != null) {
                      	        for(Iterator it = list_condition_is_of_typeGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_of_type_return r = (PLSQL3Parser.condition_is_of_type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is_of_type");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1835:4: condition_is_presentGen+= condition_is_present
                    {
                    pushFollow(FOLLOW_condition_is_present_in_condition_expr1443);
                    condition_is_presentGen=condition_is_present();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_is_presentGen==null) list_condition_is_presentGen=new ArrayList();
                    list_condition_is_presentGen.add(condition_is_presentGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_is_presentGen != null) {
                      	        for(Iterator it = list_condition_is_presentGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_is_present_return r = (PLSQL3Parser.condition_is_present_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_is_present");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1853:4: condition_likeGen+= condition_like
                    {
                    pushFollow(FOLLOW_condition_like_in_condition_expr1454);
                    condition_likeGen=condition_like();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_likeGen==null) list_condition_likeGen=new ArrayList();
                    list_condition_likeGen.add(condition_likeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_likeGen != null) {
                      	        for(Iterator it = list_condition_likeGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_like_return r = (PLSQL3Parser.condition_like_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_like");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1871:4: condition_memberGen+= condition_member
                    {
                    pushFollow(FOLLOW_condition_member_in_condition_expr1465);
                    condition_memberGen=condition_member();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_memberGen==null) list_condition_memberGen=new ArrayList();
                    list_condition_memberGen.add(condition_memberGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_memberGen != null) {
                      	        for(Iterator it = list_condition_memberGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_member_return r = (PLSQL3Parser.condition_member_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_member");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1889:4: condition_betweenGen+= condition_between
                    {
                    pushFollow(FOLLOW_condition_between_in_condition_expr1476);
                    condition_betweenGen=condition_between();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_betweenGen==null) list_condition_betweenGen=new ArrayList();
                    list_condition_betweenGen.add(condition_betweenGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_betweenGen != null) {
                      	        for(Iterator it = list_condition_betweenGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_between_return r = (PLSQL3Parser.condition_between_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_between");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1907:4: condition_regexp_likeGen+= condition_regexp_like
                    {
                    pushFollow(FOLLOW_condition_regexp_like_in_condition_expr1487);
                    condition_regexp_likeGen=condition_regexp_like();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_regexp_likeGen==null) list_condition_regexp_likeGen=new ArrayList();
                    list_condition_regexp_likeGen.add(condition_regexp_likeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_regexp_likeGen != null) {
                      	        for(Iterator it = list_condition_regexp_likeGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_regexp_like_return r = (PLSQL3Parser.condition_regexp_like_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_regexp_like");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1925:4: condition_submultisetGen+= condition_submultiset
                    {
                    pushFollow(FOLLOW_condition_submultiset_in_condition_expr1498);
                    condition_submultisetGen=condition_submultiset();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_submultisetGen==null) list_condition_submultisetGen=new ArrayList();
                    list_condition_submultisetGen.add(condition_submultisetGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_submultisetGen != null) {
                      	        for(Iterator it = list_condition_submultisetGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_submultiset_return r = (PLSQL3Parser.condition_submultiset_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_submultiset");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1943:4: condition_equals_pathGen+= condition_equals_path
                    {
                    pushFollow(FOLLOW_condition_equals_path_in_condition_expr1509);
                    condition_equals_pathGen=condition_equals_path();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_equals_pathGen==null) list_condition_equals_pathGen=new ArrayList();
                    list_condition_equals_pathGen.add(condition_equals_pathGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_equals_pathGen != null) {
                      	        for(Iterator it = list_condition_equals_pathGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_equals_path_return r = (PLSQL3Parser.condition_equals_path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_equals_path");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1961:4: condition_under_pathGen+= condition_under_path
                    {
                    pushFollow(FOLLOW_condition_under_path_in_condition_expr1520);
                    condition_under_pathGen=condition_under_path();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_under_pathGen==null) list_condition_under_pathGen=new ArrayList();
                    list_condition_under_pathGen.add(condition_under_pathGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_under_pathGen != null) {
                      	        for(Iterator it = list_condition_under_pathGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_under_path_return r = (PLSQL3Parser.condition_under_path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_under_path");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1979:4: condition_parenGen+= condition_paren
                    {
                    pushFollow(FOLLOW_condition_paren_in_condition_expr1531);
                    condition_parenGen=condition_paren();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_parenGen==null) list_condition_parenGen=new ArrayList();
                    list_condition_parenGen.add(condition_parenGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_exprReturnNode.setKind("condition_expr");
                      	    // Create a CST Node
                      		if(list_condition_parenGen != null) {
                      	        for(Iterator it = list_condition_parenGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_paren_return r = (PLSQL3Parser.condition_paren_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_paren");
                      	            	condition_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_exprReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_expr

    public static class condition_group_comparison_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_group_comparison
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1999:1: condition_group_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (EQGen= EQ | NOT_EQGen= NOT_EQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen= LPAREN (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command ) RPARENGen= RPAREN );
    public final condition_group_comparison_return condition_group_comparison() throws RecognitionException {
        condition_group_comparison_return retval = new condition_group_comparison_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token EQGen=null;
        Token NOT_EQGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        Token GTHGen=null;
        Token GEQGen=null;
        Token LTHGen=null;
        Token LEQGen=null;
        List list_sql_expressionsGen=null;
        List list_keySOMEGen=null;
        List list_grouping_expression_listGen=null;
        List list_select_commandGen=null;
        List list_sql_expressionGen=null;
        RuleReturnScope sql_expressionsGen = null;
        RuleReturnScope keySOMEGen = null;
        RuleReturnScope grouping_expression_listGen = null;
        RuleReturnScope select_commandGen = null;
        RuleReturnScope sql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:1: (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (EQGen= EQ | NOT_EQGen= NOT_EQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen= LPAREN (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command ) RPARENGen= RPAREN )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LPAREN) ) {
                int LA49_1 = input.LA(2);

                if ( (synpred70()) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1999:1: condition_group_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (EQGen= EQ | NOT_EQGen= NOT_EQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen= LPAREN (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command ) RPARENGen= RPAREN );", 49, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==NUMBER||(LA49_0>=QUOTED_STRING && LA49_0<=MINUS)||LA49_0==COLON||(LA49_0>=56 && LA49_0<=58)||LA49_0==69||LA49_0==110||LA49_0==121||LA49_0==148||LA49_0==153||LA49_0==158||LA49_0==233) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1999:1: condition_group_comparison returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (EQGen= EQ | NOT_EQGen= NOT_EQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen= LPAREN (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command ) RPARENGen= RPAREN );", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:3: LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (EQGen= EQ | NOT_EQGen= NOT_EQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison1552); if (failed) return retval;
                    pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison1556);
                    sql_expressionsGen=sql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                    list_sql_expressionsGen.add(sql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison1560); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:73: (EQGen= EQ | NOT_EQGen= NOT_EQ )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==EQ) ) {
                        alt43=1;
                    }
                    else if ( (LA43_0==NOT_EQ) ) {
                        alt43=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2000:73: (EQGen= EQ | NOT_EQGen= NOT_EQ )", 43, 0, input);

                        throw nvae;
                    }
                    switch (alt43) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:75: EQGen= EQ
                            {
                            EQGen=(Token)input.LT(1);
                            match(input,EQ,FOLLOW_EQ_in_condition_group_comparison1566); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:86: NOT_EQGen= NOT_EQ
                            {
                            NOT_EQGen=(Token)input.LT(1);
                            match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_group_comparison1572); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:105: (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' )
                    int alt44=3;
                    switch ( input.LA(1) ) {
                    case 66:
                        {
                        alt44=1;
                        }
                        break;
                    case 213:
                        {
                        alt44=2;
                        }
                        break;
                    case 67:
                        {
                        alt44=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2000:105: (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' )", 44, 0, input);

                        throw nvae;
                    }

                    switch (alt44) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:107: TK_0= 'ANY'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,66,FOLLOW_66_in_condition_group_comparison1580); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:120: keySOMEGen+= keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison1586);
                            keySOMEGen=keySOME();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keySOMEGen==null) list_keySOMEGen=new ArrayList();
                            list_keySOMEGen.add(keySOMEGen);


                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:142: TK_1= 'ALL'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,67,FOLLOW_67_in_condition_group_comparison1592); if (failed) return retval;

                            }
                            break;

                    }

                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison1598); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:174: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==LPAREN||LA45_0==NUMBER||(LA45_0>=QUOTED_STRING && LA45_0<=MINUS)||LA45_0==COLON||(LA45_0>=56 && LA45_0<=58)||LA45_0==69||LA45_0==110||LA45_0==121||LA45_0==153||LA45_0==158||LA45_0==233) ) {
                        alt45=1;
                    }
                    else if ( (LA45_0==148) ) {
                        int LA45_18 = input.LA(2);

                        if ( (synpred69()) ) {
                            alt45=1;
                        }
                        else if ( (true) ) {
                            alt45=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("2000:174: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )", 45, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2000:174: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )", 45, 0, input);

                        throw nvae;
                    }
                    switch (alt45) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:176: grouping_expression_listGen+= grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_group_comparison1604);
                            grouping_expression_listGen=grouping_expression_list();
                            _fsp--;
                            if (failed) return retval;
                            if (list_grouping_expression_listGen==null) list_grouping_expression_listGen=new ArrayList();
                            list_grouping_expression_listGen.add(grouping_expression_listGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:232: select_commandGen+= select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison1610);
                            select_commandGen=select_command();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                            list_select_commandGen.add(select_commandGen);


                            }
                            break;

                    }

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison1616); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_group_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_group_comparisonReturnNode.setKind("condition_group_comparison");
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(EQGen != null) {
                      			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			EQGenLeaf.setKind("EQ");
                      			EQGenLeaf.setValue(EQGen.getText());
                      			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
                      			EQGenLeaf.setLine(EQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOT_EQGen != null) {
                      			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOT_EQGenLeaf.setKind("NOT_EQ");
                      			NOT_EQGenLeaf.setValue(NOT_EQGen.getText());
                      			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
                      			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_group_comparisonReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keySOMEGen != null) {
                      	        for(Iterator it = list_keySOMEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keySOME_return r = (PLSQL3Parser.keySOME_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keySOME");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		condition_group_comparisonReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen_1 != null) {
                      			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGen_1Leaf.setKind("LPAREN");
                      			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
                      			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
                      			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(LPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_grouping_expression_listGen != null) {
                      	        for(Iterator it = list_grouping_expression_listGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("grouping_expression_list");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen_1 != null) {
                      			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGen_1Leaf.setKind("RPAREN");
                      			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
                      			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
                      			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(RPARENGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_group_comparisonReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:4: sql_expressionGen+= sql_expression (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ ) (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' ) LPARENGen= LPAREN (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command ) RPARENGen= RPAREN
                    {
                    pushFollow(FOLLOW_sql_expression_in_condition_group_comparison1627);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:38: (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ )
                    int alt46=6;
                    switch ( input.LA(1) ) {
                    case EQ:
                        {
                        alt46=1;
                        }
                        break;
                    case NOT_EQ:
                        {
                        alt46=2;
                        }
                        break;
                    case GTH:
                        {
                        alt46=3;
                        }
                        break;
                    case GEQ:
                        {
                        alt46=4;
                        }
                        break;
                    case LTH:
                        {
                        alt46=5;
                        }
                        break;
                    case LEQ:
                        {
                        alt46=6;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2120:38: (EQGen= EQ | NOT_EQGen= NOT_EQ | GTHGen= GTH | GEQGen= GEQ | LTHGen= LTH | LEQGen= LEQ )", 46, 0, input);

                        throw nvae;
                    }

                    switch (alt46) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:40: EQGen= EQ
                            {
                            EQGen=(Token)input.LT(1);
                            match(input,EQ,FOLLOW_EQ_in_condition_group_comparison1633); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:51: NOT_EQGen= NOT_EQ
                            {
                            NOT_EQGen=(Token)input.LT(1);
                            match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_group_comparison1639); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:70: GTHGen= GTH
                            {
                            GTHGen=(Token)input.LT(1);
                            match(input,GTH,FOLLOW_GTH_in_condition_group_comparison1645); if (failed) return retval;

                            }
                            break;
                        case 4 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:83: GEQGen= GEQ
                            {
                            GEQGen=(Token)input.LT(1);
                            match(input,GEQ,FOLLOW_GEQ_in_condition_group_comparison1651); if (failed) return retval;

                            }
                            break;
                        case 5 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:96: LTHGen= LTH
                            {
                            LTHGen=(Token)input.LT(1);
                            match(input,LTH,FOLLOW_LTH_in_condition_group_comparison1657); if (failed) return retval;

                            }
                            break;
                        case 6 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:109: LEQGen= LEQ
                            {
                            LEQGen=(Token)input.LT(1);
                            match(input,LEQ,FOLLOW_LEQ_in_condition_group_comparison1663); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:122: (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' )
                    int alt47=3;
                    switch ( input.LA(1) ) {
                    case 66:
                        {
                        alt47=1;
                        }
                        break;
                    case 213:
                        {
                        alt47=2;
                        }
                        break;
                    case 67:
                        {
                        alt47=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2120:122: (TK_0= 'ANY' | keySOMEGen+= keySOME | TK_1= 'ALL' )", 47, 0, input);

                        throw nvae;
                    }

                    switch (alt47) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:124: TK_0= 'ANY'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,66,FOLLOW_66_in_condition_group_comparison1671); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:137: keySOMEGen+= keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison1677);
                            keySOMEGen=keySOME();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keySOMEGen==null) list_keySOMEGen=new ArrayList();
                            list_keySOMEGen.add(keySOMEGen);


                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:159: TK_1= 'ALL'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,67,FOLLOW_67_in_condition_group_comparison1683); if (failed) return retval;

                            }
                            break;

                    }

                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison1689); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:189: (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command )
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==LPAREN||LA48_0==NUMBER||(LA48_0>=QUOTED_STRING && LA48_0<=MINUS)||LA48_0==COLON||(LA48_0>=56 && LA48_0<=58)||LA48_0==69||LA48_0==110||LA48_0==121||LA48_0==153||LA48_0==158||LA48_0==233) ) {
                        alt48=1;
                    }
                    else if ( (LA48_0==148) ) {
                        int LA48_18 = input.LA(2);

                        if ( (synpred78()) ) {
                            alt48=1;
                        }
                        else if ( (true) ) {
                            alt48=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("2120:189: (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command )", 48, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2120:189: (sql_expressionsGen+= sql_expressions | select_commandGen+= select_command )", 48, 0, input);

                        throw nvae;
                    }
                    switch (alt48) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:191: sql_expressionsGen+= sql_expressions
                            {
                            pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison1695);
                            sql_expressionsGen=sql_expressions();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                            list_sql_expressionsGen.add(sql_expressionsGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:229: select_commandGen+= select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison1701);
                            select_commandGen=select_command();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                            list_select_commandGen.add(select_commandGen);


                            }
                            break;

                    }

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison1707); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_group_comparisonReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_group_comparisonReturnNode.setKind("condition_group_comparison");
                      	    // Create a CST Node
                      		if(list_sql_expressionGen != null) {
                      	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(EQGen != null) {
                      			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			EQGenLeaf.setKind("EQ");
                      			EQGenLeaf.setValue(EQGen.getText());
                      			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
                      			EQGenLeaf.setLine(EQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOT_EQGen != null) {
                      			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOT_EQGenLeaf.setKind("NOT_EQ");
                      			NOT_EQGenLeaf.setValue(NOT_EQGen.getText());
                      			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
                      			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(NOT_EQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GTHGen != null) {
                      			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GTHGenLeaf.setKind("GTH");
                      			GTHGenLeaf.setValue(GTHGen.getText());
                      			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
                      			GTHGenLeaf.setLine(GTHGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(GTHGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GEQGen != null) {
                      			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GEQGenLeaf.setKind("GEQ");
                      			GEQGenLeaf.setValue(GEQGen.getText());
                      			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
                      			GEQGenLeaf.setLine(GEQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(GEQGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LTHGen != null) {
                      			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LTHGenLeaf.setKind("LTH");
                      			LTHGenLeaf.setValue(LTHGen.getText());
                      			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
                      			LTHGenLeaf.setLine(LTHGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(LTHGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LEQGen != null) {
                      			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LEQGenLeaf.setKind("LEQ");
                      			LEQGenLeaf.setValue(LEQGen.getText());
                      			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
                      			LEQGenLeaf.setLine(LEQGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(LEQGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_group_comparisonReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keySOMEGen != null) {
                      	        for(Iterator it = list_keySOMEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keySOME_return r = (PLSQL3Parser.keySOME_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keySOME");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		condition_group_comparisonReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_group_comparisonReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_group_comparisonReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_group_comparisonReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_group_comparison

    public static class condition_in_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_in
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2260:1: condition_in returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen= LPAREN (expression_listGen+= expression_list | select_commandGen+= select_command ) RPARENGen= RPAREN );
    public final condition_in_return condition_in() throws RecognitionException {
        condition_in_return retval = new condition_in_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_sql_expressionsGen=null;
        List list_grouping_expression_listGen=null;
        List list_select_commandGen=null;
        List list_sql_expressionGen=null;
        List list_expression_listGen=null;
        RuleReturnScope sql_expressionsGen = null;
        RuleReturnScope grouping_expression_listGen = null;
        RuleReturnScope select_commandGen = null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope expression_listGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:1: (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen= LPAREN (expression_listGen+= expression_list | select_commandGen+= select_command ) RPARENGen= RPAREN )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==LPAREN) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred81()) ) {
                    alt54=1;
                }
                else if ( (true) ) {
                    alt54=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("2260:1: condition_in returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen= LPAREN (expression_listGen+= expression_list | select_commandGen+= select_command ) RPARENGen= RPAREN );", 54, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA54_0==NUMBER||(LA54_0>=QUOTED_STRING && LA54_0<=MINUS)||LA54_0==COLON||(LA54_0>=56 && LA54_0<=58)||LA54_0==69||LA54_0==110||LA54_0==121||LA54_0==148||LA54_0==153||LA54_0==158||LA54_0==233) ) {
                alt54=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2260:1: condition_in returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN | sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen= LPAREN (expression_listGen+= expression_list | select_commandGen+= select_command ) RPARENGen= RPAREN );", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:3: LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen_1= LPAREN (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command ) RPARENGen_1= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_in1728); if (failed) return retval;
                    pushFollow(FOLLOW_sql_expressions_in_condition_in1732);
                    sql_expressionsGen=sql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                    list_sql_expressionsGen.add(sql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_in1736); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:73: (TK_0= 'NOT' )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==62) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:75: TK_0= 'NOT'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,62,FOLLOW_62_in_condition_in1742); if (failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_condition_in1749); if (failed) return retval;
                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_in1753); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:118: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==LPAREN||LA51_0==NUMBER||(LA51_0>=QUOTED_STRING && LA51_0<=MINUS)||LA51_0==COLON||(LA51_0>=56 && LA51_0<=58)||LA51_0==69||LA51_0==110||LA51_0==121||LA51_0==153||LA51_0==158||LA51_0==233) ) {
                        alt51=1;
                    }
                    else if ( (LA51_0==148) ) {
                        int LA51_18 = input.LA(2);

                        if ( (synpred80()) ) {
                            alt51=1;
                        }
                        else if ( (true) ) {
                            alt51=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("2261:118: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )", 51, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2261:118: (grouping_expression_listGen+= grouping_expression_list | select_commandGen+= select_command )", 51, 0, input);

                        throw nvae;
                    }
                    switch (alt51) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:120: grouping_expression_listGen+= grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_in1759);
                            grouping_expression_listGen=grouping_expression_list();
                            _fsp--;
                            if (failed) return retval;
                            if (list_grouping_expression_listGen==null) list_grouping_expression_listGen=new ArrayList();
                            list_grouping_expression_listGen.add(grouping_expression_listGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:176: select_commandGen+= select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in1765);
                            select_commandGen=select_command();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                            list_select_commandGen.add(select_commandGen);


                            }
                            break;

                    }

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_in1771); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_inReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_inReturnNode.setKind("condition_in");
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_inReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_inReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_inReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		condition_inReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen_1 != null) {
                      			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGen_1Leaf.setKind("LPAREN");
                      			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
                      			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
                      			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
                      			condition_inReturnNode.getChildren().add(LPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_grouping_expression_listGen != null) {
                      	        for(Iterator it = list_grouping_expression_listGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("grouping_expression_list");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen_1 != null) {
                      			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGen_1Leaf.setKind("RPAREN");
                      			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
                      			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
                      			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
                      			condition_inReturnNode.getChildren().add(RPARENGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_inReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:4: sql_expressionGen+= sql_expression (TK_0= 'NOT' )? TK_1= 'IN' LPARENGen= LPAREN (expression_listGen+= expression_list | select_commandGen+= select_command ) RPARENGen= RPAREN
                    {
                    pushFollow(FOLLOW_sql_expression_in_condition_in1782);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:38: (TK_0= 'NOT' )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==62) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:40: TK_0= 'NOT'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,62,FOLLOW_62_in_condition_in1788); if (failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_condition_in1795); if (failed) return retval;
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_condition_in1799); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:81: (expression_listGen+= expression_list | select_commandGen+= select_command )
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==LPAREN||LA53_0==NUMBER||(LA53_0>=QUOTED_STRING && LA53_0<=MINUS)||LA53_0==COLON||(LA53_0>=56 && LA53_0<=58)||LA53_0==69||LA53_0==110||LA53_0==121||LA53_0==153||LA53_0==158||LA53_0==233) ) {
                        alt53=1;
                    }
                    else if ( (LA53_0==148) ) {
                        int LA53_18 = input.LA(2);

                        if ( (synpred83()) ) {
                            alt53=1;
                        }
                        else if ( (true) ) {
                            alt53=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("2353:81: (expression_listGen+= expression_list | select_commandGen+= select_command )", 53, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("2353:81: (expression_listGen+= expression_list | select_commandGen+= select_command )", 53, 0, input);

                        throw nvae;
                    }
                    switch (alt53) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:83: expression_listGen+= expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_condition_in1805);
                            expression_listGen=expression_list();
                            _fsp--;
                            if (failed) return retval;
                            if (list_expression_listGen==null) list_expression_listGen=new ArrayList();
                            list_expression_listGen.add(expression_listGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:121: select_commandGen+= select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in1811);
                            select_commandGen=select_command();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                            list_select_commandGen.add(select_commandGen);


                            }
                            break;

                    }

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_condition_in1817); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_inReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_inReturnNode.setKind("condition_in");
                      	    // Create a CST Node
                      		if(list_sql_expressionGen != null) {
                      	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_inReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		condition_inReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			condition_inReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_expression_listGen != null) {
                      	        for(Iterator it = list_expression_listGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression_list");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	condition_inReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			condition_inReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_inReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_in

    public static class condition_is_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2429:1: condition_is returns [Node returnNode] : sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? (keyNANGen+= keyNAN | keyINFINITEGen+= keyINFINITE | TK_2= 'NULL' ) ;
    public final condition_is_return condition_is() throws RecognitionException {
        condition_is_return retval = new condition_is_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_sql_expressionGen=null;
        List list_keyNANGen=null;
        List list_keyINFINITEGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope keyNANGen = null;
        RuleReturnScope keyINFINITEGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:1: (sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? (keyNANGen+= keyNAN | keyINFINITEGen+= keyINFINITE | TK_2= 'NULL' ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:3: sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? (keyNANGen+= keyNAN | keyINFINITEGen+= keyINFINITE | TK_2= 'NULL' )
            {
            pushFollow(FOLLOW_sql_expression_in_condition_is1838);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_condition_is1842); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:47: (TK_1= 'NOT' )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==62) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:49: TK_1= 'NOT'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_is1848); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:63: (keyNANGen+= keyNAN | keyINFINITEGen+= keyINFINITE | TK_2= 'NULL' )
            int alt56=3;
            switch ( input.LA(1) ) {
            case 192:
                {
                alt56=1;
                }
                break;
            case 175:
                {
                alt56=2;
                }
                break;
            case 69:
                {
                alt56=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2430:63: (keyNANGen+= keyNAN | keyINFINITEGen+= keyINFINITE | TK_2= 'NULL' )", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:65: keyNANGen+= keyNAN
                    {
                    pushFollow(FOLLOW_keyNAN_in_condition_is1857);
                    keyNANGen=keyNAN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNANGen==null) list_keyNANGen=new ArrayList();
                    list_keyNANGen.add(keyNANGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:85: keyINFINITEGen+= keyINFINITE
                    {
                    pushFollow(FOLLOW_keyINFINITE_in_condition_is1863);
                    keyINFINITEGen=keyINFINITE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyINFINITEGen==null) list_keyINFINITEGen=new ArrayList();
                    list_keyINFINITEGen.add(keyINFINITEGen);


                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2430:115: TK_2= 'NULL'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_condition_is1869); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_isReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_isReturnNode.setKind("condition_is");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_isReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_isReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_isReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyNANGen != null) {
              	        for(Iterator it = list_keyNANGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNAN_return r = (PLSQL3Parser.keyNAN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNAN");
              	            	condition_isReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyINFINITEGen != null) {
              	        for(Iterator it = list_keyINFINITEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyINFINITE_return r = (PLSQL3Parser.keyINFINITE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyINFINITE");
              	            	condition_isReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		condition_isReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_isReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is

    public static class condition_is_any_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is_any
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2497:1: condition_is_any returns [Node returnNode] : (column_nameGen+= column_name TK_0= 'IS' )? TK_1= 'ANY' ;
    public final condition_is_any_return condition_is_any() throws RecognitionException {
        condition_is_any_return retval = new condition_is_any_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_column_nameGen=null;
        RuleReturnScope column_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2498:1: ( (column_nameGen+= column_name TK_0= 'IS' )? TK_1= 'ANY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2498:3: (column_nameGen+= column_name TK_0= 'IS' )? TK_1= 'ANY'
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2498:3: (column_nameGen+= column_name TK_0= 'IS' )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( ((LA57_0>=ID && LA57_0<=DOUBLEQUOTED_STRING)||LA57_0==110) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2498:5: column_nameGen+= column_name TK_0= 'IS'
                    {
                    pushFollow(FOLLOW_column_name_in_condition_is_any1894);
                    column_nameGen=column_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
                    list_column_nameGen.add(column_nameGen);

                    TK_0=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_condition_is_any1898); if (failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_condition_is_any1905); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_is_anyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_is_anyReturnNode.setKind("condition_is_any");
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	condition_is_anyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_is_anyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_is_anyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_is_anyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is_any

    public static class condition_is_empty_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is_empty
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2536:1: condition_is_empty returns [Node returnNode] : nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyEMPTYGen+= keyEMPTY ;
    public final condition_is_empty_return condition_is_empty() throws RecognitionException {
        condition_is_empty_return retval = new condition_is_empty_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_nested_table_column_nameGen=null;
        List list_keyEMPTYGen=null;
        RuleReturnScope nested_table_column_nameGen = null;
        RuleReturnScope keyEMPTYGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2537:1: (nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyEMPTYGen+= keyEMPTY )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2537:3: nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyEMPTYGen+= keyEMPTY
            {
            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_empty1926);
            nested_table_column_nameGen=nested_table_column_name();
            _fsp--;
            if (failed) return retval;
            if (list_nested_table_column_nameGen==null) list_nested_table_column_nameGen=new ArrayList();
            list_nested_table_column_nameGen.add(nested_table_column_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_condition_is_empty1930); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2537:67: (TK_1= 'NOT' )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==62) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2537:69: TK_1= 'NOT'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_is_empty1936); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyEMPTY_in_condition_is_empty1943);
            keyEMPTYGen=keyEMPTY();
            _fsp--;
            if (failed) return retval;
            if (list_keyEMPTYGen==null) list_keyEMPTYGen=new ArrayList();
            list_keyEMPTYGen.add(keyEMPTYGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_is_emptyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_is_emptyReturnNode.setKind("condition_is_empty");
              	    // Create a CST Node
              		if(list_nested_table_column_nameGen != null) {
              	        for(Iterator it = list_nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table_column_name");
              	            	condition_is_emptyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_is_emptyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_is_emptyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyEMPTYGen != null) {
              	        for(Iterator it = list_keyEMPTYGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyEMPTY_return r = (PLSQL3Parser.keyEMPTY_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyEMPTY");
              	            	condition_is_emptyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_is_emptyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is_empty

    public static class condition_is_a_set_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is_a_set
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2585:1: condition_is_a_set returns [Node returnNode] : nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyAGen+= keyA TK_2= 'SET' ;
    public final condition_is_a_set_return condition_is_a_set() throws RecognitionException {
        condition_is_a_set_return retval = new condition_is_a_set_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_nested_table_column_nameGen=null;
        List list_keyAGen=null;
        RuleReturnScope nested_table_column_nameGen = null;
        RuleReturnScope keyAGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2586:1: (nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyAGen+= keyA TK_2= 'SET' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2586:3: nested_table_column_nameGen+= nested_table_column_name TK_0= 'IS' (TK_1= 'NOT' )? keyAGen+= keyA TK_2= 'SET'
            {
            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_a_set1965);
            nested_table_column_nameGen=nested_table_column_name();
            _fsp--;
            if (failed) return retval;
            if (list_nested_table_column_nameGen==null) list_nested_table_column_nameGen=new ArrayList();
            list_nested_table_column_nameGen.add(nested_table_column_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_condition_is_a_set1969); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2586:67: (TK_1= 'NOT' )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==62) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2586:69: TK_1= 'NOT'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_is_a_set1975); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyA_in_condition_is_a_set1982);
            keyAGen=keyA();
            _fsp--;
            if (failed) return retval;
            if (list_keyAGen==null) list_keyAGen=new ArrayList();
            list_keyAGen.add(keyAGen);

            TK_2=(Token)input.LT(1);
            match(input,70,FOLLOW_70_in_condition_is_a_set1986); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_is_a_setReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_is_a_setReturnNode.setKind("condition_is_a_set");
              	    // Create a CST Node
              		if(list_nested_table_column_nameGen != null) {
              	        for(Iterator it = list_nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table_column_name");
              	            	condition_is_a_setReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_is_a_setReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_is_a_setReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyAGen != null) {
              	        for(Iterator it = list_keyAGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyA_return r = (PLSQL3Parser.keyA_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyA");
              	            	condition_is_a_setReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		condition_is_a_setReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_is_a_setReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is_a_set

    public static class condition_is_of_type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is_of_type
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2643:1: condition_is_of_type returns [Node returnNode] : sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'OF' (keyTYPEGen+= keyTYPE )? LPARENGen= LPAREN type_nameGen+= type_name RPARENGen= RPAREN ;
    public final condition_is_of_type_return condition_is_of_type() throws RecognitionException {
        condition_is_of_type_return retval = new condition_is_of_type_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_sql_expressionGen=null;
        List list_keyTYPEGen=null;
        List list_type_nameGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope keyTYPEGen = null;
        RuleReturnScope type_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:1: (sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'OF' (keyTYPEGen+= keyTYPE )? LPARENGen= LPAREN type_nameGen+= type_name RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:3: sql_expressionGen+= sql_expression TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'OF' (keyTYPEGen+= keyTYPE )? LPARENGen= LPAREN type_nameGen+= type_name RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_sql_expression_in_condition_is_of_type2008);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_condition_is_of_type2012); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:47: (TK_1= 'NOT' )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==62) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:49: TK_1= 'NOT'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_is_of_type2018); if (failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_condition_is_of_type2025); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:73: (keyTYPEGen+= keyTYPE )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==260) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2644:75: keyTYPEGen+= keyTYPE
                    {
                    pushFollow(FOLLOW_keyTYPE_in_condition_is_of_type2031);
                    keyTYPEGen=keyTYPE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyTYPEGen==null) list_keyTYPEGen=new ArrayList();
                    list_keyTYPEGen.add(keyTYPEGen);


                    }
                    break;

            }

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_is_of_type2038); if (failed) return retval;
            pushFollow(FOLLOW_type_name_in_condition_is_of_type2042);
            type_nameGen=type_name();
            _fsp--;
            if (failed) return retval;
            if (list_type_nameGen==null) list_type_nameGen=new ArrayList();
            list_type_nameGen.add(type_nameGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_is_of_type2046); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_is_of_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_is_of_typeReturnNode.setKind("condition_is_of_type");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_is_of_typeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_is_of_typeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		condition_is_of_typeReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyTYPEGen != null) {
              	        for(Iterator it = list_keyTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTYPE");
              	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_is_of_typeReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_type_nameGen != null) {
              	        for(Iterator it = list_type_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_name");
              	            	condition_is_of_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_is_of_typeReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_is_of_typeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is_of_type

    public static class condition_is_present_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_is_present
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2729:1: condition_is_present returns [Node returnNode] : cell_referenceGen+= cell_reference TK_0= 'IS' keyPRESENTGen+= keyPRESENT ;
    public final condition_is_present_return condition_is_present() throws RecognitionException {
        condition_is_present_return retval = new condition_is_present_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_cell_referenceGen=null;
        List list_keyPRESENTGen=null;
        RuleReturnScope cell_referenceGen = null;
        RuleReturnScope keyPRESENTGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2730:1: (cell_referenceGen+= cell_reference TK_0= 'IS' keyPRESENTGen+= keyPRESENT )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2730:3: cell_referenceGen+= cell_reference TK_0= 'IS' keyPRESENTGen+= keyPRESENT
            {
            pushFollow(FOLLOW_cell_reference_in_condition_is_present2067);
            cell_referenceGen=cell_reference();
            _fsp--;
            if (failed) return retval;
            if (list_cell_referenceGen==null) list_cell_referenceGen=new ArrayList();
            list_cell_referenceGen.add(cell_referenceGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_condition_is_present2071); if (failed) return retval;
            pushFollow(FOLLOW_keyPRESENT_in_condition_is_present2075);
            keyPRESENTGen=keyPRESENT();
            _fsp--;
            if (failed) return retval;
            if (list_keyPRESENTGen==null) list_keyPRESENTGen=new ArrayList();
            list_keyPRESENTGen.add(keyPRESENTGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_is_presentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_is_presentReturnNode.setKind("condition_is_present");
              	    // Create a CST Node
              		if(list_cell_referenceGen != null) {
              	        for(Iterator it = list_cell_referenceGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_reference_return r = (PLSQL3Parser.cell_reference_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_reference");
              	            	condition_is_presentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_is_presentReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyPRESENTGen != null) {
              	        for(Iterator it = list_keyPRESENTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyPRESENT_return r = (PLSQL3Parser.keyPRESENT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyPRESENT");
              	            	condition_is_presentReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_is_presentReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_is_present

    public static class condition_like_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_like
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2769:1: condition_like returns [Node returnNode] : sql_expressionGen+= sql_expression (TK_0= 'NOT' )? (TK_1= 'LIKE' | keyLIKECGen+= keyLIKEC | keyLIKE2Gen+= keyLIKE2 | keyLIKE4Gen+= keyLIKE4 ) sql_expressionGen_1+= sql_expression (keyESCAPEGen+= keyESCAPE sql_expressionGen_2+= sql_expression )? ;
    public final condition_like_return condition_like() throws RecognitionException {
        condition_like_return retval = new condition_like_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_sql_expressionGen=null;
        List list_keyLIKECGen=null;
        List list_keyLIKE2Gen=null;
        List list_keyLIKE4Gen=null;
        List list_sql_expressionGen_1=null;
        List list_keyESCAPEGen=null;
        List list_sql_expressionGen_2=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope keyLIKECGen = null;
        RuleReturnScope keyLIKE2Gen = null;
        RuleReturnScope keyLIKE4Gen = null;
        RuleReturnScope sql_expressionGen_1 = null;
        RuleReturnScope keyESCAPEGen = null;
        RuleReturnScope sql_expressionGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:1: (sql_expressionGen+= sql_expression (TK_0= 'NOT' )? (TK_1= 'LIKE' | keyLIKECGen+= keyLIKEC | keyLIKE2Gen+= keyLIKE2 | keyLIKE4Gen+= keyLIKE4 ) sql_expressionGen_1+= sql_expression (keyESCAPEGen+= keyESCAPE sql_expressionGen_2+= sql_expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:3: sql_expressionGen+= sql_expression (TK_0= 'NOT' )? (TK_1= 'LIKE' | keyLIKECGen+= keyLIKEC | keyLIKE2Gen+= keyLIKE2 | keyLIKE4Gen+= keyLIKE4 ) sql_expressionGen_1+= sql_expression (keyESCAPEGen+= keyESCAPE sql_expressionGen_2+= sql_expression )?
            {
            pushFollow(FOLLOW_sql_expression_in_condition_like2096);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:37: (TK_0= 'NOT' )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==62) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:39: TK_0= 'NOT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_like2102); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:53: (TK_1= 'LIKE' | keyLIKECGen+= keyLIKEC | keyLIKE2Gen+= keyLIKE2 | keyLIKE4Gen+= keyLIKE4 )
            int alt63=4;
            switch ( input.LA(1) ) {
            case 72:
                {
                alt63=1;
                }
                break;
            case 185:
                {
                alt63=2;
                }
                break;
            case 183:
                {
                alt63=3;
                }
                break;
            case 184:
                {
                alt63=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2770:53: (TK_1= 'LIKE' | keyLIKECGen+= keyLIKEC | keyLIKE2Gen+= keyLIKE2 | keyLIKE4Gen+= keyLIKE4 )", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:55: TK_1= 'LIKE'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,72,FOLLOW_72_in_condition_like2111); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:69: keyLIKECGen+= keyLIKEC
                    {
                    pushFollow(FOLLOW_keyLIKEC_in_condition_like2117);
                    keyLIKECGen=keyLIKEC();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyLIKECGen==null) list_keyLIKECGen=new ArrayList();
                    list_keyLIKECGen.add(keyLIKECGen);


                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:93: keyLIKE2Gen+= keyLIKE2
                    {
                    pushFollow(FOLLOW_keyLIKE2_in_condition_like2123);
                    keyLIKE2Gen=keyLIKE2();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyLIKE2Gen==null) list_keyLIKE2Gen=new ArrayList();
                    list_keyLIKE2Gen.add(keyLIKE2Gen);


                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:117: keyLIKE4Gen+= keyLIKE4
                    {
                    pushFollow(FOLLOW_keyLIKE4_in_condition_like2129);
                    keyLIKE4Gen=keyLIKE4();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyLIKE4Gen==null) list_keyLIKE4Gen=new ArrayList();
                    list_keyLIKE4Gen.add(keyLIKE4Gen);


                    }
                    break;

            }

            pushFollow(FOLLOW_sql_expression_in_condition_like2135);
            sql_expressionGen_1=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen_1==null) list_sql_expressionGen_1=new ArrayList();
            list_sql_expressionGen_1.add(sql_expressionGen_1);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:177: (keyESCAPEGen+= keyESCAPE sql_expressionGen_2+= sql_expression )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==169) ) {
                int LA64_1 = input.LA(2);

                if ( (synpred96()) ) {
                    alt64=1;
                }
            }
            switch (alt64) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:179: keyESCAPEGen+= keyESCAPE sql_expressionGen_2+= sql_expression
                    {
                    pushFollow(FOLLOW_keyESCAPE_in_condition_like2141);
                    keyESCAPEGen=keyESCAPE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyESCAPEGen==null) list_keyESCAPEGen=new ArrayList();
                    list_keyESCAPEGen.add(keyESCAPEGen);

                    pushFollow(FOLLOW_sql_expression_in_condition_like2145);
                    sql_expressionGen_2=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen_2==null) list_sql_expressionGen_2=new ArrayList();
                    list_sql_expressionGen_2.add(sql_expressionGen_2);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_likeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_likeReturnNode.setKind("condition_like");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_likeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_likeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyLIKECGen != null) {
              	        for(Iterator it = list_keyLIKECGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLIKEC_return r = (PLSQL3Parser.keyLIKEC_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLIKEC");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyLIKE2Gen != null) {
              	        for(Iterator it = list_keyLIKE2Gen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLIKE2_return r = (PLSQL3Parser.keyLIKE2_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLIKE2");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyLIKE4Gen != null) {
              	        for(Iterator it = list_keyLIKE4Gen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLIKE4_return r = (PLSQL3Parser.keyLIKE4_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLIKE4");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_sql_expressionGen_1 != null) {
              	        for(Iterator it = list_sql_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyESCAPEGen != null) {
              	        for(Iterator it = list_keyESCAPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyESCAPE_return r = (PLSQL3Parser.keyESCAPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyESCAPE");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_sql_expressionGen_2 != null) {
              	        for(Iterator it = list_sql_expressionGen_2.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_likeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_like

    public static class condition_member_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_member
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2868:1: condition_member returns [Node returnNode] : sql_expressionGen+= sql_expression (TK_0= 'NOT' )? keyMEMBERGen+= keyMEMBER (TK_1= 'OF' )? nested_table_column_nameGen+= nested_table_column_name ;
    public final condition_member_return condition_member() throws RecognitionException {
        condition_member_return retval = new condition_member_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_sql_expressionGen=null;
        List list_keyMEMBERGen=null;
        List list_nested_table_column_nameGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope keyMEMBERGen = null;
        RuleReturnScope nested_table_column_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:1: (sql_expressionGen+= sql_expression (TK_0= 'NOT' )? keyMEMBERGen+= keyMEMBER (TK_1= 'OF' )? nested_table_column_nameGen+= nested_table_column_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:3: sql_expressionGen+= sql_expression (TK_0= 'NOT' )? keyMEMBERGen+= keyMEMBER (TK_1= 'OF' )? nested_table_column_nameGen+= nested_table_column_name
            {
            pushFollow(FOLLOW_sql_expression_in_condition_member2169);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:37: (TK_0= 'NOT' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==62) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:39: TK_0= 'NOT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_member2175); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyMEMBER_in_condition_member2182);
            keyMEMBERGen=keyMEMBER();
            _fsp--;
            if (failed) return retval;
            if (list_keyMEMBERGen==null) list_keyMEMBERGen=new ArrayList();
            list_keyMEMBERGen.add(keyMEMBERGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:77: (TK_1= 'OF' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==71) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2869:79: TK_1= 'OF'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,71,FOLLOW_71_in_condition_member2188); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_table_column_name_in_condition_member2195);
            nested_table_column_nameGen=nested_table_column_name();
            _fsp--;
            if (failed) return retval;
            if (list_nested_table_column_nameGen==null) list_nested_table_column_nameGen=new ArrayList();
            list_nested_table_column_nameGen.add(nested_table_column_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_memberReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_memberReturnNode.setKind("condition_member");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	condition_memberReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_memberReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyMEMBERGen != null) {
              	        for(Iterator it = list_keyMEMBERGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyMEMBER_return r = (PLSQL3Parser.keyMEMBER_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyMEMBER");
              	            	condition_memberReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_memberReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_nested_table_column_nameGen != null) {
              	        for(Iterator it = list_nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table_column_name");
              	            	condition_memberReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_memberReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_member

    public static class condition_not_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_not
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2927:1: condition_not returns [Node returnNode] : (TK_0= 'NOT' condition_exprGen+= condition_expr | condition_exprGen+= condition_expr );
    public final condition_not_return condition_not() throws RecognitionException {
        condition_not_return retval = new condition_not_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_condition_exprGen=null;
        RuleReturnScope condition_exprGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2928:1: (TK_0= 'NOT' condition_exprGen+= condition_expr | condition_exprGen+= condition_expr )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==62) ) {
                alt67=1;
            }
            else if ( (LA67_0==LPAREN||LA67_0==NUMBER||(LA67_0>=QUOTED_STRING && LA67_0<=MINUS)||LA67_0==COLON||(LA67_0>=56 && LA67_0<=58)||(LA67_0>=64 && LA67_0<=66)||LA67_0==69||LA67_0==110||LA67_0==121||LA67_0==148||LA67_0==153||LA67_0==158||LA67_0==168||LA67_0==202||LA67_0==218||LA67_0==233) ) {
                alt67=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("2927:1: condition_not returns [Node returnNode] : (TK_0= 'NOT' condition_exprGen+= condition_expr | condition_exprGen+= condition_expr );", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2928:3: TK_0= 'NOT' condition_exprGen+= condition_expr
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_not2216); if (failed) return retval;
                    pushFollow(FOLLOW_condition_expr_in_condition_not2220);
                    condition_exprGen=condition_expr();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_exprGen==null) list_condition_exprGen=new ArrayList();
                    list_condition_exprGen.add(condition_exprGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_notReturnNode.setKind("condition_not");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		condition_notReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_condition_exprGen != null) {
                      	        for(Iterator it = list_condition_exprGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_expr_return r = (PLSQL3Parser.condition_expr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_expr");
                      	            	condition_notReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_notReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2955:4: condition_exprGen+= condition_expr
                    {
                    pushFollow(FOLLOW_condition_expr_in_condition_not2231);
                    condition_exprGen=condition_expr();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_exprGen==null) list_condition_exprGen=new ArrayList();
                    list_condition_exprGen.add(condition_exprGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node condition_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		condition_notReturnNode.setKind("condition_not");
                      	    // Create a CST Node
                      		if(list_condition_exprGen != null) {
                      	        for(Iterator it = list_condition_exprGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_expr_return r = (PLSQL3Parser.condition_expr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_expr");
                      	            	condition_notReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = condition_notReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_not

    public static class condition_or_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_or
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2975:1: condition_or returns [Node returnNode] : condition_andGen+= condition_and (TK_0= 'OR' condition_andGen_1+= condition_and )* ;
    public final condition_or_return condition_or() throws RecognitionException {
        condition_or_return retval = new condition_or_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_condition_andGen=null;
        List list_condition_andGen_1=null;
        RuleReturnScope condition_andGen = null;
        RuleReturnScope condition_andGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:1: (condition_andGen+= condition_and (TK_0= 'OR' condition_andGen_1+= condition_and )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:3: condition_andGen+= condition_and (TK_0= 'OR' condition_andGen_1+= condition_and )*
            {
            pushFollow(FOLLOW_condition_and_in_condition_or2252);
            condition_andGen=condition_and();
            _fsp--;
            if (failed) return retval;
            if (list_condition_andGen==null) list_condition_andGen=new ArrayList();
            list_condition_andGen.add(condition_andGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:35: (TK_0= 'OR' condition_andGen_1+= condition_and )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==73) ) {
                    int LA68_2 = input.LA(2);

                    if ( (synpred100()) ) {
                        alt68=1;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:37: TK_0= 'OR' condition_andGen_1+= condition_and
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,73,FOLLOW_73_in_condition_or2258); if (failed) return retval;
            	    pushFollow(FOLLOW_condition_and_in_condition_or2262);
            	    condition_andGen_1=condition_and();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_condition_andGen_1==null) list_condition_andGen_1=new ArrayList();
            	    list_condition_andGen_1.add(condition_andGen_1);


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_orReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_orReturnNode.setKind("condition_or");
              	    // Create a CST Node
              		if(list_condition_andGen != null) {
              	        for(Iterator it = list_condition_andGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.condition_and_return r = (PLSQL3Parser.condition_and_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition_and");
              	            	condition_orReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal condition_andGen_1 aggregation
              		if(list_condition_andGen_1 != null) {
              	    for(int pos = 0; pos < list_condition_andGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_orReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_condition_andGen_1 != null) {		
              	    	PLSQL3Parser.condition_and_return r = (PLSQL3Parser.condition_and_return) list_condition_andGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("condition_and");
              	    		condition_orReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_orReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_or

    public static class condition_paren_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_paren
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3020:1: condition_paren returns [Node returnNode] : LPARENGen= LPAREN sql_conditionGen+= sql_condition RPARENGen= RPAREN ;
    public final condition_paren_return condition_paren() throws RecognitionException {
        condition_paren_return retval = new condition_paren_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_sql_conditionGen=null;
        RuleReturnScope sql_conditionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3021:1: (LPARENGen= LPAREN sql_conditionGen+= sql_condition RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3021:3: LPARENGen= LPAREN sql_conditionGen+= sql_condition RPARENGen= RPAREN
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_paren2288); if (failed) return retval;
            pushFollow(FOLLOW_sql_condition_in_condition_paren2292);
            sql_conditionGen=sql_condition();
            _fsp--;
            if (failed) return retval;
            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
            list_sql_conditionGen.add(sql_conditionGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_paren2296); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_parenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_parenReturnNode.setKind("condition_paren");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_parenReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	condition_parenReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_parenReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_parenReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_paren

    public static class condition_regexp_like_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_regexp_like
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3059:1: condition_regexp_like returns [Node returnNode] : keyREGEXP_LIKEGen+= keyREGEXP_LIKE LPARENGen= LPAREN call_parametersGen+= call_parameters RPARENGen= RPAREN ;
    public final condition_regexp_like_return condition_regexp_like() throws RecognitionException {
        condition_regexp_like_return retval = new condition_regexp_like_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyREGEXP_LIKEGen=null;
        List list_call_parametersGen=null;
        RuleReturnScope keyREGEXP_LIKEGen = null;
        RuleReturnScope call_parametersGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3060:1: (keyREGEXP_LIKEGen+= keyREGEXP_LIKE LPARENGen= LPAREN call_parametersGen+= call_parameters RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3060:3: keyREGEXP_LIKEGen+= keyREGEXP_LIKE LPARENGen= LPAREN call_parametersGen+= call_parameters RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like2318);
            keyREGEXP_LIKEGen=keyREGEXP_LIKE();
            _fsp--;
            if (failed) return retval;
            if (list_keyREGEXP_LIKEGen==null) list_keyREGEXP_LIKEGen=new ArrayList();
            list_keyREGEXP_LIKEGen.add(keyREGEXP_LIKEGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_regexp_like2322); if (failed) return retval;
            pushFollow(FOLLOW_call_parameters_in_condition_regexp_like2326);
            call_parametersGen=call_parameters();
            _fsp--;
            if (failed) return retval;
            if (list_call_parametersGen==null) list_call_parametersGen=new ArrayList();
            list_call_parametersGen.add(call_parametersGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_regexp_like2330); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_regexp_likeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_regexp_likeReturnNode.setKind("condition_regexp_like");
              	    // Create a CST Node
              		if(list_keyREGEXP_LIKEGen != null) {
              	        for(Iterator it = list_keyREGEXP_LIKEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREGEXP_LIKE_return r = (PLSQL3Parser.keyREGEXP_LIKE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREGEXP_LIKE");
              	            	condition_regexp_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_regexp_likeReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_call_parametersGen != null) {
              	        for(Iterator it = list_call_parametersGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.call_parameters_return r = (PLSQL3Parser.call_parameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("call_parameters");
              	            	condition_regexp_likeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_regexp_likeReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_regexp_likeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_regexp_like

    public static class condition_submultiset_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_submultiset
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3108:1: condition_submultiset returns [Node returnNode] : nested_table_column_nameGen+= nested_table_column_name (TK_0= 'NOT' )? keySUBMULTISETGen+= keySUBMULTISET (TK_1= 'OF' )? nested_table_column_nameGen_1+= nested_table_column_name ;
    public final condition_submultiset_return condition_submultiset() throws RecognitionException {
        condition_submultiset_return retval = new condition_submultiset_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_nested_table_column_nameGen=null;
        List list_keySUBMULTISETGen=null;
        List list_nested_table_column_nameGen_1=null;
        RuleReturnScope nested_table_column_nameGen = null;
        RuleReturnScope keySUBMULTISETGen = null;
        RuleReturnScope nested_table_column_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:1: (nested_table_column_nameGen+= nested_table_column_name (TK_0= 'NOT' )? keySUBMULTISETGen+= keySUBMULTISET (TK_1= 'OF' )? nested_table_column_nameGen_1+= nested_table_column_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:3: nested_table_column_nameGen+= nested_table_column_name (TK_0= 'NOT' )? keySUBMULTISETGen+= keySUBMULTISET (TK_1= 'OF' )? nested_table_column_nameGen_1+= nested_table_column_name
            {
            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset2351);
            nested_table_column_nameGen=nested_table_column_name();
            _fsp--;
            if (failed) return retval;
            if (list_nested_table_column_nameGen==null) list_nested_table_column_nameGen=new ArrayList();
            list_nested_table_column_nameGen.add(nested_table_column_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:57: (TK_0= 'NOT' )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==62) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:59: TK_0= 'NOT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_condition_submultiset2357); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keySUBMULTISET_in_condition_submultiset2364);
            keySUBMULTISETGen=keySUBMULTISET();
            _fsp--;
            if (failed) return retval;
            if (list_keySUBMULTISETGen==null) list_keySUBMULTISETGen=new ArrayList();
            list_keySUBMULTISETGen.add(keySUBMULTISETGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:107: (TK_1= 'OF' )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==71) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3109:109: TK_1= 'OF'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,71,FOLLOW_71_in_condition_submultiset2370); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset2377);
            nested_table_column_nameGen_1=nested_table_column_name();
            _fsp--;
            if (failed) return retval;
            if (list_nested_table_column_nameGen_1==null) list_nested_table_column_nameGen_1=new ArrayList();
            list_nested_table_column_nameGen_1.add(nested_table_column_nameGen_1);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_submultisetReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_submultisetReturnNode.setKind("condition_submultiset");
              	    // Create a CST Node
              		if(list_nested_table_column_nameGen != null) {
              	        for(Iterator it = list_nested_table_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table_column_name");
              	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		condition_submultisetReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keySUBMULTISETGen != null) {
              	        for(Iterator it = list_keySUBMULTISETGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySUBMULTISET_return r = (PLSQL3Parser.keySUBMULTISET_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySUBMULTISET");
              	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		condition_submultisetReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_nested_table_column_nameGen_1 != null) {
              	        for(Iterator it = list_nested_table_column_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_column_name_return r = (PLSQL3Parser.nested_table_column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table_column_name");
              	            	condition_submultisetReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_submultisetReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_submultiset

    public static class condition_under_path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start condition_under_path
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3167:1: condition_under_path returns [Node returnNode] : keyUNDER_PATHGen+= keyUNDER_PATH LPARENGen= LPAREN column_nameGen+= column_name (COMMAGen= COMMA levelsGen+= levels )? COMMAGen_1= COMMA path_stringGen+= path_string (COMMAGen_2= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN ;
    public final condition_under_path_return condition_under_path() throws RecognitionException {
        condition_under_path_return retval = new condition_under_path_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token COMMAGen=null;
        Token COMMAGen_1=null;
        Token COMMAGen_2=null;
        Token RPARENGen=null;
        List list_keyUNDER_PATHGen=null;
        List list_column_nameGen=null;
        List list_levelsGen=null;
        List list_path_stringGen=null;
        List list_correlation_integerGen=null;
        RuleReturnScope keyUNDER_PATHGen = null;
        RuleReturnScope column_nameGen = null;
        RuleReturnScope levelsGen = null;
        RuleReturnScope path_stringGen = null;
        RuleReturnScope correlation_integerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:1: (keyUNDER_PATHGen+= keyUNDER_PATH LPARENGen= LPAREN column_nameGen+= column_name (COMMAGen= COMMA levelsGen+= levels )? COMMAGen_1= COMMA path_stringGen+= path_string (COMMAGen_2= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:3: keyUNDER_PATHGen+= keyUNDER_PATH LPARENGen= LPAREN column_nameGen+= column_name (COMMAGen= COMMA levelsGen+= levels )? COMMAGen_1= COMMA path_stringGen+= path_string (COMMAGen_2= COMMA correlation_integerGen+= correlation_integer )? RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_keyUNDER_PATH_in_condition_under_path2398);
            keyUNDER_PATHGen=keyUNDER_PATH();
            _fsp--;
            if (failed) return retval;
            if (list_keyUNDER_PATHGen==null) list_keyUNDER_PATHGen=new ArrayList();
            list_keyUNDER_PATHGen.add(keyUNDER_PATHGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_condition_under_path2402); if (failed) return retval;
            pushFollow(FOLLOW_column_name_in_condition_under_path2406);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:80: (COMMAGen= COMMA levelsGen+= levels )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==COMMA) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==NUMBER) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:82: COMMAGen= COMMA levelsGen+= levels
                    {
                    COMMAGen=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_condition_under_path2412); if (failed) return retval;
                    pushFollow(FOLLOW_levels_in_condition_under_path2416);
                    levelsGen=levels();
                    _fsp--;
                    if (failed) return retval;
                    if (list_levelsGen==null) list_levelsGen=new ArrayList();
                    list_levelsGen.add(levelsGen);


                    }
                    break;

            }

            COMMAGen_1=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_condition_under_path2423); if (failed) return retval;
            pushFollow(FOLLOW_path_string_in_condition_under_path2427);
            path_stringGen=path_string();
            _fsp--;
            if (failed) return retval;
            if (list_path_stringGen==null) list_path_stringGen=new ArrayList();
            list_path_stringGen.add(path_stringGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:163: (COMMAGen_2= COMMA correlation_integerGen+= correlation_integer )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COMMA) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3168:165: COMMAGen_2= COMMA correlation_integerGen+= correlation_integer
                    {
                    COMMAGen_2=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_condition_under_path2433); if (failed) return retval;
                    pushFollow(FOLLOW_correlation_integer_in_condition_under_path2437);
                    correlation_integerGen=correlation_integer();
                    _fsp--;
                    if (failed) return retval;
                    if (list_correlation_integerGen==null) list_correlation_integerGen=new ArrayList();
                    list_correlation_integerGen.add(correlation_integerGen);


                    }
                    break;

            }

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_condition_under_path2444); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node condition_under_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		condition_under_pathReturnNode.setKind("condition_under_path");
              	    // Create a CST Node
              		if(list_keyUNDER_PATHGen != null) {
              	        for(Iterator it = list_keyUNDER_PATHGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUNDER_PATH_return r = (PLSQL3Parser.keyUNDER_PATH_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUNDER_PATH");
              	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			condition_under_pathReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen != null) {
              			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGenLeaf.setKind("COMMA");
              			COMMAGenLeaf.setValue(COMMAGen.getText());
              			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
              			COMMAGenLeaf.setLine(COMMAGen.getLine());
              			condition_under_pathReturnNode.getChildren().add(COMMAGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_levelsGen != null) {
              	        for(Iterator it = list_levelsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.levels_return r = (PLSQL3Parser.levels_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("levels");
              	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen_1 != null) {
              			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_1Leaf.setKind("COMMA");
              			COMMAGen_1Leaf.setValue(COMMAGen_1.getText());
              			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
              			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
              			condition_under_pathReturnNode.getChildren().add(COMMAGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_path_stringGen != null) {
              	        for(Iterator it = list_path_stringGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.path_string_return r = (PLSQL3Parser.path_string_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("path_string");
              	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen_2 != null) {
              			Leaf COMMAGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_2Leaf.setKind("COMMA");
              			COMMAGen_2Leaf.setValue(COMMAGen_2.getText());
              			COMMAGen_2Leaf.setPos(COMMAGen_2.getCharPositionInLine());
              			COMMAGen_2Leaf.setLine(COMMAGen_2.getLine());
              			condition_under_pathReturnNode.getChildren().add(COMMAGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_correlation_integerGen != null) {
              	        for(Iterator it = list_correlation_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.correlation_integer_return r = (PLSQL3Parser.correlation_integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("correlation_integer");
              	            	condition_under_pathReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			condition_under_pathReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = condition_under_pathReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end condition_under_path

    public static class correlation_integer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start correlation_integer
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3273:1: correlation_integer returns [Node returnNode] : integerGen+= integer ;
    public final correlation_integer_return correlation_integer() throws RecognitionException {
        correlation_integer_return retval = new correlation_integer_return();
        retval.start = input.LT(1);

        List list_integerGen=null;
        RuleReturnScope integerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3274:1: (integerGen+= integer )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3274:3: integerGen+= integer
            {
            pushFollow(FOLLOW_integer_in_correlation_integer2465);
            integerGen=integer();
            _fsp--;
            if (failed) return retval;
            if (list_integerGen==null) list_integerGen=new ArrayList();
            list_integerGen.add(integerGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node correlation_integerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		correlation_integerReturnNode.setKind("correlation_integer");
              	    // Create a CST Node
              		if(list_integerGen != null) {
              	        for(Iterator it = list_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer");
              	            	correlation_integerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = correlation_integerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end correlation_integer

    public static class create_package_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start create_package
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3294:1: create_package returns [Node returnNode] : TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )? (package_specGen+= package_spec | package_bodyGen+= package_body ) ;
    public final create_package_return create_package() throws RecognitionException {
        create_package_return retval = new create_package_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_keyREPLACEGen=null;
        List list_package_specGen=null;
        List list_package_bodyGen=null;
        RuleReturnScope keyREPLACEGen = null;
        RuleReturnScope package_specGen = null;
        RuleReturnScope package_bodyGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3295:1: (TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )? (package_specGen+= package_spec | package_bodyGen+= package_body ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3295:3: TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )? (package_specGen+= package_spec | package_bodyGen+= package_body )
            {
            TK_0=(Token)input.LT(1);
            match(input,74,FOLLOW_74_in_create_package2486); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3295:17: (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==73) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3295:19: TK_1= 'OR' keyREPLACEGen+= keyREPLACE
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,73,FOLLOW_73_in_create_package2492); if (failed) return retval;
                    pushFollow(FOLLOW_keyREPLACE_in_create_package2496);
                    keyREPLACEGen=keyREPLACE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyREPLACEGen==null) list_keyREPLACEGen=new ArrayList();
                    list_keyREPLACEGen.add(keyREPLACEGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3296:3: (package_specGen+= package_spec | package_bodyGen+= package_body )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==244) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==227) ) {
                    alt74=2;
                }
                else if ( ((LA74_1>=ID && LA74_1<=DOUBLEQUOTED_STRING)||LA74_1==110) ) {
                    alt74=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("3296:3: (package_specGen+= package_spec | package_bodyGen+= package_body )", 74, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3296:3: (package_specGen+= package_spec | package_bodyGen+= package_body )", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3296:5: package_specGen+= package_spec
                    {
                    pushFollow(FOLLOW_package_spec_in_create_package2507);
                    package_specGen=package_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_package_specGen==null) list_package_specGen=new ArrayList();
                    list_package_specGen.add(package_specGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3296:37: package_bodyGen+= package_body
                    {
                    pushFollow(FOLLOW_package_body_in_create_package2513);
                    package_bodyGen=package_body();
                    _fsp--;
                    if (failed) return retval;
                    if (list_package_bodyGen==null) list_package_bodyGen=new ArrayList();
                    list_package_bodyGen.add(package_bodyGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node create_packageReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		create_packageReturnNode.setKind("create_package");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		create_packageReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		create_packageReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyREPLACEGen != null) {
              	        for(Iterator it = list_keyREPLACEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREPLACE_return r = (PLSQL3Parser.keyREPLACE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREPLACE");
              	            	create_packageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_package_specGen != null) {
              	        for(Iterator it = list_package_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_spec_return r = (PLSQL3Parser.package_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_spec");
              	            	create_packageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_package_bodyGen != null) {
              	        for(Iterator it = list_package_bodyGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_body_return r = (PLSQL3Parser.package_body_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_body");
              	            	create_packageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = create_packageReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end create_package

    public static class cursor_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cursor_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3354:1: cursor_declaration returns [Node returnNode] : keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? TK_0= 'IS' select_commandGen+= select_command SEMIGen= SEMI ;
    public final cursor_declaration_return cursor_declaration() throws RecognitionException {
        cursor_declaration_return retval = new cursor_declaration_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_0=null;
        Token SEMIGen=null;
        List list_keyCURSORGen=null;
        List list_cursor_nameGen=null;
        List list_parameter_specsGen=null;
        List list_select_commandGen=null;
        RuleReturnScope keyCURSORGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope parameter_specsGen = null;
        RuleReturnScope select_commandGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3355:1: (keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? TK_0= 'IS' select_commandGen+= select_command SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3355:3: keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? TK_0= 'IS' select_commandGen+= select_command SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyCURSOR_in_cursor_declaration2536);
            keyCURSORGen=keyCURSOR();
            _fsp--;
            if (failed) return retval;
            if (list_keyCURSORGen==null) list_keyCURSORGen=new ArrayList();
            list_keyCURSORGen.add(keyCURSORGen);

            pushFollow(FOLLOW_cursor_name_in_cursor_declaration2540);
            cursor_nameGen=cursor_name();
            _fsp--;
            if (failed) return retval;
            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
            list_cursor_nameGen.add(cursor_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3356:3: (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==LPAREN) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3356:5: LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cursor_declaration2548); if (failed) return retval;
                    pushFollow(FOLLOW_parameter_specs_in_cursor_declaration2552);
                    parameter_specsGen=parameter_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parameter_specsGen==null) list_parameter_specsGen=new ArrayList();
                    list_parameter_specsGen.add(parameter_specsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cursor_declaration2556); if (failed) return retval;

                    }
                    break;

            }

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_cursor_declaration2565); if (failed) return retval;
            pushFollow(FOLLOW_select_command_in_cursor_declaration2569);
            select_commandGen=select_command();
            _fsp--;
            if (failed) return retval;
            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
            list_select_commandGen.add(select_commandGen);

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_cursor_declaration2573); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cursor_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cursor_declarationReturnNode.setKind("cursor_declaration");
              	    // Create a CST Node
              		if(list_keyCURSORGen != null) {
              	        for(Iterator it = list_keyCURSORGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCURSOR");
              	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			cursor_declarationReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_parameter_specsGen != null) {
              	        for(Iterator it = list_parameter_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.parameter_specs_return r = (PLSQL3Parser.parameter_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter_specs");
              	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			cursor_declarationReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		cursor_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_select_commandGen != null) {
              	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_command");
              	            	cursor_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			cursor_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cursor_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cursor_declaration

    public static class cursor_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cursor_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3443:1: cursor_expression returns [Node returnNode] : keyCURSORGen+= keyCURSOR LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN ;
    public final cursor_expression_return cursor_expression() throws RecognitionException {
        cursor_expression_return retval = new cursor_expression_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyCURSORGen=null;
        List list_subqueryGen=null;
        RuleReturnScope keyCURSORGen = null;
        RuleReturnScope subqueryGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3444:1: (keyCURSORGen+= keyCURSOR LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3444:3: keyCURSORGen+= keyCURSOR LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_keyCURSOR_in_cursor_expression2594);
            keyCURSORGen=keyCURSOR();
            _fsp--;
            if (failed) return retval;
            if (list_keyCURSORGen==null) list_keyCURSORGen=new ArrayList();
            list_keyCURSORGen.add(keyCURSORGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_cursor_expression2598); if (failed) return retval;
            pushFollow(FOLLOW_subquery_in_cursor_expression2602);
            subqueryGen=subquery();
            _fsp--;
            if (failed) return retval;
            if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
            list_subqueryGen.add(subqueryGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_cursor_expression2606); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cursor_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cursor_expressionReturnNode.setKind("cursor_expression");
              	    // Create a CST Node
              		if(list_keyCURSORGen != null) {
              	        for(Iterator it = list_keyCURSORGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCURSOR");
              	            	cursor_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			cursor_expressionReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	cursor_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			cursor_expressionReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cursor_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cursor_expression

    public static class cursor_loop_param_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cursor_loop_param
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3492:1: cursor_loop_param returns [Node returnNode] : record_nameGen+= record_name TK_0= 'IN' (cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? | LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN ) ;
    public final cursor_loop_param_return cursor_loop_param() throws RecognitionException {
        cursor_loop_param_return retval = new cursor_loop_param_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_record_nameGen=null;
        List list_cursor_nameGen=null;
        List list_plsql_expressionsGen=null;
        List list_select_statementGen=null;
        RuleReturnScope record_nameGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope plsql_expressionsGen = null;
        RuleReturnScope select_statementGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3493:1: (record_nameGen+= record_name TK_0= 'IN' (cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? | LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3493:3: record_nameGen+= record_name TK_0= 'IN' (cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? | LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN )
            {
            pushFollow(FOLLOW_record_name_in_cursor_loop_param2628);
            record_nameGen=record_name();
            _fsp--;
            if (failed) return retval;
            if (list_record_nameGen==null) list_record_nameGen=new ArrayList();
            list_record_nameGen.add(record_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,51,FOLLOW_51_in_cursor_loop_param2632); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3494:3: (cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? | LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=ID && LA77_0<=DOUBLEQUOTED_STRING)) ) {
                alt77=1;
            }
            else if ( (LA77_0==LPAREN) ) {
                alt77=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3494:3: (cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? | LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN )", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3494:5: cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )?
                    {
                    pushFollow(FOLLOW_cursor_name_in_cursor_loop_param2640);
                    cursor_nameGen=cursor_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
                    list_cursor_nameGen.add(cursor_nameGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3494:33: (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==LPAREN) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3494:35: LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param2646); if (failed) return retval;
                            pushFollow(FOLLOW_plsql_expressions_in_cursor_loop_param2650);
                            plsql_expressionsGen=plsql_expressions();
                            _fsp--;
                            if (failed) return retval;
                            if (list_plsql_expressionsGen==null) list_plsql_expressionsGen=new ArrayList();
                            list_plsql_expressionsGen.add(plsql_expressionsGen);

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param2654); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3495:5: LPARENGen_1= LPAREN select_statementGen+= select_statement RPARENGen_1= RPAREN
                    {
                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param2665); if (failed) return retval;
                    pushFollow(FOLLOW_select_statement_in_cursor_loop_param2669);
                    select_statementGen=select_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_select_statementGen==null) list_select_statementGen=new ArrayList();
                    list_select_statementGen.add(select_statementGen);

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param2673); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cursor_loop_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cursor_loop_paramReturnNode.setKind("cursor_loop_param");
              	    // Create a CST Node
              		if(list_record_nameGen != null) {
              	        for(Iterator it = list_record_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("record_name");
              	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		cursor_loop_paramReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			cursor_loop_paramReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_expressionsGen != null) {
              	        for(Iterator it = list_plsql_expressionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expressions");
              	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			cursor_loop_paramReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			cursor_loop_paramReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_select_statementGen != null) {
              	        for(Iterator it = list_select_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_statement");
              	            	cursor_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			cursor_loop_paramReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cursor_loop_paramReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cursor_loop_param

    public static class cursor_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cursor_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3591:1: cursor_name returns [Node returnNode] : identifierGen+= identifier ;
    public final cursor_name_return cursor_name() throws RecognitionException {
        cursor_name_return retval = new cursor_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3592:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3592:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_cursor_name2699);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cursor_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cursor_nameReturnNode.setKind("cursor_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	cursor_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cursor_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cursor_name

    public static class cursor_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start cursor_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3612:1: cursor_spec returns [Node returnNode] : keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type SEMIGen= SEMI ;
    public final cursor_spec_return cursor_spec() throws RecognitionException {
        cursor_spec_return retval = new cursor_spec_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token SEMIGen=null;
        List list_keyCURSORGen=null;
        List list_cursor_nameGen=null;
        List list_parameter_specsGen=null;
        List list_keyRETURNGen=null;
        List list_return_typeGen=null;
        RuleReturnScope keyCURSORGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope parameter_specsGen = null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope return_typeGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3613:1: (keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3613:3: keyCURSORGen+= keyCURSOR cursor_nameGen+= cursor_name (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyCURSOR_in_cursor_spec2720);
            keyCURSORGen=keyCURSOR();
            _fsp--;
            if (failed) return retval;
            if (list_keyCURSORGen==null) list_keyCURSORGen=new ArrayList();
            list_keyCURSORGen.add(keyCURSORGen);

            pushFollow(FOLLOW_cursor_name_in_cursor_spec2724);
            cursor_nameGen=cursor_name();
            _fsp--;
            if (failed) return retval;
            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
            list_cursor_nameGen.add(cursor_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3614:3: (LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LPAREN) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3614:5: LPARENGen= LPAREN parameter_specsGen+= parameter_specs RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cursor_spec2733); if (failed) return retval;
                    pushFollow(FOLLOW_parameter_specs_in_cursor_spec2737);
                    parameter_specsGen=parameter_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_parameter_specsGen==null) list_parameter_specsGen=new ArrayList();
                    list_parameter_specsGen.add(parameter_specsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cursor_spec2741); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_cursor_spec2750);
            keyRETURNGen=keyRETURN();
            _fsp--;
            if (failed) return retval;
            if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
            list_keyRETURNGen.add(keyRETURNGen);

            pushFollow(FOLLOW_return_type_in_cursor_spec2754);
            return_typeGen=return_type();
            _fsp--;
            if (failed) return retval;
            if (list_return_typeGen==null) list_return_typeGen=new ArrayList();
            list_return_typeGen.add(return_typeGen);

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_cursor_spec2758); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node cursor_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cursor_specReturnNode.setKind("cursor_spec");
              	    // Create a CST Node
              		if(list_keyCURSORGen != null) {
              	        for(Iterator it = list_keyCURSORGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCURSOR_return r = (PLSQL3Parser.keyCURSOR_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCURSOR");
              	            	cursor_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	cursor_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			cursor_specReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_parameter_specsGen != null) {
              	        for(Iterator it = list_parameter_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.parameter_specs_return r = (PLSQL3Parser.parameter_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter_specs");
              	            	cursor_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			cursor_specReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	cursor_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_return_typeGen != null) {
              	        for(Iterator it = list_return_typeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("return_type");
              	            	cursor_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cursor_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end cursor_spec

    public static class datatype_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start datatype
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3693:1: datatype returns [Node returnNode] : (TK_0= 'BINARY_INTEGER' | TK_0= 'BINARY_FLOAT' | TK_0= 'BINARY_DOUBLE' | TK_0= 'NATURAL' | TK_0= 'POSITIVE' | (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' ) (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )? | TK_0= 'LONG' (TK_1= 'RAW' )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'RAW' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'BOOLEAN' | TK_0= 'DATE' | keyINTERVALGen+= keyINTERVAL keyDAYGen+= keyDAY (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keySECONDGen+= keySECOND (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )? | keyINTERVALGen+= keyINTERVAL keyYEARGen+= keyYEAR (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keyMONTHGen+= keyMONTH | (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP ) (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )? | TK_0= 'INTEGER' | TK_0= 'INT' | TK_0= 'SMALLINT' | TK_0= 'FLOAT' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'REAL' | TK_0= 'DOUBLE' keyPRECISIONGen+= keyPRECISION | TK_0= 'CHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'CHARACTER' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NCHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NATIONAL' (TK_1= 'CHARACTER' | TK_2= 'CHAR' ) (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'MLSLABEL' | TK_0= 'PLS_INTEGER' | TK_0= 'BLOB' | TK_0= 'CLOB' (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'NCLOB' | TK_0= 'BFILE' | TK_0= 'ROWID' | TK_0= 'UROWID' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? );
    public final datatype_return datatype() throws RecognitionException {
        datatype_return retval = new datatype_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token LPARENGen=null;
        Token NUMBERGen=null;
        Token COMMAGen=null;
        Token NUMBERGen_1=null;
        Token RPARENGen=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        Token CHARSET_ATTRGen=null;
        List list_keyINTERVALGen=null;
        List list_keyDAYGen=null;
        List list_keySECONDGen=null;
        List list_keyYEARGen=null;
        List list_keyMONTHGen=null;
        List list_keyTIMEGen=null;
        List list_keyTIMESTAMPGen=null;
        List list_keyLOCALGen=null;
        List list_keyTIMEGen_1=null;
        List list_keyZONEGen=null;
        List list_keyPRECISIONGen=null;
        List list_keyVARYINGGen=null;
        List list_keyBYTEGen=null;
        List list_identifierGen=null;
        List list_column_specGen=null;
        RuleReturnScope keyINTERVALGen = null;
        RuleReturnScope keyDAYGen = null;
        RuleReturnScope keySECONDGen = null;
        RuleReturnScope keyYEARGen = null;
        RuleReturnScope keyMONTHGen = null;
        RuleReturnScope keyTIMEGen = null;
        RuleReturnScope keyTIMESTAMPGen = null;
        RuleReturnScope keyLOCALGen = null;
        RuleReturnScope keyTIMEGen_1 = null;
        RuleReturnScope keyZONEGen = null;
        RuleReturnScope keyPRECISIONGen = null;
        RuleReturnScope keyVARYINGGen = null;
        RuleReturnScope keyBYTEGen = null;
        RuleReturnScope identifierGen = null;
        RuleReturnScope column_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3694:1: (TK_0= 'BINARY_INTEGER' | TK_0= 'BINARY_FLOAT' | TK_0= 'BINARY_DOUBLE' | TK_0= 'NATURAL' | TK_0= 'POSITIVE' | (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' ) (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )? | TK_0= 'LONG' (TK_1= 'RAW' )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'RAW' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'BOOLEAN' | TK_0= 'DATE' | keyINTERVALGen+= keyINTERVAL keyDAYGen+= keyDAY (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keySECONDGen+= keySECOND (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )? | keyINTERVALGen+= keyINTERVAL keyYEARGen+= keyYEAR (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keyMONTHGen+= keyMONTH | (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP ) (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )? | TK_0= 'INTEGER' | TK_0= 'INT' | TK_0= 'SMALLINT' | TK_0= 'FLOAT' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'REAL' | TK_0= 'DOUBLE' keyPRECISIONGen+= keyPRECISION | TK_0= 'CHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'CHARACTER' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NCHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NATIONAL' (TK_1= 'CHARACTER' | TK_2= 'CHAR' ) (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'MLSLABEL' | TK_0= 'PLS_INTEGER' | TK_0= 'BLOB' | TK_0= 'CLOB' (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'NCLOB' | TK_0= 'BFILE' | TK_0= 'ROWID' | TK_0= 'UROWID' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? )
            int alt118=35;
            switch ( input.LA(1) ) {
            case 75:
                {
                alt118=1;
                }
                break;
            case 76:
                {
                alt118=2;
                }
                break;
            case 77:
                {
                alt118=3;
                }
                break;
            case 78:
                {
                alt118=4;
                }
                break;
            case 79:
                {
                alt118=5;
                }
                break;
            case 80:
            case 81:
            case 82:
            case 83:
                {
                alt118=6;
                }
                break;
            case 84:
                {
                alt118=7;
                }
                break;
            case 85:
                {
                alt118=8;
                }
                break;
            case 86:
                {
                alt118=9;
                }
                break;
            case 87:
                {
                alt118=10;
                }
                break;
            case 177:
                {
                int LA118_11 = input.LA(2);

                if ( (LA118_11==162) ) {
                    alt118=11;
                }
                else if ( (LA118_11==223) ) {
                    alt118=12;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("3693:1: datatype returns [Node returnNode] : (TK_0= 'BINARY_INTEGER' | TK_0= 'BINARY_FLOAT' | TK_0= 'BINARY_DOUBLE' | TK_0= 'NATURAL' | TK_0= 'POSITIVE' | (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' ) (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )? | TK_0= 'LONG' (TK_1= 'RAW' )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'RAW' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'BOOLEAN' | TK_0= 'DATE' | keyINTERVALGen+= keyINTERVAL keyDAYGen+= keyDAY (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keySECONDGen+= keySECOND (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )? | keyINTERVALGen+= keyINTERVAL keyYEARGen+= keyYEAR (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keyMONTHGen+= keyMONTH | (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP ) (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )? | TK_0= 'INTEGER' | TK_0= 'INT' | TK_0= 'SMALLINT' | TK_0= 'FLOAT' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'REAL' | TK_0= 'DOUBLE' keyPRECISIONGen+= keyPRECISION | TK_0= 'CHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'CHARACTER' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NCHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NATIONAL' (TK_1= 'CHARACTER' | TK_2= 'CHAR' ) (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'MLSLABEL' | TK_0= 'PLS_INTEGER' | TK_0= 'BLOB' | TK_0= 'CLOB' (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'NCLOB' | TK_0= 'BFILE' | TK_0= 'ROWID' | TK_0= 'UROWID' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? );", 118, 11, input);

                    throw nvae;
                }
                }
                break;
            case 215:
            case 216:
                {
                alt118=13;
                }
                break;
            case 90:
                {
                alt118=14;
                }
                break;
            case 91:
                {
                alt118=15;
                }
                break;
            case 92:
                {
                alt118=16;
                }
                break;
            case 93:
                {
                alt118=17;
                }
                break;
            case 94:
                {
                alt118=18;
                }
                break;
            case 95:
                {
                alt118=19;
                }
                break;
            case 96:
                {
                alt118=20;
                }
                break;
            case 98:
                {
                alt118=21;
                }
                break;
            case 99:
                {
                alt118=22;
                }
                break;
            case 97:
                {
                alt118=23;
                }
                break;
            case 100:
                {
                alt118=24;
                }
                break;
            case 101:
                {
                alt118=25;
                }
                break;
            case 102:
                {
                alt118=26;
                }
                break;
            case 103:
                {
                alt118=27;
                }
                break;
            case 104:
                {
                alt118=28;
                }
                break;
            case 105:
                {
                alt118=29;
                }
                break;
            case 106:
                {
                alt118=30;
                }
                break;
            case 107:
                {
                alt118=31;
                }
                break;
            case 108:
                {
                alt118=32;
                }
                break;
            case 109:
                {
                alt118=33;
                }
                break;
            case 110:
                {
                alt118=34;
                }
                break;
            case 111:
                {
                alt118=35;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("3693:1: datatype returns [Node returnNode] : (TK_0= 'BINARY_INTEGER' | TK_0= 'BINARY_FLOAT' | TK_0= 'BINARY_DOUBLE' | TK_0= 'NATURAL' | TK_0= 'POSITIVE' | (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' ) (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )? | TK_0= 'LONG' (TK_1= 'RAW' )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'RAW' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'BOOLEAN' | TK_0= 'DATE' | keyINTERVALGen+= keyINTERVAL keyDAYGen+= keyDAY (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keySECONDGen+= keySECOND (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )? | keyINTERVALGen+= keyINTERVAL keyYEARGen+= keyYEAR (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keyMONTHGen+= keyMONTH | (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP ) (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )? | TK_0= 'INTEGER' | TK_0= 'INT' | TK_0= 'SMALLINT' | TK_0= 'FLOAT' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'REAL' | TK_0= 'DOUBLE' keyPRECISIONGen+= keyPRECISION | TK_0= 'CHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'VARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'CHARACTER' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NCHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NVARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'NATIONAL' (TK_1= 'CHARACTER' | TK_2= 'CHAR' ) (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? | TK_0= 'MLSLABEL' | TK_0= 'PLS_INTEGER' | TK_0= 'BLOB' | TK_0= 'CLOB' (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )? | TK_0= 'NCLOB' | TK_0= 'BFILE' | TK_0= 'ROWID' | TK_0= 'UROWID' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? );", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3694:3: TK_0= 'BINARY_INTEGER'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,75,FOLLOW_75_in_datatype2780); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3711:4: TK_0= 'BINARY_FLOAT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,76,FOLLOW_76_in_datatype2792); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3728:4: TK_0= 'BINARY_DOUBLE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,77,FOLLOW_77_in_datatype2803); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3745:4: TK_0= 'NATURAL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_datatype2814); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3762:4: TK_0= 'POSITIVE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,79,FOLLOW_79_in_datatype2826); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:4: (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' ) (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )?
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:4: (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' )
                    int alt79=4;
                    switch ( input.LA(1) ) {
                    case 80:
                        {
                        alt79=1;
                        }
                        break;
                    case 81:
                        {
                        alt79=2;
                        }
                        break;
                    case 82:
                        {
                        alt79=3;
                        }
                        break;
                    case 83:
                        {
                        alt79=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("3779:4: (TK_0= 'NUMBER' | TK_1= 'NUMERIC' | TK_2= 'DECIMAL' | TK_3= 'DEC' )", 79, 0, input);

                        throw nvae;
                    }

                    switch (alt79) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:6: TK_0= 'NUMBER'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,80,FOLLOW_80_in_datatype2840); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:22: TK_1= 'NUMERIC'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,81,FOLLOW_81_in_datatype2846); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:39: TK_2= 'DECIMAL'
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,82,FOLLOW_82_in_datatype2852); if (failed) return retval;

                            }
                            break;
                        case 4 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:56: TK_3= 'DEC'
                            {
                            TK_3=(Token)input.LT(1);
                            match(input,83,FOLLOW_83_in_datatype2858); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:69: (LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==LPAREN) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:71: LPARENGen= LPAREN NUMBERGen= NUMBER (COMMAGen= COMMA NUMBERGen_1= NUMBER )? RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype2866); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype2870); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:105: (COMMAGen= COMMA NUMBERGen_1= NUMBER )?
                            int alt80=2;
                            int LA80_0 = input.LA(1);

                            if ( (LA80_0==COMMA) ) {
                                alt80=1;
                            }
                            switch (alt80) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3779:107: COMMAGen= COMMA NUMBERGen_1= NUMBER
                                    {
                                    COMMAGen=(Token)input.LT(1);
                                    match(input,COMMA,FOLLOW_COMMA_in_datatype2876); if (failed) return retval;
                                    NUMBERGen_1=(Token)input.LT(1);
                                    match(input,NUMBER,FOLLOW_NUMBER_in_datatype2880); if (failed) return retval;

                                    }
                                    break;

                            }

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype2887); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(COMMAGen != null) {
                      			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COMMAGenLeaf.setKind("COMMA");
                      			COMMAGenLeaf.setValue(COMMAGen.getText());
                      			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
                      			COMMAGenLeaf.setLine(COMMAGen.getLine());
                      			datatypeReturnNode.getChildren().add(COMMAGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen_1 != null) {
                      			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGen_1Leaf.setKind("NUMBER");
                      			NUMBERGen_1Leaf.setValue(NUMBERGen_1.getText());
                      			NUMBERGen_1Leaf.setPos(NUMBERGen_1.getCharPositionInLine());
                      			NUMBERGen_1Leaf.setLine(NUMBERGen_1.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3868:4: TK_0= 'LONG' (TK_1= 'RAW' )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,84,FOLLOW_84_in_datatype2901); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3868:16: (TK_1= 'RAW' )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==85) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3868:18: TK_1= 'RAW'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,85,FOLLOW_85_in_datatype2907); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3868:31: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==LPAREN) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3868:33: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype2915); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype2919); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype2923); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3921:4: TK_0= 'RAW' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,85,FOLLOW_85_in_datatype2937); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3921:15: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==LPAREN) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3921:17: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype2943); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype2947); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype2951); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3965:4: TK_0= 'BOOLEAN'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,86,FOLLOW_86_in_datatype2965); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3982:4: TK_0= 'DATE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,87,FOLLOW_87_in_datatype2976); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3999:4: keyINTERVALGen+= keyINTERVAL keyDAYGen+= keyDAY (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keySECONDGen+= keySECOND (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )?
                    {
                    pushFollow(FOLLOW_keyINTERVAL_in_datatype2987);
                    keyINTERVALGen=keyINTERVAL();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyINTERVALGen==null) list_keyINTERVALGen=new ArrayList();
                    list_keyINTERVALGen.add(keyINTERVALGen);

                    pushFollow(FOLLOW_keyDAY_in_datatype2991);
                    keyDAYGen=keyDAY();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyDAYGen==null) list_keyDAYGen=new ArrayList();
                    list_keyDAYGen.add(keyDAYGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3999:50: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==LPAREN) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3999:52: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype2997); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3001); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3005); if (failed) return retval;

                            }
                            break;

                    }

                    TK_0=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_datatype3012); if (failed) return retval;
                    pushFollow(FOLLOW_keySECOND_in_datatype3016);
                    keySECONDGen=keySECOND();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keySECONDGen==null) list_keySECONDGen=new ArrayList();
                    list_keySECONDGen.add(keySECONDGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3999:140: (LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==LPAREN) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:3999:142: LPARENGen_1= LPAREN NUMBERGen_1= NUMBER RPARENGen_1= RPAREN
                            {
                            LPARENGen_1=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3022); if (failed) return retval;
                            NUMBERGen_1=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3026); if (failed) return retval;
                            RPARENGen_1=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3030); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a CST Node
                      		if(list_keyINTERVALGen != null) {
                      	        for(Iterator it = list_keyINTERVALGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyINTERVAL_return r = (PLSQL3Parser.keyINTERVAL_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyINTERVAL");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyDAYGen != null) {
                      	        for(Iterator it = list_keyDAYGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyDAY_return r = (PLSQL3Parser.keyDAY_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyDAY");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keySECONDGen != null) {
                      	        for(Iterator it = list_keySECONDGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keySECOND_return r = (PLSQL3Parser.keySECOND_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keySECOND");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen_1 != null) {
                      			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGen_1Leaf.setKind("LPAREN");
                      			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
                      			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
                      			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen_1 != null) {
                      			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGen_1Leaf.setKind("NUMBER");
                      			NUMBERGen_1Leaf.setValue(NUMBERGen_1.getText());
                      			NUMBERGen_1Leaf.setPos(NUMBERGen_1.getCharPositionInLine());
                      			NUMBERGen_1Leaf.setLine(NUMBERGen_1.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen_1 != null) {
                      			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGen_1Leaf.setKind("RPAREN");
                      			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
                      			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
                      			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4100:4: keyINTERVALGen+= keyINTERVAL keyYEARGen+= keyYEAR (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? TK_0= 'TO' keyMONTHGen+= keyMONTH
                    {
                    pushFollow(FOLLOW_keyINTERVAL_in_datatype3044);
                    keyINTERVALGen=keyINTERVAL();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyINTERVALGen==null) list_keyINTERVALGen=new ArrayList();
                    list_keyINTERVALGen.add(keyINTERVALGen);

                    pushFollow(FOLLOW_keyYEAR_in_datatype3048);
                    keyYEARGen=keyYEAR();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyYEARGen==null) list_keyYEARGen=new ArrayList();
                    list_keyYEARGen.add(keyYEARGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4100:52: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==LPAREN) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4100:54: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3054); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3058); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3062); if (failed) return retval;

                            }
                            break;

                    }

                    TK_0=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_datatype3069); if (failed) return retval;
                    pushFollow(FOLLOW_keyMONTH_in_datatype3073);
                    keyMONTHGen=keyMONTH();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyMONTHGen==null) list_keyMONTHGen=new ArrayList();
                    list_keyMONTHGen.add(keyMONTHGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a CST Node
                      		if(list_keyINTERVALGen != null) {
                      	        for(Iterator it = list_keyINTERVALGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyINTERVAL_return r = (PLSQL3Parser.keyINTERVAL_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyINTERVAL");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyYEARGen != null) {
                      	        for(Iterator it = list_keyYEARGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyYEAR_return r = (PLSQL3Parser.keyYEAR_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyYEAR");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyMONTHGen != null) {
                      	        for(Iterator it = list_keyMONTHGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyMONTH_return r = (PLSQL3Parser.keyMONTH_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyMONTH");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:4: (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP ) (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )?
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:4: (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==215) ) {
                        alt88=1;
                    }
                    else if ( (LA88_0==216) ) {
                        alt88=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4174:4: (keyTIMEGen+= keyTIME | keyTIMESTAMPGen+= keyTIMESTAMP )", 88, 0, input);

                        throw nvae;
                    }
                    switch (alt88) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:6: keyTIMEGen+= keyTIME
                            {
                            pushFollow(FOLLOW_keyTIME_in_datatype3086);
                            keyTIMEGen=keyTIME();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyTIMEGen==null) list_keyTIMEGen=new ArrayList();
                            list_keyTIMEGen.add(keyTIMEGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:28: keyTIMESTAMPGen+= keyTIMESTAMP
                            {
                            pushFollow(FOLLOW_keyTIMESTAMP_in_datatype3092);
                            keyTIMESTAMPGen=keyTIMESTAMP();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyTIMESTAMPGen==null) list_keyTIMESTAMPGen=new ArrayList();
                            list_keyTIMESTAMPGen.add(keyTIMESTAMPGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:60: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==LPAREN) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:62: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3100); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3104); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3108); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:116: (TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==89) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:118: TK_0= 'WITH' (keyLOCALGen+= keyLOCAL )? keyTIMEGen_1+= keyTIME keyZONEGen+= keyZONE
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,89,FOLLOW_89_in_datatype3117); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:130: (keyLOCALGen+= keyLOCAL )?
                            int alt90=2;
                            int LA90_0 = input.LA(1);

                            if ( (LA90_0==186) ) {
                                alt90=1;
                            }
                            switch (alt90) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4174:132: keyLOCALGen+= keyLOCAL
                                    {
                                    pushFollow(FOLLOW_keyLOCAL_in_datatype3123);
                                    keyLOCALGen=keyLOCAL();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keyLOCALGen==null) list_keyLOCALGen=new ArrayList();
                                    list_keyLOCALGen.add(keyLOCALGen);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_keyTIME_in_datatype3130);
                            keyTIMEGen_1=keyTIME();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyTIMEGen_1==null) list_keyTIMEGen_1=new ArrayList();
                            list_keyTIMEGen_1.add(keyTIMEGen_1);

                            pushFollow(FOLLOW_keyZONE_in_datatype3134);
                            keyZONEGen=keyZONE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyZONEGen==null) list_keyZONEGen=new ArrayList();
                            list_keyZONEGen.add(keyZONEGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a CST Node
                      		if(list_keyTIMEGen != null) {
                      	        for(Iterator it = list_keyTIMEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyTIME_return r = (PLSQL3Parser.keyTIME_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyTIME");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyTIMESTAMPGen != null) {
                      	        for(Iterator it = list_keyTIMESTAMPGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyTIMESTAMP_return r = (PLSQL3Parser.keyTIMESTAMP_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyTIMESTAMP");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyLOCALGen != null) {
                      	        for(Iterator it = list_keyLOCALGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyLOCAL_return r = (PLSQL3Parser.keyLOCAL_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyLOCAL");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyTIMEGen_1 != null) {
                      	        for(Iterator it = list_keyTIMEGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyTIME_return r = (PLSQL3Parser.keyTIME_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyTIME");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyZONEGen != null) {
                      	        for(Iterator it = list_keyZONEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyZONE_return r = (PLSQL3Parser.keyZONE_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyZONE");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4268:4: TK_0= 'INTEGER'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,90,FOLLOW_90_in_datatype3147); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4285:4: TK_0= 'INT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_datatype3158); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4302:4: TK_0= 'SMALLINT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,92,FOLLOW_92_in_datatype3169); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4319:4: TK_0= 'FLOAT' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,93,FOLLOW_93_in_datatype3180); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4319:17: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==LPAREN) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4319:19: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3186); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3190); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3194); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4363:4: TK_0= 'REAL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,94,FOLLOW_94_in_datatype3208); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 19 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4380:4: TK_0= 'DOUBLE' keyPRECISIONGen+= keyPRECISION
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,95,FOLLOW_95_in_datatype3219); if (failed) return retval;
                    pushFollow(FOLLOW_keyPRECISION_in_datatype3223);
                    keyPRECISIONGen=keyPRECISION();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyPRECISIONGen==null) list_keyPRECISIONGen=new ArrayList();
                    list_keyPRECISIONGen.add(keyPRECISIONGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyPRECISIONGen != null) {
                      	        for(Iterator it = list_keyPRECISIONGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyPRECISION_return r = (PLSQL3Parser.keyPRECISION_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyPRECISION");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 20 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:4: TK_0= 'CHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,96,FOLLOW_96_in_datatype3234); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:21: (keyVARYINGGen+= keyVARYING )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==263) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:23: keyVARYINGGen+= keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3245);
                            keyVARYINGGen=keyVARYING();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyVARYINGGen==null) list_keyVARYINGGen=new ArrayList();
                            list_keyVARYINGGen.add(keyVARYINGGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:52: (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==LPAREN) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:54: LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3254); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3258); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:88: (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )?
                            int alt94=3;
                            int LA94_0 = input.LA(1);

                            if ( (LA94_0==230) ) {
                                alt94=1;
                            }
                            else if ( (LA94_0==96) ) {
                                alt94=2;
                            }
                            switch (alt94) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:90: keyBYTEGen+= keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3264);
                                    keyBYTEGen=keyBYTE();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keyBYTEGen==null) list_keyBYTEGen=new ArrayList();
                                    list_keyBYTEGen.add(keyBYTEGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:112: TK_1= 'CHAR'
                                    {
                                    TK_1=(Token)input.LT(1);
                                    match(input,96,FOLLOW_96_in_datatype3270); if (failed) return retval;

                                    }
                                    break;

                            }

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3277); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:147: (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==97) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:149: TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,97,FOLLOW_97_in_datatype3286); if (failed) return retval;
                            TK_3=(Token)input.LT(1);
                            match(input,70,FOLLOW_70_in_datatype3290); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:177: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            int alt96=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA96_1 = input.LA(2);

                                if ( (LA96_1==EOF||(LA96_1>=ASSIGN && LA96_1<=COMMA)||LA96_1==RPAREN||LA96_1==SEMI||(LA96_1>=ID && LA96_1<=DOUBLEQUOTED_STRING)||LA96_1==50||(LA96_1>=52 && LA96_1<=53)||LA96_1==55||LA96_1==62||LA96_1==68||LA96_1==74||LA96_1==120||LA96_1==122||LA96_1==144||LA96_1==154||LA96_1==233||LA96_1==245||LA96_1==247||LA96_1==258||LA96_1==260) ) {
                                    alt96=1;
                                }
                                else if ( (LA96_1==DOT||LA96_1==CHARSET_ATTR) ) {
                                    alt96=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4407:177: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 96, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA96_2 = input.LA(2);

                                if ( (LA96_2==EOF||(LA96_2>=ASSIGN && LA96_2<=COMMA)||LA96_2==RPAREN||LA96_2==SEMI||(LA96_2>=ID && LA96_2<=DOUBLEQUOTED_STRING)||LA96_2==50||(LA96_2>=52 && LA96_2<=53)||LA96_2==55||LA96_2==62||LA96_2==68||LA96_2==74||LA96_2==120||LA96_2==122||LA96_2==144||LA96_2==154||LA96_2==233||LA96_2==245||LA96_2==247||LA96_2==258||LA96_2==260) ) {
                                    alt96=1;
                                }
                                else if ( (LA96_2==DOT||LA96_2==CHARSET_ATTR) ) {
                                    alt96=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4407:177: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 96, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                alt96=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("4407:177: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 96, 0, input);

                                throw nvae;
                            }

                            switch (alt96) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:179: identifierGen+= identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3296);
                                    identifierGen=identifier();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                                    list_identifierGen.add(identifierGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4407:207: column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3302);
                                    column_specGen=column_spec();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                                    list_column_specGen.add(column_specGen);

                                    CHARSET_ATTRGen=(Token)input.LT(1);
                                    match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3306); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyVARYINGGen != null) {
                      	        for(Iterator it = list_keyVARYINGGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyVARYING");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_keyBYTEGen != null) {
                      	        for(Iterator it = list_keyBYTEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyBYTE");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(CHARSET_ATTRGen != null) {
                      			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
                      			CHARSET_ATTRGenLeaf.setValue(CHARSET_ATTRGen.getText());
                      			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
                      			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
                      			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 21 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:4: TK_0= 'VARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,98,FOLLOW_98_in_datatype3322); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:37: (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==LPAREN) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:39: LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3346); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3350); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:73: (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )?
                            int alt98=3;
                            int LA98_0 = input.LA(1);

                            if ( (LA98_0==230) ) {
                                alt98=1;
                            }
                            else if ( (LA98_0==96) ) {
                                alt98=2;
                            }
                            switch (alt98) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:75: keyBYTEGen+= keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3356);
                                    keyBYTEGen=keyBYTE();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keyBYTEGen==null) list_keyBYTEGen=new ArrayList();
                                    list_keyBYTEGen.add(keyBYTEGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:97: TK_1= 'CHAR'
                                    {
                                    TK_1=(Token)input.LT(1);
                                    match(input,96,FOLLOW_96_in_datatype3362); if (failed) return retval;

                                    }
                                    break;

                            }

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3369); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:132: (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==97) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:134: TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,97,FOLLOW_97_in_datatype3378); if (failed) return retval;
                            TK_3=(Token)input.LT(1);
                            match(input,70,FOLLOW_70_in_datatype3382); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            int alt100=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA100_1 = input.LA(2);

                                if ( (LA100_1==EOF||(LA100_1>=ASSIGN && LA100_1<=COMMA)||LA100_1==RPAREN||LA100_1==SEMI||(LA100_1>=ID && LA100_1<=DOUBLEQUOTED_STRING)||LA100_1==50||(LA100_1>=52 && LA100_1<=53)||LA100_1==55||LA100_1==62||LA100_1==68||LA100_1==74||LA100_1==120||LA100_1==122||LA100_1==144||LA100_1==154||LA100_1==233||LA100_1==245||LA100_1==247||LA100_1==258||LA100_1==260) ) {
                                    alt100=1;
                                }
                                else if ( (LA100_1==DOT||LA100_1==CHARSET_ATTR) ) {
                                    alt100=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4527:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 100, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA100_2 = input.LA(2);

                                if ( (LA100_2==EOF||(LA100_2>=ASSIGN && LA100_2<=COMMA)||LA100_2==RPAREN||LA100_2==SEMI||(LA100_2>=ID && LA100_2<=DOUBLEQUOTED_STRING)||LA100_2==50||(LA100_2>=52 && LA100_2<=53)||LA100_2==55||LA100_2==62||LA100_2==68||LA100_2==74||LA100_2==120||LA100_2==122||LA100_2==144||LA100_2==154||LA100_2==233||LA100_2==245||LA100_2==247||LA100_2==258||LA100_2==260) ) {
                                    alt100=1;
                                }
                                else if ( (LA100_2==DOT||LA100_2==CHARSET_ATTR) ) {
                                    alt100=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4527:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 100, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                alt100=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("4527:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 100, 0, input);

                                throw nvae;
                            }

                            switch (alt100) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:164: identifierGen+= identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3388);
                                    identifierGen=identifier();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                                    list_identifierGen.add(identifierGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4527:192: column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3394);
                                    column_specGen=column_spec();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                                    list_column_specGen.add(column_specGen);

                                    CHARSET_ATTRGen=(Token)input.LT(1);
                                    match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3398); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_keyBYTEGen != null) {
                      	        for(Iterator it = list_keyBYTEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyBYTE");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(CHARSET_ATTRGen != null) {
                      			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
                      			CHARSET_ATTRGenLeaf.setValue(CHARSET_ATTRGen.getText());
                      			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
                      			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
                      			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 22 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:4: TK_0= 'VARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )? (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,99,FOLLOW_99_in_datatype3414); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:37: (LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==LPAREN) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:39: LPARENGen= LPAREN NUMBERGen= NUMBER (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )? RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3437); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3441); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:73: (keyBYTEGen+= keyBYTE | TK_1= 'CHAR' )?
                            int alt102=3;
                            int LA102_0 = input.LA(1);

                            if ( (LA102_0==230) ) {
                                alt102=1;
                            }
                            else if ( (LA102_0==96) ) {
                                alt102=2;
                            }
                            switch (alt102) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:75: keyBYTEGen+= keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3447);
                                    keyBYTEGen=keyBYTE();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keyBYTEGen==null) list_keyBYTEGen=new ArrayList();
                                    list_keyBYTEGen.add(keyBYTEGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:97: TK_1= 'CHAR'
                                    {
                                    TK_1=(Token)input.LT(1);
                                    match(input,96,FOLLOW_96_in_datatype3453); if (failed) return retval;

                                    }
                                    break;

                            }

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3460); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:132: (TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==97) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:134: TK_2= 'CHARACTER' TK_3= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,97,FOLLOW_97_in_datatype3469); if (failed) return retval;
                            TK_3=(Token)input.LT(1);
                            match(input,70,FOLLOW_70_in_datatype3473); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            int alt104=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA104_1 = input.LA(2);

                                if ( (LA104_1==EOF||(LA104_1>=ASSIGN && LA104_1<=COMMA)||LA104_1==RPAREN||LA104_1==SEMI||(LA104_1>=ID && LA104_1<=DOUBLEQUOTED_STRING)||LA104_1==50||(LA104_1>=52 && LA104_1<=53)||LA104_1==55||LA104_1==62||LA104_1==68||LA104_1==74||LA104_1==120||LA104_1==122||LA104_1==144||LA104_1==154||LA104_1==233||LA104_1==245||LA104_1==247||LA104_1==258||LA104_1==260) ) {
                                    alt104=1;
                                }
                                else if ( (LA104_1==DOT||LA104_1==CHARSET_ATTR) ) {
                                    alt104=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4637:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 104, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA104_2 = input.LA(2);

                                if ( (LA104_2==DOT||LA104_2==CHARSET_ATTR) ) {
                                    alt104=2;
                                }
                                else if ( (LA104_2==EOF||(LA104_2>=ASSIGN && LA104_2<=COMMA)||LA104_2==RPAREN||LA104_2==SEMI||(LA104_2>=ID && LA104_2<=DOUBLEQUOTED_STRING)||LA104_2==50||(LA104_2>=52 && LA104_2<=53)||LA104_2==55||LA104_2==62||LA104_2==68||LA104_2==74||LA104_2==120||LA104_2==122||LA104_2==144||LA104_2==154||LA104_2==233||LA104_2==245||LA104_2==247||LA104_2==258||LA104_2==260) ) {
                                    alt104=1;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("4637:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 104, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                alt104=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("4637:162: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 104, 0, input);

                                throw nvae;
                            }

                            switch (alt104) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:164: identifierGen+= identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3479);
                                    identifierGen=identifier();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                                    list_identifierGen.add(identifierGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4637:192: column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3485);
                                    column_specGen=column_spec();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                                    list_column_specGen.add(column_specGen);

                                    CHARSET_ATTRGen=(Token)input.LT(1);
                                    match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3489); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_keyBYTEGen != null) {
                      	        for(Iterator it = list_keyBYTEGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyBYTE_return r = (PLSQL3Parser.keyBYTE_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyBYTE");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue(TK_3.getText());
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(CHARSET_ATTRGen != null) {
                      			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
                      			CHARSET_ATTRGenLeaf.setValue(CHARSET_ATTRGen.getText());
                      			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
                      			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
                      			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 23 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4747:4: TK_0= 'CHARACTER' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,97,FOLLOW_97_in_datatype3505); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4747:21: (keyVARYINGGen+= keyVARYING )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==263) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4747:23: keyVARYINGGen+= keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3511);
                            keyVARYINGGen=keyVARYING();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyVARYINGGen==null) list_keyVARYINGGen=new ArrayList();
                            list_keyVARYINGGen.add(keyVARYINGGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4747:52: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==LPAREN) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4747:54: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3520); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3524); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3528); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyVARYINGGen != null) {
                      	        for(Iterator it = list_keyVARYINGGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyVARYING");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 24 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4801:4: TK_0= 'NCHAR' (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,100,FOLLOW_100_in_datatype3542); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4801:21: (keyVARYINGGen+= keyVARYING )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==263) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4801:23: keyVARYINGGen+= keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3552);
                            keyVARYINGGen=keyVARYING();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyVARYINGGen==null) list_keyVARYINGGen=new ArrayList();
                            list_keyVARYINGGen.add(keyVARYINGGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4801:52: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==LPAREN) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4801:54: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3561); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3565); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3569); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyVARYINGGen != null) {
                      	        for(Iterator it = list_keyVARYINGGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyVARYING");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 25 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4855:4: TK_0= 'NVARCHAR' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,101,FOLLOW_101_in_datatype3583); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4855:21: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==LPAREN) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4855:23: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3590); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3594); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3598); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 26 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4899:4: TK_0= 'NVARCHAR2' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,102,FOLLOW_102_in_datatype3612); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4899:21: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==LPAREN) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4899:23: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3618); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3622); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3626); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 27 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:4: TK_0= 'NATIONAL' (TK_1= 'CHARACTER' | TK_2= 'CHAR' ) (keyVARYINGGen+= keyVARYING )? (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,103,FOLLOW_103_in_datatype3640); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:21: (TK_1= 'CHARACTER' | TK_2= 'CHAR' )
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==97) ) {
                        alt112=1;
                    }
                    else if ( (LA112_0==96) ) {
                        alt112=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("4943:21: (TK_1= 'CHARACTER' | TK_2= 'CHAR' )", 112, 0, input);

                        throw nvae;
                    }
                    switch (alt112) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:23: TK_1= 'CHARACTER'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,97,FOLLOW_97_in_datatype3647); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:42: TK_2= 'CHAR'
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,96,FOLLOW_96_in_datatype3653); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:56: (keyVARYINGGen+= keyVARYING )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==263) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:58: keyVARYINGGen+= keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3661);
                            keyVARYINGGen=keyVARYING();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyVARYINGGen==null) list_keyVARYINGGen=new ArrayList();
                            list_keyVARYINGGen.add(keyVARYINGGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:87: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==LPAREN) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:4943:89: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3670); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3674); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3678); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_keyVARYINGGen != null) {
                      	        for(Iterator it = list_keyVARYINGGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyVARYING");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 28 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5015:4: TK_0= 'MLSLABEL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,104,FOLLOW_104_in_datatype3692); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 29 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5032:4: TK_0= 'PLS_INTEGER'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,105,FOLLOW_105_in_datatype3703); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 30 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5049:4: TK_0= 'BLOB'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,106,FOLLOW_106_in_datatype3714); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 31 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:4: TK_0= 'CLOB' (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,107,FOLLOW_107_in_datatype3725); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:16: (TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR ) )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==97) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:18: TK_1= 'CHARACTER' TK_2= 'SET' (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,97,FOLLOW_97_in_datatype3731); if (failed) return retval;
                            TK_2=(Token)input.LT(1);
                            match(input,70,FOLLOW_70_in_datatype3735); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:46: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )
                            int alt115=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA115_1 = input.LA(2);

                                if ( (LA115_1==EOF||(LA115_1>=ASSIGN && LA115_1<=COMMA)||LA115_1==RPAREN||LA115_1==SEMI||(LA115_1>=ID && LA115_1<=DOUBLEQUOTED_STRING)||LA115_1==50||(LA115_1>=52 && LA115_1<=53)||LA115_1==55||LA115_1==62||LA115_1==68||LA115_1==74||LA115_1==120||LA115_1==122||LA115_1==144||LA115_1==154||LA115_1==233||LA115_1==245||LA115_1==247||LA115_1==258||LA115_1==260) ) {
                                    alt115=1;
                                }
                                else if ( (LA115_1==DOT||LA115_1==CHARSET_ATTR) ) {
                                    alt115=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5066:46: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 115, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA115_2 = input.LA(2);

                                if ( (LA115_2==DOT||LA115_2==CHARSET_ATTR) ) {
                                    alt115=2;
                                }
                                else if ( (LA115_2==EOF||(LA115_2>=ASSIGN && LA115_2<=COMMA)||LA115_2==RPAREN||LA115_2==SEMI||(LA115_2>=ID && LA115_2<=DOUBLEQUOTED_STRING)||LA115_2==50||(LA115_2>=52 && LA115_2<=53)||LA115_2==55||LA115_2==62||LA115_2==68||LA115_2==74||LA115_2==120||LA115_2==122||LA115_2==144||LA115_2==154||LA115_2==233||LA115_2==245||LA115_2==247||LA115_2==258||LA115_2==260) ) {
                                    alt115=1;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5066:46: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 115, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                alt115=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5066:46: (identifierGen+= identifier | column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR )", 115, 0, input);

                                throw nvae;
                            }

                            switch (alt115) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:48: identifierGen+= identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3741);
                                    identifierGen=identifier();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                                    list_identifierGen.add(identifierGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5066:76: column_specGen+= column_spec CHARSET_ATTRGen= CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3747);
                                    column_specGen=column_spec();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                                    list_column_specGen.add(column_specGen);

                                    CHARSET_ATTRGen=(Token)input.LT(1);
                                    match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3751); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	datatypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(CHARSET_ATTRGen != null) {
                      			Leaf CHARSET_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CHARSET_ATTRGenLeaf.setKind("CHARSET_ATTR");
                      			CHARSET_ATTRGenLeaf.setValue(CHARSET_ATTRGen.getText());
                      			CHARSET_ATTRGenLeaf.setPos(CHARSET_ATTRGen.getCharPositionInLine());
                      			CHARSET_ATTRGenLeaf.setLine(CHARSET_ATTRGen.getLine());
                      			datatypeReturnNode.getChildren().add(CHARSET_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 32 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5130:4: TK_0= 'NCLOB'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,108,FOLLOW_108_in_datatype3767); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 33 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5147:4: TK_0= 'BFILE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,109,FOLLOW_109_in_datatype3778); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 34 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5164:4: TK_0= 'ROWID'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_datatype3789); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;
                case 35 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5181:4: TK_0= 'UROWID' (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,111,FOLLOW_111_in_datatype3801); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5181:18: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==LPAREN) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5181:20: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_datatype3807); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_datatype3811); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_datatype3815); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node datatypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		datatypeReturnNode.setKind("datatype");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		datatypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			datatypeReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			datatypeReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = datatypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end datatype

    public static class declare_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start declare_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5227:1: declare_spec returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_declarationGen+= procedure_declaration | function_declarationGen+= function_declaration | type_declarationGen+= type_declaration | pragma_declarationGen+= pragma_declaration );
    public final declare_spec_return declare_spec() throws RecognitionException {
        declare_spec_return retval = new declare_spec_return();
        retval.start = input.LT(1);

        List list_variable_declarationGen=null;
        List list_subtype_declarationGen=null;
        List list_cursor_declarationGen=null;
        List list_exception_declarationGen=null;
        List list_record_declarationGen=null;
        List list_plsql_table_declarationGen=null;
        List list_varray_declarationGen=null;
        List list_procedure_declarationGen=null;
        List list_function_declarationGen=null;
        List list_type_declarationGen=null;
        List list_pragma_declarationGen=null;
        RuleReturnScope variable_declarationGen = null;
        RuleReturnScope subtype_declarationGen = null;
        RuleReturnScope cursor_declarationGen = null;
        RuleReturnScope exception_declarationGen = null;
        RuleReturnScope record_declarationGen = null;
        RuleReturnScope plsql_table_declarationGen = null;
        RuleReturnScope varray_declarationGen = null;
        RuleReturnScope procedure_declarationGen = null;
        RuleReturnScope function_declarationGen = null;
        RuleReturnScope type_declarationGen = null;
        RuleReturnScope pragma_declarationGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5228:1: (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_declarationGen+= procedure_declaration | function_declarationGen+= function_declaration | type_declarationGen+= type_declaration | pragma_declarationGen+= pragma_declaration )
            int alt119=11;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5228:3: variable_declarationGen+= variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_declare_spec3839);
                    variable_declarationGen=variable_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variable_declarationGen==null) list_variable_declarationGen=new ArrayList();
                    list_variable_declarationGen.add(variable_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_variable_declarationGen != null) {
                      	        for(Iterator it = list_variable_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variable_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5246:4: subtype_declarationGen+= subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec3851);
                    subtype_declarationGen=subtype_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subtype_declarationGen==null) list_subtype_declarationGen=new ArrayList();
                    list_subtype_declarationGen.add(subtype_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_subtype_declarationGen != null) {
                      	        for(Iterator it = list_subtype_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("subtype_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5264:4: cursor_declarationGen+= cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec3863);
                    cursor_declarationGen=cursor_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_declarationGen==null) list_cursor_declarationGen=new ArrayList();
                    list_cursor_declarationGen.add(cursor_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_cursor_declarationGen != null) {
                      	        for(Iterator it = list_cursor_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("cursor_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5282:4: exception_declarationGen+= exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_declare_spec3875);
                    exception_declarationGen=exception_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_declarationGen==null) list_exception_declarationGen=new ArrayList();
                    list_exception_declarationGen.add(exception_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_exception_declarationGen != null) {
                      	        for(Iterator it = list_exception_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exception_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5300:4: record_declarationGen+= record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_declare_spec3887);
                    record_declarationGen=record_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_record_declarationGen==null) list_record_declarationGen=new ArrayList();
                    list_record_declarationGen.add(record_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_record_declarationGen != null) {
                      	        for(Iterator it = list_record_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("record_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5318:4: plsql_table_declarationGen+= plsql_table_declaration
                    {
                    pushFollow(FOLLOW_plsql_table_declaration_in_declare_spec3899);
                    plsql_table_declarationGen=plsql_table_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_table_declarationGen==null) list_plsql_table_declarationGen=new ArrayList();
                    list_plsql_table_declarationGen.add(plsql_table_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_plsql_table_declarationGen != null) {
                      	        for(Iterator it = list_plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_table_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5336:4: varray_declarationGen+= varray_declaration
                    {
                    pushFollow(FOLLOW_varray_declaration_in_declare_spec3911);
                    varray_declarationGen=varray_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_varray_declarationGen==null) list_varray_declarationGen=new ArrayList();
                    list_varray_declarationGen.add(varray_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_varray_declarationGen != null) {
                      	        for(Iterator it = list_varray_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("varray_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5354:4: procedure_declarationGen+= procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_declare_spec3922);
                    procedure_declarationGen=procedure_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_procedure_declarationGen==null) list_procedure_declarationGen=new ArrayList();
                    list_procedure_declarationGen.add(procedure_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_procedure_declarationGen != null) {
                      	        for(Iterator it = list_procedure_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.procedure_declaration_return r = (PLSQL3Parser.procedure_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedure_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5372:4: function_declarationGen+= function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_declare_spec3934);
                    function_declarationGen=function_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_declarationGen==null) list_function_declarationGen=new ArrayList();
                    list_function_declarationGen.add(function_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_function_declarationGen != null) {
                      	        for(Iterator it = list_function_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_declaration_return r = (PLSQL3Parser.function_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5390:4: type_declarationGen+= type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_declare_spec3945);
                    type_declarationGen=type_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_type_declarationGen==null) list_type_declarationGen=new ArrayList();
                    list_type_declarationGen.add(type_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_type_declarationGen != null) {
                      	        for(Iterator it = list_type_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.type_declaration_return r = (PLSQL3Parser.type_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5408:4: pragma_declarationGen+= pragma_declaration
                    {
                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec3957);
                    pragma_declarationGen=pragma_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_declarationGen==null) list_pragma_declarationGen=new ArrayList();
                    list_pragma_declarationGen.add(pragma_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node declare_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declare_specReturnNode.setKind("declare_spec");
                      	    // Create a CST Node
                      		if(list_pragma_declarationGen != null) {
                      	        for(Iterator it = list_pragma_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("pragma_declaration");
                      	            	declare_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declare_specReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end declare_spec

    public static class delete_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start delete_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5428:1: delete_command returns [Node returnNode] : TK_0= 'DELETE' (TK_1= 'FROM' )? selected_tableGen+= selected_table (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )? ;
    public final delete_command_return delete_command() throws RecognitionException {
        delete_command_return retval = new delete_command_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_selected_tableGen=null;
        List list_keyCURRENT_OFGen=null;
        List list_cursor_nameGen=null;
        List list_sql_conditionGen=null;
        List list_returning_clauseGen=null;
        RuleReturnScope selected_tableGen = null;
        RuleReturnScope keyCURRENT_OFGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope returning_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5429:1: (TK_0= 'DELETE' (TK_1= 'FROM' )? selected_tableGen+= selected_table (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5429:3: TK_0= 'DELETE' (TK_1= 'FROM' )? selected_tableGen+= selected_table (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )?
            {
            TK_0=(Token)input.LT(1);
            match(input,112,FOLLOW_112_in_delete_command3978); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5429:17: (TK_1= 'FROM' )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==113) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5429:19: TK_1= 'FROM'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_delete_command3984); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_selected_table_in_delete_command3991);
            selected_tableGen=selected_table();
            _fsp--;
            if (failed) return retval;
            if (list_selected_tableGen==null) list_selected_tableGen=new ArrayList();
            list_selected_tableGen.add(selected_tableGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5430:3: (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==114) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5430:5: TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,114,FOLLOW_114_in_delete_command3999); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5431:4: (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==161) ) {
                        alt121=1;
                    }
                    else if ( (LA121_0==LPAREN||LA121_0==NUMBER||(LA121_0>=QUOTED_STRING && LA121_0<=MINUS)||LA121_0==COLON||(LA121_0>=56 && LA121_0<=58)||LA121_0==62||(LA121_0>=64 && LA121_0<=66)||LA121_0==69||LA121_0==110||LA121_0==121||LA121_0==148||LA121_0==153||LA121_0==158||LA121_0==168||LA121_0==202||LA121_0==218||LA121_0==233) ) {
                        alt121=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5431:4: (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )", 121, 0, input);

                        throw nvae;
                    }
                    switch (alt121) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5431:6: keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_delete_command4008);
                            keyCURRENT_OFGen=keyCURRENT_OF();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyCURRENT_OFGen==null) list_keyCURRENT_OFGen=new ArrayList();
                            list_keyCURRENT_OFGen.add(keyCURRENT_OFGen);

                            pushFollow(FOLLOW_cursor_name_in_delete_command4012);
                            cursor_nameGen=cursor_name();
                            _fsp--;
                            if (failed) return retval;
                            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
                            list_cursor_nameGen.add(cursor_nameGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5432:6: sql_conditionGen+= sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_delete_command4021);
                            sql_conditionGen=sql_condition();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                            list_sql_conditionGen.add(sql_conditionGen);


                            }
                            break;

                    }


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5435:3: (returning_clauseGen+= returning_clause )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=253 && LA123_0<=254)) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5435:5: returning_clauseGen+= returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_delete_command4039);
                    returning_clauseGen=returning_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_returning_clauseGen==null) list_returning_clauseGen=new ArrayList();
                    list_returning_clauseGen.add(returning_clauseGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node delete_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		delete_commandReturnNode.setKind("delete_command");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		delete_commandReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		delete_commandReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_selected_tableGen != null) {
              	        for(Iterator it = list_selected_tableGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("selected_table");
              	            	delete_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		delete_commandReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyCURRENT_OFGen != null) {
              	        for(Iterator it = list_keyCURRENT_OFGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCURRENT_OF_return r = (PLSQL3Parser.keyCURRENT_OF_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCURRENT_OF");
              	            	delete_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	delete_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	delete_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_returning_clauseGen != null) {
              	        for(Iterator it = list_returning_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("returning_clause");
              	            	delete_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = delete_commandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end delete_command

    public static class displayed_column_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start displayed_column
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5522:1: displayed_column returns [Node returnNode] : (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression ) (aliasGen+= alias )? ;
    public final displayed_column_return displayed_column() throws RecognitionException {
        displayed_column_return retval = new displayed_column_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token ASTERISKGen=null;
        List list_column_specGen=null;
        List list_sql_expressionGen=null;
        List list_aliasGen=null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope aliasGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:1: ( (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression ) (aliasGen+= alias )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression ) (aliasGen+= alias )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )
            int alt124=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt124=1;
                        }
                        break;
                    case ID:
                        {
                        int LA124_7 = input.LA(4);

                        if ( (LA124_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_7==EOF||(LA124_7>=COMMA && LA124_7<=LPAREN)||(LA124_7>=EQ && LA124_7<=LEQ)||LA124_7==ASTERISK||(LA124_7>=ID && LA124_7<=MINUS)||(LA124_7>=FOUND_ATTR && LA124_7<=BULK_ROWCOUNT_ATTR)||(LA124_7>=DOUBLEVERTBAR && LA124_7<=EXPONENT)||(LA124_7>=50 && LA124_7<=51)||(LA124_7>=61 && LA124_7<=63)||LA124_7==68||(LA124_7>=72 && LA124_7<=73)||LA124_7==110||LA124_7==113||LA124_7==119||LA124_7==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA124_8 = input.LA(4);

                        if ( (LA124_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_8==EOF||(LA124_8>=COMMA && LA124_8<=LPAREN)||(LA124_8>=EQ && LA124_8<=LEQ)||LA124_8==ASTERISK||(LA124_8>=ID && LA124_8<=MINUS)||(LA124_8>=FOUND_ATTR && LA124_8<=BULK_ROWCOUNT_ATTR)||(LA124_8>=DOUBLEVERTBAR && LA124_8<=EXPONENT)||(LA124_8>=50 && LA124_8<=51)||(LA124_8>=61 && LA124_8<=63)||LA124_8==68||(LA124_8>=72 && LA124_8<=73)||LA124_8==110||LA124_8==113||LA124_8==119||LA124_8==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 110:
                        {
                        int LA124_9 = input.LA(4);

                        if ( (LA124_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_9==EOF||(LA124_9>=COMMA && LA124_9<=LPAREN)||(LA124_9>=EQ && LA124_9<=LEQ)||LA124_9==ASTERISK||(LA124_9>=ID && LA124_9<=MINUS)||(LA124_9>=FOUND_ATTR && LA124_9<=BULK_ROWCOUNT_ATTR)||(LA124_9>=DOUBLEVERTBAR && LA124_9<=EXPONENT)||(LA124_9>=50 && LA124_9<=51)||(LA124_9>=61 && LA124_9<=63)||LA124_9==68||(LA124_9>=72 && LA124_9<=73)||LA124_9==110||LA124_9==113||LA124_9==119||LA124_9==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                    case NUMBER:
                    case QUOTED_STRING:
                    case PLUS:
                    case MINUS:
                    case COLON:
                    case 56:
                    case 57:
                    case 58:
                    case 62:
                    case 64:
                    case 65:
                    case 69:
                    case 112:
                    case 121:
                    case 148:
                    case 153:
                    case 158:
                    case 233:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA124_1==EOF||(LA124_1>=COMMA && LA124_1<=LPAREN)||LA124_1==ASTERISK||(LA124_1>=ID && LA124_1<=MINUS)||(LA124_1>=DOUBLEVERTBAR && LA124_1<=EXPONENT)||LA124_1==50||LA124_1==110||LA124_1==113||LA124_1==119||LA124_1==229) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA124_2 = input.LA(2);

                if ( (LA124_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt124=1;
                        }
                        break;
                    case ID:
                        {
                        int LA124_7 = input.LA(4);

                        if ( (LA124_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_7==EOF||(LA124_7>=COMMA && LA124_7<=LPAREN)||(LA124_7>=EQ && LA124_7<=LEQ)||LA124_7==ASTERISK||(LA124_7>=ID && LA124_7<=MINUS)||(LA124_7>=FOUND_ATTR && LA124_7<=BULK_ROWCOUNT_ATTR)||(LA124_7>=DOUBLEVERTBAR && LA124_7<=EXPONENT)||(LA124_7>=50 && LA124_7<=51)||(LA124_7>=61 && LA124_7<=63)||LA124_7==68||(LA124_7>=72 && LA124_7<=73)||LA124_7==110||LA124_7==113||LA124_7==119||LA124_7==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA124_8 = input.LA(4);

                        if ( (LA124_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_8==EOF||(LA124_8>=COMMA && LA124_8<=LPAREN)||(LA124_8>=EQ && LA124_8<=LEQ)||LA124_8==ASTERISK||(LA124_8>=ID && LA124_8<=MINUS)||(LA124_8>=FOUND_ATTR && LA124_8<=BULK_ROWCOUNT_ATTR)||(LA124_8>=DOUBLEVERTBAR && LA124_8<=EXPONENT)||(LA124_8>=50 && LA124_8<=51)||(LA124_8>=61 && LA124_8<=63)||LA124_8==68||(LA124_8>=72 && LA124_8<=73)||LA124_8==110||LA124_8==113||LA124_8==119||LA124_8==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 110:
                        {
                        int LA124_9 = input.LA(4);

                        if ( (LA124_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_9==EOF||(LA124_9>=COMMA && LA124_9<=LPAREN)||(LA124_9>=EQ && LA124_9<=LEQ)||LA124_9==ASTERISK||(LA124_9>=ID && LA124_9<=MINUS)||(LA124_9>=FOUND_ATTR && LA124_9<=BULK_ROWCOUNT_ATTR)||(LA124_9>=DOUBLEVERTBAR && LA124_9<=EXPONENT)||(LA124_9>=50 && LA124_9<=51)||(LA124_9>=61 && LA124_9<=63)||LA124_9==68||(LA124_9>=72 && LA124_9<=73)||LA124_9==110||LA124_9==113||LA124_9==119||LA124_9==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                    case NUMBER:
                    case QUOTED_STRING:
                    case PLUS:
                    case MINUS:
                    case COLON:
                    case 56:
                    case 57:
                    case 58:
                    case 62:
                    case 64:
                    case 65:
                    case 69:
                    case 112:
                    case 121:
                    case 148:
                    case 153:
                    case 158:
                    case 233:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA124_2==EOF||(LA124_2>=COMMA && LA124_2<=LPAREN)||LA124_2==ASTERISK||(LA124_2>=ID && LA124_2<=MINUS)||(LA124_2>=DOUBLEVERTBAR && LA124_2<=EXPONENT)||LA124_2==50||LA124_2==110||LA124_2==113||LA124_2==119||LA124_2==229) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 2, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA124_3 = input.LA(2);

                if ( (LA124_3==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt124=1;
                        }
                        break;
                    case ID:
                        {
                        int LA124_7 = input.LA(4);

                        if ( (LA124_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_7==EOF||(LA124_7>=COMMA && LA124_7<=LPAREN)||(LA124_7>=EQ && LA124_7<=LEQ)||LA124_7==ASTERISK||(LA124_7>=ID && LA124_7<=MINUS)||(LA124_7>=FOUND_ATTR && LA124_7<=BULK_ROWCOUNT_ATTR)||(LA124_7>=DOUBLEVERTBAR && LA124_7<=EXPONENT)||(LA124_7>=50 && LA124_7<=51)||(LA124_7>=61 && LA124_7<=63)||LA124_7==68||(LA124_7>=72 && LA124_7<=73)||LA124_7==110||LA124_7==113||LA124_7==119||LA124_7==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA124_8 = input.LA(4);

                        if ( (LA124_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_8==EOF||(LA124_8>=COMMA && LA124_8<=LPAREN)||(LA124_8>=EQ && LA124_8<=LEQ)||LA124_8==ASTERISK||(LA124_8>=ID && LA124_8<=MINUS)||(LA124_8>=FOUND_ATTR && LA124_8<=BULK_ROWCOUNT_ATTR)||(LA124_8>=DOUBLEVERTBAR && LA124_8<=EXPONENT)||(LA124_8>=50 && LA124_8<=51)||(LA124_8>=61 && LA124_8<=63)||LA124_8==68||(LA124_8>=72 && LA124_8<=73)||LA124_8==110||LA124_8==113||LA124_8==119||LA124_8==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 110:
                        {
                        int LA124_9 = input.LA(4);

                        if ( (LA124_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt124=1;
                                }
                                break;
                            case ID:
                                {
                                int LA124_11 = input.LA(6);

                                if ( (LA124_11==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_11==EOF||(LA124_11>=COMMA && LA124_11<=LPAREN)||(LA124_11>=EQ && LA124_11<=LEQ)||LA124_11==ASTERISK||(LA124_11>=ID && LA124_11<=MINUS)||(LA124_11>=FOUND_ATTR && LA124_11<=BULK_ROWCOUNT_ATTR)||(LA124_11>=DOUBLEVERTBAR && LA124_11<=EXPONENT)||(LA124_11>=50 && LA124_11<=51)||(LA124_11>=61 && LA124_11<=63)||LA124_11==68||(LA124_11>=72 && LA124_11<=73)||LA124_11==110||LA124_11==113||LA124_11==119||LA124_11==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA124_12 = input.LA(6);

                                if ( (LA124_12==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_12==EOF||(LA124_12>=COMMA && LA124_12<=LPAREN)||(LA124_12>=EQ && LA124_12<=LEQ)||LA124_12==ASTERISK||(LA124_12>=ID && LA124_12<=MINUS)||(LA124_12>=FOUND_ATTR && LA124_12<=BULK_ROWCOUNT_ATTR)||(LA124_12>=DOUBLEVERTBAR && LA124_12<=EXPONENT)||(LA124_12>=50 && LA124_12<=51)||(LA124_12>=61 && LA124_12<=63)||LA124_12==68||(LA124_12>=72 && LA124_12<=73)||LA124_12==110||LA124_12==113||LA124_12==119||LA124_12==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 110:
                                {
                                int LA124_13 = input.LA(6);

                                if ( (LA124_13==DOT) ) {
                                    switch ( input.LA(7) ) {
                                    case ASTERISK:
                                        {
                                        alt124=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA124_15 = input.LA(8);

                                        if ( (LA124_15==EOF||(LA124_15>=COMMA && LA124_15<=LPAREN)||(LA124_15>=EQ && LA124_15<=LEQ)||LA124_15==ASTERISK||(LA124_15>=ID && LA124_15<=MINUS)||(LA124_15>=FOUND_ATTR && LA124_15<=BULK_ROWCOUNT_ATTR)||(LA124_15>=DOUBLEVERTBAR && LA124_15<=EXPONENT)||(LA124_15>=50 && LA124_15<=51)||(LA124_15>=61 && LA124_15<=63)||LA124_15==68||(LA124_15>=72 && LA124_15<=73)||LA124_15==110||LA124_15==113||LA124_15==119||LA124_15==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_15==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 15, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case DOUBLEQUOTED_STRING:
                                        {
                                        int LA124_16 = input.LA(8);

                                        if ( (LA124_16==EOF||(LA124_16>=COMMA && LA124_16<=LPAREN)||(LA124_16>=EQ && LA124_16<=LEQ)||LA124_16==ASTERISK||(LA124_16>=ID && LA124_16<=MINUS)||(LA124_16>=FOUND_ATTR && LA124_16<=BULK_ROWCOUNT_ATTR)||(LA124_16>=DOUBLEVERTBAR && LA124_16<=EXPONENT)||(LA124_16>=50 && LA124_16<=51)||(LA124_16>=61 && LA124_16<=63)||LA124_16==68||(LA124_16>=72 && LA124_16<=73)||LA124_16==110||LA124_16==113||LA124_16==119||LA124_16==229) ) {
                                            alt124=2;
                                        }
                                        else if ( (LA124_16==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 16, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case 110:
                                        {
                                        int LA124_17 = input.LA(8);

                                        if ( (LA124_17==DOT) ) {
                                            int LA124_18 = input.LA(9);

                                            if ( (synpred203()) ) {
                                                alt124=1;
                                            }
                                            else if ( (true) ) {
                                                alt124=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 18, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA124_17==EOF||(LA124_17>=COMMA && LA124_17<=LPAREN)||(LA124_17>=EQ && LA124_17<=LEQ)||LA124_17==ASTERISK||(LA124_17>=ID && LA124_17<=MINUS)||(LA124_17>=FOUND_ATTR && LA124_17<=BULK_ROWCOUNT_ATTR)||(LA124_17>=DOUBLEVERTBAR && LA124_17<=EXPONENT)||(LA124_17>=50 && LA124_17<=51)||(LA124_17>=61 && LA124_17<=63)||LA124_17==68||(LA124_17>=72 && LA124_17<=73)||LA124_17==110||LA124_17==113||LA124_17==119||LA124_17==229) ) {
                                            alt124=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 17, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case PLUS:
                                    case MINUS:
                                    case COLON:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 62:
                                    case 64:
                                    case 65:
                                    case 69:
                                    case 112:
                                    case 121:
                                    case 148:
                                    case 153:
                                    case 158:
                                    case 233:
                                        {
                                        alt124=2;
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 14, input);

                                        throw nvae;
                                    }

                                }
                                else if ( (LA124_13==EOF||(LA124_13>=COMMA && LA124_13<=LPAREN)||(LA124_13>=EQ && LA124_13<=LEQ)||LA124_13==ASTERISK||(LA124_13>=ID && LA124_13<=MINUS)||(LA124_13>=FOUND_ATTR && LA124_13<=BULK_ROWCOUNT_ATTR)||(LA124_13>=DOUBLEVERTBAR && LA124_13<=EXPONENT)||(LA124_13>=50 && LA124_13<=51)||(LA124_13>=61 && LA124_13<=63)||LA124_13==68||(LA124_13>=72 && LA124_13<=73)||LA124_13==110||LA124_13==113||LA124_13==119||LA124_13==229) ) {
                                    alt124=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                            case NUMBER:
                            case QUOTED_STRING:
                            case PLUS:
                            case MINUS:
                            case COLON:
                            case 56:
                            case 57:
                            case 58:
                            case 62:
                            case 64:
                            case 65:
                            case 69:
                            case 112:
                            case 121:
                            case 148:
                            case 153:
                            case 158:
                            case 233:
                                {
                                alt124=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA124_9==EOF||(LA124_9>=COMMA && LA124_9<=LPAREN)||(LA124_9>=EQ && LA124_9<=LEQ)||LA124_9==ASTERISK||(LA124_9>=ID && LA124_9<=MINUS)||(LA124_9>=FOUND_ATTR && LA124_9<=BULK_ROWCOUNT_ATTR)||(LA124_9>=DOUBLEVERTBAR && LA124_9<=EXPONENT)||(LA124_9>=50 && LA124_9<=51)||(LA124_9>=61 && LA124_9<=63)||LA124_9==68||(LA124_9>=72 && LA124_9<=73)||LA124_9==110||LA124_9==113||LA124_9==119||LA124_9==229) ) {
                            alt124=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                    case NUMBER:
                    case QUOTED_STRING:
                    case PLUS:
                    case MINUS:
                    case COLON:
                    case 56:
                    case 57:
                    case 58:
                    case 62:
                    case 64:
                    case 65:
                    case 69:
                    case 112:
                    case 121:
                    case 148:
                    case 153:
                    case 158:
                    case 233:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA124_3==EOF||(LA124_3>=COMMA && LA124_3<=LPAREN)||LA124_3==ASTERISK||(LA124_3>=ID && LA124_3<=MINUS)||(LA124_3>=DOUBLEVERTBAR && LA124_3<=EXPONENT)||LA124_3==50||LA124_3==110||LA124_3==113||LA124_3==119||LA124_3==229) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 3, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
            case NUMBER:
            case QUOTED_STRING:
            case PLUS:
            case MINUS:
            case COLON:
            case 56:
            case 57:
            case 58:
            case 69:
            case 121:
            case 148:
            case 153:
            case 158:
            case 233:
                {
                alt124=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5523:3: (column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK | sql_expressionGen+= sql_expression )", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:5: column_specGen+= column_spec DOTGen= DOT ASTERISKGen= ASTERISK
                    {
                    pushFollow(FOLLOW_column_spec_in_displayed_column4065);
                    column_specGen=column_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                    list_column_specGen.add(column_specGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_displayed_column4069); if (failed) return retval;
                    ASTERISKGen=(Token)input.LT(1);
                    match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column4073); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5526:5: sql_expressionGen+= sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_displayed_column4083);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5528:3: (aliasGen+= alias )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=ID && LA125_0<=DOUBLEQUOTED_STRING)||LA125_0==50||LA125_0==110) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5528:5: aliasGen+= alias
                    {
                    pushFollow(FOLLOW_alias_in_displayed_column4095);
                    aliasGen=alias();
                    _fsp--;
                    if (failed) return retval;
                    if (list_aliasGen==null) list_aliasGen=new ArrayList();
                    list_aliasGen.add(aliasGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node displayed_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		displayed_columnReturnNode.setKind("displayed_column");
              	    // Create a CST Node
              		if(list_column_specGen != null) {
              	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_spec");
              	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGenLeaf.setKind("DOT");
              			DOTGenLeaf.setValue(DOTGen.getText());
              			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
              			DOTGenLeaf.setLine(DOTGen.getLine());
              			displayed_columnReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ASTERISKGen != null) {
              			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASTERISKGenLeaf.setKind("ASTERISK");
              			ASTERISKGenLeaf.setValue(ASTERISKGen.getText());
              			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
              			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
              			displayed_columnReturnNode.getChildren().add(ASTERISKGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_aliasGen != null) {
              	        for(Iterator it = list_aliasGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.alias_return r = (PLSQL3Parser.alias_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("alias");
              	            	displayed_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = displayed_columnReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end displayed_column

    public static class else_case_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start else_case_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5586:1: else_case_statement returns [Node returnNode] : TK_0= 'ELSE' seq_of_statementsGen+= seq_of_statements ;
    public final else_case_statement_return else_case_statement() throws RecognitionException {
        else_case_statement_return retval = new else_case_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_seq_of_statementsGen=null;
        RuleReturnScope seq_of_statementsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5587:1: (TK_0= 'ELSE' seq_of_statementsGen+= seq_of_statements )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5587:3: TK_0= 'ELSE' seq_of_statementsGen+= seq_of_statements
            {
            TK_0=(Token)input.LT(1);
            match(input,115,FOLLOW_115_in_else_case_statement4119); if (failed) return retval;
            pushFollow(FOLLOW_seq_of_statements_in_else_case_statement4123);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node else_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		else_case_statementReturnNode.setKind("else_case_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		else_case_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	else_case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = else_case_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end else_case_statement

    public static class else_case_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start else_case_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5616:1: else_case_expression returns [Node returnNode] : TK_0= 'ELSE' nested_expressionGen+= nested_expression ;
    public final else_case_expression_return else_case_expression() throws RecognitionException {
        else_case_expression_return retval = new else_case_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_nested_expressionGen=null;
        RuleReturnScope nested_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5617:1: (TK_0= 'ELSE' nested_expressionGen+= nested_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5617:3: TK_0= 'ELSE' nested_expressionGen+= nested_expression
            {
            TK_0=(Token)input.LT(1);
            match(input,115,FOLLOW_115_in_else_case_expression4144); if (failed) return retval;
            pushFollow(FOLLOW_nested_expression_in_else_case_expression4148);
            nested_expressionGen=nested_expression();
            _fsp--;
            if (failed) return retval;
            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            list_nested_expressionGen.add(nested_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node else_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		else_case_expressionReturnNode.setKind("else_case_expression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		else_case_expressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_nested_expressionGen != null) {
              	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_expression");
              	            	else_case_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = else_case_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end else_case_expression

    public static class exception_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exception_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5646:1: exception_declaration returns [Node returnNode] : exception_nameGen+= exception_name TK_0= 'EXCEPTION' SEMIGen= SEMI ;
    public final exception_declaration_return exception_declaration() throws RecognitionException {
        exception_declaration_return retval = new exception_declaration_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token SEMIGen=null;
        List list_exception_nameGen=null;
        RuleReturnScope exception_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5647:1: (exception_nameGen+= exception_name TK_0= 'EXCEPTION' SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5647:3: exception_nameGen+= exception_name TK_0= 'EXCEPTION' SEMIGen= SEMI
            {
            pushFollow(FOLLOW_exception_name_in_exception_declaration4170);
            exception_nameGen=exception_name();
            _fsp--;
            if (failed) return retval;
            if (list_exception_nameGen==null) list_exception_nameGen=new ArrayList();
            list_exception_nameGen.add(exception_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,54,FOLLOW_54_in_exception_declaration4174); if (failed) return retval;
            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_exception_declaration4178); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exception_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exception_declarationReturnNode.setKind("exception_declaration");
              	    // Create a CST Node
              		if(list_exception_nameGen != null) {
              	        for(Iterator it = list_exception_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_name");
              	            	exception_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exception_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			exception_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exception_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exception_declaration

    public static class exception_handler_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exception_handler
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5685:1: exception_handler returns [Node returnNode] : TK_0= 'WHEN' exception_namesGen+= exception_names TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements ;
    public final exception_handler_return exception_handler() throws RecognitionException {
        exception_handler_return retval = new exception_handler_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_exception_namesGen=null;
        List list_seq_of_statementsGen=null;
        RuleReturnScope exception_namesGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5686:1: (TK_0= 'WHEN' exception_namesGen+= exception_names TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5686:3: TK_0= 'WHEN' exception_namesGen+= exception_names TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements
            {
            TK_0=(Token)input.LT(1);
            match(input,116,FOLLOW_116_in_exception_handler4199); if (failed) return retval;
            pushFollow(FOLLOW_exception_names_in_exception_handler4203);
            exception_namesGen=exception_names();
            _fsp--;
            if (failed) return retval;
            if (list_exception_namesGen==null) list_exception_namesGen=new ArrayList();
            list_exception_namesGen.add(exception_namesGen);

            TK_1=(Token)input.LT(1);
            match(input,117,FOLLOW_117_in_exception_handler4207); if (failed) return retval;
            pushFollow(FOLLOW_seq_of_statements_in_exception_handler4213);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exception_handlerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exception_handlerReturnNode.setKind("exception_handler");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exception_handlerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exception_namesGen != null) {
              	        for(Iterator it = list_exception_namesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_names_return r = (PLSQL3Parser.exception_names_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_names");
              	            	exception_handlerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		exception_handlerReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	exception_handlerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exception_handlerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exception_handler

    public static class exception_names_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exception_names
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5735:1: exception_names returns [Node returnNode] : exception_nameGen+= exception_name (TK_0= 'OR' exception_nameGen_1+= exception_name )* ;
    public final exception_names_return exception_names() throws RecognitionException {
        exception_names_return retval = new exception_names_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_exception_nameGen=null;
        List list_exception_nameGen_1=null;
        RuleReturnScope exception_nameGen = null;
        RuleReturnScope exception_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5736:1: (exception_nameGen+= exception_name (TK_0= 'OR' exception_nameGen_1+= exception_name )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5736:3: exception_nameGen+= exception_name (TK_0= 'OR' exception_nameGen_1+= exception_name )*
            {
            pushFollow(FOLLOW_exception_name_in_exception_names4234);
            exception_nameGen=exception_name();
            _fsp--;
            if (failed) return retval;
            if (list_exception_nameGen==null) list_exception_nameGen=new ArrayList();
            list_exception_nameGen.add(exception_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5736:37: (TK_0= 'OR' exception_nameGen_1+= exception_name )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==73) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5736:39: TK_0= 'OR' exception_nameGen_1+= exception_name
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,73,FOLLOW_73_in_exception_names4240); if (failed) return retval;
            	    pushFollow(FOLLOW_exception_name_in_exception_names4244);
            	    exception_nameGen_1=exception_name();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_exception_nameGen_1==null) list_exception_nameGen_1=new ArrayList();
            	    list_exception_nameGen_1.add(exception_nameGen_1);


            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exception_namesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exception_namesReturnNode.setKind("exception_names");
              	    // Create a CST Node
              		if(list_exception_nameGen != null) {
              	        for(Iterator it = list_exception_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_name");
              	            	exception_namesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal exception_nameGen_1 aggregation
              		if(list_exception_nameGen_1 != null) {
              	    for(int pos = 0; pos < list_exception_nameGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exception_namesReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_exception_nameGen_1 != null) {		
              	    	PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) list_exception_nameGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("exception_name");
              	    		exception_namesReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exception_namesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exception_names

    public static class exception_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exception_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5780:1: exception_name returns [Node returnNode] : (exception_package_nameGen+= exception_package_name DOTGen= DOT )? identifierGen+= identifier ;
    public final exception_name_return exception_name() throws RecognitionException {
        exception_name_return retval = new exception_name_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        List list_exception_package_nameGen=null;
        List list_identifierGen=null;
        RuleReturnScope exception_package_nameGen = null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5781:1: ( (exception_package_nameGen+= exception_package_name DOTGen= DOT )? identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5781:3: (exception_package_nameGen+= exception_package_name DOTGen= DOT )? identifierGen+= identifier
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5781:3: (exception_package_nameGen+= exception_package_name DOTGen= DOT )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ID) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==DOT) ) {
                    alt127=1;
                }
            }
            else if ( (LA127_0==DOUBLEQUOTED_STRING) ) {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==DOT) ) {
                    alt127=1;
                }
            }
            switch (alt127) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5781:5: exception_package_nameGen+= exception_package_name DOTGen= DOT
                    {
                    pushFollow(FOLLOW_exception_package_name_in_exception_name4270);
                    exception_package_nameGen=exception_package_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_package_nameGen==null) list_exception_package_nameGen=new ArrayList();
                    list_exception_package_nameGen.add(exception_package_nameGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_exception_name4274); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_exception_name4281);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exception_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exception_nameReturnNode.setKind("exception_name");
              	    // Create a CST Node
              		if(list_exception_package_nameGen != null) {
              	        for(Iterator it = list_exception_package_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_package_name_return r = (PLSQL3Parser.exception_package_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_package_name");
              	            	exception_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGenLeaf.setKind("DOT");
              			DOTGenLeaf.setValue(DOTGen.getText());
              			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
              			DOTGenLeaf.setLine(DOTGen.getLine());
              			exception_nameReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	exception_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exception_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exception_name

    public static class exception_package_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exception_package_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5820:1: exception_package_name returns [Node returnNode] : identifierGen+= identifier ;
    public final exception_package_name_return exception_package_name() throws RecognitionException {
        exception_package_name_return retval = new exception_package_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5821:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5821:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_exception_package_name4302);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exception_package_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exception_package_nameReturnNode.setKind("exception_package_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	exception_package_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exception_package_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exception_package_name

    public static class exit_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start exit_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5841:1: exit_statement returns [Node returnNode] : keyEXITGen+= keyEXIT (label_nameGen+= label_name )? (TK_0= 'WHEN' plsql_conditionGen+= plsql_condition )? ;
    public final exit_statement_return exit_statement() throws RecognitionException {
        exit_statement_return retval = new exit_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_keyEXITGen=null;
        List list_label_nameGen=null;
        List list_plsql_conditionGen=null;
        RuleReturnScope keyEXITGen = null;
        RuleReturnScope label_nameGen = null;
        RuleReturnScope plsql_conditionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:1: (keyEXITGen+= keyEXIT (label_nameGen+= label_name )? (TK_0= 'WHEN' plsql_conditionGen+= plsql_condition )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:3: keyEXITGen+= keyEXIT (label_nameGen+= label_name )? (TK_0= 'WHEN' plsql_conditionGen+= plsql_condition )?
            {
            pushFollow(FOLLOW_keyEXIT_in_exit_statement4323);
            keyEXITGen=keyEXIT();
            _fsp--;
            if (failed) return retval;
            if (list_keyEXITGen==null) list_keyEXITGen=new ArrayList();
            list_keyEXITGen.add(keyEXITGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:23: (label_nameGen+= label_name )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=ID && LA128_0<=DOUBLEQUOTED_STRING)) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:25: label_nameGen+= label_name
                    {
                    pushFollow(FOLLOW_label_name_in_exit_statement4329);
                    label_nameGen=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen==null) list_label_nameGen=new ArrayList();
                    list_label_nameGen.add(label_nameGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:54: (TK_0= 'WHEN' plsql_conditionGen+= plsql_condition )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==116) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5842:56: TK_0= 'WHEN' plsql_conditionGen+= plsql_condition
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,116,FOLLOW_116_in_exit_statement4338); if (failed) return retval;
                    pushFollow(FOLLOW_plsql_condition_in_exit_statement4342);
                    plsql_conditionGen=plsql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_conditionGen==null) list_plsql_conditionGen=new ArrayList();
                    list_plsql_conditionGen.add(plsql_conditionGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node exit_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exit_statementReturnNode.setKind("exit_statement");
              	    // Create a CST Node
              		if(list_keyEXITGen != null) {
              	        for(Iterator it = list_keyEXITGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyEXIT_return r = (PLSQL3Parser.keyEXIT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyEXIT");
              	            	exit_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_label_nameGen != null) {
              	        for(Iterator it = list_label_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	exit_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exit_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_plsql_conditionGen != null) {
              	        for(Iterator it = list_plsql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_condition");
              	            	exit_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exit_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exit_statement

    public static class fetch_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start fetch_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5891:1: fetch_statement returns [Node returnNode] : TK_0= 'FETCH' cursor_nameGen+= cursor_name TK_1= 'INTO' (variable_namesGen+= variable_names | record_nameGen+= record_name ) ;
    public final fetch_statement_return fetch_statement() throws RecognitionException {
        fetch_statement_return retval = new fetch_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_cursor_nameGen=null;
        List list_variable_namesGen=null;
        List list_record_nameGen=null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope variable_namesGen = null;
        RuleReturnScope record_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5892:1: (TK_0= 'FETCH' cursor_nameGen+= cursor_name TK_1= 'INTO' (variable_namesGen+= variable_names | record_nameGen+= record_name ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5892:3: TK_0= 'FETCH' cursor_nameGen+= cursor_name TK_1= 'INTO' (variable_namesGen+= variable_names | record_nameGen+= record_name )
            {
            TK_0=(Token)input.LT(1);
            match(input,118,FOLLOW_118_in_fetch_statement4366); if (failed) return retval;
            pushFollow(FOLLOW_cursor_name_in_fetch_statement4370);
            cursor_nameGen=cursor_name();
            _fsp--;
            if (failed) return retval;
            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
            list_cursor_nameGen.add(cursor_nameGen);

            TK_1=(Token)input.LT(1);
            match(input,119,FOLLOW_119_in_fetch_statement4374); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5893:3: (variable_namesGen+= variable_names | record_nameGen+= record_name )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ID) ) {
                int LA130_1 = input.LA(2);

                if ( (synpred209()) ) {
                    alt130=1;
                }
                else if ( (true) ) {
                    alt130=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5893:3: (variable_namesGen+= variable_names | record_nameGen+= record_name )", 130, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA130_0==DOUBLEQUOTED_STRING) ) {
                int LA130_2 = input.LA(2);

                if ( (synpred209()) ) {
                    alt130=1;
                }
                else if ( (true) ) {
                    alt130=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("5893:3: (variable_namesGen+= variable_names | record_nameGen+= record_name )", 130, 2, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("5893:3: (variable_namesGen+= variable_names | record_nameGen+= record_name )", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5893:5: variable_namesGen+= variable_names
                    {
                    pushFollow(FOLLOW_variable_names_in_fetch_statement4383);
                    variable_namesGen=variable_names();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variable_namesGen==null) list_variable_namesGen=new ArrayList();
                    list_variable_namesGen.add(variable_namesGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5894:5: record_nameGen+= record_name
                    {
                    pushFollow(FOLLOW_record_name_in_fetch_statement4391);
                    record_nameGen=record_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_record_nameGen==null) list_record_nameGen=new ArrayList();
                    list_record_nameGen.add(record_nameGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node fetch_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fetch_statementReturnNode.setKind("fetch_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		fetch_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		fetch_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_variable_namesGen != null) {
              	        for(Iterator it = list_variable_namesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.variable_names_return r = (PLSQL3Parser.variable_names_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variable_names");
              	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_record_nameGen != null) {
              	        for(Iterator it = list_record_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("record_name");
              	            	fetch_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fetch_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fetch_statement

    public static class field_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start field_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5953:1: field_name returns [Node returnNode] : identifierGen+= identifier ;
    public final field_name_return field_name() throws RecognitionException {
        field_name_return retval = new field_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5954:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5954:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_field_name4416);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node field_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		field_nameReturnNode.setKind("field_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	field_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = field_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end field_name

    public static class field_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start field_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5974:1: field_spec returns [Node returnNode] : column_nameGen+= column_name type_specGen+= type_spec (TK_0= 'NOT' TK_1= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? ;
    public final field_spec_return field_spec() throws RecognitionException {
        field_spec_return retval = new field_spec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token ASSIGNGen=null;
        Token TK_2=null;
        List list_column_nameGen=null;
        List list_type_specGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope column_nameGen = null;
        RuleReturnScope type_specGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5975:1: (column_nameGen+= column_name type_specGen+= type_spec (TK_0= 'NOT' TK_1= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5975:3: column_nameGen+= column_name type_specGen+= type_spec (TK_0= 'NOT' TK_1= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )?
            {
            pushFollow(FOLLOW_column_name_in_field_spec4438);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            pushFollow(FOLLOW_type_spec_in_field_spec4442);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5976:3: (TK_0= 'NOT' TK_1= 'NULL' )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==62) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5976:4: TK_0= 'NOT' TK_1= 'NULL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_field_spec4449); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_field_spec4453); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5977:3: ( (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ASSIGN||LA133_0==52) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5977:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' ) plsql_expressionGen+= plsql_expression
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5977:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' )
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ASSIGN) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==52) ) {
                        alt132=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("5977:5: (ASSIGNGen= ASSIGN | TK_2= 'DEFAULT' )", 132, 0, input);

                        throw nvae;
                    }
                    switch (alt132) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5977:7: ASSIGNGen= ASSIGN
                            {
                            ASSIGNGen=(Token)input.LT(1);
                            match(input,ASSIGN,FOLLOW_ASSIGN_in_field_spec4466); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5977:26: TK_2= 'DEFAULT'
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,52,FOLLOW_52_in_field_spec4472); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_plsql_expression_in_field_spec4478);
                    plsql_expressionGen=plsql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
                    list_plsql_expressionGen.add(plsql_expressionGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node field_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		field_specReturnNode.setKind("field_spec");
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	field_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	field_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		field_specReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		field_specReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ASSIGNGen != null) {
              			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASSIGNGenLeaf.setKind("ASSIGN");
              			ASSIGNGenLeaf.setValue(ASSIGNGen.getText());
              			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
              			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
              			field_specReturnNode.getChildren().add(ASSIGNGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		field_specReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	field_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = field_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end field_spec

    public static class field_specs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start field_specs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6053:1: field_specs returns [Node returnNode] : field_specGen+= field_spec (COMMAGen_List+= COMMA field_specGen_1+= field_spec )* ;
    public final field_specs_return field_specs() throws RecognitionException {
        field_specs_return retval = new field_specs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_field_specGen=null;
        List list_field_specGen_1=null;
        RuleReturnScope field_specGen = null;
        RuleReturnScope field_specGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6054:1: (field_specGen+= field_spec (COMMAGen_List+= COMMA field_specGen_1+= field_spec )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6054:3: field_specGen+= field_spec (COMMAGen_List+= COMMA field_specGen_1+= field_spec )*
            {
            pushFollow(FOLLOW_field_spec_in_field_specs4501);
            field_specGen=field_spec();
            _fsp--;
            if (failed) return retval;
            if (list_field_specGen==null) list_field_specGen=new ArrayList();
            list_field_specGen.add(field_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6054:29: (COMMAGen_List+= COMMA field_specGen_1+= field_spec )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6054:31: COMMAGen_List+= COMMA field_specGen_1+= field_spec
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_field_specs4507); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_field_spec_in_field_specs4511);
            	    field_specGen_1=field_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_field_specGen_1==null) list_field_specGen_1=new ArrayList();
            	    list_field_specGen_1.add(field_specGen_1);


            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node field_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		field_specsReturnNode.setKind("field_specs");
              	    // Create a CST Node
              		if(list_field_specGen != null) {
              	        for(Iterator it = list_field_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.field_spec_return r = (PLSQL3Parser.field_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("field_spec");
              	            	field_specsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			field_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_field_specGen_1 != null) {		
              	    	PLSQL3Parser.field_spec_return r = (PLSQL3Parser.field_spec_return) list_field_specGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("field_spec");
              	    		field_specsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = field_specsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end field_specs

    public static class function_body_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_body
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6099:1: function_body returns [Node returnNode] : (proc_fun_startGen+= proc_fun_start )? TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_5= 'END' (function_nameGen_1+= function_name )? SEMIGen= SEMI ;
    public final function_body_return function_body() throws RecognitionException {
        function_body_return retval = new function_body_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token SEMIGen=null;
        List list_proc_fun_startGen=null;
        List list_function_nameGen=null;
        List list_argumentsGen=null;
        List list_keyRETURNGen=null;
        List list_return_typeGen=null;
        List list_declare_specGen=null;
        List list_seq_of_statementsGen=null;
        List list_exception_handlerGen=null;
        List list_function_nameGen_1=null;
        RuleReturnScope proc_fun_startGen = null;
        RuleReturnScope function_nameGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope return_typeGen = null;
        RuleReturnScope declare_specGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope exception_handlerGen = null;
        RuleReturnScope function_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6100:1: ( (proc_fun_startGen+= proc_fun_start )? TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_5= 'END' (function_nameGen_1+= function_name )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6100:3: (proc_fun_startGen+= proc_fun_start )? TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? TK_5= 'END' (function_nameGen_1+= function_name )? SEMIGen= SEMI
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6100:3: (proc_fun_startGen+= proc_fun_start )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==74) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6100:5: proc_fun_startGen+= proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_function_body4537);
                    proc_fun_startGen=proc_fun_start();
                    _fsp--;
                    if (failed) return retval;
                    if (list_proc_fun_startGen==null) list_proc_fun_startGen=new ArrayList();
                    list_proc_fun_startGen.add(proc_fun_startGen);


                    }
                    break;

            }

            TK_0=(Token)input.LT(1);
            match(input,120,FOLLOW_120_in_function_body4544); if (failed) return retval;
            pushFollow(FOLLOW_function_name_in_function_body4548);
            function_nameGen=function_name();
            _fsp--;
            if (failed) return retval;
            if (list_function_nameGen==null) list_function_nameGen=new ArrayList();
            list_function_nameGen.add(function_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6101:3: (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==LPAREN) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6101:5: LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_function_body4557); if (failed) return retval;
                    pushFollow(FOLLOW_arguments_in_function_body4561);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_function_body4565); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_function_body4575);
            keyRETURNGen=keyRETURN();
            _fsp--;
            if (failed) return retval;
            if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
            list_keyRETURNGen.add(keyRETURNGen);

            pushFollow(FOLLOW_return_type_in_function_body4579);
            return_typeGen=return_type();
            _fsp--;
            if (failed) return retval;
            if (list_return_typeGen==null) list_return_typeGen=new ArrayList();
            list_return_typeGen.add(return_typeGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6102:55: (TK_1= 'IS' | TK_2= 'AS' )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==68) ) {
                alt137=1;
            }
            else if ( (LA137_0==50) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6102:55: (TK_1= 'IS' | TK_2= 'AS' )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6102:57: TK_1= 'IS'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_function_body4585); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6102:69: TK_2= 'AS'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_function_body4591); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6104:3: (declare_specGen+= declare_spec )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( ((LA138_0>=ID && LA138_0<=DOUBLEQUOTED_STRING)||LA138_0==74||LA138_0==120||LA138_0==144||LA138_0==233||LA138_0==245||LA138_0==258||LA138_0==260) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6104:5: declare_specGen+= declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_function_body4604);
            	    declare_specGen=declare_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_declare_specGen==null) list_declare_specGen=new ArrayList();
            	    list_declare_specGen.add(declare_specGen);


            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6105:3: (TK_3= 'BEGIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6105:5: TK_3= 'BEGIN'
            {
            TK_3=(Token)input.LT(1);
            match(input,53,FOLLOW_53_in_function_body4616); if (failed) return retval;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6106:3: (seq_of_statementsGen+= seq_of_statements )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6106:5: seq_of_statementsGen+= seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_function_body4626);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6107:3: (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==54) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6107:5: TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )+
                    {
                    TK_4=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_function_body4636); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6107:22: (exception_handlerGen+= exception_handler )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==116) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6107:24: exception_handlerGen+= exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_function_body4642);
                    	    exception_handlerGen=exception_handler();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_exception_handlerGen==null) list_exception_handlerGen=new ArrayList();
                    	    list_exception_handlerGen.add(exception_handlerGen);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);


                    }
                    break;

            }

            TK_5=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_function_body4654); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6108:14: (function_nameGen_1+= function_name )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( ((LA141_0>=QUOTED_STRING && LA141_0<=DOUBLEQUOTED_STRING)) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6108:16: function_nameGen_1+= function_name
                    {
                    pushFollow(FOLLOW_function_name_in_function_body4660);
                    function_nameGen_1=function_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_nameGen_1==null) list_function_nameGen_1=new ArrayList();
                    list_function_nameGen_1.add(function_nameGen_1);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_function_body4667); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node function_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		function_bodyReturnNode.setKind("function_body");
              	    // Create a CST Node
              		if(list_proc_fun_startGen != null) {
              	        for(Iterator it = list_proc_fun_startGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.proc_fun_start_return r = (PLSQL3Parser.proc_fun_start_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("proc_fun_start");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_function_nameGen != null) {
              	        for(Iterator it = list_function_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("function_name");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			function_bodyReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			function_bodyReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_return_typeGen != null) {
              	        for(Iterator it = list_return_typeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("return_type");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		function_bodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		function_bodyReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_declare_specGen != null) {
              	        for(Iterator it = list_declare_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("declare_spec");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		function_bodyReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		function_bodyReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exception_handlerGen != null) {
              	        for(Iterator it = list_exception_handlerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_handler");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		function_bodyReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_function_nameGen_1 != null) {
              	        for(Iterator it = list_function_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("function_name");
              	            	function_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			function_bodyReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = function_bodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_body

    public static class function_call_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_call
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6280:1: function_call returns [Node returnNode] : user_defined_functionGen+= user_defined_function ({...}?LPARENGen= LPAREN (call_parametersGen+= call_parameters )? RPARENGen= RPAREN )? ;
    public final function_call_return function_call() throws RecognitionException {
        function_call_return retval = new function_call_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_user_defined_functionGen=null;
        List list_call_parametersGen=null;
        RuleReturnScope user_defined_functionGen = null;
        RuleReturnScope call_parametersGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:1: (user_defined_functionGen+= user_defined_function ({...}?LPARENGen= LPAREN (call_parametersGen+= call_parameters )? RPARENGen= RPAREN )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:3: user_defined_functionGen+= user_defined_function ({...}?LPARENGen= LPAREN (call_parametersGen+= call_parameters )? RPARENGen= RPAREN )?
            {
            pushFollow(FOLLOW_user_defined_function_in_function_call4688);
            user_defined_functionGen=user_defined_function();
            _fsp--;
            if (failed) return retval;
            if (list_user_defined_functionGen==null) list_user_defined_functionGen=new ArrayList();
            list_user_defined_functionGen.add(user_defined_functionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:51: ({...}?LPARENGen= LPAREN (call_parametersGen+= call_parameters )? RPARENGen= RPAREN )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==LPAREN) ) {
                int LA143_1 = input.LA(2);

                if ( (LA143_1==PLUS) ) {
                    int LA143_3 = input.LA(3);

                    if ( (LA143_3==LPAREN||LA143_3==NUMBER||(LA143_3>=QUOTED_STRING && LA143_3<=DOUBLEQUOTED_STRING)||LA143_3==COLON||(LA143_3>=56 && LA143_3<=58)||LA143_3==69||LA143_3==110||LA143_3==121||LA143_3==148||LA143_3==153||LA143_3==158||LA143_3==233) ) {
                        alt143=1;
                    }
                }
                else if ( ((LA143_1>=LPAREN && LA143_1<=RPAREN)||LA143_1==NUMBER||(LA143_1>=QUOTED_STRING && LA143_1<=DOUBLEQUOTED_STRING)||LA143_1==MINUS||LA143_1==COLON||(LA143_1>=56 && LA143_1<=58)||LA143_1==62||LA143_1==69||LA143_1==110||LA143_1==121||LA143_1==148||LA143_1==153||LA143_1==158||LA143_1==233) ) {
                    alt143=1;
                }
            }
            switch (alt143) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:53: {...}?LPARENGen= LPAREN (call_parametersGen+= call_parameters )? RPARENGen= RPAREN
                    {
                    if ( !( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_call", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
                    }
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_function_call4696); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:145: (call_parametersGen+= call_parameters )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==LPAREN||LA142_0==NUMBER||(LA142_0>=QUOTED_STRING && LA142_0<=MINUS)||LA142_0==COLON||(LA142_0>=56 && LA142_0<=58)||LA142_0==62||LA142_0==69||LA142_0==110||LA142_0==121||LA142_0==148||LA142_0==153||LA142_0==158||LA142_0==233) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6281:147: call_parametersGen+= call_parameters
                            {
                            pushFollow(FOLLOW_call_parameters_in_function_call4702);
                            call_parametersGen=call_parameters();
                            _fsp--;
                            if (failed) return retval;
                            if (list_call_parametersGen==null) list_call_parametersGen=new ArrayList();
                            list_call_parametersGen.add(call_parametersGen);


                            }
                            break;

                    }

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_function_call4709); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node function_callReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		function_callReturnNode.setKind("function_call");
              	    // Create a CST Node
              		if(list_user_defined_functionGen != null) {
              	        for(Iterator it = list_user_defined_functionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.user_defined_function_return r = (PLSQL3Parser.user_defined_function_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("user_defined_function");
              	            	function_callReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			function_callReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_call_parametersGen != null) {
              	        for(Iterator it = list_call_parametersGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.call_parameters_return r = (PLSQL3Parser.call_parameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("call_parameters");
              	            	function_callReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			function_callReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = function_callReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_call

    public static class function_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6334:1: function_declaration returns [Node returnNode] : function_bodyGen+= function_body ;
    public final function_declaration_return function_declaration() throws RecognitionException {
        function_declaration_return retval = new function_declaration_return();
        retval.start = input.LT(1);

        List list_function_bodyGen=null;
        RuleReturnScope function_bodyGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6335:1: (function_bodyGen+= function_body )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6335:3: function_bodyGen+= function_body
            {
            pushFollow(FOLLOW_function_body_in_function_declaration4738);
            function_bodyGen=function_body();
            _fsp--;
            if (failed) return retval;
            if (list_function_bodyGen==null) list_function_bodyGen=new ArrayList();
            list_function_bodyGen.add(function_bodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node function_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		function_declarationReturnNode.setKind("function_declaration");
              	    // Create a CST Node
              		if(list_function_bodyGen != null) {
              	        for(Iterator it = list_function_bodyGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.function_body_return r = (PLSQL3Parser.function_body_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("function_body");
              	            	function_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = function_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_declaration

    public static class function_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6355:1: function_expression returns [Node returnNode] : (function_callGen+= function_call (DOTGen= DOT nested_expressionGen+= nested_expression )? | {...}? (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) ) );
    public final function_expression_return function_expression() throws RecognitionException {
        function_expression_return retval = new function_expression_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token LPARENGen=null;
        Token ASTERISKGen=null;
        Token RPARENGen=null;
        Token TK_0=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_function_callGen=null;
        List list_nested_expressionGen=null;
        List list_keyCOUNTGen=null;
        List list_nested_expressionGen_1=null;
        List list_nested_expressionGen_2=null;
        RuleReturnScope function_callGen = null;
        RuleReturnScope nested_expressionGen = null;
        RuleReturnScope keyCOUNTGen = null;
        RuleReturnScope nested_expressionGen_1 = null;
        RuleReturnScope nested_expressionGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6356:1: (function_callGen+= function_call (DOTGen= DOT nested_expressionGen+= nested_expression )? | {...}? (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ID && LA148_0<=DOUBLEQUOTED_STRING)||LA148_0==110) ) {
                alt148=1;
            }
            else if ( (LA148_0==121||LA148_0==158) ) {
                alt148=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6355:1: function_expression returns [Node returnNode] : (function_callGen+= function_call (DOTGen= DOT nested_expressionGen+= nested_expression )? | {...}? (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) ) );", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6356:3: function_callGen+= function_call (DOTGen= DOT nested_expressionGen+= nested_expression )?
                    {
                    pushFollow(FOLLOW_function_call_in_function_expression4759);
                    function_callGen=function_call();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_callGen==null) list_function_callGen=new ArrayList();
                    list_function_callGen.add(function_callGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6356:35: (DOTGen= DOT nested_expressionGen+= nested_expression )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==DOT) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6356:37: DOTGen= DOT nested_expressionGen+= nested_expression
                            {
                            DOTGen=(Token)input.LT(1);
                            match(input,DOT,FOLLOW_DOT_in_function_expression4765); if (failed) return retval;
                            pushFollow(FOLLOW_nested_expression_in_function_expression4769);
                            nested_expressionGen=nested_expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
                            list_nested_expressionGen.add(nested_expressionGen);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node function_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_expressionReturnNode.setKind("function_expression");
                      	    // Create a CST Node
                      		if(list_function_callGen != null) {
                      	        for(Iterator it = list_function_callGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_call_return r = (PLSQL3Parser.function_call_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_call");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(DOTGen != null) {
                      			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DOTGenLeaf.setKind("DOT");
                      			DOTGenLeaf.setValue(DOTGen.getText());
                      			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
                      			DOTGenLeaf.setLine(DOTGen.getLine());
                      			function_expressionReturnNode.getChildren().add(DOTGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nested_expressionGen != null) {
                      	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nested_expression");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6393:4: {...}? (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) )
                    {
                    if ( !( isSql ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_expression", " isSql ");
                    }
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6394:3: (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) )
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==158) ) {
                        alt147=1;
                    }
                    else if ( (LA147_0==121) ) {
                        alt147=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("6394:3: (keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN | TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression ) )", 147, 0, input);

                        throw nvae;
                    }
                    switch (alt147) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6394:5: keyCOUNTGen+= keyCOUNT LPARENGen= LPAREN (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression ) RPARENGen= RPAREN
                            {
                            pushFollow(FOLLOW_keyCOUNT_in_function_expression4789);
                            keyCOUNTGen=keyCOUNT();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyCOUNTGen==null) list_keyCOUNTGen=new ArrayList();
                            list_keyCOUNTGen.add(keyCOUNTGen);

                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_function_expression4793); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6394:44: (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression )
                            int alt145=2;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==ASTERISK) ) {
                                alt145=1;
                            }
                            else if ( (LA145_0==LPAREN||LA145_0==NUMBER||(LA145_0>=QUOTED_STRING && LA145_0<=MINUS)||LA145_0==COLON||(LA145_0>=56 && LA145_0<=58)||LA145_0==62||LA145_0==69||LA145_0==110||LA145_0==121||LA145_0==148||LA145_0==153||LA145_0==158||LA145_0==233) ) {
                                alt145=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("6394:44: (ASTERISKGen= ASTERISK | nested_expressionGen+= nested_expression )", 145, 0, input);

                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6394:46: ASTERISKGen= ASTERISK
                                    {
                                    ASTERISKGen=(Token)input.LT(1);
                                    match(input,ASTERISK,FOLLOW_ASTERISK_in_function_expression4799); if (failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6394:69: nested_expressionGen+= nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression4805);
                                    nested_expressionGen=nested_expression();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
                                    list_nested_expressionGen.add(nested_expressionGen);


                                    }
                                    break;

                            }

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_function_expression4811); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:5: TK_0= 'DISTINCT' (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression )
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,121,FOLLOW_121_in_function_expression4819); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:21: (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression )
                            int alt146=2;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==LPAREN) ) {
                                int LA146_1 = input.LA(2);

                                if ( (synpred227()) ) {
                                    alt146=1;
                                }
                                else if ( (( !isSql ||  isSql )) ) {
                                    alt146=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("6395:21: (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression )", 146, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA146_0==NUMBER||(LA146_0>=QUOTED_STRING && LA146_0<=MINUS)||LA146_0==COLON||(LA146_0>=56 && LA146_0<=58)||LA146_0==62||LA146_0==69||LA146_0==110||LA146_0==121||LA146_0==148||LA146_0==153||LA146_0==158||LA146_0==233) ) {
                                alt146=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("6395:21: (LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN | nested_expressionGen_2+= nested_expression )", 146, 0, input);

                                throw nvae;
                            }
                            switch (alt146) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:23: LPARENGen_1= LPAREN nested_expressionGen_1+= nested_expression RPARENGen_1= RPAREN
                                    {
                                    LPARENGen_1=(Token)input.LT(1);
                                    match(input,LPAREN,FOLLOW_LPAREN_in_function_expression4825); if (failed) return retval;
                                    pushFollow(FOLLOW_nested_expression_in_function_expression4829);
                                    nested_expressionGen_1=nested_expression();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_nested_expressionGen_1==null) list_nested_expressionGen_1=new ArrayList();
                                    list_nested_expressionGen_1.add(nested_expressionGen_1);

                                    RPARENGen_1=(Token)input.LT(1);
                                    match(input,RPAREN,FOLLOW_RPAREN_in_function_expression4833); if (failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:105: nested_expressionGen_2+= nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression4839);
                                    nested_expressionGen_2=nested_expression();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_nested_expressionGen_2==null) list_nested_expressionGen_2=new ArrayList();
                                    list_nested_expressionGen_2.add(nested_expressionGen_2);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node function_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_expressionReturnNode.setKind("function_expression");
                      	    // Create a CST Node
                      		if(list_keyCOUNTGen != null) {
                      	        for(Iterator it = list_keyCOUNTGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyCOUNT_return r = (PLSQL3Parser.keyCOUNT_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyCOUNT");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			function_expressionReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ASTERISKGen != null) {
                      			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			ASTERISKGenLeaf.setKind("ASTERISK");
                      			ASTERISKGenLeaf.setValue(ASTERISKGen.getText());
                      			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
                      			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
                      			function_expressionReturnNode.getChildren().add(ASTERISKGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nested_expressionGen != null) {
                      	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nested_expression");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			function_expressionReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		function_expressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(LPARENGen_1 != null) {
                      			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGen_1Leaf.setKind("LPAREN");
                      			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
                      			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
                      			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
                      			function_expressionReturnNode.getChildren().add(LPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nested_expressionGen_1 != null) {
                      	        for(Iterator it = list_nested_expressionGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nested_expression");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen_1 != null) {
                      			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGen_1Leaf.setKind("RPAREN");
                      			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
                      			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
                      			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
                      			function_expressionReturnNode.getChildren().add(RPARENGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nested_expressionGen_2 != null) {
                      	        for(Iterator it = list_nested_expressionGen_2.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nested_expression");
                      	            	function_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_expressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_expression

    public static class function_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6500:1: function_spec returns [Node returnNode] : TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'DETERMINISTIC' )? SEMIGen= SEMI ;
    public final function_spec_return function_spec() throws RecognitionException {
        function_spec_return retval = new function_spec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_1=null;
        Token SEMIGen=null;
        List list_function_nameGen=null;
        List list_argumentsGen=null;
        List list_keyRETURNGen=null;
        List list_return_typeGen=null;
        RuleReturnScope function_nameGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope return_typeGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6501:1: (TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'DETERMINISTIC' )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6501:3: TK_0= 'FUNCTION' function_nameGen+= function_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? keyRETURNGen+= keyRETURN return_typeGen+= return_type (TK_1= 'DETERMINISTIC' )? SEMIGen= SEMI
            {
            TK_0=(Token)input.LT(1);
            match(input,120,FOLLOW_120_in_function_spec4866); if (failed) return retval;
            pushFollow(FOLLOW_function_name_in_function_spec4870);
            function_nameGen=function_name();
            _fsp--;
            if (failed) return retval;
            if (list_function_nameGen==null) list_function_nameGen=new ArrayList();
            list_function_nameGen.add(function_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6502:3: (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==LPAREN) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6502:5: LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_function_spec4879); if (failed) return retval;
                    pushFollow(FOLLOW_arguments_in_function_spec4883);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_function_spec4887); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_function_spec4896);
            keyRETURNGen=keyRETURN();
            _fsp--;
            if (failed) return retval;
            if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
            list_keyRETURNGen.add(keyRETURNGen);

            pushFollow(FOLLOW_return_type_in_function_spec4900);
            return_typeGen=return_type();
            _fsp--;
            if (failed) return retval;
            if (list_return_typeGen==null) list_return_typeGen=new ArrayList();
            list_return_typeGen.add(return_typeGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6503:55: (TK_1= 'DETERMINISTIC' )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==122) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6503:56: TK_1= 'DETERMINISTIC'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,122,FOLLOW_122_in_function_spec4905); if (failed) return retval;

                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_function_spec4911); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node function_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		function_specReturnNode.setKind("function_spec");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		function_specReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_function_nameGen != null) {
              	        for(Iterator it = list_function_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("function_name");
              	            	function_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			function_specReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	function_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			function_specReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	function_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_return_typeGen != null) {
              	        for(Iterator it = list_return_typeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.return_type_return r = (PLSQL3Parser.return_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("return_type");
              	            	function_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		function_specReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			function_specReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = function_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_spec

    public static class function_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start function_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6598:1: function_name returns [Node returnNode] : (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING );
    public final function_name_return function_name() throws RecognitionException {
        function_name_return retval = new function_name_return();
        retval.start = input.LT(1);

        Token QUOTED_STRINGGen=null;
        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6599:1: (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=ID && LA151_0<=DOUBLEQUOTED_STRING)) ) {
                alt151=1;
            }
            else if ( (LA151_0==QUOTED_STRING) ) {
                alt151=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6598:1: function_name returns [Node returnNode] : (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING );", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6599:3: identifierGen+= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_function_name4932);
                    identifierGen=identifier();
                    _fsp--;
                    if (failed) return retval;
                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                    list_identifierGen.add(identifierGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node function_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_nameReturnNode.setKind("function_name");
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	function_nameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_nameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6616:6: QUOTED_STRINGGen= QUOTED_STRING
                    {
                    QUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_function_name4942); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node function_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_nameReturnNode.setKind("function_name");
                      	    // Create a CST Leaf
                      		if(QUOTED_STRINGGen != null) {
                      			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
                      			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
                      			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
                      			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
                      			function_nameReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_nameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function_name

    public static class goto_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start goto_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6635:1: goto_statement returns [Node returnNode] : TK_0= 'GOTO' label_nameGen+= label_name ;
    public final goto_statement_return goto_statement() throws RecognitionException {
        goto_statement_return retval = new goto_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_label_nameGen=null;
        RuleReturnScope label_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6636:1: (TK_0= 'GOTO' label_nameGen+= label_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6636:3: TK_0= 'GOTO' label_nameGen+= label_name
            {
            TK_0=(Token)input.LT(1);
            match(input,123,FOLLOW_123_in_goto_statement4964); if (failed) return retval;
            pushFollow(FOLLOW_label_name_in_goto_statement4968);
            label_nameGen=label_name();
            _fsp--;
            if (failed) return retval;
            if (list_label_nameGen==null) list_label_nameGen=new ArrayList();
            list_label_nameGen.add(label_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node goto_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		goto_statementReturnNode.setKind("goto_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		goto_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_label_nameGen != null) {
              	        for(Iterator it = list_label_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	goto_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = goto_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end goto_statement

    public static class group_by_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start group_by_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6665:1: group_by_clause returns [Node returnNode] : TK_0= 'GROUP' TK_1= 'BY' group_by_exprsGen+= group_by_exprs ;
    public final group_by_clause_return group_by_clause() throws RecognitionException {
        group_by_clause_return retval = new group_by_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_group_by_exprsGen=null;
        RuleReturnScope group_by_exprsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6666:1: (TK_0= 'GROUP' TK_1= 'BY' group_by_exprsGen+= group_by_exprs )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6666:3: TK_0= 'GROUP' TK_1= 'BY' group_by_exprsGen+= group_by_exprs
            {
            TK_0=(Token)input.LT(1);
            match(input,124,FOLLOW_124_in_group_by_clause4989); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,125,FOLLOW_125_in_group_by_clause4993); if (failed) return retval;
            pushFollow(FOLLOW_group_by_exprs_in_group_by_clause4997);
            group_by_exprsGen=group_by_exprs();
            _fsp--;
            if (failed) return retval;
            if (list_group_by_exprsGen==null) list_group_by_exprsGen=new ArrayList();
            list_group_by_exprsGen.add(group_by_exprsGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node group_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		group_by_clauseReturnNode.setKind("group_by_clause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		group_by_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		group_by_clauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_group_by_exprsGen != null) {
              	        for(Iterator it = list_group_by_exprsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.group_by_exprs_return r = (PLSQL3Parser.group_by_exprs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("group_by_exprs");
              	            	group_by_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = group_by_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end group_by_clause

    public static class group_by_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start group_by_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6704:1: group_by_expr returns [Node returnNode] : (rollup_cube_clauseGen+= rollup_cube_clause | grouping_sets_clauseGen+= grouping_sets_clause | grouping_expression_listGen+= grouping_expression_list );
    public final group_by_expr_return group_by_expr() throws RecognitionException {
        group_by_expr_return retval = new group_by_expr_return();
        retval.start = input.LT(1);

        List list_rollup_cube_clauseGen=null;
        List list_grouping_sets_clauseGen=null;
        List list_grouping_expression_listGen=null;
        RuleReturnScope rollup_cube_clauseGen = null;
        RuleReturnScope grouping_sets_clauseGen = null;
        RuleReturnScope grouping_expression_listGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6705:1: (rollup_cube_clauseGen+= rollup_cube_clause | grouping_sets_clauseGen+= grouping_sets_clause | grouping_expression_listGen+= grouping_expression_list )
            int alt152=3;
            switch ( input.LA(1) ) {
            case 160:
            case 204:
                {
                alt152=1;
                }
                break;
            case 172:
                {
                alt152=2;
                }
                break;
            case LPAREN:
            case NUMBER:
            case QUOTED_STRING:
            case ID:
            case DOUBLEQUOTED_STRING:
            case PLUS:
            case MINUS:
            case COLON:
            case 56:
            case 57:
            case 58:
            case 69:
            case 110:
            case 121:
            case 148:
            case 153:
            case 158:
            case 233:
                {
                alt152=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6704:1: group_by_expr returns [Node returnNode] : (rollup_cube_clauseGen+= rollup_cube_clause | grouping_sets_clauseGen+= grouping_sets_clause | grouping_expression_listGen+= grouping_expression_list );", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6705:3: rollup_cube_clauseGen+= rollup_cube_clause
                    {
                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_expr5018);
                    rollup_cube_clauseGen=rollup_cube_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_rollup_cube_clauseGen==null) list_rollup_cube_clauseGen=new ArrayList();
                    list_rollup_cube_clauseGen.add(rollup_cube_clauseGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		group_by_exprReturnNode.setKind("group_by_expr");
                      	    // Create a CST Node
                      		if(list_rollup_cube_clauseGen != null) {
                      	        for(Iterator it = list_rollup_cube_clauseGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.rollup_cube_clause_return r = (PLSQL3Parser.rollup_cube_clause_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("rollup_cube_clause");
                      	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = group_by_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6723:4: grouping_sets_clauseGen+= grouping_sets_clause
                    {
                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_expr5029);
                    grouping_sets_clauseGen=grouping_sets_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_grouping_sets_clauseGen==null) list_grouping_sets_clauseGen=new ArrayList();
                    list_grouping_sets_clauseGen.add(grouping_sets_clauseGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		group_by_exprReturnNode.setKind("group_by_expr");
                      	    // Create a CST Node
                      		if(list_grouping_sets_clauseGen != null) {
                      	        for(Iterator it = list_grouping_sets_clauseGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.grouping_sets_clause_return r = (PLSQL3Parser.grouping_sets_clause_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("grouping_sets_clause");
                      	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = group_by_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6741:4: grouping_expression_listGen+= grouping_expression_list
                    {
                    pushFollow(FOLLOW_grouping_expression_list_in_group_by_expr5040);
                    grouping_expression_listGen=grouping_expression_list();
                    _fsp--;
                    if (failed) return retval;
                    if (list_grouping_expression_listGen==null) list_grouping_expression_listGen=new ArrayList();
                    list_grouping_expression_listGen.add(grouping_expression_listGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node group_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		group_by_exprReturnNode.setKind("group_by_expr");
                      	    // Create a CST Node
                      		if(list_grouping_expression_listGen != null) {
                      	        for(Iterator it = list_grouping_expression_listGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("grouping_expression_list");
                      	            	group_by_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = group_by_exprReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end group_by_expr

    public static class group_by_exprs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start group_by_exprs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6761:1: group_by_exprs returns [Node returnNode] : group_by_exprGen+= group_by_expr (COMMAGen_List+= COMMA group_by_exprGen_1+= group_by_expr )* ;
    public final group_by_exprs_return group_by_exprs() throws RecognitionException {
        group_by_exprs_return retval = new group_by_exprs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_group_by_exprGen=null;
        List list_group_by_exprGen_1=null;
        RuleReturnScope group_by_exprGen = null;
        RuleReturnScope group_by_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:1: (group_by_exprGen+= group_by_expr (COMMAGen_List+= COMMA group_by_exprGen_1+= group_by_expr )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:3: group_by_exprGen+= group_by_expr (COMMAGen_List+= COMMA group_by_exprGen_1+= group_by_expr )*
            {
            pushFollow(FOLLOW_group_by_expr_in_group_by_exprs5062);
            group_by_exprGen=group_by_expr();
            _fsp--;
            if (failed) return retval;
            if (list_group_by_exprGen==null) list_group_by_exprGen=new ArrayList();
            list_group_by_exprGen.add(group_by_exprGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:35: (COMMAGen_List+= COMMA group_by_exprGen_1+= group_by_expr )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==COMMA) ) {
                    int LA153_2 = input.LA(2);

                    if ( (synpred233()) ) {
                        alt153=1;
                    }


                }


                switch (alt153) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:37: COMMAGen_List+= COMMA group_by_exprGen_1+= group_by_expr
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_group_by_exprs5068); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_group_by_expr_in_group_by_exprs5072);
            	    group_by_exprGen_1=group_by_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_group_by_exprGen_1==null) list_group_by_exprGen_1=new ArrayList();
            	    list_group_by_exprGen_1.add(group_by_exprGen_1);


            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node group_by_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		group_by_exprsReturnNode.setKind("group_by_exprs");
              	    // Create a CST Node
              		if(list_group_by_exprGen != null) {
              	        for(Iterator it = list_group_by_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.group_by_expr_return r = (PLSQL3Parser.group_by_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("group_by_expr");
              	            	group_by_exprsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			group_by_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_group_by_exprGen_1 != null) {		
              	    	PLSQL3Parser.group_by_expr_return r = (PLSQL3Parser.group_by_expr_return) list_group_by_exprGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("group_by_expr");
              	    		group_by_exprsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = group_by_exprsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end group_by_exprs

    public static class rollup_cube_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start rollup_cube_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6807:1: rollup_cube_clause returns [Node returnNode] : (keyROLLUPGen+= keyROLLUP | keyCUBEGen+= keyCUBE ) LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN ;
    public final rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        rollup_cube_clause_return retval = new rollup_cube_clause_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyROLLUPGen=null;
        List list_keyCUBEGen=null;
        List list_grouping_expression_listGen=null;
        RuleReturnScope keyROLLUPGen = null;
        RuleReturnScope keyCUBEGen = null;
        RuleReturnScope grouping_expression_listGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6808:1: ( (keyROLLUPGen+= keyROLLUP | keyCUBEGen+= keyCUBE ) LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6808:3: (keyROLLUPGen+= keyROLLUP | keyCUBEGen+= keyCUBE ) LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6808:3: (keyROLLUPGen+= keyROLLUP | keyCUBEGen+= keyCUBE )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==204) ) {
                alt154=1;
            }
            else if ( (LA154_0==160) ) {
                alt154=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("6808:3: (keyROLLUPGen+= keyROLLUP | keyCUBEGen+= keyCUBE )", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6808:5: keyROLLUPGen+= keyROLLUP
                    {
                    pushFollow(FOLLOW_keyROLLUP_in_rollup_cube_clause5099);
                    keyROLLUPGen=keyROLLUP();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyROLLUPGen==null) list_keyROLLUPGen=new ArrayList();
                    list_keyROLLUPGen.add(keyROLLUPGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6808:31: keyCUBEGen+= keyCUBE
                    {
                    pushFollow(FOLLOW_keyCUBE_in_rollup_cube_clause5105);
                    keyCUBEGen=keyCUBE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyCUBEGen==null) list_keyCUBEGen=new ArrayList();
                    list_keyCUBEGen.add(keyCUBEGen);


                    }
                    break;

            }

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_rollup_cube_clause5111); if (failed) return retval;
            pushFollow(FOLLOW_grouping_expression_list_in_rollup_cube_clause5115);
            grouping_expression_listGen=grouping_expression_list();
            _fsp--;
            if (failed) return retval;
            if (list_grouping_expression_listGen==null) list_grouping_expression_listGen=new ArrayList();
            list_grouping_expression_listGen.add(grouping_expression_listGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_rollup_cube_clause5119); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node rollup_cube_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		rollup_cube_clauseReturnNode.setKind("rollup_cube_clause");
              	    // Create a CST Node
              		if(list_keyROLLUPGen != null) {
              	        for(Iterator it = list_keyROLLUPGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyROLLUP_return r = (PLSQL3Parser.keyROLLUP_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyROLLUP");
              	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyCUBEGen != null) {
              	        for(Iterator it = list_keyCUBEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCUBE_return r = (PLSQL3Parser.keyCUBE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCUBE");
              	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			rollup_cube_clauseReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_grouping_expression_listGen != null) {
              	        for(Iterator it = list_grouping_expression_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("grouping_expression_list");
              	            	rollup_cube_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			rollup_cube_clauseReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = rollup_cube_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rollup_cube_clause

    public static class grouping_expression_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start grouping_expression_list
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6866:1: grouping_expression_list returns [Node returnNode] : expression_listGen+= expression_list (COMMAGen_List+= COMMA expression_listGen_1+= expression_list )* ;
    public final grouping_expression_list_return grouping_expression_list() throws RecognitionException {
        grouping_expression_list_return retval = new grouping_expression_list_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_expression_listGen=null;
        List list_expression_listGen_1=null;
        RuleReturnScope expression_listGen = null;
        RuleReturnScope expression_listGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:1: (expression_listGen+= expression_list (COMMAGen_List+= COMMA expression_listGen_1+= expression_list )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:3: expression_listGen+= expression_list (COMMAGen_List+= COMMA expression_listGen_1+= expression_list )*
            {
            pushFollow(FOLLOW_expression_list_in_grouping_expression_list5140);
            expression_listGen=expression_list();
            _fsp--;
            if (failed) return retval;
            if (list_expression_listGen==null) list_expression_listGen=new ArrayList();
            list_expression_listGen.add(expression_listGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:39: (COMMAGen_List+= COMMA expression_listGen_1+= expression_list )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==COMMA) ) {
                    int LA155_2 = input.LA(2);

                    if ( (synpred235()) ) {
                        alt155=1;
                    }


                }


                switch (alt155) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:41: COMMAGen_List+= COMMA expression_listGen_1+= expression_list
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_grouping_expression_list5146); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_expression_list_in_grouping_expression_list5150);
            	    expression_listGen_1=expression_list();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expression_listGen_1==null) list_expression_listGen_1=new ArrayList();
            	    list_expression_listGen_1.add(expression_listGen_1);


            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node grouping_expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		grouping_expression_listReturnNode.setKind("grouping_expression_list");
              	    // Create a CST Node
              		if(list_expression_listGen != null) {
              	        for(Iterator it = list_expression_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression_list");
              	            	grouping_expression_listReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			grouping_expression_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_expression_listGen_1 != null) {		
              	    	PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) list_expression_listGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression_list");
              	    		grouping_expression_listReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = grouping_expression_listReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grouping_expression_list

    public static class grouping_sets_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start grouping_sets_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6912:1: grouping_sets_clause returns [Node returnNode] : keyGROUPINGGen+= keyGROUPING keySETSGen+= keySETS LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN ;
    public final grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        grouping_sets_clause_return retval = new grouping_sets_clause_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyGROUPINGGen=null;
        List list_keySETSGen=null;
        List list_grouping_expression_listGen=null;
        RuleReturnScope keyGROUPINGGen = null;
        RuleReturnScope keySETSGen = null;
        RuleReturnScope grouping_expression_listGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6913:1: (keyGROUPINGGen+= keyGROUPING keySETSGen+= keySETS LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6913:3: keyGROUPINGGen+= keyGROUPING keySETSGen+= keySETS LPARENGen= LPAREN grouping_expression_listGen+= grouping_expression_list RPARENGen= RPAREN
            {
            pushFollow(FOLLOW_keyGROUPING_in_grouping_sets_clause5175);
            keyGROUPINGGen=keyGROUPING();
            _fsp--;
            if (failed) return retval;
            if (list_keyGROUPINGGen==null) list_keyGROUPINGGen=new ArrayList();
            list_keyGROUPINGGen.add(keyGROUPINGGen);

            pushFollow(FOLLOW_keySETS_in_grouping_sets_clause5179);
            keySETSGen=keySETS();
            _fsp--;
            if (failed) return retval;
            if (list_keySETSGen==null) list_keySETSGen=new ArrayList();
            list_keySETSGen.add(keySETSGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_grouping_sets_clause5183); if (failed) return retval;
            pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_clause5187);
            grouping_expression_listGen=grouping_expression_list();
            _fsp--;
            if (failed) return retval;
            if (list_grouping_expression_listGen==null) list_grouping_expression_listGen=new ArrayList();
            list_grouping_expression_listGen.add(grouping_expression_listGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_grouping_sets_clause5191); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node grouping_sets_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		grouping_sets_clauseReturnNode.setKind("grouping_sets_clause");
              	    // Create a CST Node
              		if(list_keyGROUPINGGen != null) {
              	        for(Iterator it = list_keyGROUPINGGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyGROUPING_return r = (PLSQL3Parser.keyGROUPING_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyGROUPING");
              	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keySETSGen != null) {
              	        for(Iterator it = list_keySETSGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySETS_return r = (PLSQL3Parser.keySETS_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySETS");
              	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			grouping_sets_clauseReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_grouping_expression_listGen != null) {
              	        for(Iterator it = list_grouping_expression_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.grouping_expression_list_return r = (PLSQL3Parser.grouping_expression_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("grouping_expression_list");
              	            	grouping_sets_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			grouping_sets_clauseReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = grouping_sets_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grouping_sets_clause

    public static class hierarchical_query_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start hierarchical_query_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6971:1: hierarchical_query_clause returns [Node returnNode] : (TK_0= 'START' TK_1= 'WITH' sql_conditionGen+= sql_condition )? TK_2= 'CONNECT' TK_3= 'BY' (keyNOCYCLEGen+= keyNOCYCLE )? sql_conditionGen_1+= sql_condition ;
    public final hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        hierarchical_query_clause_return retval = new hierarchical_query_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_sql_conditionGen=null;
        List list_keyNOCYCLEGen=null;
        List list_sql_conditionGen_1=null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope keyNOCYCLEGen = null;
        RuleReturnScope sql_conditionGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:1: ( (TK_0= 'START' TK_1= 'WITH' sql_conditionGen+= sql_condition )? TK_2= 'CONNECT' TK_3= 'BY' (keyNOCYCLEGen+= keyNOCYCLE )? sql_conditionGen_1+= sql_condition )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:3: (TK_0= 'START' TK_1= 'WITH' sql_conditionGen+= sql_condition )? TK_2= 'CONNECT' TK_3= 'BY' (keyNOCYCLEGen+= keyNOCYCLE )? sql_conditionGen_1+= sql_condition
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:3: (TK_0= 'START' TK_1= 'WITH' sql_conditionGen+= sql_condition )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==126) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:5: TK_0= 'START' TK_1= 'WITH' sql_conditionGen+= sql_condition
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,126,FOLLOW_126_in_hierarchical_query_clause5214); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,89,FOLLOW_89_in_hierarchical_query_clause5218); if (failed) return retval;
                    pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause5222);
                    sql_conditionGen=sql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                    list_sql_conditionGen.add(sql_conditionGen);


                    }
                    break;

            }

            TK_2=(Token)input.LT(1);
            match(input,127,FOLLOW_127_in_hierarchical_query_clause5229); if (failed) return retval;
            TK_3=(Token)input.LT(1);
            match(input,125,FOLLOW_125_in_hierarchical_query_clause5233); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:90: (keyNOCYCLEGen+= keyNOCYCLE )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==194) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6972:92: keyNOCYCLEGen+= keyNOCYCLE
                    {
                    pushFollow(FOLLOW_keyNOCYCLE_in_hierarchical_query_clause5239);
                    keyNOCYCLEGen=keyNOCYCLE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNOCYCLEGen==null) list_keyNOCYCLEGen=new ArrayList();
                    list_keyNOCYCLEGen.add(keyNOCYCLEGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause5246);
            sql_conditionGen_1=sql_condition();
            _fsp--;
            if (failed) return retval;
            if (list_sql_conditionGen_1==null) list_sql_conditionGen_1=new ArrayList();
            list_sql_conditionGen_1.add(sql_conditionGen_1);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node hierarchical_query_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		hierarchical_query_clauseReturnNode.setKind("hierarchical_query_clause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		hierarchical_query_clauseReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyNOCYCLEGen != null) {
              	        for(Iterator it = list_keyNOCYCLEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNOCYCLE_return r = (PLSQL3Parser.keyNOCYCLE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNOCYCLE");
              	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_sql_conditionGen_1 != null) {
              	        for(Iterator it = list_sql_conditionGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	hierarchical_query_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = hierarchical_query_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hierarchical_query_clause

    public static class host_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start host_variable
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7048:1: host_variable returns [Node returnNode] : identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* ;
    public final host_variable_return host_variable() throws RecognitionException {
        host_variable_return retval = new host_variable_return();
        retval.start = input.LT(1);

        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_identifierGen=null;
        List list_identifierGen_1=null;
        RuleReturnScope identifierGen = null;
        RuleReturnScope identifierGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7049:1: (identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7049:3: identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )*
            {
            pushFollow(FOLLOW_identifier_in_host_variable5267);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7049:29: (DOTGen_List+= DOT identifierGen_1+= identifier )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==DOT) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7049:30: DOTGen_List+= DOT identifierGen_1+= identifier
            	    {
            	    DOTGen_List=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_host_variable5272); if (failed) return retval;
            	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
            	    list_DOTGen_List.add(DOTGen_List);

            	    pushFollow(FOLLOW_identifier_in_host_variable5276);
            	    identifierGen_1=identifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_identifierGen_1==null) list_identifierGen_1=new ArrayList();
            	    list_identifierGen_1.add(identifierGen_1);


            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node host_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		host_variableReturnNode.setKind("host_variable");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	host_variableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal DOTGen_List aggregation
              		if(list_DOTGen_List != null) {
              	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_DOTGen_List != null) {
              		    Token t = (Token) list_DOTGen_List.get(pos); 
              		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_ListLeaf.setKind("DOT");
              			DOTGen_ListLeaf.setValue(t.getText());
              			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			DOTGen_ListLeaf.setLine(t.getLine());
              			host_variableReturnNode.getChildren().add(DOTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_identifierGen_1 != null) {		
              	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) list_identifierGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("identifier");
              	    		host_variableReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = host_variableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end host_variable

    public static class identifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start identifier
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7094:1: identifier returns [Node returnNode] : (IDGen= ID | DOUBLEQUOTED_STRINGGen= DOUBLEQUOTED_STRING );
    public final identifier_return identifier() throws RecognitionException {
        identifier_return retval = new identifier_return();
        retval.start = input.LT(1);

        Token IDGen=null;
        Token DOUBLEQUOTED_STRINGGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7095:1: (IDGen= ID | DOUBLEQUOTED_STRINGGen= DOUBLEQUOTED_STRING )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==ID) ) {
                alt159=1;
            }
            else if ( (LA159_0==DOUBLEQUOTED_STRING) ) {
                alt159=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7094:1: identifier returns [Node returnNode] : (IDGen= ID | DOUBLEQUOTED_STRINGGen= DOUBLEQUOTED_STRING );", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7095:3: IDGen= ID
                    {
                    IDGen=(Token)input.LT(1);
                    match(input,ID,FOLLOW_ID_in_identifier5299); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierReturnNode.setKind("identifier");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IDGenLeaf.setKind("ID");
                      			IDGenLeaf.setValue(IDGen.getText());
                      			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
                      			IDGenLeaf.setLine(IDGen.getLine());
                      			identifierReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7112:4: DOUBLEQUOTED_STRINGGen= DOUBLEQUOTED_STRING
                    {
                    DOUBLEQUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,DOUBLEQUOTED_STRING,FOLLOW_DOUBLEQUOTED_STRING_in_identifier5310); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierReturnNode.setKind("identifier");
                      	    // Create a CST Leaf
                      		if(DOUBLEQUOTED_STRINGGen != null) {
                      			Leaf DOUBLEQUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DOUBLEQUOTED_STRINGGenLeaf.setKind("DOUBLEQUOTED_STRING");
                      			DOUBLEQUOTED_STRINGGenLeaf.setValue(DOUBLEQUOTED_STRINGGen.getText());
                      			DOUBLEQUOTED_STRINGGenLeaf.setPos(DOUBLEQUOTED_STRINGGen.getCharPositionInLine());
                      			DOUBLEQUOTED_STRINGGenLeaf.setLine(DOUBLEQUOTED_STRINGGen.getLine());
                      			identifierReturnNode.getChildren().add(DOUBLEQUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end identifier

    public static class inner_cross_join_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start inner_cross_join_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7132:1: inner_cross_join_clause returns [Node returnNode] : ( (keyINNERGen+= keyINNER )? keyJOINGen+= keyJOIN table_nameGen+= table_name (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN ) | (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) ) keyJOINGen+= keyJOIN table_nameGen+= table_name );
    public final inner_cross_join_clause_return inner_cross_join_clause() throws RecognitionException {
        inner_cross_join_clause_return retval = new inner_cross_join_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyINNERGen=null;
        List list_keyJOINGen=null;
        List list_table_nameGen=null;
        List list_sql_conditionGen=null;
        List list_keyUSINGGen=null;
        List list_column_specsGen=null;
        List list_keyCROSSGen=null;
        List list_keyNATURALGen=null;
        RuleReturnScope keyINNERGen = null;
        RuleReturnScope keyJOINGen = null;
        RuleReturnScope table_nameGen = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope keyUSINGGen = null;
        RuleReturnScope column_specsGen = null;
        RuleReturnScope keyCROSSGen = null;
        RuleReturnScope keyNATURALGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:1: ( (keyINNERGen+= keyINNER )? keyJOINGen+= keyJOIN table_nameGen+= table_name (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN ) | (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) ) keyJOINGen+= keyJOIN table_nameGen+= table_name )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==176||LA163_0==179) ) {
                alt163=1;
            }
            else if ( (LA163_0==78||LA163_0==159) ) {
                alt163=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7132:1: inner_cross_join_clause returns [Node returnNode] : ( (keyINNERGen+= keyINNER )? keyJOINGen+= keyJOIN table_nameGen+= table_name (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN ) | (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) ) keyJOINGen+= keyJOIN table_nameGen+= table_name );", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:3: (keyINNERGen+= keyINNER )? keyJOINGen+= keyJOIN table_nameGen+= table_name (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:3: (keyINNERGen+= keyINNER )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==176) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:5: keyINNERGen+= keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause5341);
                            keyINNERGen=keyINNER();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyINNERGen==null) list_keyINNERGen=new ArrayList();
                            list_keyINNERGen.add(keyINNERGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause5348);
                    keyJOINGen=keyJOIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyJOINGen==null) list_keyJOINGen=new ArrayList();
                    list_keyJOINGen.add(keyJOINGen);

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause5352);
                    table_nameGen=table_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
                    list_table_nameGen.add(table_nameGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:76: (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==128) ) {
                        alt161=1;
                    }
                    else if ( (LA161_0==261) ) {
                        alt161=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7133:76: (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )", 161, 0, input);

                        throw nvae;
                    }
                    switch (alt161) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:78: TK_0= 'ON' sql_conditionGen+= sql_condition
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,128,FOLLOW_128_in_inner_cross_join_clause5358); if (failed) return retval;
                            pushFollow(FOLLOW_sql_condition_in_inner_cross_join_clause5362);
                            sql_conditionGen=sql_condition();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                            list_sql_conditionGen.add(sql_conditionGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7133:122: keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN
                            {
                            pushFollow(FOLLOW_keyUSING_in_inner_cross_join_clause5368);
                            keyUSINGGen=keyUSING();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyUSINGGen==null) list_keyUSINGGen=new ArrayList();
                            list_keyUSINGGen.add(keyUSINGGen);

                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_inner_cross_join_clause5372); if (failed) return retval;
                            pushFollow(FOLLOW_column_specs_in_inner_cross_join_clause5376);
                            column_specsGen=column_specs();
                            _fsp--;
                            if (failed) return retval;
                            if (list_column_specsGen==null) list_column_specsGen=new ArrayList();
                            list_column_specsGen.add(column_specsGen);

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_inner_cross_join_clause5380); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node inner_cross_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		inner_cross_join_clauseReturnNode.setKind("inner_cross_join_clause");
                      	    // Create a CST Node
                      		if(list_keyINNERGen != null) {
                      	        for(Iterator it = list_keyINNERGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyINNER_return r = (PLSQL3Parser.keyINNER_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyINNER");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyJOINGen != null) {
                      	        for(Iterator it = list_keyJOINGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyJOIN");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_table_nameGen != null) {
                      	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("table_name");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		inner_cross_join_clauseReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_sql_conditionGen != null) {
                      	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_condition");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyUSINGGen != null) {
                      	        for(Iterator it = list_keyUSINGGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyUSING_return r = (PLSQL3Parser.keyUSING_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyUSING");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			inner_cross_join_clauseReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_column_specsGen != null) {
                      	        for(Iterator it = list_column_specsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_specs");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			inner_cross_join_clauseReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = inner_cross_join_clauseReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:4: (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) ) keyJOINGen+= keyJOIN table_nameGen+= table_name
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:4: (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) )
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==159) ) {
                        alt162=1;
                    }
                    else if ( (LA162_0==78) ) {
                        alt162=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("7228:4: (keyCROSSGen+= keyCROSS | keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER ) )", 162, 0, input);

                        throw nvae;
                    }
                    switch (alt162) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:6: keyCROSSGen+= keyCROSS
                            {
                            pushFollow(FOLLOW_keyCROSS_in_inner_cross_join_clause5395);
                            keyCROSSGen=keyCROSS();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyCROSSGen==null) list_keyCROSSGen=new ArrayList();
                            list_keyCROSSGen.add(keyCROSSGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:30: keyNATURALGen+= keyNATURAL (keyINNERGen+= keyINNER )
                            {
                            pushFollow(FOLLOW_keyNATURAL_in_inner_cross_join_clause5401);
                            keyNATURALGen=keyNATURAL();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyNATURALGen==null) list_keyNATURALGen=new ArrayList();
                            list_keyNATURALGen.add(keyNATURALGen);

                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:56: (keyINNERGen+= keyINNER )
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7228:58: keyINNERGen+= keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause5407);
                            keyINNERGen=keyINNER();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyINNERGen==null) list_keyINNERGen=new ArrayList();
                            list_keyINNERGen.add(keyINNERGen);


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause5415);
                    keyJOINGen=keyJOIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyJOINGen==null) list_keyJOINGen=new ArrayList();
                    list_keyJOINGen.add(keyJOINGen);

                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause5419);
                    table_nameGen=table_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
                    list_table_nameGen.add(table_nameGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node inner_cross_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		inner_cross_join_clauseReturnNode.setKind("inner_cross_join_clause");
                      	    // Create a CST Node
                      		if(list_keyCROSSGen != null) {
                      	        for(Iterator it = list_keyCROSSGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyCROSS_return r = (PLSQL3Parser.keyCROSS_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyCROSS");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyNATURALGen != null) {
                      	        for(Iterator it = list_keyNATURALGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyNATURAL_return r = (PLSQL3Parser.keyNATURAL_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyNATURAL");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyINNERGen != null) {
                      	        for(Iterator it = list_keyINNERGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyINNER_return r = (PLSQL3Parser.keyINNER_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyINNER");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_keyJOINGen != null) {
                      	        for(Iterator it = list_keyJOINGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("keyJOIN");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_table_nameGen != null) {
                      	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("table_name");
                      	            	inner_cross_join_clauseReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = inner_cross_join_clauseReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end inner_cross_join_clause

    public static class if_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start if_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7288:1: if_statement returns [Node returnNode] : TK_0= 'IF' plsql_conditionGen+= plsql_condition TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements (keyELSIFGen+= keyELSIF plsql_conditionGen_1+= plsql_condition TK_2= 'THEN' seq_of_statementsGen_1+= seq_of_statements )* (TK_3= 'ELSE' seq_of_statementsGen_2+= seq_of_statements )? TK_4= 'END' TK_5= 'IF' ;
    public final if_statement_return if_statement() throws RecognitionException {
        if_statement_return retval = new if_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        List list_plsql_conditionGen=null;
        List list_seq_of_statementsGen=null;
        List list_keyELSIFGen=null;
        List list_plsql_conditionGen_1=null;
        List list_seq_of_statementsGen_1=null;
        List list_seq_of_statementsGen_2=null;
        RuleReturnScope plsql_conditionGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope keyELSIFGen = null;
        RuleReturnScope plsql_conditionGen_1 = null;
        RuleReturnScope seq_of_statementsGen_1 = null;
        RuleReturnScope seq_of_statementsGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7289:1: (TK_0= 'IF' plsql_conditionGen+= plsql_condition TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements (keyELSIFGen+= keyELSIF plsql_conditionGen_1+= plsql_condition TK_2= 'THEN' seq_of_statementsGen_1+= seq_of_statements )* (TK_3= 'ELSE' seq_of_statementsGen_2+= seq_of_statements )? TK_4= 'END' TK_5= 'IF' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7289:3: TK_0= 'IF' plsql_conditionGen+= plsql_condition TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements (keyELSIFGen+= keyELSIF plsql_conditionGen_1+= plsql_condition TK_2= 'THEN' seq_of_statementsGen_1+= seq_of_statements )* (TK_3= 'ELSE' seq_of_statementsGen_2+= seq_of_statements )? TK_4= 'END' TK_5= 'IF'
            {
            TK_0=(Token)input.LT(1);
            match(input,129,FOLLOW_129_in_if_statement5443); if (failed) return retval;
            pushFollow(FOLLOW_plsql_condition_in_if_statement5447);
            plsql_conditionGen=plsql_condition();
            _fsp--;
            if (failed) return retval;
            if (list_plsql_conditionGen==null) list_plsql_conditionGen=new ArrayList();
            list_plsql_conditionGen.add(plsql_conditionGen);

            TK_1=(Token)input.LT(1);
            match(input,117,FOLLOW_117_in_if_statement5451); if (failed) return retval;
            pushFollow(FOLLOW_seq_of_statements_in_if_statement5455);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7290:3: (keyELSIFGen+= keyELSIF plsql_conditionGen_1+= plsql_condition TK_2= 'THEN' seq_of_statementsGen_1+= seq_of_statements )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==234) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7290:5: keyELSIFGen+= keyELSIF plsql_conditionGen_1+= plsql_condition TK_2= 'THEN' seq_of_statementsGen_1+= seq_of_statements
            	    {
            	    pushFollow(FOLLOW_keyELSIF_in_if_statement5463);
            	    keyELSIFGen=keyELSIF();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_keyELSIFGen==null) list_keyELSIFGen=new ArrayList();
            	    list_keyELSIFGen.add(keyELSIFGen);

            	    pushFollow(FOLLOW_plsql_condition_in_if_statement5467);
            	    plsql_conditionGen_1=plsql_condition();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_plsql_conditionGen_1==null) list_plsql_conditionGen_1=new ArrayList();
            	    list_plsql_conditionGen_1.add(plsql_conditionGen_1);

            	    TK_2=(Token)input.LT(1);
            	    match(input,117,FOLLOW_117_in_if_statement5471); if (failed) return retval;
            	    pushFollow(FOLLOW_seq_of_statements_in_if_statement5475);
            	    seq_of_statementsGen_1=seq_of_statements();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_seq_of_statementsGen_1==null) list_seq_of_statementsGen_1=new ArrayList();
            	    list_seq_of_statementsGen_1.add(seq_of_statementsGen_1);


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7291:3: (TK_3= 'ELSE' seq_of_statementsGen_2+= seq_of_statements )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==115) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7291:5: TK_3= 'ELSE' seq_of_statementsGen_2+= seq_of_statements
                    {
                    TK_3=(Token)input.LT(1);
                    match(input,115,FOLLOW_115_in_if_statement5486); if (failed) return retval;
                    pushFollow(FOLLOW_seq_of_statements_in_if_statement5490);
                    seq_of_statementsGen_2=seq_of_statements();
                    _fsp--;
                    if (failed) return retval;
                    if (list_seq_of_statementsGen_2==null) list_seq_of_statementsGen_2=new ArrayList();
                    list_seq_of_statementsGen_2.add(seq_of_statementsGen_2);


                    }
                    break;

            }

            TK_4=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_if_statement5499); if (failed) return retval;
            TK_5=(Token)input.LT(1);
            match(input,129,FOLLOW_129_in_if_statement5503); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node if_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		if_statementReturnNode.setKind("if_statement");
              	    // Create a CST Node
              		if(list_plsql_conditionGen != null) {
              	        for(Iterator it = list_plsql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_condition");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal keyELSIFGen aggregation
              		if(list_keyELSIFGen != null) {
              	    for(int pos = 0; pos < list_keyELSIFGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_keyELSIFGen != null) {		
              	    	PLSQL3Parser.keyELSIF_return r = (PLSQL3Parser.keyELSIF_return) list_keyELSIFGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("keyELSIF");
              	    		if_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_plsql_conditionGen_1 != null) {		
              	    	PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) list_plsql_conditionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("plsql_condition");
              	    		if_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_seq_of_statementsGen_1 != null) {		
              	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) list_seq_of_statementsGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("seq_of_statements");
              	    		if_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen_2 != null) {
              	        for(Iterator it = list_seq_of_statementsGen_2.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = if_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end if_statement

    public static class index_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start index_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7408:1: index_name returns [Node returnNode] : identifierGen+= identifier ;
    public final index_name_return index_name() throws RecognitionException {
        index_name_return retval = new index_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7409:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7409:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_index_name5524);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node index_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		index_nameReturnNode.setKind("index_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	index_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = index_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end index_name

    public static class insert_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start insert_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7429:1: insert_command returns [Node returnNode] : TK_0= 'INSERT' TK_1= 'INTO' table_reference_listGen+= table_reference_list (LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )? (TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN | select_statementGen+= select_statement ) (returning_clauseGen+= returning_clause )? ;
    public final insert_command_return insert_command() throws RecognitionException {
        insert_command_return retval = new insert_command_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_2=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_table_reference_listGen=null;
        List list_column_specsGen=null;
        List list_plsql_expressionsGen=null;
        List list_select_statementGen=null;
        List list_returning_clauseGen=null;
        RuleReturnScope table_reference_listGen = null;
        RuleReturnScope column_specsGen = null;
        RuleReturnScope plsql_expressionsGen = null;
        RuleReturnScope select_statementGen = null;
        RuleReturnScope returning_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7430:1: (TK_0= 'INSERT' TK_1= 'INTO' table_reference_listGen+= table_reference_list (LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )? (TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN | select_statementGen+= select_statement ) (returning_clauseGen+= returning_clause )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7430:3: TK_0= 'INSERT' TK_1= 'INTO' table_reference_listGen+= table_reference_list (LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )? (TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN | select_statementGen+= select_statement ) (returning_clauseGen+= returning_clause )?
            {
            TK_0=(Token)input.LT(1);
            match(input,130,FOLLOW_130_in_insert_command5545); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,119,FOLLOW_119_in_insert_command5549); if (failed) return retval;
            pushFollow(FOLLOW_table_reference_list_in_insert_command5553);
            table_reference_listGen=table_reference_list();
            _fsp--;
            if (failed) return retval;
            if (list_table_reference_listGen==null) list_table_reference_listGen=new ArrayList();
            list_table_reference_listGen.add(table_reference_listGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7431:3: (LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LPAREN) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7431:5: LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_insert_command5561); if (failed) return retval;
                    pushFollow(FOLLOW_column_specs_in_insert_command5565);
                    column_specsGen=column_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specsGen==null) list_column_specsGen=new ArrayList();
                    list_column_specsGen.add(column_specsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_insert_command5569); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7432:3: (TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN | select_statementGen+= select_statement )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==131) ) {
                alt167=1;
            }
            else if ( (LA167_0==148) ) {
                alt167=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7432:3: (TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN | select_statementGen+= select_statement )", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7432:5: TK_2= 'VALUES' LPARENGen_1= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen_1= RPAREN
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,131,FOLLOW_131_in_insert_command5580); if (failed) return retval;
                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_insert_command5584); if (failed) return retval;
                    pushFollow(FOLLOW_plsql_expressions_in_insert_command5588);
                    plsql_expressionsGen=plsql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionsGen==null) list_plsql_expressionsGen=new ArrayList();
                    list_plsql_expressionsGen.add(plsql_expressionsGen);

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_insert_command5592); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7433:5: select_statementGen+= select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_insert_command5600);
                    select_statementGen=select_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_select_statementGen==null) list_select_statementGen=new ArrayList();
                    list_select_statementGen.add(select_statementGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7435:3: (returning_clauseGen+= returning_clause )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( ((LA168_0>=253 && LA168_0<=254)) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7435:5: returning_clauseGen+= returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_insert_command5612);
                    returning_clauseGen=returning_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_returning_clauseGen==null) list_returning_clauseGen=new ArrayList();
                    list_returning_clauseGen.add(returning_clauseGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node insert_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		insert_commandReturnNode.setKind("insert_command");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		insert_commandReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		insert_commandReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_table_reference_listGen != null) {
              	        for(Iterator it = list_table_reference_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_reference_list");
              	            	insert_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			insert_commandReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_specsGen != null) {
              	        for(Iterator it = list_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_specs");
              	            	insert_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			insert_commandReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		insert_commandReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			insert_commandReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_expressionsGen != null) {
              	        for(Iterator it = list_plsql_expressionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expressions");
              	            	insert_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			insert_commandReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_select_statementGen != null) {
              	        for(Iterator it = list_select_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_statement");
              	            	insert_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_returning_clauseGen != null) {
              	        for(Iterator it = list_returning_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("returning_clause");
              	            	insert_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = insert_commandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end insert_command

    public static class integer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start integer
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7558:1: integer returns [Node returnNode] : NUMBERGen= NUMBER ;
    public final integer_return integer() throws RecognitionException {
        integer_return retval = new integer_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7559:1: (NUMBERGen= NUMBER )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7559:3: NUMBERGen= NUMBER
            {
            NUMBERGen=(Token)input.LT(1);
            match(input,NUMBER,FOLLOW_NUMBER_in_integer5636); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node integerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		integerReturnNode.setKind("integer");
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			NUMBERGenLeaf.setKind("NUMBER");
              			NUMBERGenLeaf.setValue(NUMBERGen.getText());
              			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
              			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
              			integerReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = integerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end integer

    public static class join_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start join_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7578:1: join_clause returns [Node returnNode] : table_nameGen+= table_name (inner_cross_join_clauseGen+= inner_cross_join_clause | outer_join_clauseGen+= outer_join_clause )+ ;
    public final join_clause_return join_clause() throws RecognitionException {
        join_clause_return retval = new join_clause_return();
        retval.start = input.LT(1);

        List list_table_nameGen=null;
        List list_inner_cross_join_clauseGen=null;
        List list_outer_join_clauseGen=null;
        RuleReturnScope table_nameGen = null;
        RuleReturnScope inner_cross_join_clauseGen = null;
        RuleReturnScope outer_join_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:1: (table_nameGen+= table_name (inner_cross_join_clauseGen+= inner_cross_join_clause | outer_join_clauseGen+= outer_join_clause )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:3: table_nameGen+= table_name (inner_cross_join_clauseGen+= inner_cross_join_clause | outer_join_clauseGen+= outer_join_clause )+
            {
            pushFollow(FOLLOW_table_name_in_join_clause5657);
            table_nameGen=table_name();
            _fsp--;
            if (failed) return retval;
            if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
            list_table_nameGen.add(table_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:29: (inner_cross_join_clauseGen+= inner_cross_join_clause | outer_join_clauseGen+= outer_join_clause )+
            int cnt169=0;
            loop169:
            do {
                int alt169=3;
                switch ( input.LA(1) ) {
                case 176:
                    {
                    int LA169_2 = input.LA(2);

                    if ( (synpred249()) ) {
                        alt169=1;
                    }


                    }
                    break;
                case 179:
                    {
                    int LA169_3 = input.LA(2);

                    if ( (synpred249()) ) {
                        alt169=1;
                    }


                    }
                    break;
                case 159:
                    {
                    int LA169_4 = input.LA(2);

                    if ( (synpred249()) ) {
                        alt169=1;
                    }


                    }
                    break;
                case 78:
                    {
                    int LA169_5 = input.LA(2);

                    if ( (synpred249()) ) {
                        alt169=1;
                    }
                    else if ( (synpred250()) ) {
                        alt169=2;
                    }


                    }
                    break;
                case 198:
                    {
                    int LA169_6 = input.LA(2);

                    if ( (synpred250()) ) {
                        alt169=2;
                    }


                    }
                    break;
                case 171:
                    {
                    int LA169_7 = input.LA(2);

                    if ( (synpred250()) ) {
                        alt169=2;
                    }


                    }
                    break;
                case 182:
                    {
                    int LA169_8 = input.LA(2);

                    if ( (synpred250()) ) {
                        alt169=2;
                    }


                    }
                    break;
                case 203:
                    {
                    int LA169_9 = input.LA(2);

                    if ( (synpred250()) ) {
                        alt169=2;
                    }


                    }
                    break;

                }

                switch (alt169) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:31: inner_cross_join_clauseGen+= inner_cross_join_clause
            	    {
            	    pushFollow(FOLLOW_inner_cross_join_clause_in_join_clause5663);
            	    inner_cross_join_clauseGen=inner_cross_join_clause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_inner_cross_join_clauseGen==null) list_inner_cross_join_clauseGen=new ArrayList();
            	    list_inner_cross_join_clauseGen.add(inner_cross_join_clauseGen);


            	    }
            	    break;
            	case 2 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:85: outer_join_clauseGen+= outer_join_clause
            	    {
            	    pushFollow(FOLLOW_outer_join_clause_in_join_clause5669);
            	    outer_join_clauseGen=outer_join_clause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_outer_join_clauseGen==null) list_outer_join_clauseGen=new ArrayList();
            	    list_outer_join_clauseGen.add(outer_join_clauseGen);


            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        throw eee;
                }
                cnt169++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		join_clauseReturnNode.setKind("join_clause");
              	    // Create a CST Node
              		if(list_table_nameGen != null) {
              	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_name");
              	            	join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal inner_cross_join_clauseGen aggregation
              		if(list_inner_cross_join_clauseGen != null) {
              	    for(int pos = 0; pos < list_inner_cross_join_clauseGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_inner_cross_join_clauseGen != null) {		
              	    	PLSQL3Parser.inner_cross_join_clause_return r = (PLSQL3Parser.inner_cross_join_clause_return) list_inner_cross_join_clauseGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("inner_cross_join_clause");
              	    		join_clauseReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal outer_join_clauseGen aggregation
              		if(list_outer_join_clauseGen != null) {
              	    for(int pos = 0; pos < list_outer_join_clauseGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_outer_join_clauseGen != null) {		
              	    	PLSQL3Parser.outer_join_clause_return r = (PLSQL3Parser.outer_join_clause_return) list_outer_join_clauseGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("outer_join_clause");
              	    		join_clauseReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = join_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end join_clause

    public static class label_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start label_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7629:1: label_name returns [Node returnNode] : identifierGen+= identifier ;
    public final label_name_return label_name() throws RecognitionException {
        label_name_return retval = new label_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7630:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7630:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_label_name5693);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node label_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		label_nameReturnNode.setKind("label_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	label_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = label_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end label_name

    public static class levels_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start levels
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7650:1: levels returns [Node returnNode] : integerGen+= integer ;
    public final levels_return levels() throws RecognitionException {
        levels_return retval = new levels_return();
        retval.start = input.LT(1);

        List list_integerGen=null;
        RuleReturnScope integerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7651:1: (integerGen+= integer )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7651:3: integerGen+= integer
            {
            pushFollow(FOLLOW_integer_in_levels5714);
            integerGen=integer();
            _fsp--;
            if (failed) return retval;
            if (list_integerGen==null) list_integerGen=new ArrayList();
            list_integerGen.add(integerGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node levelsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		levelsReturnNode.setKind("levels");
              	    // Create a CST Node
              		if(list_integerGen != null) {
              	        for(Iterator it = list_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer");
              	            	levelsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = levelsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end levels

    public static class link_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start link_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7671:1: link_name returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final link_name_return link_name() throws RecognitionException {
        link_name_return retval = new link_name_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7672:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7672:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_link_name5735);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node link_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		link_nameReturnNode.setKind("link_name");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	link_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = link_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end link_name

    public static class literal_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start literal
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7692:1: literal returns [Node returnNode] : ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);

        Token PLUSGen=null;
        Token MINUSGen=null;
        Token NUMBERGen=null;
        Token QUOTED_STRINGGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7693:1: ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NUMBER||(LA171_0>=PLUS && LA171_0<=MINUS)) ) {
                alt171=1;
            }
            else if ( (LA171_0==QUOTED_STRING) ) {
                alt171=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7692:1: literal returns [Node returnNode] : ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING );", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7693:3: (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7693:3: (PLUSGen= PLUS | MINUSGen= MINUS )?
                    int alt170=3;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==PLUS) ) {
                        alt170=1;
                    }
                    else if ( (LA170_0==MINUS) ) {
                        alt170=2;
                    }
                    switch (alt170) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7693:5: PLUSGen= PLUS
                            {
                            PLUSGen=(Token)input.LT(1);
                            match(input,PLUS,FOLLOW_PLUS_in_literal5758); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7693:20: MINUSGen= MINUS
                            {
                            MINUSGen=(Token)input.LT(1);
                            match(input,MINUS,FOLLOW_MINUS_in_literal5764); if (failed) return retval;

                            }
                            break;

                    }

                    NUMBERGen=(Token)input.LT(1);
                    match(input,NUMBER,FOLLOW_NUMBER_in_literal5771); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(PLUSGen != null) {
                      			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			PLUSGenLeaf.setKind("PLUS");
                      			PLUSGenLeaf.setValue(PLUSGen.getText());
                      			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
                      			PLUSGenLeaf.setLine(PLUSGen.getLine());
                      			literalReturnNode.getChildren().add(PLUSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			MINUSGenLeaf.setKind("MINUS");
                      			MINUSGenLeaf.setValue(MINUSGen.getText());
                      			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
                      			MINUSGenLeaf.setLine(MINUSGen.getLine());
                      			literalReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			literalReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7728:4: QUOTED_STRINGGen= QUOTED_STRING
                    {
                    QUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_literal5782); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(QUOTED_STRINGGen != null) {
                      			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
                      			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
                      			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
                      			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
                      			literalReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end literal

    public static class literals_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start literals
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7747:1: literals returns [Node returnNode] : literalGen+= literal (COMMAGen_List+= COMMA literalGen_1+= literal )* ;
    public final literals_return literals() throws RecognitionException {
        literals_return retval = new literals_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_literalGen=null;
        List list_literalGen_1=null;
        RuleReturnScope literalGen = null;
        RuleReturnScope literalGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7748:1: (literalGen+= literal (COMMAGen_List+= COMMA literalGen_1+= literal )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7748:3: literalGen+= literal (COMMAGen_List+= COMMA literalGen_1+= literal )*
            {
            pushFollow(FOLLOW_literal_in_literals5804);
            literalGen=literal();
            _fsp--;
            if (failed) return retval;
            if (list_literalGen==null) list_literalGen=new ArrayList();
            list_literalGen.add(literalGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7748:23: (COMMAGen_List+= COMMA literalGen_1+= literal )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7748:25: COMMAGen_List+= COMMA literalGen_1+= literal
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_literals5810); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_literal_in_literals5814);
            	    literalGen_1=literal();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_literalGen_1==null) list_literalGen_1=new ArrayList();
            	    list_literalGen_1.add(literalGen_1);


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node literalsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		literalsReturnNode.setKind("literals");
              	    // Create a CST Node
              		if(list_literalGen != null) {
              	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	literalsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			literalsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_literalGen_1 != null) {		
              	    	PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) list_literalGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("literal");
              	    		literalsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = literalsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end literals

    public static class lock_mode_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start lock_mode
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7793:1: lock_mode returns [Node returnNode] : (TK_0= 'ROW' TK_1= 'SHARE' | TK_0= 'ROW' TK_1= 'EXCLUSIVE' | TK_0= 'SHARE' TK_1= 'UPDATE' | TK_0= 'SHARE' | TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE' | TK_0= 'EXCLUSIVE' );
    public final lock_mode_return lock_mode() throws RecognitionException {
        lock_mode_return retval = new lock_mode_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7794:1: (TK_0= 'ROW' TK_1= 'SHARE' | TK_0= 'ROW' TK_1= 'EXCLUSIVE' | TK_0= 'SHARE' TK_1= 'UPDATE' | TK_0= 'SHARE' | TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE' | TK_0= 'EXCLUSIVE' )
            int alt173=6;
            switch ( input.LA(1) ) {
            case 132:
                {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==134) ) {
                    alt173=2;
                }
                else if ( (LA173_1==133) ) {
                    alt173=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7793:1: lock_mode returns [Node returnNode] : (TK_0= 'ROW' TK_1= 'SHARE' | TK_0= 'ROW' TK_1= 'EXCLUSIVE' | TK_0= 'SHARE' TK_1= 'UPDATE' | TK_0= 'SHARE' | TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE' | TK_0= 'EXCLUSIVE' );", 173, 1, input);

                    throw nvae;
                }
                }
                break;
            case 133:
                {
                switch ( input.LA(2) ) {
                case 135:
                    {
                    alt173=3;
                    }
                    break;
                case 132:
                    {
                    alt173=5;
                    }
                    break;
                case 138:
                    {
                    alt173=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("7793:1: lock_mode returns [Node returnNode] : (TK_0= 'ROW' TK_1= 'SHARE' | TK_0= 'ROW' TK_1= 'EXCLUSIVE' | TK_0= 'SHARE' TK_1= 'UPDATE' | TK_0= 'SHARE' | TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE' | TK_0= 'EXCLUSIVE' );", 173, 2, input);

                    throw nvae;
                }

                }
                break;
            case 134:
                {
                alt173=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("7793:1: lock_mode returns [Node returnNode] : (TK_0= 'ROW' TK_1= 'SHARE' | TK_0= 'ROW' TK_1= 'EXCLUSIVE' | TK_0= 'SHARE' TK_1= 'UPDATE' | TK_0= 'SHARE' | TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE' | TK_0= 'EXCLUSIVE' );", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7794:3: TK_0= 'ROW' TK_1= 'SHARE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,132,FOLLOW_132_in_lock_mode5838); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_lock_mode5842); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7820:4: TK_0= 'ROW' TK_1= 'EXCLUSIVE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,132,FOLLOW_132_in_lock_mode5853); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,134,FOLLOW_134_in_lock_mode5857); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7846:4: TK_0= 'SHARE' TK_1= 'UPDATE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_lock_mode5868); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,135,FOLLOW_135_in_lock_mode5872); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7872:4: TK_0= 'SHARE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_lock_mode5883); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7889:4: TK_0= 'SHARE' TK_1= 'ROW' TK_2= 'EXCLUSIVE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_lock_mode5894); if (failed) return retval;
                    TK_1=(Token)input.LT(1);
                    match(input,132,FOLLOW_132_in_lock_mode5898); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,134,FOLLOW_134_in_lock_mode5902); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue(TK_1.getText());
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue(TK_2.getText());
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7924:4: TK_0= 'EXCLUSIVE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,134,FOLLOW_134_in_lock_mode5913); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lock_modeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lock_modeReturnNode.setKind("lock_mode");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		lock_modeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lock_modeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lock_mode

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start lock_table_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7943:1: lock_table_statement returns [Node returnNode] : TK_0= 'LOCK' TK_1= 'TABLE' table_reference_listGen+= table_reference_list TK_2= 'IN' lock_modeGen+= lock_mode TK_3= 'MODE' (TK_4= 'NOWAIT' )? ;
    public final lock_table_statement_return lock_table_statement() throws RecognitionException {
        lock_table_statement_return retval = new lock_table_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_table_reference_listGen=null;
        List list_lock_modeGen=null;
        RuleReturnScope table_reference_listGen = null;
        RuleReturnScope lock_modeGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7944:1: (TK_0= 'LOCK' TK_1= 'TABLE' table_reference_listGen+= table_reference_list TK_2= 'IN' lock_modeGen+= lock_mode TK_3= 'MODE' (TK_4= 'NOWAIT' )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7944:3: TK_0= 'LOCK' TK_1= 'TABLE' table_reference_listGen+= table_reference_list TK_2= 'IN' lock_modeGen+= lock_mode TK_3= 'MODE' (TK_4= 'NOWAIT' )?
            {
            TK_0=(Token)input.LT(1);
            match(input,136,FOLLOW_136_in_lock_table_statement5934); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,137,FOLLOW_137_in_lock_table_statement5938); if (failed) return retval;
            pushFollow(FOLLOW_table_reference_list_in_lock_table_statement5942);
            table_reference_listGen=table_reference_list();
            _fsp--;
            if (failed) return retval;
            if (list_table_reference_listGen==null) list_table_reference_listGen=new ArrayList();
            list_table_reference_listGen.add(table_reference_listGen);

            TK_2=(Token)input.LT(1);
            match(input,51,FOLLOW_51_in_lock_table_statement5948); if (failed) return retval;
            pushFollow(FOLLOW_lock_mode_in_lock_table_statement5952);
            lock_modeGen=lock_mode();
            _fsp--;
            if (failed) return retval;
            if (list_lock_modeGen==null) list_lock_modeGen=new ArrayList();
            list_lock_modeGen.add(lock_modeGen);

            TK_3=(Token)input.LT(1);
            match(input,138,FOLLOW_138_in_lock_table_statement5956); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7945:49: (TK_4= 'NOWAIT' )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==139) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7945:51: TK_4= 'NOWAIT'
                    {
                    TK_4=(Token)input.LT(1);
                    match(input,139,FOLLOW_139_in_lock_table_statement5962); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node lock_table_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		lock_table_statementReturnNode.setKind("lock_table_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		lock_table_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		lock_table_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_table_reference_listGen != null) {
              	        for(Iterator it = list_table_reference_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_reference_list");
              	            	lock_table_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		lock_table_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_lock_modeGen != null) {
              	        for(Iterator it = list_lock_modeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.lock_mode_return r = (PLSQL3Parser.lock_mode_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("lock_mode");
              	            	lock_table_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		lock_table_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		lock_table_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = lock_table_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lock_table_statement

    public static class loop_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start loop_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8020:1: loop_statement returns [Node returnNode] : (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? (keyWHILEGen+= keyWHILE plsql_conditionGen+= plsql_condition | (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) ) )? keyLOOPGen+= keyLOOP seq_of_statementsGen+= seq_of_statements TK_1= 'END' keyLOOPGen_1+= keyLOOP (label_nameGen_1+= label_name )? ;
    public final loop_statement_return loop_statement() throws RecognitionException {
        loop_statement_return retval = new loop_statement_return();
        retval.start = input.LT(1);

        Token LLABELGen=null;
        Token RLABELGen=null;
        Token TK_0=null;
        Token TK_1=null;
        List list_label_nameGen=null;
        List list_keyWHILEGen=null;
        List list_plsql_conditionGen=null;
        List list_numeric_loop_paramGen=null;
        List list_cursor_loop_paramGen=null;
        List list_keyLOOPGen=null;
        List list_seq_of_statementsGen=null;
        List list_keyLOOPGen_1=null;
        List list_label_nameGen_1=null;
        RuleReturnScope label_nameGen = null;
        RuleReturnScope keyWHILEGen = null;
        RuleReturnScope plsql_conditionGen = null;
        RuleReturnScope numeric_loop_paramGen = null;
        RuleReturnScope cursor_loop_paramGen = null;
        RuleReturnScope keyLOOPGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope keyLOOPGen_1 = null;
        RuleReturnScope label_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8021:1: ( (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? (keyWHILEGen+= keyWHILE plsql_conditionGen+= plsql_condition | (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) ) )? keyLOOPGen+= keyLOOP seq_of_statementsGen+= seq_of_statements TK_1= 'END' keyLOOPGen_1+= keyLOOP (label_nameGen_1+= label_name )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8021:3: (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? (keyWHILEGen+= keyWHILE plsql_conditionGen+= plsql_condition | (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) ) )? keyLOOPGen+= keyLOOP seq_of_statementsGen+= seq_of_statements TK_1= 'END' keyLOOPGen_1+= keyLOOP (label_nameGen_1+= label_name )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8021:3: (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==LLABEL) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8021:5: LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL
                    {
                    LLABELGen=(Token)input.LT(1);
                    match(input,LLABEL,FOLLOW_LLABEL_in_loop_statement5988); if (failed) return retval;
                    pushFollow(FOLLOW_label_name_in_loop_statement5992);
                    label_nameGen=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen==null) list_label_nameGen=new ArrayList();
                    list_label_nameGen.add(label_nameGen);

                    RLABELGen=(Token)input.LT(1);
                    match(input,RLABEL,FOLLOW_RLABEL_in_loop_statement5996); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8022:3: (keyWHILEGen+= keyWHILE plsql_conditionGen+= plsql_condition | (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) ) )?
            int alt177=3;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==264) ) {
                alt177=1;
            }
            else if ( (LA177_0==140) ) {
                alt177=2;
            }
            switch (alt177) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8022:5: keyWHILEGen+= keyWHILE plsql_conditionGen+= plsql_condition
                    {
                    pushFollow(FOLLOW_keyWHILE_in_loop_statement6007);
                    keyWHILEGen=keyWHILE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyWHILEGen==null) list_keyWHILEGen=new ArrayList();
                    list_keyWHILEGen.add(keyWHILEGen);

                    pushFollow(FOLLOW_plsql_condition_in_loop_statement6011);
                    plsql_conditionGen=plsql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_conditionGen==null) list_plsql_conditionGen=new ArrayList();
                    list_plsql_conditionGen.add(plsql_conditionGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:4: (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) )
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:4: (TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param ) )
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:6: TK_0= 'FOR' (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param )
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,140,FOLLOW_140_in_loop_statement6023); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:17: (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param )
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==ID) ) {
                        int LA176_1 = input.LA(2);

                        if ( (synpred263()) ) {
                            alt176=1;
                        }
                        else if ( (true) ) {
                            alt176=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8023:17: (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param )", 176, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA176_0==DOUBLEQUOTED_STRING) ) {
                        int LA176_2 = input.LA(2);

                        if ( (synpred263()) ) {
                            alt176=1;
                        }
                        else if ( (true) ) {
                            alt176=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8023:17: (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param )", 176, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("8023:17: (numeric_loop_paramGen+= numeric_loop_param | cursor_loop_paramGen+= cursor_loop_param )", 176, 0, input);

                        throw nvae;
                    }
                    switch (alt176) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:19: numeric_loop_paramGen+= numeric_loop_param
                            {
                            pushFollow(FOLLOW_numeric_loop_param_in_loop_statement6029);
                            numeric_loop_paramGen=numeric_loop_param();
                            _fsp--;
                            if (failed) return retval;
                            if (list_numeric_loop_paramGen==null) list_numeric_loop_paramGen=new ArrayList();
                            list_numeric_loop_paramGen.add(numeric_loop_paramGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:63: cursor_loop_paramGen+= cursor_loop_param
                            {
                            pushFollow(FOLLOW_cursor_loop_param_in_loop_statement6035);
                            cursor_loop_paramGen=cursor_loop_param();
                            _fsp--;
                            if (failed) return retval;
                            if (list_cursor_loop_paramGen==null) list_cursor_loop_paramGen=new ArrayList();
                            list_cursor_loop_paramGen.add(cursor_loop_paramGen);


                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_keyLOOP_in_loop_statement6051);
            keyLOOPGen=keyLOOP();
            _fsp--;
            if (failed) return retval;
            if (list_keyLOOPGen==null) list_keyLOOPGen=new ArrayList();
            list_keyLOOPGen.add(keyLOOPGen);

            pushFollow(FOLLOW_seq_of_statements_in_loop_statement6057);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);

            TK_1=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_loop_statement6063); if (failed) return retval;
            pushFollow(FOLLOW_keyLOOP_in_loop_statement6067);
            keyLOOPGen_1=keyLOOP();
            _fsp--;
            if (failed) return retval;
            if (list_keyLOOPGen_1==null) list_keyLOOPGen_1=new ArrayList();
            list_keyLOOPGen_1.add(keyLOOPGen_1);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8028:3: (label_nameGen_1+= label_name )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( ((LA178_0>=ID && LA178_0<=DOUBLEQUOTED_STRING)) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8028:5: label_nameGen_1+= label_name
                    {
                    pushFollow(FOLLOW_label_name_in_loop_statement6076);
                    label_nameGen_1=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen_1==null) list_label_nameGen_1=new ArrayList();
                    list_label_nameGen_1.add(label_nameGen_1);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		loop_statementReturnNode.setKind("loop_statement");
              	    // Create a CST Leaf
              		if(LLABELGen != null) {
              			Leaf LLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LLABELGenLeaf.setKind("LLABEL");
              			LLABELGenLeaf.setValue(LLABELGen.getText());
              			LLABELGenLeaf.setPos(LLABELGen.getCharPositionInLine());
              			LLABELGenLeaf.setLine(LLABELGen.getLine());
              			loop_statementReturnNode.getChildren().add(LLABELGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_label_nameGen != null) {
              	        for(Iterator it = list_label_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RLABELGen != null) {
              			Leaf RLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RLABELGenLeaf.setKind("RLABEL");
              			RLABELGenLeaf.setValue(RLABELGen.getText());
              			RLABELGenLeaf.setPos(RLABELGen.getCharPositionInLine());
              			RLABELGenLeaf.setLine(RLABELGen.getLine());
              			loop_statementReturnNode.getChildren().add(RLABELGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_conditionGen != null) {
              	        for(Iterator it = list_plsql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_condition_return r = (PLSQL3Parser.plsql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_condition");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_numeric_loop_paramGen != null) {
              	        for(Iterator it = list_numeric_loop_paramGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.numeric_loop_param_return r = (PLSQL3Parser.numeric_loop_param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("numeric_loop_param");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_loop_paramGen != null) {
              	        for(Iterator it = list_cursor_loop_paramGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_loop_param_return r = (PLSQL3Parser.cursor_loop_param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_loop_param");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyLOOPGen != null) {
              	        for(Iterator it = list_keyLOOPGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLOOP_return r = (PLSQL3Parser.keyLOOP_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLOOP");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		loop_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyLOOPGen_1 != null) {
              	        for(Iterator it = list_keyLOOPGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLOOP_return r = (PLSQL3Parser.keyLOOP_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLOOP");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_label_nameGen_1 != null) {
              	        for(Iterator it = list_label_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	loop_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = loop_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end loop_statement

    public static class lvalues_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start lvalues
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8145:1: lvalues returns [Node returnNode] : lvalueGen+= lvalue (COMMAGen_List+= COMMA lvalueGen_1+= lvalue )* ;
    public final lvalues_return lvalues() throws RecognitionException {
        lvalues_return retval = new lvalues_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_lvalueGen=null;
        List list_lvalueGen_1=null;
        RuleReturnScope lvalueGen = null;
        RuleReturnScope lvalueGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8146:1: (lvalueGen+= lvalue (COMMAGen_List+= COMMA lvalueGen_1+= lvalue )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8146:3: lvalueGen+= lvalue (COMMAGen_List+= COMMA lvalueGen_1+= lvalue )*
            {
            pushFollow(FOLLOW_lvalue_in_lvalues6100);
            lvalueGen=lvalue();
            _fsp--;
            if (failed) return retval;
            if (list_lvalueGen==null) list_lvalueGen=new ArrayList();
            list_lvalueGen.add(lvalueGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8146:21: (COMMAGen_List+= COMMA lvalueGen_1+= lvalue )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==COMMA) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8146:23: COMMAGen_List+= COMMA lvalueGen_1+= lvalue
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_lvalues6106); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_lvalue_in_lvalues6110);
            	    lvalueGen_1=lvalue();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_lvalueGen_1==null) list_lvalueGen_1=new ArrayList();
            	    list_lvalueGen_1.add(lvalueGen_1);


            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node lvaluesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		lvaluesReturnNode.setKind("lvalues");
              	    // Create a CST Node
              		if(list_lvalueGen != null) {
              	        for(Iterator it = list_lvalueGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("lvalue");
              	            	lvaluesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			lvaluesReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_lvalueGen_1 != null) {		
              	    	PLSQL3Parser.lvalue_return r = (PLSQL3Parser.lvalue_return) list_lvalueGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("lvalue");
              	    		lvaluesReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = lvaluesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lvalues

    public static class lvalue_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start lvalue
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );
    public final lvalue_return lvalue() throws RecognitionException {
        lvalue_return retval = new lvalue_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token COLONGen=null;
        Token COLONGen_1=null;
        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_variable_nameGen=null;
        List list_record_nameGen=null;
        List list_field_nameGen=null;
        List list_plsql_table_nameGen=null;
        List list_subscriptGen=null;
        List list_host_variableGen=null;
        List list_host_variableGen_1=null;
        RuleReturnScope variable_nameGen = null;
        RuleReturnScope record_nameGen = null;
        RuleReturnScope field_nameGen = null;
        RuleReturnScope plsql_table_nameGen = null;
        RuleReturnScope subscriptGen = null;
        RuleReturnScope host_variableGen = null;
        RuleReturnScope host_variableGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8191:1: (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? )
            int alt182=4;
            switch ( input.LA(1) ) {
            case ID:
                {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    int LA182_4 = input.LA(3);

                    if ( (LA182_4==ID) ) {
                        int LA182_7 = input.LA(4);

                        if ( (LA182_7==EOF||(LA182_7>=ASSIGN && LA182_7<=COMMA)||LA182_7==SEMI||LA182_7==113) ) {
                            alt182=2;
                        }
                        else if ( (LA182_7==LPAREN||LA182_7==DOT) ) {
                            alt182=3;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 7, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA182_4==DOUBLEQUOTED_STRING) ) {
                        int LA182_8 = input.LA(4);

                        if ( (LA182_8==LPAREN||LA182_8==DOT) ) {
                            alt182=3;
                        }
                        else if ( (LA182_8==EOF||(LA182_8>=ASSIGN && LA182_8<=COMMA)||LA182_8==SEMI||LA182_8==113) ) {
                            alt182=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 8, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt182=3;
                    }
                    break;
                case EOF:
                case ASSIGN:
                case COMMA:
                case SEMI:
                case 113:
                    {
                    alt182=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 1, input);

                    throw nvae;
                }

                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    int LA182_4 = input.LA(3);

                    if ( (LA182_4==ID) ) {
                        int LA182_7 = input.LA(4);

                        if ( (LA182_7==EOF||(LA182_7>=ASSIGN && LA182_7<=COMMA)||LA182_7==SEMI||LA182_7==113) ) {
                            alt182=2;
                        }
                        else if ( (LA182_7==LPAREN||LA182_7==DOT) ) {
                            alt182=3;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 7, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA182_4==DOUBLEQUOTED_STRING) ) {
                        int LA182_8 = input.LA(4);

                        if ( (LA182_8==LPAREN||LA182_8==DOT) ) {
                            alt182=3;
                        }
                        else if ( (LA182_8==EOF||(LA182_8>=ASSIGN && LA182_8<=COMMA)||LA182_8==SEMI||LA182_8==113) ) {
                            alt182=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 8, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt182=3;
                    }
                    break;
                case EOF:
                case ASSIGN:
                case COMMA:
                case SEMI:
                case 113:
                    {
                    alt182=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 2, input);

                    throw nvae;
                }

                }
                break;
            case COLON:
                {
                alt182=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("8190:1: lvalue returns [Node returnNode] : (variable_nameGen+= variable_name | record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name | plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )* | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? );", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8191:3: variable_nameGen+= variable_name
                    {
                    pushFollow(FOLLOW_variable_name_in_lvalue6133);
                    variable_nameGen=variable_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variable_nameGen==null) list_variable_nameGen=new ArrayList();
                    list_variable_nameGen.add(variable_nameGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lvalueReturnNode.setKind("lvalue");
                      	    // Create a CST Node
                      		if(list_variable_nameGen != null) {
                      	        for(Iterator it = list_variable_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variable_name");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lvalueReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8209:4: record_nameGen+= record_name DOTGen= DOT field_nameGen+= field_name
                    {
                    pushFollow(FOLLOW_record_name_in_lvalue6144);
                    record_nameGen=record_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_record_nameGen==null) list_record_nameGen=new ArrayList();
                    list_record_nameGen.add(record_nameGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_lvalue6148); if (failed) return retval;
                    pushFollow(FOLLOW_field_name_in_lvalue6152);
                    field_nameGen=field_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_field_nameGen==null) list_field_nameGen=new ArrayList();
                    list_field_nameGen.add(field_nameGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lvalueReturnNode.setKind("lvalue");
                      	    // Create a CST Node
                      		if(list_record_nameGen != null) {
                      	        for(Iterator it = list_record_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.record_name_return r = (PLSQL3Parser.record_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("record_name");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(DOTGen != null) {
                      			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DOTGenLeaf.setKind("DOT");
                      			DOTGenLeaf.setValue(DOTGen.getText());
                      			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
                      			DOTGenLeaf.setLine(DOTGen.getLine());
                      			lvalueReturnNode.getChildren().add(DOTGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_field_nameGen != null) {
                      	        for(Iterator it = list_field_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.field_name_return r = (PLSQL3Parser.field_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("field_name");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lvalueReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8246:4: plsql_table_nameGen+= plsql_table_name LPARENGen= LPAREN subscriptGen+= subscript RPARENGen= RPAREN (DOTGen_List+= DOT field_nameGen+= field_name )*
                    {
                    pushFollow(FOLLOW_plsql_table_name_in_lvalue6163);
                    plsql_table_nameGen=plsql_table_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_table_nameGen==null) list_plsql_table_nameGen=new ArrayList();
                    list_plsql_table_nameGen.add(plsql_table_nameGen);

                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_lvalue6167); if (failed) return retval;
                    pushFollow(FOLLOW_subscript_in_lvalue6171);
                    subscriptGen=subscript();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subscriptGen==null) list_subscriptGen=new ArrayList();
                    list_subscriptGen.add(subscriptGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_lvalue6175); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8246:100: (DOTGen_List+= DOT field_nameGen+= field_name )*
                    loop180:
                    do {
                        int alt180=2;
                        int LA180_0 = input.LA(1);

                        if ( (LA180_0==DOT) ) {
                            alt180=1;
                        }


                        switch (alt180) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8246:102: DOTGen_List+= DOT field_nameGen+= field_name
                    	    {
                    	    DOTGen_List=(Token)input.LT(1);
                    	    match(input,DOT,FOLLOW_DOT_in_lvalue6181); if (failed) return retval;
                    	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
                    	    list_DOTGen_List.add(DOTGen_List);

                    	    pushFollow(FOLLOW_field_name_in_lvalue6185);
                    	    field_nameGen=field_name();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_field_nameGen==null) list_field_nameGen=new ArrayList();
                    	    list_field_nameGen.add(field_nameGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop180;
                        }
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lvalueReturnNode.setKind("lvalue");
                      	    // Create a CST Node
                      		if(list_plsql_table_nameGen != null) {
                      	        for(Iterator it = list_plsql_table_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_table_name_return r = (PLSQL3Parser.plsql_table_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_table_name");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			lvalueReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_subscriptGen != null) {
                      	        for(Iterator it = list_subscriptGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.subscript_return r = (PLSQL3Parser.subscript_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("subscript");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			lvalueReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      	
                      		// Create a special CST Node for terminal DOTGen_List aggregation
                      		if(list_DOTGen_List != null) {
                      	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
                      		// Terminal extractor
                      	    if(list_DOTGen_List != null) {
                      		    Token t = (Token) list_DOTGen_List.get(pos); 
                      		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DOTGen_ListLeaf.setKind("DOT");
                      			DOTGen_ListLeaf.setValue(t.getText());
                      			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
                      			DOTGen_ListLeaf.setLine(t.getLine());
                      			lvalueReturnNode.getChildren().add(DOTGen_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_field_nameGen != null) {		
                      	    	PLSQL3Parser.field_name_return r = (PLSQL3Parser.field_name_return) list_field_nameGen.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("field_name");
                      	    		lvalueReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}
                      	
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lvalueReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8317:4: COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )?
                    {
                    COLONGen=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_lvalue6199); if (failed) return retval;
                    pushFollow(FOLLOW_host_variable_in_lvalue6203);
                    host_variableGen=host_variable();
                    _fsp--;
                    if (failed) return retval;
                    if (list_host_variableGen==null) list_host_variableGen=new ArrayList();
                    list_host_variableGen.add(host_variableGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8317:51: (COLONGen_1= COLON host_variableGen_1+= host_variable )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==COLON) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8317:53: COLONGen_1= COLON host_variableGen_1+= host_variable
                            {
                            COLONGen_1=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_lvalue6209); if (failed) return retval;
                            pushFollow(FOLLOW_host_variable_in_lvalue6213);
                            host_variableGen_1=host_variable();
                            _fsp--;
                            if (failed) return retval;
                            if (list_host_variableGen_1==null) list_host_variableGen_1=new ArrayList();
                            list_host_variableGen_1.add(host_variableGen_1);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node lvalueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		lvalueReturnNode.setKind("lvalue");
                      	    // Create a CST Leaf
                      		if(COLONGen != null) {
                      			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COLONGenLeaf.setKind("COLON");
                      			COLONGenLeaf.setValue(COLONGen.getText());
                      			COLONGenLeaf.setPos(COLONGen.getCharPositionInLine());
                      			COLONGenLeaf.setLine(COLONGen.getLine());
                      			lvalueReturnNode.getChildren().add(COLONGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_host_variableGen != null) {
                      	        for(Iterator it = list_host_variableGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("host_variable");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(COLONGen_1 != null) {
                      			Leaf COLONGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COLONGen_1Leaf.setKind("COLON");
                      			COLONGen_1Leaf.setValue(COLONGen_1.getText());
                      			COLONGen_1Leaf.setPos(COLONGen_1.getCharPositionInLine());
                      			COLONGen_1Leaf.setLine(COLONGen_1.getLine());
                      			lvalueReturnNode.getChildren().add(COLONGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_host_variableGen_1 != null) {
                      	        for(Iterator it = list_host_variableGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("host_variable");
                      	            	lvalueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = lvalueReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lvalue

    public static class main_model_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start main_model
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8365:1: main_model returns [Node returnNode] : (keyMAINGen+= keyMAIN main_model_nameGen+= main_model_name )? model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options ) model_rules_clauseGen+= model_rules_clause ;
    public final main_model_return main_model() throws RecognitionException {
        main_model_return retval = new main_model_return();
        retval.start = input.LT(1);

        List list_keyMAINGen=null;
        List list_main_model_nameGen=null;
        List list_model_column_clausesGen=null;
        List list_cell_reference_optionsGen=null;
        List list_model_rules_clauseGen=null;
        RuleReturnScope keyMAINGen = null;
        RuleReturnScope main_model_nameGen = null;
        RuleReturnScope model_column_clausesGen = null;
        RuleReturnScope cell_reference_optionsGen = null;
        RuleReturnScope model_rules_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8366:1: ( (keyMAINGen+= keyMAIN main_model_nameGen+= main_model_name )? model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options ) model_rules_clauseGen+= model_rules_clause )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8366:3: (keyMAINGen+= keyMAIN main_model_nameGen+= main_model_name )? model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options ) model_rules_clauseGen+= model_rules_clause
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8366:3: (keyMAINGen+= keyMAIN main_model_nameGen+= main_model_name )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==187) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8366:5: keyMAINGen+= keyMAIN main_model_nameGen+= main_model_name
                    {
                    pushFollow(FOLLOW_keyMAIN_in_main_model6239);
                    keyMAINGen=keyMAIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyMAINGen==null) list_keyMAINGen=new ArrayList();
                    list_keyMAINGen.add(keyMAINGen);

                    pushFollow(FOLLOW_main_model_name_in_main_model6243);
                    main_model_nameGen=main_model_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_main_model_nameGen==null) list_main_model_nameGen=new ArrayList();
                    list_main_model_nameGen.add(main_model_nameGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_model_column_clauses_in_main_model6250);
            model_column_clausesGen=model_column_clauses();
            _fsp--;
            if (failed) return retval;
            if (list_model_column_clausesGen==null) list_model_column_clausesGen=new ArrayList();
            list_model_column_clausesGen.add(model_column_clausesGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8367:3: (cell_reference_optionsGen+= cell_reference_options )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8367:5: cell_reference_optionsGen+= cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_main_model6258);
            cell_reference_optionsGen=cell_reference_options();
            _fsp--;
            if (failed) return retval;
            if (list_cell_reference_optionsGen==null) list_cell_reference_optionsGen=new ArrayList();
            list_cell_reference_optionsGen.add(cell_reference_optionsGen);


            }

            pushFollow(FOLLOW_model_rules_clause_in_main_model6264);
            model_rules_clauseGen=model_rules_clause();
            _fsp--;
            if (failed) return retval;
            if (list_model_rules_clauseGen==null) list_model_rules_clauseGen=new ArrayList();
            list_model_rules_clauseGen.add(model_rules_clauseGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node main_modelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		main_modelReturnNode.setKind("main_model");
              	    // Create a CST Node
              		if(list_keyMAINGen != null) {
              	        for(Iterator it = list_keyMAINGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyMAIN_return r = (PLSQL3Parser.keyMAIN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyMAIN");
              	            	main_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_main_model_nameGen != null) {
              	        for(Iterator it = list_main_model_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.main_model_name_return r = (PLSQL3Parser.main_model_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("main_model_name");
              	            	main_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_model_column_clausesGen != null) {
              	        for(Iterator it = list_model_column_clausesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_column_clauses_return r = (PLSQL3Parser.model_column_clauses_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_column_clauses");
              	            	main_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cell_reference_optionsGen != null) {
              	        for(Iterator it = list_cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_reference_options");
              	            	main_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_model_rules_clauseGen != null) {
              	        for(Iterator it = list_model_rules_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_rules_clause_return r = (PLSQL3Parser.model_rules_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_rules_clause");
              	            	main_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = main_modelReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end main_model

    public static class main_model_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start main_model_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8427:1: main_model_name returns [Node returnNode] : identifierGen+= identifier ;
    public final main_model_name_return main_model_name() throws RecognitionException {
        main_model_name_return retval = new main_model_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8428:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8428:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_main_model_name6286);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node main_model_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		main_model_nameReturnNode.setKind("main_model_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	main_model_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = main_model_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end main_model_name

    public static class measure_column_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start measure_column
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8448:1: measure_column returns [Node returnNode] : column_nameGen+= column_name ;
    public final measure_column_return measure_column() throws RecognitionException {
        measure_column_return retval = new measure_column_return();
        retval.start = input.LT(1);

        List list_column_nameGen=null;
        RuleReturnScope column_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8449:1: (column_nameGen+= column_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8449:3: column_nameGen+= column_name
            {
            pushFollow(FOLLOW_column_name_in_measure_column6307);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node measure_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		measure_columnReturnNode.setKind("measure_column");
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	measure_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = measure_columnReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end measure_column

    public static class model_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8469:1: model_clause returns [Node returnNode] : keyMODELGen+= keyMODEL (cell_reference_optionsGen+= cell_reference_options ) (return_rows_clauseGen+= return_rows_clause )? (reference_modelGen+= reference_model )+ main_modelGen+= main_model ;
    public final model_clause_return model_clause() throws RecognitionException {
        model_clause_return retval = new model_clause_return();
        retval.start = input.LT(1);

        List list_keyMODELGen=null;
        List list_cell_reference_optionsGen=null;
        List list_return_rows_clauseGen=null;
        List list_reference_modelGen=null;
        List list_main_modelGen=null;
        RuleReturnScope keyMODELGen = null;
        RuleReturnScope cell_reference_optionsGen = null;
        RuleReturnScope return_rows_clauseGen = null;
        RuleReturnScope reference_modelGen = null;
        RuleReturnScope main_modelGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8470:1: (keyMODELGen+= keyMODEL (cell_reference_optionsGen+= cell_reference_options ) (return_rows_clauseGen+= return_rows_clause )? (reference_modelGen+= reference_model )+ main_modelGen+= main_model )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8470:3: keyMODELGen+= keyMODEL (cell_reference_optionsGen+= cell_reference_options ) (return_rows_clauseGen+= return_rows_clause )? (reference_modelGen+= reference_model )+ main_modelGen+= main_model
            {
            pushFollow(FOLLOW_keyMODEL_in_model_clause6328);
            keyMODELGen=keyMODEL();
            _fsp--;
            if (failed) return retval;
            if (list_keyMODELGen==null) list_keyMODELGen=new ArrayList();
            list_keyMODELGen.add(keyMODELGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8470:25: (cell_reference_optionsGen+= cell_reference_options )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8470:27: cell_reference_optionsGen+= cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_model_clause6334);
            cell_reference_optionsGen=cell_reference_options();
            _fsp--;
            if (failed) return retval;
            if (list_cell_reference_optionsGen==null) list_cell_reference_optionsGen=new ArrayList();
            list_cell_reference_optionsGen.add(cell_reference_optionsGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8471:3: (return_rows_clauseGen+= return_rows_clause )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==253) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8471:5: return_rows_clauseGen+= return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause6344);
                    return_rows_clauseGen=return_rows_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_return_rows_clauseGen==null) list_return_rows_clauseGen=new ArrayList();
                    list_return_rows_clauseGen.add(return_rows_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8472:3: (reference_modelGen+= reference_model )+
            int cnt185=0;
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==201) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8472:5: reference_modelGen+= reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause6355);
            	    reference_modelGen=reference_model();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_reference_modelGen==null) list_reference_modelGen=new ArrayList();
            	    list_reference_modelGen.add(reference_modelGen);


            	    }
            	    break;

            	default :
            	    if ( cnt185 >= 1 ) break loop185;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(185, input);
                        throw eee;
                }
                cnt185++;
            } while (true);

            pushFollow(FOLLOW_main_model_in_model_clause6362);
            main_modelGen=main_model();
            _fsp--;
            if (failed) return retval;
            if (list_main_modelGen==null) list_main_modelGen=new ArrayList();
            list_main_modelGen.add(main_modelGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_clauseReturnNode.setKind("model_clause");
              	    // Create a CST Node
              		if(list_keyMODELGen != null) {
              	        for(Iterator it = list_keyMODELGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyMODEL_return r = (PLSQL3Parser.keyMODEL_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyMODEL");
              	            	model_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cell_reference_optionsGen != null) {
              	        for(Iterator it = list_cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_reference_options");
              	            	model_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_return_rows_clauseGen != null) {
              	        for(Iterator it = list_return_rows_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.return_rows_clause_return r = (PLSQL3Parser.return_rows_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("return_rows_clause");
              	            	model_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_reference_modelGen != null) {
              	        for(Iterator it = list_reference_modelGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.reference_model_return r = (PLSQL3Parser.reference_model_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("reference_model");
              	            	model_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_main_modelGen != null) {
              	        for(Iterator it = list_main_modelGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.main_model_return r = (PLSQL3Parser.main_model_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("main_model");
              	            	model_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_clause

    public static class model_column_clauses_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_column_clauses
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8532:1: model_column_clauses returns [Node returnNode] : (query_partition_clauseGen+= query_partition_clause (column_specGen+= column_spec )? )? keyDIMENSIONGen+= keyDIMENSION TK_0= 'BY' LPARENGen= LPAREN model_columnsGen+= model_columns RPARENGen= RPAREN keyMEASURESGen+= keyMEASURES LPARENGen_1= LPAREN model_columnsGen_1+= model_columns RPARENGen_1= RPAREN ;
    public final model_column_clauses_return model_column_clauses() throws RecognitionException {
        model_column_clauses_return retval = new model_column_clauses_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_query_partition_clauseGen=null;
        List list_column_specGen=null;
        List list_keyDIMENSIONGen=null;
        List list_model_columnsGen=null;
        List list_keyMEASURESGen=null;
        List list_model_columnsGen_1=null;
        RuleReturnScope query_partition_clauseGen = null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope keyDIMENSIONGen = null;
        RuleReturnScope model_columnsGen = null;
        RuleReturnScope keyMEASURESGen = null;
        RuleReturnScope model_columnsGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:1: ( (query_partition_clauseGen+= query_partition_clause (column_specGen+= column_spec )? )? keyDIMENSIONGen+= keyDIMENSION TK_0= 'BY' LPARENGen= LPAREN model_columnsGen+= model_columns RPARENGen= RPAREN keyMEASURESGen+= keyMEASURES LPARENGen_1= LPAREN model_columnsGen_1+= model_columns RPARENGen_1= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:3: (query_partition_clauseGen+= query_partition_clause (column_specGen+= column_spec )? )? keyDIMENSIONGen+= keyDIMENSION TK_0= 'BY' LPARENGen= LPAREN model_columnsGen+= model_columns RPARENGen= RPAREN keyMEASURESGen+= keyMEASURES LPARENGen_1= LPAREN model_columnsGen_1+= model_columns RPARENGen_1= RPAREN
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:3: (query_partition_clauseGen+= query_partition_clause (column_specGen+= column_spec )? )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==198) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:5: query_partition_clauseGen+= query_partition_clause (column_specGen+= column_spec )?
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_model_column_clauses6385);
                    query_partition_clauseGen=query_partition_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_query_partition_clauseGen==null) list_query_partition_clauseGen=new ArrayList();
                    list_query_partition_clauseGen.add(query_partition_clauseGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:55: (column_specGen+= column_spec )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( ((LA186_0>=ID && LA186_0<=DOUBLEQUOTED_STRING)||LA186_0==110) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8533:57: column_specGen+= column_spec
                            {
                            pushFollow(FOLLOW_column_spec_in_model_column_clauses6391);
                            column_specGen=column_spec();
                            _fsp--;
                            if (failed) return retval;
                            if (list_column_specGen==null) list_column_specGen=new ArrayList();
                            list_column_specGen.add(column_specGen);


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_keyDIMENSION_in_model_column_clauses6403);
            keyDIMENSIONGen=keyDIMENSION();
            _fsp--;
            if (failed) return retval;
            if (list_keyDIMENSIONGen==null) list_keyDIMENSIONGen=new ArrayList();
            list_keyDIMENSIONGen.add(keyDIMENSIONGen);

            TK_0=(Token)input.LT(1);
            match(input,125,FOLLOW_125_in_model_column_clauses6407); if (failed) return retval;
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses6411); if (failed) return retval;
            pushFollow(FOLLOW_model_columns_in_model_column_clauses6415);
            model_columnsGen=model_columns();
            _fsp--;
            if (failed) return retval;
            if (list_model_columnsGen==null) list_model_columnsGen=new ArrayList();
            list_model_columnsGen.add(model_columnsGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses6419); if (failed) return retval;
            pushFollow(FOLLOW_keyMEASURES_in_model_column_clauses6425);
            keyMEASURESGen=keyMEASURES();
            _fsp--;
            if (failed) return retval;
            if (list_keyMEASURESGen==null) list_keyMEASURESGen=new ArrayList();
            list_keyMEASURESGen.add(keyMEASURESGen);

            LPARENGen_1=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses6429); if (failed) return retval;
            pushFollow(FOLLOW_model_columns_in_model_column_clauses6433);
            model_columnsGen_1=model_columns();
            _fsp--;
            if (failed) return retval;
            if (list_model_columnsGen_1==null) list_model_columnsGen_1=new ArrayList();
            list_model_columnsGen_1.add(model_columnsGen_1);

            RPARENGen_1=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses6437); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_column_clausesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_column_clausesReturnNode.setKind("model_column_clauses");
              	    // Create a CST Node
              		if(list_query_partition_clauseGen != null) {
              	        for(Iterator it = list_query_partition_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("query_partition_clause");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_column_specGen != null) {
              	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_spec");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyDIMENSIONGen != null) {
              	        for(Iterator it = list_keyDIMENSIONGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyDIMENSION_return r = (PLSQL3Parser.keyDIMENSION_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyDIMENSION");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		model_column_clausesReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			model_column_clausesReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_model_columnsGen != null) {
              	        for(Iterator it = list_model_columnsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_columns_return r = (PLSQL3Parser.model_columns_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_columns");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			model_column_clausesReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyMEASURESGen != null) {
              	        for(Iterator it = list_keyMEASURESGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyMEASURES_return r = (PLSQL3Parser.keyMEASURES_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyMEASURES");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			model_column_clausesReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_model_columnsGen_1 != null) {
              	        for(Iterator it = list_model_columnsGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_columns_return r = (PLSQL3Parser.model_columns_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_columns");
              	            	model_column_clausesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			model_column_clausesReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_column_clausesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_column_clauses

    public static class model_columns_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_columns
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8650:1: model_columns returns [Node returnNode] : model_columnGen+= model_column (COMMAGen_List+= COMMA model_columnGen_1+= model_column )* ;
    public final model_columns_return model_columns() throws RecognitionException {
        model_columns_return retval = new model_columns_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_model_columnGen=null;
        List list_model_columnGen_1=null;
        RuleReturnScope model_columnGen = null;
        RuleReturnScope model_columnGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8651:1: (model_columnGen+= model_column (COMMAGen_List+= COMMA model_columnGen_1+= model_column )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8651:3: model_columnGen+= model_column (COMMAGen_List+= COMMA model_columnGen_1+= model_column )*
            {
            pushFollow(FOLLOW_model_column_in_model_columns6459);
            model_columnGen=model_column();
            _fsp--;
            if (failed) return retval;
            if (list_model_columnGen==null) list_model_columnGen=new ArrayList();
            list_model_columnGen.add(model_columnGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8651:33: (COMMAGen_List+= COMMA model_columnGen_1+= model_column )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8651:35: COMMAGen_List+= COMMA model_columnGen_1+= model_column
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_model_columns6465); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_model_column_in_model_columns6469);
            	    model_columnGen_1=model_column();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_model_columnGen_1==null) list_model_columnGen_1=new ArrayList();
            	    list_model_columnGen_1.add(model_columnGen_1);


            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_columnsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_columnsReturnNode.setKind("model_columns");
              	    // Create a CST Node
              		if(list_model_columnGen != null) {
              	        for(Iterator it = list_model_columnGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_column_return r = (PLSQL3Parser.model_column_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_column");
              	            	model_columnsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			model_columnsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_model_columnGen_1 != null) {		
              	    	PLSQL3Parser.model_column_return r = (PLSQL3Parser.model_column_return) list_model_columnGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("model_column");
              	    		model_columnsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_columnsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_columns

    public static class model_column_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_column
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8696:1: model_column returns [Node returnNode] : sql_expressionGen+= sql_expression ( (TK_0= 'AS' )? column_specGen+= column_spec )? ;
    public final model_column_return model_column() throws RecognitionException {
        model_column_return retval = new model_column_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_sql_expressionGen=null;
        List list_column_specGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope column_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:1: (sql_expressionGen+= sql_expression ( (TK_0= 'AS' )? column_specGen+= column_spec )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:3: sql_expressionGen+= sql_expression ( (TK_0= 'AS' )? column_specGen+= column_spec )?
            {
            pushFollow(FOLLOW_sql_expression_in_model_column6494);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:37: ( (TK_0= 'AS' )? column_specGen+= column_spec )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( ((LA190_0>=ID && LA190_0<=DOUBLEQUOTED_STRING)||LA190_0==50||LA190_0==110) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:39: (TK_0= 'AS' )? column_specGen+= column_spec
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:39: (TK_0= 'AS' )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==50) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8697:41: TK_0= 'AS'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,50,FOLLOW_50_in_model_column6502); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_spec_in_model_column6509);
                    column_specGen=column_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                    list_column_specGen.add(column_specGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_columnReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_columnReturnNode.setKind("model_column");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	model_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		model_columnReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_column_specGen != null) {
              	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_spec");
              	            	model_columnReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_columnReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_column

    public static class model_rules_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_rules_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8736:1: model_rules_clause returns [Node returnNode] : (keyRULESGen+= keyRULES (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )? )? (keyITERATEGen+= keyITERATE LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )? )? LPARENGen_2= LPAREN model_rules_exprsGen+= model_rules_exprs RPARENGen_2= RPAREN ;
    public final model_rules_clause_return model_rules_clause() throws RecognitionException {
        model_rules_clause_return retval = new model_rules_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token LPARENGen=null;
        Token NUMBERGen=null;
        Token RPARENGen=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        Token LPARENGen_2=null;
        Token RPARENGen_2=null;
        List list_keyRULESGen=null;
        List list_keyUPSERTGen=null;
        List list_keyAUTOMATICGen=null;
        List list_keySEQUENTIALGen=null;
        List list_keyITERATEGen=null;
        List list_keyUNTILGen=null;
        List list_sql_conditionGen=null;
        List list_model_rules_exprsGen=null;
        RuleReturnScope keyRULESGen = null;
        RuleReturnScope keyUPSERTGen = null;
        RuleReturnScope keyAUTOMATICGen = null;
        RuleReturnScope keySEQUENTIALGen = null;
        RuleReturnScope keyITERATEGen = null;
        RuleReturnScope keyUNTILGen = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope model_rules_exprsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:1: ( (keyRULESGen+= keyRULES (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )? )? (keyITERATEGen+= keyITERATE LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )? )? LPARENGen_2= LPAREN model_rules_exprsGen+= model_rules_exprs RPARENGen_2= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:3: (keyRULESGen+= keyRULES (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )? )? (keyITERATEGen+= keyITERATE LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )? )? LPARENGen_2= LPAREN model_rules_exprsGen+= model_rules_exprs RPARENGen_2= RPAREN
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:3: (keyRULESGen+= keyRULES (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )? )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==205) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:5: keyRULESGen+= keyRULES (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )?
                    {
                    pushFollow(FOLLOW_keyRULES_in_model_rules_clause6535);
                    keyRULESGen=keyRULES();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRULESGen==null) list_keyRULESGen=new ArrayList();
                    list_keyRULESGen.add(keyRULESGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:27: (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )?
                    int alt192=3;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==135) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==221) ) {
                        alt192=2;
                    }
                    switch (alt192) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:29: TK_0= 'UPDATE'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,135,FOLLOW_135_in_model_rules_clause6541); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:45: keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )?
                            {
                            pushFollow(FOLLOW_keyUPSERT_in_model_rules_clause6547);
                            keyUPSERTGen=keyUPSERT();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyUPSERTGen==null) list_keyUPSERTGen=new ArrayList();
                            list_keyUPSERTGen.add(keyUPSERTGen);

                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:69: (TK_1= 'ALL' )?
                            int alt191=2;
                            int LA191_0 = input.LA(1);

                            if ( (LA191_0==67) ) {
                                alt191=1;
                            }
                            switch (alt191) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:71: TK_1= 'ALL'
                                    {
                                    TK_1=(Token)input.LT(1);
                                    match(input,67,FOLLOW_67_in_model_rules_clause6553); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:88: ( (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER' )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==157||LA194_0==208) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:90: (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL ) TK_2= 'ORDER'
                            {
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:90: (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL )
                            int alt193=2;
                            int LA193_0 = input.LA(1);

                            if ( (LA193_0==157) ) {
                                alt193=1;
                            }
                            else if ( (LA193_0==208) ) {
                                alt193=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("8737:90: (keyAUTOMATICGen+= keyAUTOMATIC | keySEQUENTIALGen+= keySEQUENTIAL )", 193, 0, input);

                                throw nvae;
                            }
                            switch (alt193) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:92: keyAUTOMATICGen+= keyAUTOMATIC
                                    {
                                    pushFollow(FOLLOW_keyAUTOMATIC_in_model_rules_clause6567);
                                    keyAUTOMATICGen=keyAUTOMATIC();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keyAUTOMATICGen==null) list_keyAUTOMATICGen=new ArrayList();
                                    list_keyAUTOMATICGen.add(keyAUTOMATICGen);


                                    }
                                    break;
                                case 2 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8737:124: keySEQUENTIALGen+= keySEQUENTIAL
                                    {
                                    pushFollow(FOLLOW_keySEQUENTIAL_in_model_rules_clause6573);
                                    keySEQUENTIALGen=keySEQUENTIAL();
                                    _fsp--;
                                    if (failed) return retval;
                                    if (list_keySEQUENTIALGen==null) list_keySEQUENTIALGen=new ArrayList();
                                    list_keySEQUENTIALGen.add(keySEQUENTIALGen);


                                    }
                                    break;

                            }

                            TK_2=(Token)input.LT(1);
                            match(input,141,FOLLOW_141_in_model_rules_clause6579); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8738:3: (keyITERATEGen+= keyITERATE LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )? )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==178) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8738:5: keyITERATEGen+= keyITERATE LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )?
                    {
                    pushFollow(FOLLOW_keyITERATE_in_model_rules_clause6593);
                    keyITERATEGen=keyITERATE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyITERATEGen==null) list_keyITERATEGen=new ArrayList();
                    list_keyITERATEGen.add(keyITERATEGen);

                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause6597); if (failed) return retval;
                    NUMBERGen=(Token)input.LT(1);
                    match(input,NUMBER,FOLLOW_NUMBER_in_model_rules_clause6601); if (failed) return retval;
                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause6605); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8738:82: (keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==219) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8738:84: keyUNTILGen+= keyUNTIL LPARENGen_1= LPAREN sql_conditionGen+= sql_condition RPARENGen_1= RPAREN
                            {
                            pushFollow(FOLLOW_keyUNTIL_in_model_rules_clause6611);
                            keyUNTILGen=keyUNTIL();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyUNTILGen==null) list_keyUNTILGen=new ArrayList();
                            list_keyUNTILGen.add(keyUNTILGen);

                            LPARENGen_1=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause6615); if (failed) return retval;
                            pushFollow(FOLLOW_sql_condition_in_model_rules_clause6619);
                            sql_conditionGen=sql_condition();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                            list_sql_conditionGen.add(sql_conditionGen);

                            RPARENGen_1=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause6623); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            LPARENGen_2=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause6635); if (failed) return retval;
            pushFollow(FOLLOW_model_rules_exprs_in_model_rules_clause6639);
            model_rules_exprsGen=model_rules_exprs();
            _fsp--;
            if (failed) return retval;
            if (list_model_rules_exprsGen==null) list_model_rules_exprsGen=new ArrayList();
            list_model_rules_exprsGen.add(model_rules_exprsGen);

            RPARENGen_2=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause6643); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_rules_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_rules_clauseReturnNode.setKind("model_rules_clause");
              	    // Create a CST Node
              		if(list_keyRULESGen != null) {
              	        for(Iterator it = list_keyRULESGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRULES_return r = (PLSQL3Parser.keyRULES_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRULES");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		model_rules_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyUPSERTGen != null) {
              	        for(Iterator it = list_keyUPSERTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUPSERT_return r = (PLSQL3Parser.keyUPSERT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUPSERT");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		model_rules_clauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyAUTOMATICGen != null) {
              	        for(Iterator it = list_keyAUTOMATICGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyAUTOMATIC_return r = (PLSQL3Parser.keyAUTOMATIC_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyAUTOMATIC");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keySEQUENTIALGen != null) {
              	        for(Iterator it = list_keySEQUENTIALGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySEQUENTIAL_return r = (PLSQL3Parser.keySEQUENTIAL_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySEQUENTIAL");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		model_rules_clauseReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyITERATEGen != null) {
              	        for(Iterator it = list_keyITERATEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyITERATE_return r = (PLSQL3Parser.keyITERATE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyITERATE");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			model_rules_clauseReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			NUMBERGenLeaf.setKind("NUMBER");
              			NUMBERGenLeaf.setValue(NUMBERGen.getText());
              			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
              			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
              			model_rules_clauseReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			model_rules_clauseReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyUNTILGen != null) {
              	        for(Iterator it = list_keyUNTILGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUNTIL_return r = (PLSQL3Parser.keyUNTIL_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUNTIL");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			model_rules_clauseReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			model_rules_clauseReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(LPARENGen_2 != null) {
              			Leaf LPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_2Leaf.setKind("LPAREN");
              			LPARENGen_2Leaf.setValue(LPARENGen_2.getText());
              			LPARENGen_2Leaf.setPos(LPARENGen_2.getCharPositionInLine());
              			LPARENGen_2Leaf.setLine(LPARENGen_2.getLine());
              			model_rules_clauseReturnNode.getChildren().add(LPARENGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_model_rules_exprsGen != null) {
              	        for(Iterator it = list_model_rules_exprsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_rules_exprs_return r = (PLSQL3Parser.model_rules_exprs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_rules_exprs");
              	            	model_rules_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_2 != null) {
              			Leaf RPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_2Leaf.setKind("RPAREN");
              			RPARENGen_2Leaf.setValue(RPARENGen_2.getText());
              			RPARENGen_2Leaf.setPos(RPARENGen_2.getCharPositionInLine());
              			RPARENGen_2Leaf.setLine(RPARENGen_2.getLine());
              			model_rules_clauseReturnNode.getChildren().add(RPARENGen_2Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_rules_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_rules_clause

    public static class model_rules_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_rules_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8919:1: model_rules_expr returns [Node returnNode] : (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? cell_assignmentGen+= cell_assignment (order_by_clauseGen+= order_by_clause )? EQGen= EQ sql_expressionGen+= sql_expression ;
    public final model_rules_expr_return model_rules_expr() throws RecognitionException {
        model_rules_expr_return retval = new model_rules_expr_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token EQGen=null;
        List list_keyUPSERTGen=null;
        List list_cell_assignmentGen=null;
        List list_order_by_clauseGen=null;
        List list_sql_expressionGen=null;
        RuleReturnScope keyUPSERTGen = null;
        RuleReturnScope cell_assignmentGen = null;
        RuleReturnScope order_by_clauseGen = null;
        RuleReturnScope sql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:1: ( (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? cell_assignmentGen+= cell_assignment (order_by_clauseGen+= order_by_clause )? EQGen= EQ sql_expressionGen+= sql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:3: (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )? cell_assignmentGen+= cell_assignment (order_by_clauseGen+= order_by_clause )? EQGen= EQ sql_expressionGen+= sql_expression
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:3: (TK_0= 'UPDATE' | keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )? )?
            int alt199=3;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==135) ) {
                alt199=1;
            }
            else if ( (LA199_0==221) ) {
                alt199=2;
            }
            switch (alt199) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:5: TK_0= 'UPDATE'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,135,FOLLOW_135_in_model_rules_expr6666); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:21: keyUPSERTGen+= keyUPSERT (TK_1= 'ALL' )?
                    {
                    pushFollow(FOLLOW_keyUPSERT_in_model_rules_expr6672);
                    keyUPSERTGen=keyUPSERT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyUPSERTGen==null) list_keyUPSERTGen=new ArrayList();
                    list_keyUPSERTGen.add(keyUPSERTGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:45: (TK_1= 'ALL' )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==67) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:47: TK_1= 'ALL'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,67,FOLLOW_67_in_model_rules_expr6678); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_cell_assignment_in_model_rules_expr6688);
            cell_assignmentGen=cell_assignment();
            _fsp--;
            if (failed) return retval;
            if (list_cell_assignmentGen==null) list_cell_assignmentGen=new ArrayList();
            list_cell_assignmentGen.add(cell_assignmentGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:100: (order_by_clauseGen+= order_by_clause )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==141) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8920:102: order_by_clauseGen+= order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_expr6694);
                    order_by_clauseGen=order_by_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_order_by_clauseGen==null) list_order_by_clauseGen=new ArrayList();
                    list_order_by_clauseGen.add(order_by_clauseGen);


                    }
                    break;

            }

            EQGen=(Token)input.LT(1);
            match(input,EQ,FOLLOW_EQ_in_model_rules_expr6701); if (failed) return retval;
            pushFollow(FOLLOW_sql_expression_in_model_rules_expr6705);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_rules_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_rules_exprReturnNode.setKind("model_rules_expr");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		model_rules_exprReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyUPSERTGen != null) {
              	        for(Iterator it = list_keyUPSERTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUPSERT_return r = (PLSQL3Parser.keyUPSERT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUPSERT");
              	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		model_rules_exprReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_cell_assignmentGen != null) {
              	        for(Iterator it = list_cell_assignmentGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_assignment_return r = (PLSQL3Parser.cell_assignment_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_assignment");
              	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_order_by_clauseGen != null) {
              	        for(Iterator it = list_order_by_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.order_by_clause_return r = (PLSQL3Parser.order_by_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("order_by_clause");
              	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(EQGen != null) {
              			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			EQGenLeaf.setKind("EQ");
              			EQGenLeaf.setValue(EQGen.getText());
              			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
              			EQGenLeaf.setLine(EQGen.getLine());
              			model_rules_exprReturnNode.getChildren().add(EQGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	model_rules_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_rules_exprReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_rules_expr

    public static class model_rules_exprs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start model_rules_exprs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8997:1: model_rules_exprs returns [Node returnNode] : model_rules_exprGen+= model_rules_expr (COMMAGen_List+= COMMA model_rules_exprGen_1+= model_rules_expr )* ;
    public final model_rules_exprs_return model_rules_exprs() throws RecognitionException {
        model_rules_exprs_return retval = new model_rules_exprs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_model_rules_exprGen=null;
        List list_model_rules_exprGen_1=null;
        RuleReturnScope model_rules_exprGen = null;
        RuleReturnScope model_rules_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8998:1: (model_rules_exprGen+= model_rules_expr (COMMAGen_List+= COMMA model_rules_exprGen_1+= model_rules_expr )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8998:3: model_rules_exprGen+= model_rules_expr (COMMAGen_List+= COMMA model_rules_exprGen_1+= model_rules_expr )*
            {
            pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs6726);
            model_rules_exprGen=model_rules_expr();
            _fsp--;
            if (failed) return retval;
            if (list_model_rules_exprGen==null) list_model_rules_exprGen=new ArrayList();
            list_model_rules_exprGen.add(model_rules_exprGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8998:41: (COMMAGen_List+= COMMA model_rules_exprGen_1+= model_rules_expr )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==COMMA) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8998:43: COMMAGen_List+= COMMA model_rules_exprGen_1+= model_rules_expr
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_model_rules_exprs6732); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs6736);
            	    model_rules_exprGen_1=model_rules_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_model_rules_exprGen_1==null) list_model_rules_exprGen_1=new ArrayList();
            	    list_model_rules_exprGen_1.add(model_rules_exprGen_1);


            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node model_rules_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		model_rules_exprsReturnNode.setKind("model_rules_exprs");
              	    // Create a CST Node
              		if(list_model_rules_exprGen != null) {
              	        for(Iterator it = list_model_rules_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_rules_expr_return r = (PLSQL3Parser.model_rules_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_rules_expr");
              	            	model_rules_exprsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			model_rules_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_model_rules_exprGen_1 != null) {		
              	    	PLSQL3Parser.model_rules_expr_return r = (PLSQL3Parser.model_rules_expr_return) list_model_rules_exprGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("model_rules_expr");
              	    		model_rules_exprsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = model_rules_exprsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end model_rules_exprs

    public static class multi_column_for_loop_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start multi_column_for_loop
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9043:1: multi_column_for_loop returns [Node returnNode] : TK_0= 'FOR' LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN TK_1= 'IN' LPARENGen_1= LPAREN (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery ) RPARENGen_1= RPAREN ;
    public final multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        multi_column_for_loop_return retval = new multi_column_for_loop_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_1=null;
        Token LPARENGen_1=null;
        Token RPARENGen_1=null;
        List list_column_specsGen=null;
        List list_bracket_literals_listGen=null;
        List list_subqueryGen=null;
        RuleReturnScope column_specsGen = null;
        RuleReturnScope bracket_literals_listGen = null;
        RuleReturnScope subqueryGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9044:1: (TK_0= 'FOR' LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN TK_1= 'IN' LPARENGen_1= LPAREN (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery ) RPARENGen_1= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9044:3: TK_0= 'FOR' LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN TK_1= 'IN' LPARENGen_1= LPAREN (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery ) RPARENGen_1= RPAREN
            {
            TK_0=(Token)input.LT(1);
            match(input,140,FOLLOW_140_in_multi_column_for_loop6760); if (failed) return retval;
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop6764); if (failed) return retval;
            pushFollow(FOLLOW_column_specs_in_multi_column_for_loop6768);
            column_specsGen=column_specs();
            _fsp--;
            if (failed) return retval;
            if (list_column_specsGen==null) list_column_specsGen=new ArrayList();
            list_column_specsGen.add(column_specsGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop6772); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,51,FOLLOW_51_in_multi_column_for_loop6776); if (failed) return retval;
            LPARENGen_1=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop6780); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9044:107: (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==LPAREN) ) {
                int LA202_1 = input.LA(2);

                if ( (LA202_1==NUMBER||LA202_1==QUOTED_STRING||(LA202_1>=PLUS && LA202_1<=MINUS)) ) {
                    alt202=1;
                }
                else if ( (LA202_1==148) ) {
                    alt202=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9044:107: (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery )", 202, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9044:107: (bracket_literals_listGen+= bracket_literals_list | subqueryGen+= subquery )", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9044:109: bracket_literals_listGen+= bracket_literals_list
                    {
                    pushFollow(FOLLOW_bracket_literals_list_in_multi_column_for_loop6786);
                    bracket_literals_listGen=bracket_literals_list();
                    _fsp--;
                    if (failed) return retval;
                    if (list_bracket_literals_listGen==null) list_bracket_literals_listGen=new ArrayList();
                    list_bracket_literals_listGen.add(bracket_literals_listGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9044:159: subqueryGen+= subquery
                    {
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop6792);
                    subqueryGen=subquery();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
                    list_subqueryGen.add(subqueryGen);


                    }
                    break;

            }

            RPARENGen_1=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop6798); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node multi_column_for_loopReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		multi_column_for_loopReturnNode.setKind("multi_column_for_loop");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		multi_column_for_loopReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			multi_column_for_loopReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_specsGen != null) {
              	        for(Iterator it = list_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_specs");
              	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			multi_column_for_loopReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		multi_column_for_loopReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			multi_column_for_loopReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_bracket_literals_listGen != null) {
              	        for(Iterator it = list_bracket_literals_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.bracket_literals_list_return r = (PLSQL3Parser.bracket_literals_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("bracket_literals_list");
              	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	multi_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			multi_column_for_loopReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = multi_column_for_loopReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end multi_column_for_loop

    public static class nested_condition_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nested_condition
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );
    public final nested_condition_return nested_condition() throws RecognitionException {
        nested_condition_return retval = new nested_condition_return();
        retval.start = input.LT(1);

        List list_condition_orGen=null;
        List list_expr_boolGen=null;
        RuleReturnScope condition_orGen = null;
        RuleReturnScope expr_boolGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9139:1: ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool )
            int alt203=2;
            switch ( input.LA(1) ) {
            case 62:
                {
                int LA203_1 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 1, input);

                    throw nvae;
                }
                }
                break;
            case 64:
            case 65:
            case 66:
            case 168:
            case 202:
            case 218:
                {
                alt203=1;
                }
                break;
            case PLUS:
                {
                int LA203_3 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 3, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA203_4 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA203_5 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 5, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA203_6 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 6, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA203_7 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 7, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA203_8 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 8, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA203_9 = input.LA(2);

                if ( ((((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql ))) ) {
                    alt203=1;
                }
                else if ( (( !isSql && isSql )) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 9, input);

                    throw nvae;
                }
                }
                break;
            case 121:
                {
                int LA203_10 = input.LA(2);

                if ( ((((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql )||((synpred294()&&  isSql )&& isSql ))) ) {
                    alt203=1;
                }
                else if ( (( !isSql && isSql )) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 10, input);

                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA203_11 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 11, input);

                    throw nvae;
                }
                }
                break;
            case 233:
                {
                int LA203_12 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 12, input);

                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA203_13 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 13, input);

                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA203_14 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 14, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA203_15 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 15, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA203_16 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 16, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA203_17 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 17, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                int LA203_18 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 18, input);

                    throw nvae;
                }
                }
                break;
            case 69:
                {
                int LA203_19 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 19, input);

                    throw nvae;
                }
                }
                break;
            case 148:
                {
                int LA203_20 = input.LA(2);

                if ( ((synpred294()&&  isSql )) ) {
                    alt203=1;
                }
                else if ( ( !isSql ) ) {
                    alt203=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 20, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9138:1: nested_condition returns [Node returnNode] : ({...}?condition_orGen+= condition_or | {...}?expr_boolGen+= expr_bool );", 203, 0, input);

                throw nvae;
            }

            switch (alt203) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9139:3: {...}?condition_orGen+= condition_or
                    {
                    if ( !(  isSql ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", "  isSql ");
                    }
                    pushFollow(FOLLOW_condition_or_in_nested_condition6821);
                    condition_orGen=condition_or();
                    _fsp--;
                    if (failed) return retval;
                    if (list_condition_orGen==null) list_condition_orGen=new ArrayList();
                    list_condition_orGen.add(condition_orGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node nested_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		nested_conditionReturnNode.setKind("nested_condition");
                      	    // Create a CST Node
                      		if(list_condition_orGen != null) {
                      	        for(Iterator it = list_condition_orGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.condition_or_return r = (PLSQL3Parser.condition_or_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("condition_or");
                      	            	nested_conditionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = nested_conditionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9157:4: {...}?expr_boolGen+= expr_bool
                    {
                    if ( !( !isSql ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", " !isSql ");
                    }
                    pushFollow(FOLLOW_expr_bool_in_nested_condition6834);
                    expr_boolGen=expr_bool();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expr_boolGen==null) list_expr_boolGen=new ArrayList();
                    list_expr_boolGen.add(expr_boolGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node nested_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		nested_conditionReturnNode.setKind("nested_condition");
                      	    // Create a CST Node
                      		if(list_expr_boolGen != null) {
                      	        for(Iterator it = list_expr_boolGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expr_bool");
                      	            	nested_conditionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = nested_conditionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nested_condition

    public static class nested_table_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nested_table
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9177:1: nested_table returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final nested_table_return nested_table() throws RecognitionException {
        nested_table_return retval = new nested_table_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9178:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9178:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_nested_table6855);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node nested_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nested_tableReturnNode.setKind("nested_table");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	nested_tableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nested_tableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nested_table

    public static class nested_table_column_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nested_table_column_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9198:1: nested_table_column_name returns [Node returnNode] : (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name DOTGen_1= DOT nested_tableGen+= nested_table DOTGen_2= DOT column_nameGen+= column_name ;
    public final nested_table_column_name_return nested_table_column_name() throws RecognitionException {
        nested_table_column_name_return retval = new nested_table_column_name_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token DOTGen_1=null;
        Token DOTGen_2=null;
        List list_schema_nameGen=null;
        List list_table_nameGen=null;
        List list_nested_tableGen=null;
        List list_column_nameGen=null;
        RuleReturnScope schema_nameGen = null;
        RuleReturnScope table_nameGen = null;
        RuleReturnScope nested_tableGen = null;
        RuleReturnScope column_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9199:1: ( (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name DOTGen_1= DOT nested_tableGen+= nested_table DOTGen_2= DOT column_nameGen+= column_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9199:3: (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name DOTGen_1= DOT nested_tableGen+= nested_table DOTGen_2= DOT column_nameGen+= column_name
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9199:3: (schema_nameGen+= schema_name DOTGen= DOT )?
            int alt204=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA204_1 = input.LA(2);

                    if ( (LA204_1==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA204_5 = input.LA(4);

                                if ( (LA204_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA204_6 = input.LA(4);

                                if ( (LA204_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 110:
                                {
                                int LA204_7 = input.LA(4);

                                if ( (LA204_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA204_2 = input.LA(2);

                    if ( (LA204_2==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA204_5 = input.LA(4);

                                if ( (LA204_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA204_6 = input.LA(4);

                                if ( (LA204_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 110:
                                {
                                int LA204_7 = input.LA(4);

                                if ( (LA204_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
                case 110:
                    {
                    int LA204_3 = input.LA(2);

                    if ( (LA204_3==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA204_5 = input.LA(4);

                                if ( (LA204_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA204_6 = input.LA(4);

                                if ( (LA204_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 110:
                                {
                                int LA204_7 = input.LA(4);

                                if ( (LA204_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA204_9 = input.LA(6);

                                            if ( (LA204_9==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA204_10 = input.LA(6);

                                            if ( (LA204_10==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                        case 110:
                                            {
                                            int LA204_11 = input.LA(6);

                                            if ( (LA204_11==DOT) ) {
                                                alt204=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
            }

            switch (alt204) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9199:5: schema_nameGen+= schema_name DOTGen= DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_nested_table_column_name6878);
                    schema_nameGen=schema_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_schema_nameGen==null) list_schema_nameGen=new ArrayList();
                    list_schema_nameGen.add(schema_nameGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6882); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_nested_table_column_name6889);
            table_nameGen=table_name();
            _fsp--;
            if (failed) return retval;
            if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
            list_table_nameGen.add(table_nameGen);

            DOTGen_1=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6893); if (failed) return retval;
            pushFollow(FOLLOW_nested_table_in_nested_table_column_name6897);
            nested_tableGen=nested_table();
            _fsp--;
            if (failed) return retval;
            if (list_nested_tableGen==null) list_nested_tableGen=new ArrayList();
            list_nested_tableGen.add(nested_tableGen);

            DOTGen_2=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_nested_table_column_name6901); if (failed) return retval;
            pushFollow(FOLLOW_column_name_in_nested_table_column_name6905);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node nested_table_column_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nested_table_column_nameReturnNode.setKind("nested_table_column_name");
              	    // Create a CST Node
              		if(list_schema_nameGen != null) {
              	        for(Iterator it = list_schema_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schema_name");
              	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGenLeaf.setKind("DOT");
              			DOTGenLeaf.setValue(DOTGen.getText());
              			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
              			DOTGenLeaf.setLine(DOTGen.getLine());
              			nested_table_column_nameReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_table_nameGen != null) {
              	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_name");
              	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen_1 != null) {
              			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_1Leaf.setKind("DOT");
              			DOTGen_1Leaf.setValue(DOTGen_1.getText());
              			DOTGen_1Leaf.setPos(DOTGen_1.getCharPositionInLine());
              			DOTGen_1Leaf.setLine(DOTGen_1.getLine());
              			nested_table_column_nameReturnNode.getChildren().add(DOTGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_nested_tableGen != null) {
              	        for(Iterator it = list_nested_tableGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_table_return r = (PLSQL3Parser.nested_table_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_table");
              	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen_2 != null) {
              			Leaf DOTGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_2Leaf.setKind("DOT");
              			DOTGen_2Leaf.setValue(DOTGen_2.getText());
              			DOTGen_2Leaf.setPos(DOTGen_2.getCharPositionInLine());
              			DOTGen_2Leaf.setLine(DOTGen_2.getLine());
              			nested_table_column_nameReturnNode.getChildren().add(DOTGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	nested_table_column_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nested_table_column_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nested_table_column_name

    public static class null_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start null_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9276:1: null_statement returns [Node returnNode] : TK_0= 'NULL' ;
    public final null_statement_return null_statement() throws RecognitionException {
        null_statement_return retval = new null_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9277:1: (TK_0= 'NULL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9277:3: TK_0= 'NULL'
            {
            TK_0=(Token)input.LT(1);
            match(input,69,FOLLOW_69_in_null_statement6926); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node null_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		null_statementReturnNode.setKind("null_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		null_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = null_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end null_statement

    public static class numeric_loop_param_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start numeric_loop_param
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9296:1: numeric_loop_param returns [Node returnNode] : index_nameGen+= index_name TK_0= 'IN' (keyREVERSEGen+= keyREVERSE )? integer_exprGen+= integer_expr DOUBLEDOTGen= DOUBLEDOT integer_exprGen_1+= integer_expr ;
    public final numeric_loop_param_return numeric_loop_param() throws RecognitionException {
        numeric_loop_param_return retval = new numeric_loop_param_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token DOUBLEDOTGen=null;
        List list_index_nameGen=null;
        List list_keyREVERSEGen=null;
        List list_integer_exprGen=null;
        List list_integer_exprGen_1=null;
        RuleReturnScope index_nameGen = null;
        RuleReturnScope keyREVERSEGen = null;
        RuleReturnScope integer_exprGen = null;
        RuleReturnScope integer_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9297:1: (index_nameGen+= index_name TK_0= 'IN' (keyREVERSEGen+= keyREVERSE )? integer_exprGen+= integer_expr DOUBLEDOTGen= DOUBLEDOT integer_exprGen_1+= integer_expr )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9297:3: index_nameGen+= index_name TK_0= 'IN' (keyREVERSEGen+= keyREVERSE )? integer_exprGen+= integer_expr DOUBLEDOTGen= DOUBLEDOT integer_exprGen_1+= integer_expr
            {
            pushFollow(FOLLOW_index_name_in_numeric_loop_param6948);
            index_nameGen=index_name();
            _fsp--;
            if (failed) return retval;
            if (list_index_nameGen==null) list_index_nameGen=new ArrayList();
            list_index_nameGen.add(index_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,51,FOLLOW_51_in_numeric_loop_param6952); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9297:39: (keyREVERSEGen+= keyREVERSE )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==255) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9297:41: keyREVERSEGen+= keyREVERSE
                    {
                    pushFollow(FOLLOW_keyREVERSE_in_numeric_loop_param6958);
                    keyREVERSEGen=keyREVERSE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyREVERSEGen==null) list_keyREVERSEGen=new ArrayList();
                    list_keyREVERSEGen.add(keyREVERSEGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param6965);
            integer_exprGen=integer_expr();
            _fsp--;
            if (failed) return retval;
            if (list_integer_exprGen==null) list_integer_exprGen=new ArrayList();
            list_integer_exprGen.add(integer_exprGen);

            DOUBLEDOTGen=(Token)input.LT(1);
            match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_numeric_loop_param6969); if (failed) return retval;
            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param6973);
            integer_exprGen_1=integer_expr();
            _fsp--;
            if (failed) return retval;
            if (list_integer_exprGen_1==null) list_integer_exprGen_1=new ArrayList();
            list_integer_exprGen_1.add(integer_exprGen_1);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node numeric_loop_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		numeric_loop_paramReturnNode.setKind("numeric_loop_param");
              	    // Create a CST Node
              		if(list_index_nameGen != null) {
              	        for(Iterator it = list_index_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.index_name_return r = (PLSQL3Parser.index_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("index_name");
              	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		numeric_loop_paramReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyREVERSEGen != null) {
              	        for(Iterator it = list_keyREVERSEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREVERSE_return r = (PLSQL3Parser.keyREVERSE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREVERSE");
              	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_integer_exprGen != null) {
              	        for(Iterator it = list_integer_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_expr_return r = (PLSQL3Parser.integer_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer_expr");
              	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOUBLEDOTGen != null) {
              			Leaf DOUBLEDOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOUBLEDOTGenLeaf.setKind("DOUBLEDOT");
              			DOUBLEDOTGenLeaf.setValue(DOUBLEDOTGen.getText());
              			DOUBLEDOTGenLeaf.setPos(DOUBLEDOTGen.getCharPositionInLine());
              			DOUBLEDOTGenLeaf.setLine(DOUBLEDOTGen.getLine());
              			numeric_loop_paramReturnNode.getChildren().add(DOUBLEDOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_integer_exprGen_1 != null) {
              	        for(Iterator it = list_integer_exprGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_expr_return r = (PLSQL3Parser.integer_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer_expr");
              	            	numeric_loop_paramReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = numeric_loop_paramReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end numeric_loop_param

    public static class open_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start open_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9365:1: open_statement returns [Node returnNode] : keyOPENGen+= keyOPEN cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? ;
    public final open_statement_return open_statement() throws RecognitionException {
        open_statement_return retval = new open_statement_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyOPENGen=null;
        List list_cursor_nameGen=null;
        List list_plsql_expressionsGen=null;
        RuleReturnScope keyOPENGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope plsql_expressionsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9366:1: (keyOPENGen+= keyOPEN cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9366:3: keyOPENGen+= keyOPEN cursor_nameGen+= cursor_name (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )?
            {
            pushFollow(FOLLOW_keyOPEN_in_open_statement6994);
            keyOPENGen=keyOPEN();
            _fsp--;
            if (failed) return retval;
            if (list_keyOPENGen==null) list_keyOPENGen=new ArrayList();
            list_keyOPENGen.add(keyOPENGen);

            pushFollow(FOLLOW_cursor_name_in_open_statement6998);
            cursor_nameGen=cursor_name();
            _fsp--;
            if (failed) return retval;
            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
            list_cursor_nameGen.add(cursor_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9366:51: (LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==LPAREN) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9366:53: LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_open_statement7004); if (failed) return retval;
                    pushFollow(FOLLOW_plsql_expressions_in_open_statement7008);
                    plsql_expressionsGen=plsql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionsGen==null) list_plsql_expressionsGen=new ArrayList();
                    list_plsql_expressionsGen.add(plsql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_open_statement7012); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node open_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		open_statementReturnNode.setKind("open_statement");
              	    // Create a CST Node
              		if(list_keyOPENGen != null) {
              	        for(Iterator it = list_keyOPENGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyOPEN_return r = (PLSQL3Parser.keyOPEN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyOPEN");
              	            	open_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	open_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			open_statementReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_expressionsGen != null) {
              	        for(Iterator it = list_plsql_expressionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expressions");
              	            	open_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			open_statementReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = open_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end open_statement

    public static class order_by_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start order_by_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9424:1: order_by_clause returns [Node returnNode] : TK_0= 'ORDER' (keySIBLINGSGen+= keySIBLINGS )? TK_1= 'BY' order_by_exprsGen+= order_by_exprs ;
    public final order_by_clause_return order_by_clause() throws RecognitionException {
        order_by_clause_return retval = new order_by_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_keySIBLINGSGen=null;
        List list_order_by_exprsGen=null;
        RuleReturnScope keySIBLINGSGen = null;
        RuleReturnScope order_by_exprsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9425:1: (TK_0= 'ORDER' (keySIBLINGSGen+= keySIBLINGS )? TK_1= 'BY' order_by_exprsGen+= order_by_exprs )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9425:3: TK_0= 'ORDER' (keySIBLINGSGen+= keySIBLINGS )? TK_1= 'BY' order_by_exprsGen+= order_by_exprs
            {
            TK_0=(Token)input.LT(1);
            match(input,141,FOLLOW_141_in_order_by_clause7036); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9425:16: (keySIBLINGSGen+= keySIBLINGS )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==211) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9425:18: keySIBLINGSGen+= keySIBLINGS
                    {
                    pushFollow(FOLLOW_keySIBLINGS_in_order_by_clause7042);
                    keySIBLINGSGen=keySIBLINGS();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keySIBLINGSGen==null) list_keySIBLINGSGen=new ArrayList();
                    list_keySIBLINGSGen.add(keySIBLINGSGen);


                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,125,FOLLOW_125_in_order_by_clause7049); if (failed) return retval;
            pushFollow(FOLLOW_order_by_exprs_in_order_by_clause7053);
            order_by_exprsGen=order_by_exprs();
            _fsp--;
            if (failed) return retval;
            if (list_order_by_exprsGen==null) list_order_by_exprsGen=new ArrayList();
            list_order_by_exprsGen.add(order_by_exprsGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node order_by_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		order_by_clauseReturnNode.setKind("order_by_clause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		order_by_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keySIBLINGSGen != null) {
              	        for(Iterator it = list_keySIBLINGSGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySIBLINGS_return r = (PLSQL3Parser.keySIBLINGS_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySIBLINGS");
              	            	order_by_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		order_by_clauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_order_by_exprsGen != null) {
              	        for(Iterator it = list_order_by_exprsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.order_by_exprs_return r = (PLSQL3Parser.order_by_exprs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("order_by_exprs");
              	            	order_by_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = order_by_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end order_by_clause

    public static class order_by_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start order_by_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9473:1: order_by_expr returns [Node returnNode] : (sql_expressionGen+= sql_expression ) (TK_0= 'ASC' | TK_1= 'DESC' )? (keyNULLSGen+= keyNULLS keyFIRSTGen+= keyFIRST | keyNULLSGen_1+= keyNULLS keyLASTGen+= keyLAST )? ;
    public final order_by_expr_return order_by_expr() throws RecognitionException {
        order_by_expr_return retval = new order_by_expr_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_sql_expressionGen=null;
        List list_keyNULLSGen=null;
        List list_keyFIRSTGen=null;
        List list_keyNULLSGen_1=null;
        List list_keyLASTGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope keyNULLSGen = null;
        RuleReturnScope keyFIRSTGen = null;
        RuleReturnScope keyNULLSGen_1 = null;
        RuleReturnScope keyLASTGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9474:1: ( (sql_expressionGen+= sql_expression ) (TK_0= 'ASC' | TK_1= 'DESC' )? (keyNULLSGen+= keyNULLS keyFIRSTGen+= keyFIRST | keyNULLSGen_1+= keyNULLS keyLASTGen+= keyLAST )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9474:3: (sql_expressionGen+= sql_expression ) (TK_0= 'ASC' | TK_1= 'DESC' )? (keyNULLSGen+= keyNULLS keyFIRSTGen+= keyFIRST | keyNULLSGen_1+= keyNULLS keyLASTGen+= keyLAST )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9474:3: (sql_expressionGen+= sql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9474:5: sql_expressionGen+= sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_order_by_expr7076);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:3: (TK_0= 'ASC' | TK_1= 'DESC' )?
            int alt208=3;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==142) ) {
                int LA208_1 = input.LA(2);

                if ( (synpred299()) ) {
                    alt208=1;
                }
            }
            else if ( (LA208_0==143) ) {
                int LA208_2 = input.LA(2);

                if ( (synpred300()) ) {
                    alt208=2;
                }
            }
            switch (alt208) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:5: TK_0= 'ASC'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,142,FOLLOW_142_in_order_by_expr7090); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:18: TK_1= 'DESC'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,143,FOLLOW_143_in_order_by_expr7096); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:33: (keyNULLSGen+= keyNULLS keyFIRSTGen+= keyFIRST | keyNULLSGen_1+= keyNULLS keyLASTGen+= keyLAST )?
            int alt209=3;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==195) ) {
                int LA209_1 = input.LA(2);

                if ( (synpred301()) ) {
                    alt209=1;
                }
                else if ( (synpred302()) ) {
                    alt209=2;
                }
            }
            switch (alt209) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:35: keyNULLSGen+= keyNULLS keyFIRSTGen+= keyFIRST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr7105);
                    keyNULLSGen=keyNULLS();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNULLSGen==null) list_keyNULLSGen=new ArrayList();
                    list_keyNULLSGen.add(keyNULLSGen);

                    pushFollow(FOLLOW_keyFIRST_in_order_by_expr7109);
                    keyFIRSTGen=keyFIRST();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyFIRSTGen==null) list_keyFIRSTGen=new ArrayList();
                    list_keyFIRSTGen.add(keyFIRSTGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:81: keyNULLSGen_1+= keyNULLS keyLASTGen+= keyLAST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr7115);
                    keyNULLSGen_1=keyNULLS();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNULLSGen_1==null) list_keyNULLSGen_1=new ArrayList();
                    list_keyNULLSGen_1.add(keyNULLSGen_1);

                    pushFollow(FOLLOW_keyLAST_in_order_by_expr7119);
                    keyLASTGen=keyLAST();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyLASTGen==null) list_keyLASTGen=new ArrayList();
                    list_keyLASTGen.add(keyLASTGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node order_by_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		order_by_exprReturnNode.setKind("order_by_expr");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		order_by_exprReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		order_by_exprReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyNULLSGen != null) {
              	        for(Iterator it = list_keyNULLSGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNULLS_return r = (PLSQL3Parser.keyNULLS_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNULLS");
              	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyFIRSTGen != null) {
              	        for(Iterator it = list_keyFIRSTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyFIRST_return r = (PLSQL3Parser.keyFIRST_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyFIRST");
              	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyNULLSGen_1 != null) {
              	        for(Iterator it = list_keyNULLSGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNULLS_return r = (PLSQL3Parser.keyNULLS_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNULLS");
              	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyLASTGen != null) {
              	        for(Iterator it = list_keyLASTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLAST_return r = (PLSQL3Parser.keyLAST_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLAST");
              	            	order_by_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = order_by_exprReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end order_by_expr

    public static class order_by_exprs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start order_by_exprs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9556:1: order_by_exprs returns [Node returnNode] : order_by_exprGen+= order_by_expr (COMMAGen_List+= COMMA order_by_exprGen_1+= order_by_expr )* ;
    public final order_by_exprs_return order_by_exprs() throws RecognitionException {
        order_by_exprs_return retval = new order_by_exprs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_order_by_exprGen=null;
        List list_order_by_exprGen_1=null;
        RuleReturnScope order_by_exprGen = null;
        RuleReturnScope order_by_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:1: (order_by_exprGen+= order_by_expr (COMMAGen_List+= COMMA order_by_exprGen_1+= order_by_expr )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:3: order_by_exprGen+= order_by_expr (COMMAGen_List+= COMMA order_by_exprGen_1+= order_by_expr )*
            {
            pushFollow(FOLLOW_order_by_expr_in_order_by_exprs7143);
            order_by_exprGen=order_by_expr();
            _fsp--;
            if (failed) return retval;
            if (list_order_by_exprGen==null) list_order_by_exprGen=new ArrayList();
            list_order_by_exprGen.add(order_by_exprGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:35: (COMMAGen_List+= COMMA order_by_exprGen_1+= order_by_expr )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==COMMA) ) {
                    int LA210_2 = input.LA(2);

                    if ( (synpred303()) ) {
                        alt210=1;
                    }


                }


                switch (alt210) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:37: COMMAGen_List+= COMMA order_by_exprGen_1+= order_by_expr
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_order_by_exprs7149); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_order_by_expr_in_order_by_exprs7153);
            	    order_by_exprGen_1=order_by_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_order_by_exprGen_1==null) list_order_by_exprGen_1=new ArrayList();
            	    list_order_by_exprGen_1.add(order_by_exprGen_1);


            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node order_by_exprsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		order_by_exprsReturnNode.setKind("order_by_exprs");
              	    // Create a CST Node
              		if(list_order_by_exprGen != null) {
              	        for(Iterator it = list_order_by_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.order_by_expr_return r = (PLSQL3Parser.order_by_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("order_by_expr");
              	            	order_by_exprsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			order_by_exprsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_order_by_exprGen_1 != null) {		
              	    	PLSQL3Parser.order_by_expr_return r = (PLSQL3Parser.order_by_expr_return) list_order_by_exprGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("order_by_expr");
              	    		order_by_exprsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = order_by_exprsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end order_by_exprs

    public static class outer_join_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start outer_join_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9602:1: outer_join_clause returns [Node returnNode] : (query_partition_clauseGen+= query_partition_clause )? (outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN | keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN ) table_nameGen+= table_name (query_partition_clauseGen_1+= query_partition_clause )? (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )? ;
    public final outer_join_clause_return outer_join_clause() throws RecognitionException {
        outer_join_clause_return retval = new outer_join_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_query_partition_clauseGen=null;
        List list_outer_join_typeGen=null;
        List list_keyJOINGen=null;
        List list_keyNATURALGen=null;
        List list_outer_join_typeGen_1=null;
        List list_keyJOINGen_1=null;
        List list_table_nameGen=null;
        List list_query_partition_clauseGen_1=null;
        List list_sql_conditionGen=null;
        List list_keyUSINGGen=null;
        List list_column_specsGen=null;
        RuleReturnScope query_partition_clauseGen = null;
        RuleReturnScope outer_join_typeGen = null;
        RuleReturnScope keyJOINGen = null;
        RuleReturnScope keyNATURALGen = null;
        RuleReturnScope outer_join_typeGen_1 = null;
        RuleReturnScope keyJOINGen_1 = null;
        RuleReturnScope table_nameGen = null;
        RuleReturnScope query_partition_clauseGen_1 = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope keyUSINGGen = null;
        RuleReturnScope column_specsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9603:1: ( (query_partition_clauseGen+= query_partition_clause )? (outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN | keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN ) table_nameGen+= table_name (query_partition_clauseGen_1+= query_partition_clause )? (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9603:3: (query_partition_clauseGen+= query_partition_clause )? (outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN | keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN ) table_nameGen+= table_name (query_partition_clauseGen_1+= query_partition_clause )? (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9603:3: (query_partition_clauseGen+= query_partition_clause )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==198) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9603:5: query_partition_clauseGen+= query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7179);
                    query_partition_clauseGen=query_partition_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_query_partition_clauseGen==null) list_query_partition_clauseGen=new ArrayList();
                    list_query_partition_clauseGen.add(query_partition_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9604:3: (outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN | keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==171||LA213_0==182||LA213_0==203) ) {
                alt213=1;
            }
            else if ( (LA213_0==78) ) {
                alt213=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9604:3: (outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN | keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN )", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9604:5: outer_join_typeGen+= outer_join_type keyJOINGen+= keyJOIN
                    {
                    pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7190);
                    outer_join_typeGen=outer_join_type();
                    _fsp--;
                    if (failed) return retval;
                    if (list_outer_join_typeGen==null) list_outer_join_typeGen=new ArrayList();
                    list_outer_join_typeGen.add(outer_join_typeGen);

                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7194);
                    keyJOINGen=keyJOIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyJOINGen==null) list_keyJOINGen=new ArrayList();
                    list_keyJOINGen.add(keyJOINGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9605:5: keyNATURALGen+= keyNATURAL (outer_join_typeGen_1+= outer_join_type )? keyJOINGen_1+= keyJOIN
                    {
                    pushFollow(FOLLOW_keyNATURAL_in_outer_join_clause7202);
                    keyNATURALGen=keyNATURAL();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNATURALGen==null) list_keyNATURALGen=new ArrayList();
                    list_keyNATURALGen.add(keyNATURALGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9605:31: (outer_join_typeGen_1+= outer_join_type )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==171||LA212_0==182||LA212_0==203) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9605:33: outer_join_typeGen_1+= outer_join_type
                            {
                            pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7208);
                            outer_join_typeGen_1=outer_join_type();
                            _fsp--;
                            if (failed) return retval;
                            if (list_outer_join_typeGen_1==null) list_outer_join_typeGen_1=new ArrayList();
                            list_outer_join_typeGen_1.add(outer_join_typeGen_1);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7215);
                    keyJOINGen_1=keyJOIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyJOINGen_1==null) list_keyJOINGen_1=new ArrayList();
                    list_keyJOINGen_1.add(keyJOINGen_1);


                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_outer_join_clause7225);
            table_nameGen=table_name();
            _fsp--;
            if (failed) return retval;
            if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
            list_table_nameGen.add(table_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9607:29: (query_partition_clauseGen_1+= query_partition_clause )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==198) ) {
                int LA214_1 = input.LA(2);

                if ( (synpred307()) ) {
                    alt214=1;
                }
            }
            switch (alt214) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9607:31: query_partition_clauseGen_1+= query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7231);
                    query_partition_clauseGen_1=query_partition_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_query_partition_clauseGen_1==null) list_query_partition_clauseGen_1=new ArrayList();
                    list_query_partition_clauseGen_1.add(query_partition_clauseGen_1);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:3: (TK_0= 'ON' sql_conditionGen+= sql_condition | keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN )?
            int alt215=3;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==128) ) {
                int LA215_1 = input.LA(2);

                if ( (synpred308()) ) {
                    alt215=1;
                }
            }
            else if ( (LA215_0==261) ) {
                int LA215_2 = input.LA(2);

                if ( (synpred309()) ) {
                    alt215=2;
                }
            }
            switch (alt215) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:5: TK_0= 'ON' sql_conditionGen+= sql_condition
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,128,FOLLOW_128_in_outer_join_clause7242); if (failed) return retval;
                    pushFollow(FOLLOW_sql_condition_in_outer_join_clause7246);
                    sql_conditionGen=sql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                    list_sql_conditionGen.add(sql_conditionGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:49: keyUSINGGen+= keyUSING LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN
                    {
                    pushFollow(FOLLOW_keyUSING_in_outer_join_clause7252);
                    keyUSINGGen=keyUSING();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyUSINGGen==null) list_keyUSINGGen=new ArrayList();
                    list_keyUSINGGen.add(keyUSINGGen);

                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_clause7256); if (failed) return retval;
                    pushFollow(FOLLOW_column_specs_in_outer_join_clause7260);
                    column_specsGen=column_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specsGen==null) list_column_specsGen=new ArrayList();
                    list_column_specsGen.add(column_specsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_clause7264); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node outer_join_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		outer_join_clauseReturnNode.setKind("outer_join_clause");
              	    // Create a CST Node
              		if(list_query_partition_clauseGen != null) {
              	        for(Iterator it = list_query_partition_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("query_partition_clause");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_outer_join_typeGen != null) {
              	        for(Iterator it = list_outer_join_typeGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.outer_join_type_return r = (PLSQL3Parser.outer_join_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("outer_join_type");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyJOINGen != null) {
              	        for(Iterator it = list_keyJOINGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyJOIN");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyNATURALGen != null) {
              	        for(Iterator it = list_keyNATURALGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNATURAL_return r = (PLSQL3Parser.keyNATURAL_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNATURAL");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_outer_join_typeGen_1 != null) {
              	        for(Iterator it = list_outer_join_typeGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.outer_join_type_return r = (PLSQL3Parser.outer_join_type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("outer_join_type");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyJOINGen_1 != null) {
              	        for(Iterator it = list_keyJOINGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyJOIN_return r = (PLSQL3Parser.keyJOIN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyJOIN");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_table_nameGen != null) {
              	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_name");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_query_partition_clauseGen_1 != null) {
              	        for(Iterator it = list_query_partition_clauseGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.query_partition_clause_return r = (PLSQL3Parser.query_partition_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("query_partition_clause");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		outer_join_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyUSINGGen != null) {
              	        for(Iterator it = list_keyUSINGGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUSING_return r = (PLSQL3Parser.keyUSING_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUSING");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			outer_join_clauseReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_specsGen != null) {
              	        for(Iterator it = list_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_specs");
              	            	outer_join_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			outer_join_clauseReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = outer_join_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end outer_join_clause

    public static class outer_join_sign_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start outer_join_sign
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9755:1: outer_join_sign returns [Node returnNode] : LPARENGen= LPAREN PLUSGen= PLUS RPARENGen= RPAREN ;
    public final outer_join_sign_return outer_join_sign() throws RecognitionException {
        outer_join_sign_return retval = new outer_join_sign_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token PLUSGen=null;
        Token RPARENGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9756:1: (LPARENGen= LPAREN PLUSGen= PLUS RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9756:3: LPARENGen= LPAREN PLUSGen= PLUS RPARENGen= RPAREN
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_sign7288); if (failed) return retval;
            PLUSGen=(Token)input.LT(1);
            match(input,PLUS,FOLLOW_PLUS_in_outer_join_sign7292); if (failed) return retval;
            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_sign7296); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node outer_join_signReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		outer_join_signReturnNode.setKind("outer_join_sign");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			outer_join_signReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PLUSGen != null) {
              			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			PLUSGenLeaf.setKind("PLUS");
              			PLUSGenLeaf.setValue(PLUSGen.getText());
              			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
              			PLUSGenLeaf.setLine(PLUSGen.getLine());
              			outer_join_signReturnNode.getChildren().add(PLUSGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			outer_join_signReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = outer_join_signReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end outer_join_sign

    public static class outer_join_type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start outer_join_type
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9793:1: outer_join_type returns [Node returnNode] : (keyFULLGen+= keyFULL | keyLEFTGen+= keyLEFT | keyRIGHTGen+= keyRIGHT ) (keyOUTERGen+= keyOUTER )? ;
    public final outer_join_type_return outer_join_type() throws RecognitionException {
        outer_join_type_return retval = new outer_join_type_return();
        retval.start = input.LT(1);

        List list_keyFULLGen=null;
        List list_keyLEFTGen=null;
        List list_keyRIGHTGen=null;
        List list_keyOUTERGen=null;
        RuleReturnScope keyFULLGen = null;
        RuleReturnScope keyLEFTGen = null;
        RuleReturnScope keyRIGHTGen = null;
        RuleReturnScope keyOUTERGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:1: ( (keyFULLGen+= keyFULL | keyLEFTGen+= keyLEFT | keyRIGHTGen+= keyRIGHT ) (keyOUTERGen+= keyOUTER )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:3: (keyFULLGen+= keyFULL | keyLEFTGen+= keyLEFT | keyRIGHTGen+= keyRIGHT ) (keyOUTERGen+= keyOUTER )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:3: (keyFULLGen+= keyFULL | keyLEFTGen+= keyLEFT | keyRIGHTGen+= keyRIGHT )
            int alt216=3;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt216=1;
                }
                break;
            case 182:
                {
                alt216=2;
                }
                break;
            case 203:
                {
                alt216=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9794:3: (keyFULLGen+= keyFULL | keyLEFTGen+= keyLEFT | keyRIGHTGen+= keyRIGHT )", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:5: keyFULLGen+= keyFULL
                    {
                    pushFollow(FOLLOW_keyFULL_in_outer_join_type7319);
                    keyFULLGen=keyFULL();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyFULLGen==null) list_keyFULLGen=new ArrayList();
                    list_keyFULLGen.add(keyFULLGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:27: keyLEFTGen+= keyLEFT
                    {
                    pushFollow(FOLLOW_keyLEFT_in_outer_join_type7325);
                    keyLEFTGen=keyLEFT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyLEFTGen==null) list_keyLEFTGen=new ArrayList();
                    list_keyLEFTGen.add(keyLEFTGen);


                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:49: keyRIGHTGen+= keyRIGHT
                    {
                    pushFollow(FOLLOW_keyRIGHT_in_outer_join_type7331);
                    keyRIGHTGen=keyRIGHT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRIGHTGen==null) list_keyRIGHTGen=new ArrayList();
                    list_keyRIGHTGen.add(keyRIGHTGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:73: (keyOUTERGen+= keyOUTER )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==197) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9794:75: keyOUTERGen+= keyOUTER
                    {
                    pushFollow(FOLLOW_keyOUTER_in_outer_join_type7339);
                    keyOUTERGen=keyOUTER();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyOUTERGen==null) list_keyOUTERGen=new ArrayList();
                    list_keyOUTERGen.add(keyOUTERGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node outer_join_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		outer_join_typeReturnNode.setKind("outer_join_type");
              	    // Create a CST Node
              		if(list_keyFULLGen != null) {
              	        for(Iterator it = list_keyFULLGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyFULL_return r = (PLSQL3Parser.keyFULL_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyFULL");
              	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyLEFTGen != null) {
              	        for(Iterator it = list_keyLEFTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyLEFT_return r = (PLSQL3Parser.keyLEFT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyLEFT");
              	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyRIGHTGen != null) {
              	        for(Iterator it = list_keyRIGHTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRIGHT_return r = (PLSQL3Parser.keyRIGHT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRIGHT");
              	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyOUTERGen != null) {
              	        for(Iterator it = list_keyOUTERGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyOUTER_return r = (PLSQL3Parser.keyOUTER_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyOUTER");
              	            	outer_join_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = outer_join_typeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end outer_join_type

    public static class package_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start package_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9844:1: package_spec returns [Node returnNode] : keyPACKAGEGen+= keyPACKAGE package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_specGen+= package_obj_spec )* TK_2= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI ;
    public final package_spec_return package_spec() throws RecognitionException {
        package_spec_return retval = new package_spec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token SEMIGen=null;
        List list_keyPACKAGEGen=null;
        List list_package_nameGen=null;
        List list_package_obj_specGen=null;
        List list_package_nameGen_1=null;
        RuleReturnScope keyPACKAGEGen = null;
        RuleReturnScope package_nameGen = null;
        RuleReturnScope package_obj_specGen = null;
        RuleReturnScope package_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9845:1: (keyPACKAGEGen+= keyPACKAGE package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_specGen+= package_obj_spec )* TK_2= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9845:3: keyPACKAGEGen+= keyPACKAGE package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_specGen+= package_obj_spec )* TK_2= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyPACKAGE_in_package_spec7364);
            keyPACKAGEGen=keyPACKAGE();
            _fsp--;
            if (failed) return retval;
            if (list_keyPACKAGEGen==null) list_keyPACKAGEGen=new ArrayList();
            list_keyPACKAGEGen.add(keyPACKAGEGen);

            pushFollow(FOLLOW_package_name_in_package_spec7368);
            package_nameGen=package_name();
            _fsp--;
            if (failed) return retval;
            if (list_package_nameGen==null) list_package_nameGen=new ArrayList();
            list_package_nameGen.add(package_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9845:59: (TK_0= 'IS' | TK_1= 'AS' )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==68) ) {
                alt218=1;
            }
            else if ( (LA218_0==50) ) {
                alt218=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9845:59: (TK_0= 'IS' | TK_1= 'AS' )", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9845:61: TK_0= 'IS'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_package_spec7374); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9845:73: TK_1= 'AS'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_package_spec7380); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9846:3: (package_obj_specGen+= package_obj_spec )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( ((LA219_0>=ID && LA219_0<=DOUBLEQUOTED_STRING)||LA219_0==120||LA219_0==144||LA219_0==233||LA219_0==245||LA219_0==258||LA219_0==260) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9846:5: package_obj_specGen+= package_obj_spec
            	    {
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec7391);
            	    package_obj_specGen=package_obj_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_package_obj_specGen==null) list_package_obj_specGen=new ArrayList();
            	    list_package_obj_specGen.add(package_obj_specGen);


            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);

            TK_2=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_package_spec7400); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9847:14: (package_nameGen_1+= package_name )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( ((LA220_0>=ID && LA220_0<=DOUBLEQUOTED_STRING)||LA220_0==110) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9847:15: package_nameGen_1+= package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_spec7405);
                    package_nameGen_1=package_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_package_nameGen_1==null) list_package_nameGen_1=new ArrayList();
                    list_package_nameGen_1.add(package_nameGen_1);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_package_spec7411); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node package_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		package_specReturnNode.setKind("package_spec");
              	    // Create a CST Node
              		if(list_keyPACKAGEGen != null) {
              	        for(Iterator it = list_keyPACKAGEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyPACKAGE_return r = (PLSQL3Parser.keyPACKAGE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyPACKAGE");
              	            	package_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_package_nameGen != null) {
              	        for(Iterator it = list_package_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_name");
              	            	package_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		package_specReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		package_specReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_package_obj_specGen != null) {
              	        for(Iterator it = list_package_obj_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_obj_spec_return r = (PLSQL3Parser.package_obj_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_obj_spec");
              	            	package_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		package_specReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_package_nameGen_1 != null) {
              	        for(Iterator it = list_package_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_name");
              	            	package_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			package_specReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = package_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end package_spec

    public static class package_body_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start package_body
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9933:1: package_body returns [Node returnNode] : keyPACKAGEGen+= keyPACKAGE (keyBODYGen+= keyBODY ) package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_bodyGen+= package_obj_body )* (TK_2= 'BEGIN' seq_of_statementsGen+= seq_of_statements )? TK_3= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI ;
    public final package_body_return package_body() throws RecognitionException {
        package_body_return retval = new package_body_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token SEMIGen=null;
        List list_keyPACKAGEGen=null;
        List list_keyBODYGen=null;
        List list_package_nameGen=null;
        List list_package_obj_bodyGen=null;
        List list_seq_of_statementsGen=null;
        List list_package_nameGen_1=null;
        RuleReturnScope keyPACKAGEGen = null;
        RuleReturnScope keyBODYGen = null;
        RuleReturnScope package_nameGen = null;
        RuleReturnScope package_obj_bodyGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope package_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:1: (keyPACKAGEGen+= keyPACKAGE (keyBODYGen+= keyBODY ) package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_bodyGen+= package_obj_body )* (TK_2= 'BEGIN' seq_of_statementsGen+= seq_of_statements )? TK_3= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:3: keyPACKAGEGen+= keyPACKAGE (keyBODYGen+= keyBODY ) package_nameGen+= package_name (TK_0= 'IS' | TK_1= 'AS' ) (package_obj_bodyGen+= package_obj_body )* (TK_2= 'BEGIN' seq_of_statementsGen+= seq_of_statements )? TK_3= 'END' (package_nameGen_1+= package_name )? SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyPACKAGE_in_package_body7433);
            keyPACKAGEGen=keyPACKAGE();
            _fsp--;
            if (failed) return retval;
            if (list_keyPACKAGEGen==null) list_keyPACKAGEGen=new ArrayList();
            list_keyPACKAGEGen.add(keyPACKAGEGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:29: (keyBODYGen+= keyBODY )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:31: keyBODYGen+= keyBODY
            {
            pushFollow(FOLLOW_keyBODY_in_package_body7439);
            keyBODYGen=keyBODY();
            _fsp--;
            if (failed) return retval;
            if (list_keyBODYGen==null) list_keyBODYGen=new ArrayList();
            list_keyBODYGen.add(keyBODYGen);


            }

            pushFollow(FOLLOW_package_name_in_package_body7445);
            package_nameGen=package_name();
            _fsp--;
            if (failed) return retval;
            if (list_package_nameGen==null) list_package_nameGen=new ArrayList();
            list_package_nameGen.add(package_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:83: (TK_0= 'IS' | TK_1= 'AS' )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==68) ) {
                alt221=1;
            }
            else if ( (LA221_0==50) ) {
                alt221=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("9934:83: (TK_0= 'IS' | TK_1= 'AS' )", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:85: TK_0= 'IS'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_package_body7451); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9934:97: TK_1= 'AS'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_package_body7457); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9935:3: (package_obj_bodyGen+= package_obj_body )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( ((LA222_0>=ID && LA222_0<=DOUBLEQUOTED_STRING)||LA222_0==74||LA222_0==120||LA222_0==144||LA222_0==233||LA222_0==245||LA222_0==258||LA222_0==260) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9935:5: package_obj_bodyGen+= package_obj_body
            	    {
            	    pushFollow(FOLLOW_package_obj_body_in_package_body7467);
            	    package_obj_bodyGen=package_obj_body();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_package_obj_bodyGen==null) list_package_obj_bodyGen=new ArrayList();
            	    list_package_obj_bodyGen.add(package_obj_bodyGen);


            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9936:3: (TK_2= 'BEGIN' seq_of_statementsGen+= seq_of_statements )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==53) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9936:5: TK_2= 'BEGIN' seq_of_statementsGen+= seq_of_statements
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_package_body7478); if (failed) return retval;
                    pushFollow(FOLLOW_seq_of_statements_in_package_body7482);
                    seq_of_statementsGen=seq_of_statements();
                    _fsp--;
                    if (failed) return retval;
                    if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
                    list_seq_of_statementsGen.add(seq_of_statementsGen);


                    }
                    break;

            }

            TK_3=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_package_body7493); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9937:14: (package_nameGen_1+= package_name )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( ((LA224_0>=ID && LA224_0<=DOUBLEQUOTED_STRING)||LA224_0==110) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9937:16: package_nameGen_1+= package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_body7499);
                    package_nameGen_1=package_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_package_nameGen_1==null) list_package_nameGen_1=new ArrayList();
                    list_package_nameGen_1.add(package_nameGen_1);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_package_body7506); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node package_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		package_bodyReturnNode.setKind("package_body");
              	    // Create a CST Node
              		if(list_keyPACKAGEGen != null) {
              	        for(Iterator it = list_keyPACKAGEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyPACKAGE_return r = (PLSQL3Parser.keyPACKAGE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyPACKAGE");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyBODYGen != null) {
              	        for(Iterator it = list_keyBODYGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyBODY_return r = (PLSQL3Parser.keyBODY_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyBODY");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_package_nameGen != null) {
              	        for(Iterator it = list_package_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_name");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		package_bodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		package_bodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_package_obj_bodyGen != null) {
              	        for(Iterator it = list_package_obj_bodyGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_obj_body_return r = (PLSQL3Parser.package_obj_body_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_obj_body");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		package_bodyReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		package_bodyReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_package_nameGen_1 != null) {
              	        for(Iterator it = list_package_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.package_name_return r = (PLSQL3Parser.package_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("package_name");
              	            	package_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			package_bodyReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = package_bodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end package_body

    public static class package_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start package_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10052:1: package_name returns [Node returnNode] : (schema_nameGen+= schema_name DOTGen= DOT )? identifierGen+= identifier ;
    public final package_name_return package_name() throws RecognitionException {
        package_name_return retval = new package_name_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        List list_schema_nameGen=null;
        List list_identifierGen=null;
        RuleReturnScope schema_nameGen = null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10053:1: ( (schema_nameGen+= schema_name DOTGen= DOT )? identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10053:3: (schema_nameGen+= schema_name DOTGen= DOT )? identifierGen+= identifier
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10053:3: (schema_nameGen+= schema_name DOTGen= DOT )?
            int alt225=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA225_1 = input.LA(2);

                    if ( (LA225_1==DOT) ) {
                        alt225=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA225_2 = input.LA(2);

                    if ( (LA225_2==DOT) ) {
                        alt225=1;
                    }
                    }
                    break;
                case 110:
                    {
                    alt225=1;
                    }
                    break;
            }

            switch (alt225) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10053:5: schema_nameGen+= schema_name DOTGen= DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_package_name7529);
                    schema_nameGen=schema_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_schema_nameGen==null) list_schema_nameGen=new ArrayList();
                    list_schema_nameGen.add(schema_nameGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_package_name7533); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_package_name7540);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node package_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		package_nameReturnNode.setKind("package_name");
              	    // Create a CST Node
              		if(list_schema_nameGen != null) {
              	        for(Iterator it = list_schema_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schema_name");
              	            	package_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGenLeaf.setKind("DOT");
              			DOTGenLeaf.setValue(DOTGen.getText());
              			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
              			DOTGenLeaf.setLine(DOTGen.getLine());
              			package_nameReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	package_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = package_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end package_name

    public static class package_obj_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start package_obj_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10092:1: package_obj_spec returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | cursor_declarationGen+= cursor_declaration | cursor_specGen+= cursor_spec | procedure_specGen+= procedure_spec | function_specGen+= function_spec | exception_declarationGen+= exception_declaration | pragma_declarationGen+= pragma_declaration );
    public final package_obj_spec_return package_obj_spec() throws RecognitionException {
        package_obj_spec_return retval = new package_obj_spec_return();
        retval.start = input.LT(1);

        List list_variable_declarationGen=null;
        List list_subtype_declarationGen=null;
        List list_record_declarationGen=null;
        List list_plsql_table_declarationGen=null;
        List list_varray_declarationGen=null;
        List list_cursor_declarationGen=null;
        List list_cursor_specGen=null;
        List list_procedure_specGen=null;
        List list_function_specGen=null;
        List list_exception_declarationGen=null;
        List list_pragma_declarationGen=null;
        RuleReturnScope variable_declarationGen = null;
        RuleReturnScope subtype_declarationGen = null;
        RuleReturnScope record_declarationGen = null;
        RuleReturnScope plsql_table_declarationGen = null;
        RuleReturnScope varray_declarationGen = null;
        RuleReturnScope cursor_declarationGen = null;
        RuleReturnScope cursor_specGen = null;
        RuleReturnScope procedure_specGen = null;
        RuleReturnScope function_specGen = null;
        RuleReturnScope exception_declarationGen = null;
        RuleReturnScope pragma_declarationGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10093:1: (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | cursor_declarationGen+= cursor_declaration | cursor_specGen+= cursor_spec | procedure_specGen+= procedure_spec | function_specGen+= function_spec | exception_declarationGen+= exception_declaration | pragma_declarationGen+= pragma_declaration )
            int alt226=11;
            alt226 = dfa226.predict(input);
            switch (alt226) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10093:3: variable_declarationGen+= variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec7562);
                    variable_declarationGen=variable_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variable_declarationGen==null) list_variable_declarationGen=new ArrayList();
                    list_variable_declarationGen.add(variable_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_variable_declarationGen != null) {
                      	        for(Iterator it = list_variable_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variable_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10111:4: subtype_declarationGen+= subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec7574);
                    subtype_declarationGen=subtype_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subtype_declarationGen==null) list_subtype_declarationGen=new ArrayList();
                    list_subtype_declarationGen.add(subtype_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_subtype_declarationGen != null) {
                      	        for(Iterator it = list_subtype_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("subtype_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10129:4: record_declarationGen+= record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec7586);
                    record_declarationGen=record_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_record_declarationGen==null) list_record_declarationGen=new ArrayList();
                    list_record_declarationGen.add(record_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_record_declarationGen != null) {
                      	        for(Iterator it = list_record_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("record_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10147:4: plsql_table_declarationGen+= plsql_table_declaration
                    {
                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_spec7598);
                    plsql_table_declarationGen=plsql_table_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_table_declarationGen==null) list_plsql_table_declarationGen=new ArrayList();
                    list_plsql_table_declarationGen.add(plsql_table_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_plsql_table_declarationGen != null) {
                      	        for(Iterator it = list_plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_table_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10165:4: varray_declarationGen+= varray_declaration
                    {
                    pushFollow(FOLLOW_varray_declaration_in_package_obj_spec7610);
                    varray_declarationGen=varray_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_varray_declarationGen==null) list_varray_declarationGen=new ArrayList();
                    list_varray_declarationGen.add(varray_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_varray_declarationGen != null) {
                      	        for(Iterator it = list_varray_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("varray_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10183:4: cursor_declarationGen+= cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec7621);
                    cursor_declarationGen=cursor_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_declarationGen==null) list_cursor_declarationGen=new ArrayList();
                    list_cursor_declarationGen.add(cursor_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_cursor_declarationGen != null) {
                      	        for(Iterator it = list_cursor_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("cursor_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10201:4: cursor_specGen+= cursor_spec
                    {
                    pushFollow(FOLLOW_cursor_spec_in_package_obj_spec7633);
                    cursor_specGen=cursor_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_specGen==null) list_cursor_specGen=new ArrayList();
                    list_cursor_specGen.add(cursor_specGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_cursor_specGen != null) {
                      	        for(Iterator it = list_cursor_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.cursor_spec_return r = (PLSQL3Parser.cursor_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("cursor_spec");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10219:4: procedure_specGen+= procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec7645);
                    procedure_specGen=procedure_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_procedure_specGen==null) list_procedure_specGen=new ArrayList();
                    list_procedure_specGen.add(procedure_specGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_procedure_specGen != null) {
                      	        for(Iterator it = list_procedure_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.procedure_spec_return r = (PLSQL3Parser.procedure_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedure_spec");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10237:4: function_specGen+= function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_package_obj_spec7657);
                    function_specGen=function_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_specGen==null) list_function_specGen=new ArrayList();
                    list_function_specGen.add(function_specGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_function_specGen != null) {
                      	        for(Iterator it = list_function_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_spec_return r = (PLSQL3Parser.function_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_spec");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10255:4: exception_declarationGen+= exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec7669);
                    exception_declarationGen=exception_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_declarationGen==null) list_exception_declarationGen=new ArrayList();
                    list_exception_declarationGen.add(exception_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_exception_declarationGen != null) {
                      	        for(Iterator it = list_exception_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exception_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10273:4: pragma_declarationGen+= pragma_declaration
                    {
                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec7681);
                    pragma_declarationGen=pragma_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_declarationGen==null) list_pragma_declarationGen=new ArrayList();
                    list_pragma_declarationGen.add(pragma_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_specReturnNode.setKind("package_obj_spec");
                      	    // Create a CST Node
                      		if(list_pragma_declarationGen != null) {
                      	        for(Iterator it = list_pragma_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("pragma_declaration");
                      	            	package_obj_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_specReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end package_obj_spec

    public static class package_obj_body_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start package_obj_body
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10293:1: package_obj_body returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_bodyGen+= procedure_body | function_bodyGen+= function_body | pragma_declarationGen+= pragma_declaration );
    public final package_obj_body_return package_obj_body() throws RecognitionException {
        package_obj_body_return retval = new package_obj_body_return();
        retval.start = input.LT(1);

        List list_variable_declarationGen=null;
        List list_subtype_declarationGen=null;
        List list_cursor_declarationGen=null;
        List list_exception_declarationGen=null;
        List list_record_declarationGen=null;
        List list_plsql_table_declarationGen=null;
        List list_varray_declarationGen=null;
        List list_procedure_bodyGen=null;
        List list_function_bodyGen=null;
        List list_pragma_declarationGen=null;
        RuleReturnScope variable_declarationGen = null;
        RuleReturnScope subtype_declarationGen = null;
        RuleReturnScope cursor_declarationGen = null;
        RuleReturnScope exception_declarationGen = null;
        RuleReturnScope record_declarationGen = null;
        RuleReturnScope plsql_table_declarationGen = null;
        RuleReturnScope varray_declarationGen = null;
        RuleReturnScope procedure_bodyGen = null;
        RuleReturnScope function_bodyGen = null;
        RuleReturnScope pragma_declarationGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10294:1: (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_bodyGen+= procedure_body | function_bodyGen+= function_body | pragma_declarationGen+= pragma_declaration )
            int alt227=10;
            alt227 = dfa227.predict(input);
            switch (alt227) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10294:3: variable_declarationGen+= variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body7703);
                    variable_declarationGen=variable_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_variable_declarationGen==null) list_variable_declarationGen=new ArrayList();
                    list_variable_declarationGen.add(variable_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_variable_declarationGen != null) {
                      	        for(Iterator it = list_variable_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.variable_declaration_return r = (PLSQL3Parser.variable_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variable_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10312:4: subtype_declarationGen+= subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body7715);
                    subtype_declarationGen=subtype_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subtype_declarationGen==null) list_subtype_declarationGen=new ArrayList();
                    list_subtype_declarationGen.add(subtype_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_subtype_declarationGen != null) {
                      	        for(Iterator it = list_subtype_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.subtype_declaration_return r = (PLSQL3Parser.subtype_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("subtype_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10330:4: cursor_declarationGen+= cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body7727);
                    cursor_declarationGen=cursor_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_declarationGen==null) list_cursor_declarationGen=new ArrayList();
                    list_cursor_declarationGen.add(cursor_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_cursor_declarationGen != null) {
                      	        for(Iterator it = list_cursor_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.cursor_declaration_return r = (PLSQL3Parser.cursor_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("cursor_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10348:4: exception_declarationGen+= exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body7739);
                    exception_declarationGen=exception_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_declarationGen==null) list_exception_declarationGen=new ArrayList();
                    list_exception_declarationGen.add(exception_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_exception_declarationGen != null) {
                      	        for(Iterator it = list_exception_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.exception_declaration_return r = (PLSQL3Parser.exception_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exception_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10366:4: record_declarationGen+= record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_package_obj_body7751);
                    record_declarationGen=record_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_record_declarationGen==null) list_record_declarationGen=new ArrayList();
                    list_record_declarationGen.add(record_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_record_declarationGen != null) {
                      	        for(Iterator it = list_record_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.record_declaration_return r = (PLSQL3Parser.record_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("record_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10384:4: plsql_table_declarationGen+= plsql_table_declaration
                    {
                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_body7763);
                    plsql_table_declarationGen=plsql_table_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_table_declarationGen==null) list_plsql_table_declarationGen=new ArrayList();
                    list_plsql_table_declarationGen.add(plsql_table_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_plsql_table_declarationGen != null) {
                      	        for(Iterator it = list_plsql_table_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_table_declaration_return r = (PLSQL3Parser.plsql_table_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_table_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10402:4: varray_declarationGen+= varray_declaration
                    {
                    pushFollow(FOLLOW_varray_declaration_in_package_obj_body7775);
                    varray_declarationGen=varray_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_varray_declarationGen==null) list_varray_declarationGen=new ArrayList();
                    list_varray_declarationGen.add(varray_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_varray_declarationGen != null) {
                      	        for(Iterator it = list_varray_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.varray_declaration_return r = (PLSQL3Parser.varray_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("varray_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10420:4: procedure_bodyGen+= procedure_body
                    {
                    pushFollow(FOLLOW_procedure_body_in_package_obj_body7786);
                    procedure_bodyGen=procedure_body();
                    _fsp--;
                    if (failed) return retval;
                    if (list_procedure_bodyGen==null) list_procedure_bodyGen=new ArrayList();
                    list_procedure_bodyGen.add(procedure_bodyGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_procedure_bodyGen != null) {
                      	        for(Iterator it = list_procedure_bodyGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.procedure_body_return r = (PLSQL3Parser.procedure_body_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedure_body");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10438:4: function_bodyGen+= function_body
                    {
                    pushFollow(FOLLOW_function_body_in_package_obj_body7798);
                    function_bodyGen=function_body();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_bodyGen==null) list_function_bodyGen=new ArrayList();
                    list_function_bodyGen.add(function_bodyGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_function_bodyGen != null) {
                      	        for(Iterator it = list_function_bodyGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_body_return r = (PLSQL3Parser.function_body_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_body");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10456:4: pragma_declarationGen+= pragma_declaration
                    {
                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_body7810);
                    pragma_declarationGen=pragma_declaration();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_declarationGen==null) list_pragma_declarationGen=new ArrayList();
                    list_pragma_declarationGen.add(pragma_declarationGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node package_obj_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		package_obj_bodyReturnNode.setKind("package_obj_body");
                      	    // Create a CST Node
                      		if(list_pragma_declarationGen != null) {
                      	        for(Iterator it = list_pragma_declarationGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.pragma_declaration_return r = (PLSQL3Parser.pragma_declaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("pragma_declaration");
                      	            	package_obj_bodyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = package_obj_bodyReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end package_obj_body

    public static class parameter_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start parameter_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10476:1: parameter_spec returns [Node returnNode] : parameter_nameGen+= parameter_name (TK_0= 'IN' )? (type_specGen+= type_spec )? ;
    public final parameter_spec_return parameter_spec() throws RecognitionException {
        parameter_spec_return retval = new parameter_spec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_parameter_nameGen=null;
        List list_type_specGen=null;
        RuleReturnScope parameter_nameGen = null;
        RuleReturnScope type_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:1: (parameter_nameGen+= parameter_name (TK_0= 'IN' )? (type_specGen+= type_spec )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:3: parameter_nameGen+= parameter_name (TK_0= 'IN' )? (type_specGen+= type_spec )?
            {
            pushFollow(FOLLOW_parameter_name_in_parameter_spec7832);
            parameter_nameGen=parameter_name();
            _fsp--;
            if (failed) return retval;
            if (list_parameter_nameGen==null) list_parameter_nameGen=new ArrayList();
            list_parameter_nameGen.add(parameter_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:37: (TK_0= 'IN' )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==51) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:39: TK_0= 'IN'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_parameter_spec7838); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:52: (type_specGen+= type_spec )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( ((LA229_0>=ID && LA229_0<=DOUBLEQUOTED_STRING)||(LA229_0>=75 && LA229_0<=87)||(LA229_0>=90 && LA229_0<=111)||LA229_0==177||(LA229_0>=215 && LA229_0<=216)) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10477:54: type_specGen+= type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter_spec7847);
                    type_specGen=type_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_type_specGen==null) list_type_specGen=new ArrayList();
                    list_type_specGen.add(type_specGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node parameter_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		parameter_specReturnNode.setKind("parameter_spec");
              	    // Create a CST Node
              		if(list_parameter_nameGen != null) {
              	        for(Iterator it = list_parameter_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.parameter_name_return r = (PLSQL3Parser.parameter_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter_name");
              	            	parameter_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		parameter_specReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	parameter_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = parameter_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end parameter_spec

    public static class parameter_specs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start parameter_specs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10516:1: parameter_specs returns [Node returnNode] : parameter_specGen+= parameter_spec (COMMAGen_List+= COMMA parameter_specGen_1+= parameter_spec )* ;
    public final parameter_specs_return parameter_specs() throws RecognitionException {
        parameter_specs_return retval = new parameter_specs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_parameter_specGen=null;
        List list_parameter_specGen_1=null;
        RuleReturnScope parameter_specGen = null;
        RuleReturnScope parameter_specGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10517:1: (parameter_specGen+= parameter_spec (COMMAGen_List+= COMMA parameter_specGen_1+= parameter_spec )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10517:3: parameter_specGen+= parameter_spec (COMMAGen_List+= COMMA parameter_specGen_1+= parameter_spec )*
            {
            pushFollow(FOLLOW_parameter_spec_in_parameter_specs7872);
            parameter_specGen=parameter_spec();
            _fsp--;
            if (failed) return retval;
            if (list_parameter_specGen==null) list_parameter_specGen=new ArrayList();
            list_parameter_specGen.add(parameter_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10517:37: (COMMAGen_List+= COMMA parameter_specGen_1+= parameter_spec )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10517:39: COMMAGen_List+= COMMA parameter_specGen_1+= parameter_spec
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_parameter_specs7878); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_parameter_spec_in_parameter_specs7882);
            	    parameter_specGen_1=parameter_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_parameter_specGen_1==null) list_parameter_specGen_1=new ArrayList();
            	    list_parameter_specGen_1.add(parameter_specGen_1);


            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node parameter_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		parameter_specsReturnNode.setKind("parameter_specs");
              	    // Create a CST Node
              		if(list_parameter_specGen != null) {
              	        for(Iterator it = list_parameter_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.parameter_spec_return r = (PLSQL3Parser.parameter_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter_spec");
              	            	parameter_specsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			parameter_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_parameter_specGen_1 != null) {		
              	    	PLSQL3Parser.parameter_spec_return r = (PLSQL3Parser.parameter_spec_return) list_parameter_specGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("parameter_spec");
              	    		parameter_specsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = parameter_specsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end parameter_specs

    public static class parameter_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start parameter_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10562:1: parameter_name returns [Node returnNode] : identifierGen+= identifier ;
    public final parameter_name_return parameter_name() throws RecognitionException {
        parameter_name_return retval = new parameter_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10563:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10563:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_parameter_name7906);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node parameter_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		parameter_nameReturnNode.setKind("parameter_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	parameter_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = parameter_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end parameter_name

    public static class path_string_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start path_string
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10583:1: path_string returns [Node returnNode] : QUOTED_STRINGGen= QUOTED_STRING ;
    public final path_string_return path_string() throws RecognitionException {
        path_string_return retval = new path_string_return();
        retval.start = input.LT(1);

        Token QUOTED_STRINGGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10584:1: (QUOTED_STRINGGen= QUOTED_STRING )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10584:3: QUOTED_STRINGGen= QUOTED_STRING
            {
            QUOTED_STRINGGen=(Token)input.LT(1);
            match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_path_string7927); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node path_stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		path_stringReturnNode.setKind("path_string");
              	    // Create a CST Leaf
              		if(QUOTED_STRINGGen != null) {
              			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
              			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
              			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
              			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
              			path_stringReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = path_stringReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end path_string

    public static class pattern_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start pattern
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10603:1: pattern returns [Node returnNode] : QUOTED_STRINGGen= QUOTED_STRING ;
    public final pattern_return pattern() throws RecognitionException {
        pattern_return retval = new pattern_return();
        retval.start = input.LT(1);

        Token QUOTED_STRINGGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10604:1: (QUOTED_STRINGGen= QUOTED_STRING )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10604:3: QUOTED_STRINGGen= QUOTED_STRING
            {
            QUOTED_STRINGGen=(Token)input.LT(1);
            match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pattern7948); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node patternReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		patternReturnNode.setKind("pattern");
              	    // Create a CST Leaf
              		if(QUOTED_STRINGGen != null) {
              			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
              			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
              			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
              			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
              			patternReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = patternReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pattern

    public static class plsql_block_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_block
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10623:1: plsql_block returns [Node returnNode] : (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? ( (keyDECLAREGen+= keyDECLARE )? (declare_specGen+= declare_spec )+ )? (TK_0= 'BEGIN' ) seq_of_statementsGen+= seq_of_statements (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? (TK_2= 'END' (label_nameGen_1+= label_name )? ) ;
    public final plsql_block_return plsql_block() throws RecognitionException {
        plsql_block_return retval = new plsql_block_return();
        retval.start = input.LT(1);

        Token LLABELGen=null;
        Token RLABELGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_label_nameGen=null;
        List list_keyDECLAREGen=null;
        List list_declare_specGen=null;
        List list_seq_of_statementsGen=null;
        List list_exception_handlerGen=null;
        List list_label_nameGen_1=null;
        RuleReturnScope label_nameGen = null;
        RuleReturnScope keyDECLAREGen = null;
        RuleReturnScope declare_specGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope exception_handlerGen = null;
        RuleReturnScope label_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10624:1: ( (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? ( (keyDECLAREGen+= keyDECLARE )? (declare_specGen+= declare_spec )+ )? (TK_0= 'BEGIN' ) seq_of_statementsGen+= seq_of_statements (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? (TK_2= 'END' (label_nameGen_1+= label_name )? ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10624:3: (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )? ( (keyDECLAREGen+= keyDECLARE )? (declare_specGen+= declare_spec )+ )? (TK_0= 'BEGIN' ) seq_of_statementsGen+= seq_of_statements (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )? (TK_2= 'END' (label_nameGen_1+= label_name )? )
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10624:3: (LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==LLABEL) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10624:5: LLABELGen= LLABEL label_nameGen+= label_name RLABELGen= RLABEL
                    {
                    LLABELGen=(Token)input.LT(1);
                    match(input,LLABEL,FOLLOW_LLABEL_in_plsql_block7971); if (failed) return retval;
                    pushFollow(FOLLOW_label_name_in_plsql_block7975);
                    label_nameGen=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen==null) list_label_nameGen=new ArrayList();
                    list_label_nameGen.add(label_nameGen);

                    RLABELGen=(Token)input.LT(1);
                    match(input,RLABEL,FOLLOW_RLABEL_in_plsql_block7979); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:3: ( (keyDECLAREGen+= keyDECLARE )? (declare_specGen+= declare_spec )+ )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( ((LA234_0>=ID && LA234_0<=DOUBLEQUOTED_STRING)||LA234_0==74||LA234_0==120||LA234_0==144||LA234_0==164||LA234_0==233||LA234_0==245||LA234_0==258||LA234_0==260) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:5: (keyDECLAREGen+= keyDECLARE )? (declare_specGen+= declare_spec )+
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:5: (keyDECLAREGen+= keyDECLARE )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==164) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:7: keyDECLAREGen+= keyDECLARE
                            {
                            pushFollow(FOLLOW_keyDECLARE_in_plsql_block7992);
                            keyDECLAREGen=keyDECLARE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyDECLAREGen==null) list_keyDECLAREGen=new ArrayList();
                            list_keyDECLAREGen.add(keyDECLAREGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:36: (declare_specGen+= declare_spec )+
                    int cnt233=0;
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);

                        if ( ((LA233_0>=ID && LA233_0<=DOUBLEQUOTED_STRING)||LA233_0==74||LA233_0==120||LA233_0==144||LA233_0==233||LA233_0==245||LA233_0==258||LA233_0==260) ) {
                            alt233=1;
                        }


                        switch (alt233) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10625:37: declare_specGen+= declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_plsql_block8000);
                    	    declare_specGen=declare_spec();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_declare_specGen==null) list_declare_specGen=new ArrayList();
                    	    list_declare_specGen.add(declare_specGen);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt233 >= 1 ) break loop233;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(233, input);
                                throw eee;
                        }
                        cnt233++;
                    } while (true);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10626:3: (TK_0= 'BEGIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10626:5: TK_0= 'BEGIN'
            {
            TK_0=(Token)input.LT(1);
            match(input,53,FOLLOW_53_in_plsql_block8014); if (failed) return retval;

            }

            pushFollow(FOLLOW_seq_of_statements_in_plsql_block8022);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10628:3: (TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+ )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==54) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10628:5: TK_1= 'EXCEPTION' (exception_handlerGen+= exception_handler )+
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_plsql_block8030); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10628:22: (exception_handlerGen+= exception_handler )+
                    int cnt235=0;
                    loop235:
                    do {
                        int alt235=2;
                        int LA235_0 = input.LA(1);

                        if ( (LA235_0==116) ) {
                            alt235=1;
                        }


                        switch (alt235) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10628:24: exception_handlerGen+= exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_plsql_block8036);
                    	    exception_handlerGen=exception_handler();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_exception_handlerGen==null) list_exception_handlerGen=new ArrayList();
                    	    list_exception_handlerGen.add(exception_handlerGen);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt235 >= 1 ) break loop235;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(235, input);
                                throw eee;
                        }
                        cnt235++;
                    } while (true);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10629:3: (TK_2= 'END' (label_nameGen_1+= label_name )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10629:5: TK_2= 'END' (label_nameGen_1+= label_name )?
            {
            TK_2=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_plsql_block8051); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10629:16: (label_nameGen_1+= label_name )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( ((LA237_0>=ID && LA237_0<=DOUBLEQUOTED_STRING)) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10629:18: label_nameGen_1+= label_name
                    {
                    pushFollow(FOLLOW_label_name_in_plsql_block8057);
                    label_nameGen_1=label_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_label_nameGen_1==null) list_label_nameGen_1=new ArrayList();
                    list_label_nameGen_1.add(label_nameGen_1);


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_blockReturnNode.setKind("plsql_block");
              	    // Create a CST Leaf
              		if(LLABELGen != null) {
              			Leaf LLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LLABELGenLeaf.setKind("LLABEL");
              			LLABELGenLeaf.setValue(LLABELGen.getText());
              			LLABELGenLeaf.setPos(LLABELGen.getCharPositionInLine());
              			LLABELGenLeaf.setLine(LLABELGen.getLine());
              			plsql_blockReturnNode.getChildren().add(LLABELGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_label_nameGen != null) {
              	        for(Iterator it = list_label_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RLABELGen != null) {
              			Leaf RLABELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RLABELGenLeaf.setKind("RLABEL");
              			RLABELGenLeaf.setValue(RLABELGen.getText());
              			RLABELGenLeaf.setPos(RLABELGen.getCharPositionInLine());
              			RLABELGenLeaf.setLine(RLABELGen.getLine());
              			plsql_blockReturnNode.getChildren().add(RLABELGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyDECLAREGen != null) {
              	        for(Iterator it = list_keyDECLAREGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyDECLARE_return r = (PLSQL3Parser.keyDECLARE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyDECLARE");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_declare_specGen != null) {
              	        for(Iterator it = list_declare_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("declare_spec");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		plsql_blockReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		plsql_blockReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exception_handlerGen != null) {
              	        for(Iterator it = list_exception_handlerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_handler");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		plsql_blockReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_label_nameGen_1 != null) {
              	        for(Iterator it = list_label_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.label_name_return r = (PLSQL3Parser.label_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("label_name");
              	            	plsql_blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_blockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_block

    public static class plsql_condition_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_condition
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10744:1: plsql_condition returns [Node returnNode] : expr_boolGen+= expr_bool ;
    public final plsql_condition_return plsql_condition() throws RecognitionException {
        plsql_condition_return retval = new plsql_condition_return();
        retval.start = input.LT(1);

        List list_expr_boolGen=null;
        RuleReturnScope expr_boolGen = null;
         isSql = false; 
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10746:2: (expr_boolGen+= expr_bool )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10746:4: expr_boolGen+= expr_bool
            {
            pushFollow(FOLLOW_expr_bool_in_plsql_condition8089);
            expr_boolGen=expr_bool();
            _fsp--;
            if (failed) return retval;
            if (list_expr_boolGen==null) list_expr_boolGen=new ArrayList();
            list_expr_boolGen.add(expr_boolGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_conditionReturnNode.setKind("plsql_condition");
              	    // Create a CST Node
              		if(list_expr_boolGen != null) {
              	        for(Iterator it = list_expr_boolGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_bool");
              	            	plsql_conditionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_conditionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_condition

    public static class plsql_table_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_table_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10766:1: plsql_table_declaration returns [Node returnNode] : table_type_decGen+= table_type_dec ;
    public final plsql_table_declaration_return plsql_table_declaration() throws RecognitionException {
        plsql_table_declaration_return retval = new plsql_table_declaration_return();
        retval.start = input.LT(1);

        List list_table_type_decGen=null;
        RuleReturnScope table_type_decGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10767:1: (table_type_decGen+= table_type_dec )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10767:3: table_type_decGen+= table_type_dec
            {
            pushFollow(FOLLOW_table_type_dec_in_plsql_table_declaration8110);
            table_type_decGen=table_type_dec();
            _fsp--;
            if (failed) return retval;
            if (list_table_type_decGen==null) list_table_type_decGen=new ArrayList();
            list_table_type_decGen.add(table_type_decGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_table_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_table_declarationReturnNode.setKind("plsql_table_declaration");
              	    // Create a CST Node
              		if(list_table_type_decGen != null) {
              	        for(Iterator it = list_table_type_decGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_type_dec_return r = (PLSQL3Parser.table_type_dec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_type_dec");
              	            	plsql_table_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_table_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_table_declaration

    public static class plsql_table_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_table_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10788:1: plsql_table_name returns [Node returnNode] : identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* ;
    public final plsql_table_name_return plsql_table_name() throws RecognitionException {
        plsql_table_name_return retval = new plsql_table_name_return();
        retval.start = input.LT(1);

        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_identifierGen=null;
        List list_identifierGen_1=null;
        RuleReturnScope identifierGen = null;
        RuleReturnScope identifierGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10789:1: (identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10789:3: identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )*
            {
            pushFollow(FOLLOW_identifier_in_plsql_table_name8132);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10789:29: (DOTGen_List+= DOT identifierGen_1+= identifier )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==DOT) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10789:31: DOTGen_List+= DOT identifierGen_1+= identifier
            	    {
            	    DOTGen_List=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_plsql_table_name8138); if (failed) return retval;
            	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
            	    list_DOTGen_List.add(DOTGen_List);

            	    pushFollow(FOLLOW_identifier_in_plsql_table_name8142);
            	    identifierGen_1=identifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_identifierGen_1==null) list_identifierGen_1=new ArrayList();
            	    list_identifierGen_1.add(identifierGen_1);


            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_table_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_table_nameReturnNode.setKind("plsql_table_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	plsql_table_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal DOTGen_List aggregation
              		if(list_DOTGen_List != null) {
              	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_DOTGen_List != null) {
              		    Token t = (Token) list_DOTGen_List.get(pos); 
              		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_ListLeaf.setKind("DOT");
              			DOTGen_ListLeaf.setValue(t.getText());
              			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			DOTGen_ListLeaf.setLine(t.getLine());
              			plsql_table_nameReturnNode.getChildren().add(DOTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_identifierGen_1 != null) {		
              	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) list_identifierGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("identifier");
              	    		plsql_table_nameReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_table_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_table_name

    public static class pragma_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start pragma_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10835:1: pragma_declaration returns [Node returnNode] : keyPRAGMAGen+= keyPRAGMA (keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN | keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN | keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE | keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN | keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN | keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN | keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN | keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN ) SEMIGen= SEMI ;
    public final pragma_declaration_return pragma_declaration() throws RecognitionException {
        pragma_declaration_return retval = new pragma_declaration_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token TK_0=null;
        Token COMMAGen=null;
        Token RPARENGen=null;
        Token LPARENGen_1=null;
        Token COMMAGen_1=null;
        Token RPARENGen_1=null;
        Token LPARENGen_2=null;
        Token RPARENGen_2=null;
        Token LPARENGen_3=null;
        Token RPARENGen_3=null;
        Token LPARENGen_4=null;
        Token RPARENGen_4=null;
        Token LPARENGen_5=null;
        Token RPARENGen_5=null;
        Token LPARENGen_6=null;
        Token RPARENGen_6=null;
        Token SEMIGen=null;
        List list_keyPRAGMAGen=null;
        List list_keyRESTRICT_REFERENCESGen=null;
        List list_function_nameGen=null;
        List list_pragma_paramGen=null;
        List list_keyEXCEPTION_INITGen=null;
        List list_exception_nameGen=null;
        List list_literalGen=null;
        List list_keyAUTONOMOUS_TRANSACTIONGen=null;
        List list_keySERIALLY_REUSABLEGen=null;
        List list_keyBUILTINGen=null;
        List list_pragma_paramsGen=null;
        List list_keyFIPSFLAGGen=null;
        List list_pragma_paramsGen_1=null;
        List list_keyINTERFACEGen=null;
        List list_pragma_paramsGen_2=null;
        List list_keyNEW_NAMESGen=null;
        List list_pragma_paramsGen_3=null;
        List list_keyTIMESTAMPGen=null;
        List list_pragma_paramsGen_4=null;
        RuleReturnScope keyPRAGMAGen = null;
        RuleReturnScope keyRESTRICT_REFERENCESGen = null;
        RuleReturnScope function_nameGen = null;
        RuleReturnScope pragma_paramGen = null;
        RuleReturnScope keyEXCEPTION_INITGen = null;
        RuleReturnScope exception_nameGen = null;
        RuleReturnScope literalGen = null;
        RuleReturnScope keyAUTONOMOUS_TRANSACTIONGen = null;
        RuleReturnScope keySERIALLY_REUSABLEGen = null;
        RuleReturnScope keyBUILTINGen = null;
        RuleReturnScope pragma_paramsGen = null;
        RuleReturnScope keyFIPSFLAGGen = null;
        RuleReturnScope pragma_paramsGen_1 = null;
        RuleReturnScope keyINTERFACEGen = null;
        RuleReturnScope pragma_paramsGen_2 = null;
        RuleReturnScope keyNEW_NAMESGen = null;
        RuleReturnScope pragma_paramsGen_3 = null;
        RuleReturnScope keyTIMESTAMPGen = null;
        RuleReturnScope pragma_paramsGen_4 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10836:1: (keyPRAGMAGen+= keyPRAGMA (keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN | keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN | keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE | keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN | keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN | keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN | keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN | keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN ) SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10836:3: keyPRAGMAGen+= keyPRAGMA (keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN | keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN | keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE | keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN | keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN | keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN | keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN | keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN ) SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyPRAGMA_in_pragma_declaration8167);
            keyPRAGMAGen=keyPRAGMA();
            _fsp--;
            if (failed) return retval;
            if (list_keyPRAGMAGen==null) list_keyPRAGMAGen=new ArrayList();
            list_keyPRAGMAGen.add(keyPRAGMAGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:3: (keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN | keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN | keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE | keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN | keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN | keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN | keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN | keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN )
            int alt241=9;
            switch ( input.LA(1) ) {
            case 252:
                {
                alt241=1;
                }
                break;
            case 235:
                {
                alt241=2;
                }
                break;
            case 226:
                {
                alt241=3;
                }
                break;
            case 257:
                {
                alt241=4;
                }
                break;
            case 228:
                {
                alt241=5;
                }
                break;
            case 237:
                {
                alt241=6;
                }
                break;
            case 238:
                {
                alt241=7;
                }
                break;
            case 241:
                {
                alt241=8;
                }
                break;
            case 216:
                {
                alt241=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("10837:3: (keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN | keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN | keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE | keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN | keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN | keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN | keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN | keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN )", 241, 0, input);

                throw nvae;
            }

            switch (alt241) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:5: keyRESTRICT_REFERENCESGen+= keyRESTRICT_REFERENCES LPARENGen= LPAREN (TK_0= 'DEFAULT' | function_nameGen+= function_name ) (COMMAGen= COMMA pragma_paramGen+= pragma_param )+ RPARENGen= RPAREN
                    {
                    pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration8176);
                    keyRESTRICT_REFERENCESGen=keyRESTRICT_REFERENCES();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRESTRICT_REFERENCESGen==null) list_keyRESTRICT_REFERENCESGen=new ArrayList();
                    list_keyRESTRICT_REFERENCESGen.add(keyRESTRICT_REFERENCESGen);

                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8180); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:72: (TK_0= 'DEFAULT' | function_nameGen+= function_name )
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==52) ) {
                        alt239=1;
                    }
                    else if ( ((LA239_0>=QUOTED_STRING && LA239_0<=DOUBLEQUOTED_STRING)) ) {
                        alt239=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("10837:72: (TK_0= 'DEFAULT' | function_nameGen+= function_name )", 239, 0, input);

                        throw nvae;
                    }
                    switch (alt239) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:74: TK_0= 'DEFAULT'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,52,FOLLOW_52_in_pragma_declaration8186); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:91: function_nameGen+= function_name
                            {
                            pushFollow(FOLLOW_function_name_in_pragma_declaration8192);
                            function_nameGen=function_name();
                            _fsp--;
                            if (failed) return retval;
                            if (list_function_nameGen==null) list_function_nameGen=new ArrayList();
                            list_function_nameGen.add(function_nameGen);


                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:125: (COMMAGen= COMMA pragma_paramGen+= pragma_param )+
                    int cnt240=0;
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);

                        if ( (LA240_0==COMMA) ) {
                            alt240=1;
                        }


                        switch (alt240) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10837:127: COMMAGen= COMMA pragma_paramGen+= pragma_param
                    	    {
                    	    COMMAGen=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration8200); if (failed) return retval;
                    	    pushFollow(FOLLOW_pragma_param_in_pragma_declaration8204);
                    	    pragma_paramGen=pragma_param();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_pragma_paramGen==null) list_pragma_paramGen=new ArrayList();
                    	    list_pragma_paramGen.add(pragma_paramGen);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt240 >= 1 ) break loop240;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(240, input);
                                throw eee;
                        }
                        cnt240++;
                    } while (true);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8211); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10838:5: keyEXCEPTION_INITGen+= keyEXCEPTION_INIT LPARENGen_1= LPAREN exception_nameGen+= exception_name COMMAGen_1= COMMA literalGen+= literal RPARENGen_1= RPAREN
                    {
                    pushFollow(FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration8220);
                    keyEXCEPTION_INITGen=keyEXCEPTION_INIT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyEXCEPTION_INITGen==null) list_keyEXCEPTION_INITGen=new ArrayList();
                    list_keyEXCEPTION_INITGen.add(keyEXCEPTION_INITGen);

                    LPARENGen_1=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8224); if (failed) return retval;
                    pushFollow(FOLLOW_exception_name_in_pragma_declaration8228);
                    exception_nameGen=exception_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_nameGen==null) list_exception_nameGen=new ArrayList();
                    list_exception_nameGen.add(exception_nameGen);

                    COMMAGen_1=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration8232); if (failed) return retval;
                    pushFollow(FOLLOW_literal_in_pragma_declaration8236);
                    literalGen=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen==null) list_literalGen=new ArrayList();
                    list_literalGen.add(literalGen);

                    RPARENGen_1=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8240); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10839:5: keyAUTONOMOUS_TRANSACTIONGen+= keyAUTONOMOUS_TRANSACTION
                    {
                    pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration8248);
                    keyAUTONOMOUS_TRANSACTIONGen=keyAUTONOMOUS_TRANSACTION();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyAUTONOMOUS_TRANSACTIONGen==null) list_keyAUTONOMOUS_TRANSACTIONGen=new ArrayList();
                    list_keyAUTONOMOUS_TRANSACTIONGen.add(keyAUTONOMOUS_TRANSACTIONGen);


                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10840:5: keySERIALLY_REUSABLEGen+= keySERIALLY_REUSABLE
                    {
                    pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration8256);
                    keySERIALLY_REUSABLEGen=keySERIALLY_REUSABLE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keySERIALLY_REUSABLEGen==null) list_keySERIALLY_REUSABLEGen=new ArrayList();
                    list_keySERIALLY_REUSABLEGen.add(keySERIALLY_REUSABLEGen);


                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10841:5: keyBUILTINGen+= keyBUILTIN LPARENGen_2= LPAREN pragma_paramsGen+= pragma_params RPARENGen_2= RPAREN
                    {
                    pushFollow(FOLLOW_keyBUILTIN_in_pragma_declaration8264);
                    keyBUILTINGen=keyBUILTIN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyBUILTINGen==null) list_keyBUILTINGen=new ArrayList();
                    list_keyBUILTINGen.add(keyBUILTINGen);

                    LPARENGen_2=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8268); if (failed) return retval;
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration8272);
                    pragma_paramsGen=pragma_params();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_paramsGen==null) list_pragma_paramsGen=new ArrayList();
                    list_pragma_paramsGen.add(pragma_paramsGen);

                    RPARENGen_2=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8276); if (failed) return retval;

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10842:5: keyFIPSFLAGGen+= keyFIPSFLAG LPARENGen_3= LPAREN pragma_paramsGen_1+= pragma_params RPARENGen_3= RPAREN
                    {
                    pushFollow(FOLLOW_keyFIPSFLAG_in_pragma_declaration8284);
                    keyFIPSFLAGGen=keyFIPSFLAG();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyFIPSFLAGGen==null) list_keyFIPSFLAGGen=new ArrayList();
                    list_keyFIPSFLAGGen.add(keyFIPSFLAGGen);

                    LPARENGen_3=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8288); if (failed) return retval;
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration8292);
                    pragma_paramsGen_1=pragma_params();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_paramsGen_1==null) list_pragma_paramsGen_1=new ArrayList();
                    list_pragma_paramsGen_1.add(pragma_paramsGen_1);

                    RPARENGen_3=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8296); if (failed) return retval;

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10843:5: keyINTERFACEGen+= keyINTERFACE LPARENGen_4= LPAREN pragma_paramsGen_2+= pragma_params RPARENGen_4= RPAREN
                    {
                    pushFollow(FOLLOW_keyINTERFACE_in_pragma_declaration8304);
                    keyINTERFACEGen=keyINTERFACE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyINTERFACEGen==null) list_keyINTERFACEGen=new ArrayList();
                    list_keyINTERFACEGen.add(keyINTERFACEGen);

                    LPARENGen_4=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8308); if (failed) return retval;
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration8312);
                    pragma_paramsGen_2=pragma_params();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_paramsGen_2==null) list_pragma_paramsGen_2=new ArrayList();
                    list_pragma_paramsGen_2.add(pragma_paramsGen_2);

                    RPARENGen_4=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8316); if (failed) return retval;

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10844:5: keyNEW_NAMESGen+= keyNEW_NAMES LPARENGen_5= LPAREN pragma_paramsGen_3+= pragma_params RPARENGen_5= RPAREN
                    {
                    pushFollow(FOLLOW_keyNEW_NAMES_in_pragma_declaration8324);
                    keyNEW_NAMESGen=keyNEW_NAMES();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNEW_NAMESGen==null) list_keyNEW_NAMESGen=new ArrayList();
                    list_keyNEW_NAMESGen.add(keyNEW_NAMESGen);

                    LPARENGen_5=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8328); if (failed) return retval;
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration8332);
                    pragma_paramsGen_3=pragma_params();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_paramsGen_3==null) list_pragma_paramsGen_3=new ArrayList();
                    list_pragma_paramsGen_3.add(pragma_paramsGen_3);

                    RPARENGen_5=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8336); if (failed) return retval;

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:10845:5: keyTIMESTAMPGen+= keyTIMESTAMP LPARENGen_6= LPAREN pragma_paramsGen_4+= pragma_params RPARENGen_6= RPAREN
                    {
                    pushFollow(FOLLOW_keyTIMESTAMP_in_pragma_declaration8344);
                    keyTIMESTAMPGen=keyTIMESTAMP();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyTIMESTAMPGen==null) list_keyTIMESTAMPGen=new ArrayList();
                    list_keyTIMESTAMPGen.add(keyTIMESTAMPGen);

                    LPARENGen_6=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration8348); if (failed) return retval;
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration8352);
                    pragma_paramsGen_4=pragma_params();
                    _fsp--;
                    if (failed) return retval;
                    if (list_pragma_paramsGen_4==null) list_pragma_paramsGen_4=new ArrayList();
                    list_pragma_paramsGen_4.add(pragma_paramsGen_4);

                    RPARENGen_6=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration8356); if (failed) return retval;

                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_pragma_declaration8366); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node pragma_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pragma_declarationReturnNode.setKind("pragma_declaration");
              	    // Create a CST Node
              		if(list_keyPRAGMAGen != null) {
              	        for(Iterator it = list_keyPRAGMAGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyPRAGMA_return r = (PLSQL3Parser.keyPRAGMA_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyPRAGMA");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyRESTRICT_REFERENCESGen != null) {
              	        for(Iterator it = list_keyRESTRICT_REFERENCESGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRESTRICT_REFERENCES_return r = (PLSQL3Parser.keyRESTRICT_REFERENCES_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRESTRICT_REFERENCES");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		pragma_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_function_nameGen != null) {
              	        for(Iterator it = list_function_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.function_name_return r = (PLSQL3Parser.function_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("function_name");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal pragma_paramGen aggregation
              		if(list_pragma_paramGen != null) {
              	    for(int pos = 0; pos < list_pragma_paramGen.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(COMMAGen != null) {
              			Leaf COMMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGenLeaf.setKind("COMMA");
              			COMMAGenLeaf.setValue(COMMAGen.getText());
              			COMMAGenLeaf.setPos(COMMAGen.getCharPositionInLine());
              			COMMAGenLeaf.setLine(COMMAGen.getLine());
              			pragma_declarationReturnNode.getChildren().add(COMMAGenLeaf);
              		}
              		// No Terminal extractor
              	    if(list_pragma_paramGen != null) {		
              	    	PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) list_pragma_paramGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("pragma_param");
              	    		pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_keyEXCEPTION_INITGen != null) {
              	        for(Iterator it = list_keyEXCEPTION_INITGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyEXCEPTION_INIT_return r = (PLSQL3Parser.keyEXCEPTION_INIT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyEXCEPTION_INIT");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_1 != null) {
              			Leaf LPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_1Leaf.setKind("LPAREN");
              			LPARENGen_1Leaf.setValue(LPARENGen_1.getText());
              			LPARENGen_1Leaf.setPos(LPARENGen_1.getCharPositionInLine());
              			LPARENGen_1Leaf.setLine(LPARENGen_1.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_exception_nameGen != null) {
              	        for(Iterator it = list_exception_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_name");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COMMAGen_1 != null) {
              			Leaf COMMAGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_1Leaf.setKind("COMMA");
              			COMMAGen_1Leaf.setValue(COMMAGen_1.getText());
              			COMMAGen_1Leaf.setPos(COMMAGen_1.getCharPositionInLine());
              			COMMAGen_1Leaf.setLine(COMMAGen_1.getLine());
              			pragma_declarationReturnNode.getChildren().add(COMMAGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_literalGen != null) {
              	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_1 != null) {
              			Leaf RPARENGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_1Leaf.setKind("RPAREN");
              			RPARENGen_1Leaf.setValue(RPARENGen_1.getText());
              			RPARENGen_1Leaf.setPos(RPARENGen_1.getCharPositionInLine());
              			RPARENGen_1Leaf.setLine(RPARENGen_1.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_keyAUTONOMOUS_TRANSACTIONGen != null) {
              	        for(Iterator it = list_keyAUTONOMOUS_TRANSACTIONGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return r = (PLSQL3Parser.keyAUTONOMOUS_TRANSACTION_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyAUTONOMOUS_TRANSACTION");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keySERIALLY_REUSABLEGen != null) {
              	        for(Iterator it = list_keySERIALLY_REUSABLEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySERIALLY_REUSABLE_return r = (PLSQL3Parser.keySERIALLY_REUSABLE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySERIALLY_REUSABLE");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyBUILTINGen != null) {
              	        for(Iterator it = list_keyBUILTINGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyBUILTIN_return r = (PLSQL3Parser.keyBUILTIN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyBUILTIN");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_2 != null) {
              			Leaf LPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_2Leaf.setKind("LPAREN");
              			LPARENGen_2Leaf.setValue(LPARENGen_2.getText());
              			LPARENGen_2Leaf.setPos(LPARENGen_2.getCharPositionInLine());
              			LPARENGen_2Leaf.setLine(LPARENGen_2.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_pragma_paramsGen != null) {
              	        for(Iterator it = list_pragma_paramsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_params");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_2 != null) {
              			Leaf RPARENGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_2Leaf.setKind("RPAREN");
              			RPARENGen_2Leaf.setValue(RPARENGen_2.getText());
              			RPARENGen_2Leaf.setPos(RPARENGen_2.getCharPositionInLine());
              			RPARENGen_2Leaf.setLine(RPARENGen_2.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_keyFIPSFLAGGen != null) {
              	        for(Iterator it = list_keyFIPSFLAGGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyFIPSFLAG_return r = (PLSQL3Parser.keyFIPSFLAG_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyFIPSFLAG");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_3 != null) {
              			Leaf LPARENGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_3Leaf.setKind("LPAREN");
              			LPARENGen_3Leaf.setValue(LPARENGen_3.getText());
              			LPARENGen_3Leaf.setPos(LPARENGen_3.getCharPositionInLine());
              			LPARENGen_3Leaf.setLine(LPARENGen_3.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_3Leaf);
              		}
              	    // Create a CST Node
              		if(list_pragma_paramsGen_1 != null) {
              	        for(Iterator it = list_pragma_paramsGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_params");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_3 != null) {
              			Leaf RPARENGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_3Leaf.setKind("RPAREN");
              			RPARENGen_3Leaf.setValue(RPARENGen_3.getText());
              			RPARENGen_3Leaf.setPos(RPARENGen_3.getCharPositionInLine());
              			RPARENGen_3Leaf.setLine(RPARENGen_3.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_3Leaf);
              		}
              	    // Create a CST Node
              		if(list_keyINTERFACEGen != null) {
              	        for(Iterator it = list_keyINTERFACEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyINTERFACE_return r = (PLSQL3Parser.keyINTERFACE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyINTERFACE");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_4 != null) {
              			Leaf LPARENGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_4Leaf.setKind("LPAREN");
              			LPARENGen_4Leaf.setValue(LPARENGen_4.getText());
              			LPARENGen_4Leaf.setPos(LPARENGen_4.getCharPositionInLine());
              			LPARENGen_4Leaf.setLine(LPARENGen_4.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_pragma_paramsGen_2 != null) {
              	        for(Iterator it = list_pragma_paramsGen_2.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_params");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_4 != null) {
              			Leaf RPARENGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_4Leaf.setKind("RPAREN");
              			RPARENGen_4Leaf.setValue(RPARENGen_4.getText());
              			RPARENGen_4Leaf.setPos(RPARENGen_4.getCharPositionInLine());
              			RPARENGen_4Leaf.setLine(RPARENGen_4.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_keyNEW_NAMESGen != null) {
              	        for(Iterator it = list_keyNEW_NAMESGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNEW_NAMES_return r = (PLSQL3Parser.keyNEW_NAMES_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNEW_NAMES");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_5 != null) {
              			Leaf LPARENGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_5Leaf.setKind("LPAREN");
              			LPARENGen_5Leaf.setValue(LPARENGen_5.getText());
              			LPARENGen_5Leaf.setPos(LPARENGen_5.getCharPositionInLine());
              			LPARENGen_5Leaf.setLine(LPARENGen_5.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_5Leaf);
              		}
              	    // Create a CST Node
              		if(list_pragma_paramsGen_3 != null) {
              	        for(Iterator it = list_pragma_paramsGen_3.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_params");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_5 != null) {
              			Leaf RPARENGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_5Leaf.setKind("RPAREN");
              			RPARENGen_5Leaf.setValue(RPARENGen_5.getText());
              			RPARENGen_5Leaf.setPos(RPARENGen_5.getCharPositionInLine());
              			RPARENGen_5Leaf.setLine(RPARENGen_5.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_5Leaf);
              		}
              	    // Create a CST Node
              		if(list_keyTIMESTAMPGen != null) {
              	        for(Iterator it = list_keyTIMESTAMPGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTIMESTAMP_return r = (PLSQL3Parser.keyTIMESTAMP_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTIMESTAMP");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen_6 != null) {
              			Leaf LPARENGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_6Leaf.setKind("LPAREN");
              			LPARENGen_6Leaf.setValue(LPARENGen_6.getText());
              			LPARENGen_6Leaf.setPos(LPARENGen_6.getCharPositionInLine());
              			LPARENGen_6Leaf.setLine(LPARENGen_6.getLine());
              			pragma_declarationReturnNode.getChildren().add(LPARENGen_6Leaf);
              		}
              	    // Create a CST Node
              		if(list_pragma_paramsGen_4 != null) {
              	        for(Iterator it = list_pragma_paramsGen_4.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_params_return r = (PLSQL3Parser.pragma_params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_params");
              	            	pragma_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen_6 != null) {
              			Leaf RPARENGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_6Leaf.setKind("RPAREN");
              			RPARENGen_6Leaf.setValue(RPARENGen_6.getText());
              			RPARENGen_6Leaf.setPos(RPARENGen_6.getCharPositionInLine());
              			RPARENGen_6Leaf.setLine(RPARENGen_6.getLine());
              			pragma_declarationReturnNode.getChildren().add(RPARENGen_6Leaf);
              		}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			pragma_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pragma_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma_declaration

    public static class pragma_param_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start pragma_param
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11214:1: pragma_param returns [Node returnNode] : ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING | identifierGen+= identifier );
    public final pragma_param_return pragma_param() throws RecognitionException {
        pragma_param_return retval = new pragma_param_return();
        retval.start = input.LT(1);

        Token PLUSGen=null;
        Token MINUSGen=null;
        Token NUMBERGen=null;
        Token QUOTED_STRINGGen=null;
        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11215:1: ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING | identifierGen+= identifier )
            int alt243=3;
            switch ( input.LA(1) ) {
            case NUMBER:
            case PLUS:
            case MINUS:
                {
                alt243=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt243=2;
                }
                break;
            case ID:
            case DOUBLEQUOTED_STRING:
                {
                alt243=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("11214:1: pragma_param returns [Node returnNode] : ( (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER | QUOTED_STRINGGen= QUOTED_STRING | identifierGen+= identifier );", 243, 0, input);

                throw nvae;
            }

            switch (alt243) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11215:3: (PLUSGen= PLUS | MINUSGen= MINUS )? NUMBERGen= NUMBER
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11215:3: (PLUSGen= PLUS | MINUSGen= MINUS )?
                    int alt242=3;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==PLUS) ) {
                        alt242=1;
                    }
                    else if ( (LA242_0==MINUS) ) {
                        alt242=2;
                    }
                    switch (alt242) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11215:5: PLUSGen= PLUS
                            {
                            PLUSGen=(Token)input.LT(1);
                            match(input,PLUS,FOLLOW_PLUS_in_pragma_param8389); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11215:20: MINUSGen= MINUS
                            {
                            MINUSGen=(Token)input.LT(1);
                            match(input,MINUS,FOLLOW_MINUS_in_pragma_param8395); if (failed) return retval;

                            }
                            break;

                    }

                    NUMBERGen=(Token)input.LT(1);
                    match(input,NUMBER,FOLLOW_NUMBER_in_pragma_param8402); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pragma_paramReturnNode.setKind("pragma_param");
                      	    // Create a CST Leaf
                      		if(PLUSGen != null) {
                      			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			PLUSGenLeaf.setKind("PLUS");
                      			PLUSGenLeaf.setValue(PLUSGen.getText());
                      			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
                      			PLUSGenLeaf.setLine(PLUSGen.getLine());
                      			pragma_paramReturnNode.getChildren().add(PLUSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			MINUSGenLeaf.setKind("MINUS");
                      			MINUSGenLeaf.setValue(MINUSGen.getText());
                      			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
                      			MINUSGenLeaf.setLine(MINUSGen.getLine());
                      			pragma_paramReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			pragma_paramReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pragma_paramReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11250:4: QUOTED_STRINGGen= QUOTED_STRING
                    {
                    QUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pragma_param8413); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pragma_paramReturnNode.setKind("pragma_param");
                      	    // Create a CST Leaf
                      		if(QUOTED_STRINGGen != null) {
                      			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
                      			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
                      			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
                      			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
                      			pragma_paramReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pragma_paramReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11267:4: identifierGen+= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_pragma_param8424);
                    identifierGen=identifier();
                    _fsp--;
                    if (failed) return retval;
                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                    list_identifierGen.add(identifierGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node pragma_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pragma_paramReturnNode.setKind("pragma_param");
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	pragma_paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pragma_paramReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma_param

    public static class pragma_params_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start pragma_params
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11287:1: pragma_params returns [Node returnNode] : pragma_paramGen+= pragma_param (COMMAGen_List+= COMMA pragma_paramGen_1+= pragma_param )* ;
    public final pragma_params_return pragma_params() throws RecognitionException {
        pragma_params_return retval = new pragma_params_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_pragma_paramGen=null;
        List list_pragma_paramGen_1=null;
        RuleReturnScope pragma_paramGen = null;
        RuleReturnScope pragma_paramGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11288:1: (pragma_paramGen+= pragma_param (COMMAGen_List+= COMMA pragma_paramGen_1+= pragma_param )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11288:3: pragma_paramGen+= pragma_param (COMMAGen_List+= COMMA pragma_paramGen_1+= pragma_param )*
            {
            pushFollow(FOLLOW_pragma_param_in_pragma_params8446);
            pragma_paramGen=pragma_param();
            _fsp--;
            if (failed) return retval;
            if (list_pragma_paramGen==null) list_pragma_paramGen=new ArrayList();
            list_pragma_paramGen.add(pragma_paramGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11288:33: (COMMAGen_List+= COMMA pragma_paramGen_1+= pragma_param )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COMMA) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11288:35: COMMAGen_List+= COMMA pragma_paramGen_1+= pragma_param
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_pragma_params8452); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_pragma_param_in_pragma_params8456);
            	    pragma_paramGen_1=pragma_param();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_pragma_paramGen_1==null) list_pragma_paramGen_1=new ArrayList();
            	    list_pragma_paramGen_1.add(pragma_paramGen_1);


            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node pragma_paramsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pragma_paramsReturnNode.setKind("pragma_params");
              	    // Create a CST Node
              		if(list_pragma_paramGen != null) {
              	        for(Iterator it = list_pragma_paramGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pragma_param");
              	            	pragma_paramsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			pragma_paramsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_pragma_paramGen_1 != null) {		
              	    	PLSQL3Parser.pragma_param_return r = (PLSQL3Parser.pragma_param_return) list_pragma_paramGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("pragma_param");
              	    		pragma_paramsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pragma_paramsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma_params

    public static class proc_fun_start_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start proc_fun_start
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11333:1: proc_fun_start returns [Node returnNode] : TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )? ;
    public final proc_fun_start_return proc_fun_start() throws RecognitionException {
        proc_fun_start_return retval = new proc_fun_start_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_keyREPLACEGen=null;
        RuleReturnScope keyREPLACEGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11334:1: (TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11334:3: TK_0= 'CREATE' (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )?
            {
            TK_0=(Token)input.LT(1);
            match(input,74,FOLLOW_74_in_proc_fun_start8480); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11334:17: (TK_1= 'OR' keyREPLACEGen+= keyREPLACE )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==73) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11334:19: TK_1= 'OR' keyREPLACEGen+= keyREPLACE
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,73,FOLLOW_73_in_proc_fun_start8486); if (failed) return retval;
                    pushFollow(FOLLOW_keyREPLACE_in_proc_fun_start8490);
                    keyREPLACEGen=keyREPLACE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyREPLACEGen==null) list_keyREPLACEGen=new ArrayList();
                    list_keyREPLACEGen.add(keyREPLACEGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node proc_fun_startReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		proc_fun_startReturnNode.setKind("proc_fun_start");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		proc_fun_startReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		proc_fun_startReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyREPLACEGen != null) {
              	        for(Iterator it = list_keyREPLACEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREPLACE_return r = (PLSQL3Parser.keyREPLACE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREPLACE");
              	            	proc_fun_startReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = proc_fun_startReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end proc_fun_start

    public static class procedure_body_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start procedure_body
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11372:1: procedure_body returns [Node returnNode] : (proc_fun_startGen+= proc_fun_start )? TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* RPARENGen= RPAREN )? (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )* )? TK_5= 'END' (procedure_nameGen_1+= procedure_name )? SEMIGen= SEMI ;
    public final procedure_body_return procedure_body() throws RecognitionException {
        procedure_body_return retval = new procedure_body_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token SEMIGen=null;
        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_proc_fun_startGen=null;
        List list_procedure_nameGen=null;
        List list_argumentGen=null;
        List list_argumentGen_1=null;
        List list_declare_specGen=null;
        List list_seq_of_statementsGen=null;
        List list_exception_handlerGen=null;
        List list_procedure_nameGen_1=null;
        RuleReturnScope proc_fun_startGen = null;
        RuleReturnScope procedure_nameGen = null;
        RuleReturnScope argumentGen = null;
        RuleReturnScope argumentGen_1 = null;
        RuleReturnScope declare_specGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        RuleReturnScope exception_handlerGen = null;
        RuleReturnScope procedure_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11373:1: ( (proc_fun_startGen+= proc_fun_start )? TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* RPARENGen= RPAREN )? (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )* )? TK_5= 'END' (procedure_nameGen_1+= procedure_name )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11373:3: (proc_fun_startGen+= proc_fun_start )? TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* RPARENGen= RPAREN )? (TK_1= 'IS' | TK_2= 'AS' ) (declare_specGen+= declare_spec )* (TK_3= 'BEGIN' ) (seq_of_statementsGen+= seq_of_statements ) (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )* )? TK_5= 'END' (procedure_nameGen_1+= procedure_name )? SEMIGen= SEMI
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11373:3: (proc_fun_startGen+= proc_fun_start )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==74) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11373:5: proc_fun_startGen+= proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_procedure_body8516);
                    proc_fun_startGen=proc_fun_start();
                    _fsp--;
                    if (failed) return retval;
                    if (list_proc_fun_startGen==null) list_proc_fun_startGen=new ArrayList();
                    list_proc_fun_startGen.add(proc_fun_startGen);


                    }
                    break;

            }

            TK_0=(Token)input.LT(1);
            match(input,144,FOLLOW_144_in_procedure_body8523); if (failed) return retval;
            pushFollow(FOLLOW_procedure_name_in_procedure_body8527);
            procedure_nameGen=procedure_name();
            _fsp--;
            if (failed) return retval;
            if (list_procedure_nameGen==null) list_procedure_nameGen=new ArrayList();
            list_procedure_nameGen.add(procedure_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11374:3: (LPARENGen= LPAREN argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* RPARENGen= RPAREN )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==LPAREN) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11374:5: LPARENGen= LPAREN argumentGen+= argument (COMMAGen_List+= COMMA argumentGen_1+= argument )* RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_procedure_body8536); if (failed) return retval;
                    pushFollow(FOLLOW_argument_in_procedure_body8540);
                    argumentGen=argument();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentGen==null) list_argumentGen=new ArrayList();
                    list_argumentGen.add(argumentGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11374:44: (COMMAGen_List+= COMMA argumentGen_1+= argument )*
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);

                        if ( (LA247_0==COMMA) ) {
                            alt247=1;
                        }


                        switch (alt247) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11374:46: COMMAGen_List+= COMMA argumentGen_1+= argument
                    	    {
                    	    COMMAGen_List=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_procedure_body8546); if (failed) return retval;
                    	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
                    	    list_COMMAGen_List.add(COMMAGen_List);

                    	    pushFollow(FOLLOW_argument_in_procedure_body8550);
                    	    argumentGen_1=argument();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_argumentGen_1==null) list_argumentGen_1=new ArrayList();
                    	    list_argumentGen_1.add(argumentGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop247;
                        }
                    } while (true);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_procedure_body8557); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11375:3: (TK_1= 'IS' | TK_2= 'AS' )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==68) ) {
                alt249=1;
            }
            else if ( (LA249_0==50) ) {
                alt249=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("11375:3: (TK_1= 'IS' | TK_2= 'AS' )", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11375:5: TK_1= 'IS'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_procedure_body8569); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11375:17: TK_2= 'AS'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_procedure_body8575); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11377:3: (declare_specGen+= declare_spec )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( ((LA250_0>=ID && LA250_0<=DOUBLEQUOTED_STRING)||LA250_0==74||LA250_0==120||LA250_0==144||LA250_0==233||LA250_0==245||LA250_0==258||LA250_0==260) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11377:5: declare_specGen+= declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_procedure_body8588);
            	    declare_specGen=declare_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_declare_specGen==null) list_declare_specGen=new ArrayList();
            	    list_declare_specGen.add(declare_specGen);


            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11378:3: (TK_3= 'BEGIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11378:5: TK_3= 'BEGIN'
            {
            TK_3=(Token)input.LT(1);
            match(input,53,FOLLOW_53_in_procedure_body8600); if (failed) return retval;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11379:3: (seq_of_statementsGen+= seq_of_statements )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11379:5: seq_of_statementsGen+= seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_procedure_body8610);
            seq_of_statementsGen=seq_of_statements();
            _fsp--;
            if (failed) return retval;
            if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            list_seq_of_statementsGen.add(seq_of_statementsGen);


            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11380:3: (TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )* )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==54) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11380:5: TK_4= 'EXCEPTION' (exception_handlerGen+= exception_handler )*
                    {
                    TK_4=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_procedure_body8620); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11380:22: (exception_handlerGen+= exception_handler )*
                    loop251:
                    do {
                        int alt251=2;
                        int LA251_0 = input.LA(1);

                        if ( (LA251_0==116) ) {
                            alt251=1;
                        }


                        switch (alt251) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11380:24: exception_handlerGen+= exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_procedure_body8626);
                    	    exception_handlerGen=exception_handler();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_exception_handlerGen==null) list_exception_handlerGen=new ArrayList();
                    	    list_exception_handlerGen.add(exception_handlerGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop251;
                        }
                    } while (true);


                    }
                    break;

            }

            TK_5=(Token)input.LT(1);
            match(input,55,FOLLOW_55_in_procedure_body8638); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11381:14: (procedure_nameGen_1+= procedure_name )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( ((LA253_0>=QUOTED_STRING && LA253_0<=DOUBLEQUOTED_STRING)) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11381:16: procedure_nameGen_1+= procedure_name
                    {
                    pushFollow(FOLLOW_procedure_name_in_procedure_body8644);
                    procedure_nameGen_1=procedure_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_procedure_nameGen_1==null) list_procedure_nameGen_1=new ArrayList();
                    list_procedure_nameGen_1.add(procedure_nameGen_1);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_procedure_body8651); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node procedure_bodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedure_bodyReturnNode.setKind("procedure_body");
              	    // Create a CST Node
              		if(list_proc_fun_startGen != null) {
              	        for(Iterator it = list_proc_fun_startGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.proc_fun_start_return r = (PLSQL3Parser.proc_fun_start_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("proc_fun_start");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_procedure_nameGen != null) {
              	        for(Iterator it = list_procedure_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedure_name");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			procedure_bodyReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentGen != null) {
              	        for(Iterator it = list_argumentGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("argument");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			procedure_bodyReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_argumentGen_1 != null) {		
              	    	PLSQL3Parser.argument_return r = (PLSQL3Parser.argument_return) list_argumentGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("argument");
              	    		procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			procedure_bodyReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		procedure_bodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		procedure_bodyReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_declare_specGen != null) {
              	        for(Iterator it = list_declare_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.declare_spec_return r = (PLSQL3Parser.declare_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("declare_spec");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		procedure_bodyReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_seq_of_statementsGen != null) {
              	        for(Iterator it = list_seq_of_statementsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("seq_of_statements");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		procedure_bodyReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exception_handlerGen != null) {
              	        for(Iterator it = list_exception_handlerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_handler_return r = (PLSQL3Parser.exception_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_handler");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		procedure_bodyReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_procedure_nameGen_1 != null) {
              	        for(Iterator it = list_procedure_nameGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedure_name");
              	            	procedure_bodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			procedure_bodyReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedure_bodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end procedure_body

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start procedure_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11558:1: procedure_declaration returns [Node returnNode] : procedure_bodyGen+= procedure_body ;
    public final procedure_declaration_return procedure_declaration() throws RecognitionException {
        procedure_declaration_return retval = new procedure_declaration_return();
        retval.start = input.LT(1);

        List list_procedure_bodyGen=null;
        RuleReturnScope procedure_bodyGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11559:1: (procedure_bodyGen+= procedure_body )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11559:3: procedure_bodyGen+= procedure_body
            {
            pushFollow(FOLLOW_procedure_body_in_procedure_declaration8672);
            procedure_bodyGen=procedure_body();
            _fsp--;
            if (failed) return retval;
            if (list_procedure_bodyGen==null) list_procedure_bodyGen=new ArrayList();
            list_procedure_bodyGen.add(procedure_bodyGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node procedure_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedure_declarationReturnNode.setKind("procedure_declaration");
              	    // Create a CST Node
              		if(list_procedure_bodyGen != null) {
              	        for(Iterator it = list_procedure_bodyGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.procedure_body_return r = (PLSQL3Parser.procedure_body_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedure_body");
              	            	procedure_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedure_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end procedure_declaration

    public static class procedure_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start procedure_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11579:1: procedure_name returns [Node returnNode] : (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING );
    public final procedure_name_return procedure_name() throws RecognitionException {
        procedure_name_return retval = new procedure_name_return();
        retval.start = input.LT(1);

        Token QUOTED_STRINGGen=null;
        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11580:1: (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING )
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=ID && LA254_0<=DOUBLEQUOTED_STRING)) ) {
                alt254=1;
            }
            else if ( (LA254_0==QUOTED_STRING) ) {
                alt254=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("11579:1: procedure_name returns [Node returnNode] : (identifierGen+= identifier | QUOTED_STRINGGen= QUOTED_STRING );", 254, 0, input);

                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11580:3: identifierGen+= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_procedure_name8693);
                    identifierGen=identifier();
                    _fsp--;
                    if (failed) return retval;
                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                    list_identifierGen.add(identifierGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node procedure_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		procedure_nameReturnNode.setKind("procedure_name");
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	procedure_nameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = procedure_nameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11597:6: QUOTED_STRINGGen= QUOTED_STRING
                    {
                    QUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_procedure_name8703); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node procedure_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		procedure_nameReturnNode.setKind("procedure_name");
                      	    // Create a CST Leaf
                      		if(QUOTED_STRINGGen != null) {
                      			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
                      			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
                      			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
                      			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
                      			procedure_nameReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = procedure_nameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end procedure_name

    public static class procedure_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start procedure_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11616:1: procedure_spec returns [Node returnNode] : TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? SEMIGen= SEMI ;
    public final procedure_spec_return procedure_spec() throws RecognitionException {
        procedure_spec_return retval = new procedure_spec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token SEMIGen=null;
        List list_procedure_nameGen=null;
        List list_argumentsGen=null;
        RuleReturnScope procedure_nameGen = null;
        RuleReturnScope argumentsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11617:1: (TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11618:2: TK_0= 'PROCEDURE' procedure_nameGen+= procedure_name (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )? SEMIGen= SEMI
            {
            TK_0=(Token)input.LT(1);
            match(input,144,FOLLOW_144_in_procedure_spec8727); if (failed) return retval;
            pushFollow(FOLLOW_procedure_name_in_procedure_spec8731);
            procedure_nameGen=procedure_name();
            _fsp--;
            if (failed) return retval;
            if (list_procedure_nameGen==null) list_procedure_nameGen=new ArrayList();
            list_procedure_nameGen.add(procedure_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11619:2: (LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==LPAREN) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11619:4: LPARENGen= LPAREN argumentsGen+= arguments RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_procedure_spec8739); if (failed) return retval;
                    pushFollow(FOLLOW_arguments_in_procedure_spec8743);
                    argumentsGen=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_procedure_spec8747); if (failed) return retval;

                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_procedure_spec8754); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node procedure_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedure_specReturnNode.setKind("procedure_spec");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		procedure_specReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_procedure_nameGen != null) {
              	        for(Iterator it = list_procedure_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.procedure_name_return r = (PLSQL3Parser.procedure_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedure_name");
              	            	procedure_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			procedure_specReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.arguments_return r = (PLSQL3Parser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	procedure_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			procedure_specReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			procedure_specReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedure_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end procedure_spec

    public static class query_partition_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start query_partition_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11685:1: query_partition_clause returns [Node returnNode] : keyPARTITIONGen+= keyPARTITION TK_0= 'BY' expression_listGen+= expression_list ;
    public final query_partition_clause_return query_partition_clause() throws RecognitionException {
        query_partition_clause_return retval = new query_partition_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_keyPARTITIONGen=null;
        List list_expression_listGen=null;
        RuleReturnScope keyPARTITIONGen = null;
        RuleReturnScope expression_listGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11686:1: (keyPARTITIONGen+= keyPARTITION TK_0= 'BY' expression_listGen+= expression_list )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11686:3: keyPARTITIONGen+= keyPARTITION TK_0= 'BY' expression_listGen+= expression_list
            {
            pushFollow(FOLLOW_keyPARTITION_in_query_partition_clause8775);
            keyPARTITIONGen=keyPARTITION();
            _fsp--;
            if (failed) return retval;
            if (list_keyPARTITIONGen==null) list_keyPARTITIONGen=new ArrayList();
            list_keyPARTITIONGen.add(keyPARTITIONGen);

            TK_0=(Token)input.LT(1);
            match(input,125,FOLLOW_125_in_query_partition_clause8779); if (failed) return retval;
            pushFollow(FOLLOW_expression_list_in_query_partition_clause8783);
            expression_listGen=expression_list();
            _fsp--;
            if (failed) return retval;
            if (list_expression_listGen==null) list_expression_listGen=new ArrayList();
            list_expression_listGen.add(expression_listGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node query_partition_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		query_partition_clauseReturnNode.setKind("query_partition_clause");
              	    // Create a CST Node
              		if(list_keyPARTITIONGen != null) {
              	        for(Iterator it = list_keyPARTITIONGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyPARTITION_return r = (PLSQL3Parser.keyPARTITION_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyPARTITION");
              	            	query_partition_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		query_partition_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expression_listGen != null) {
              	        for(Iterator it = list_expression_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expression_list_return r = (PLSQL3Parser.expression_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression_list");
              	            	query_partition_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = query_partition_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end query_partition_clause

    public static class quoted_string_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start quoted_string
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11725:1: quoted_string returns [Node returnNode] : QUOTED_STRINGGen= QUOTED_STRING ;
    public final quoted_string_return quoted_string() throws RecognitionException {
        quoted_string_return retval = new quoted_string_return();
        retval.start = input.LT(1);

        Token QUOTED_STRINGGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11726:1: (QUOTED_STRINGGen= QUOTED_STRING )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11726:3: QUOTED_STRINGGen= QUOTED_STRING
            {
            QUOTED_STRINGGen=(Token)input.LT(1);
            match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_quoted_string8804); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node quoted_stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		quoted_stringReturnNode.setKind("quoted_string");
              	    // Create a CST Leaf
              		if(QUOTED_STRINGGen != null) {
              			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
              			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
              			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
              			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
              			quoted_stringReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = quoted_stringReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end quoted_string

    public static class raise_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start raise_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11745:1: raise_statement returns [Node returnNode] : keyRAISEGen+= keyRAISE (exception_nameGen+= exception_name )? ;
    public final raise_statement_return raise_statement() throws RecognitionException {
        raise_statement_return retval = new raise_statement_return();
        retval.start = input.LT(1);

        List list_keyRAISEGen=null;
        List list_exception_nameGen=null;
        RuleReturnScope keyRAISEGen = null;
        RuleReturnScope exception_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11746:1: (keyRAISEGen+= keyRAISE (exception_nameGen+= exception_name )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11746:3: keyRAISEGen+= keyRAISE (exception_nameGen+= exception_name )?
            {
            pushFollow(FOLLOW_keyRAISE_in_raise_statement8825);
            keyRAISEGen=keyRAISE();
            _fsp--;
            if (failed) return retval;
            if (list_keyRAISEGen==null) list_keyRAISEGen=new ArrayList();
            list_keyRAISEGen.add(keyRAISEGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11746:25: (exception_nameGen+= exception_name )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( ((LA256_0>=ID && LA256_0<=DOUBLEQUOTED_STRING)) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11746:27: exception_nameGen+= exception_name
                    {
                    pushFollow(FOLLOW_exception_name_in_raise_statement8831);
                    exception_nameGen=exception_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exception_nameGen==null) list_exception_nameGen=new ArrayList();
                    list_exception_nameGen.add(exception_nameGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node raise_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		raise_statementReturnNode.setKind("raise_statement");
              	    // Create a CST Node
              		if(list_keyRAISEGen != null) {
              	        for(Iterator it = list_keyRAISEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRAISE_return r = (PLSQL3Parser.keyRAISE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRAISE");
              	            	raise_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_exception_nameGen != null) {
              	        for(Iterator it = list_exception_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.exception_name_return r = (PLSQL3Parser.exception_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exception_name");
              	            	raise_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = raise_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end raise_statement

    public static class record_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start record_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11776:1: record_declaration returns [Node returnNode] : record_type_decGen+= record_type_dec ;
    public final record_declaration_return record_declaration() throws RecognitionException {
        record_declaration_return retval = new record_declaration_return();
        retval.start = input.LT(1);

        List list_record_type_decGen=null;
        RuleReturnScope record_type_decGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11777:1: (record_type_decGen+= record_type_dec )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11777:3: record_type_decGen+= record_type_dec
            {
            pushFollow(FOLLOW_record_type_dec_in_record_declaration8855);
            record_type_decGen=record_type_dec();
            _fsp--;
            if (failed) return retval;
            if (list_record_type_decGen==null) list_record_type_decGen=new ArrayList();
            list_record_type_decGen.add(record_type_decGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node record_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		record_declarationReturnNode.setKind("record_declaration");
              	    // Create a CST Node
              		if(list_record_type_decGen != null) {
              	        for(Iterator it = list_record_type_decGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.record_type_dec_return r = (PLSQL3Parser.record_type_dec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("record_type_dec");
              	            	record_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = record_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end record_declaration

    public static class record_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start record_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11798:1: record_name returns [Node returnNode] : identifierGen+= identifier ;
    public final record_name_return record_name() throws RecognitionException {
        record_name_return retval = new record_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11799:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11799:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_record_name8878);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node record_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		record_nameReturnNode.setKind("record_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	record_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = record_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end record_name

    public static class record_type_dec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start record_type_dec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11819:1: record_type_dec returns [Node returnNode] : keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' keyRECORDGen+= keyRECORD LPARENGen= LPAREN field_specsGen+= field_specs RPARENGen= RPAREN SEMIGen= SEMI ;
    public final record_type_dec_return record_type_dec() throws RecognitionException {
        record_type_dec_return retval = new record_type_dec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token SEMIGen=null;
        List list_keyTYPEGen=null;
        List list_type_nameGen=null;
        List list_keyRECORDGen=null;
        List list_field_specsGen=null;
        RuleReturnScope keyTYPEGen = null;
        RuleReturnScope type_nameGen = null;
        RuleReturnScope keyRECORDGen = null;
        RuleReturnScope field_specsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11820:1: (keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' keyRECORDGen+= keyRECORD LPARENGen= LPAREN field_specsGen+= field_specs RPARENGen= RPAREN SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11820:3: keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' keyRECORDGen+= keyRECORD LPARENGen= LPAREN field_specsGen+= field_specs RPARENGen= RPAREN SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyTYPE_in_record_type_dec8899);
            keyTYPEGen=keyTYPE();
            _fsp--;
            if (failed) return retval;
            if (list_keyTYPEGen==null) list_keyTYPEGen=new ArrayList();
            list_keyTYPEGen.add(keyTYPEGen);

            pushFollow(FOLLOW_type_name_in_record_type_dec8903);
            type_nameGen=type_name();
            _fsp--;
            if (failed) return retval;
            if (list_type_nameGen==null) list_type_nameGen=new ArrayList();
            list_type_nameGen.add(type_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_record_type_dec8907); if (failed) return retval;
            pushFollow(FOLLOW_keyRECORD_in_record_type_dec8911);
            keyRECORDGen=keyRECORD();
            _fsp--;
            if (failed) return retval;
            if (list_keyRECORDGen==null) list_keyRECORDGen=new ArrayList();
            list_keyRECORDGen.add(keyRECORDGen);

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_record_type_dec8918); if (failed) return retval;
            pushFollow(FOLLOW_field_specs_in_record_type_dec8922);
            field_specsGen=field_specs();
            _fsp--;
            if (failed) return retval;
            if (list_field_specsGen==null) list_field_specsGen=new ArrayList();
            list_field_specsGen.add(field_specsGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_record_type_dec8926); if (failed) return retval;
            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_record_type_dec8930); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node record_type_decReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		record_type_decReturnNode.setKind("record_type_dec");
              	    // Create a CST Node
              		if(list_keyTYPEGen != null) {
              	        for(Iterator it = list_keyTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTYPE");
              	            	record_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_nameGen != null) {
              	        for(Iterator it = list_type_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_name");
              	            	record_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		record_type_decReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyRECORDGen != null) {
              	        for(Iterator it = list_keyRECORDGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRECORD_return r = (PLSQL3Parser.keyRECORD_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRECORD");
              	            	record_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			record_type_decReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_field_specsGen != null) {
              	        for(Iterator it = list_field_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.field_specs_return r = (PLSQL3Parser.field_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("field_specs");
              	            	record_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			record_type_decReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			record_type_decReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = record_type_decReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end record_type_dec

    public static class reference_model_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start reference_model
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11907:1: reference_model returns [Node returnNode] : keyREFERENCEGen+= keyREFERENCE reference_model_nameGen+= reference_model_name TK_0= 'ON' LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options ) ;
    public final reference_model_return reference_model() throws RecognitionException {
        reference_model_return retval = new reference_model_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_keyREFERENCEGen=null;
        List list_reference_model_nameGen=null;
        List list_subqueryGen=null;
        List list_model_column_clausesGen=null;
        List list_cell_reference_optionsGen=null;
        RuleReturnScope keyREFERENCEGen = null;
        RuleReturnScope reference_model_nameGen = null;
        RuleReturnScope subqueryGen = null;
        RuleReturnScope model_column_clausesGen = null;
        RuleReturnScope cell_reference_optionsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11908:1: (keyREFERENCEGen+= keyREFERENCE reference_model_nameGen+= reference_model_name TK_0= 'ON' LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11908:3: keyREFERENCEGen+= keyREFERENCE reference_model_nameGen+= reference_model_name TK_0= 'ON' LPARENGen= LPAREN subqueryGen+= subquery RPARENGen= RPAREN model_column_clausesGen+= model_column_clauses (cell_reference_optionsGen+= cell_reference_options )
            {
            pushFollow(FOLLOW_keyREFERENCE_in_reference_model8951);
            keyREFERENCEGen=keyREFERENCE();
            _fsp--;
            if (failed) return retval;
            if (list_keyREFERENCEGen==null) list_keyREFERENCEGen=new ArrayList();
            list_keyREFERENCEGen.add(keyREFERENCEGen);

            pushFollow(FOLLOW_reference_model_name_in_reference_model8955);
            reference_model_nameGen=reference_model_name();
            _fsp--;
            if (failed) return retval;
            if (list_reference_model_nameGen==null) list_reference_model_nameGen=new ArrayList();
            list_reference_model_nameGen.add(reference_model_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,128,FOLLOW_128_in_reference_model8959); if (failed) return retval;
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_reference_model8963); if (failed) return retval;
            pushFollow(FOLLOW_subquery_in_reference_model8967);
            subqueryGen=subquery();
            _fsp--;
            if (failed) return retval;
            if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
            list_subqueryGen.add(subqueryGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_reference_model8971); if (failed) return retval;
            pushFollow(FOLLOW_model_column_clauses_in_reference_model8977);
            model_column_clausesGen=model_column_clauses();
            _fsp--;
            if (failed) return retval;
            if (list_model_column_clausesGen==null) list_model_column_clausesGen=new ArrayList();
            list_model_column_clausesGen.add(model_column_clausesGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11909:49: (cell_reference_optionsGen+= cell_reference_options )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11909:51: cell_reference_optionsGen+= cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_reference_model8983);
            cell_reference_optionsGen=cell_reference_options();
            _fsp--;
            if (failed) return retval;
            if (list_cell_reference_optionsGen==null) list_cell_reference_optionsGen=new ArrayList();
            list_cell_reference_optionsGen.add(cell_reference_optionsGen);


            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node reference_modelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		reference_modelReturnNode.setKind("reference_model");
              	    // Create a CST Node
              		if(list_keyREFERENCEGen != null) {
              	        for(Iterator it = list_keyREFERENCEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREFERENCE_return r = (PLSQL3Parser.keyREFERENCE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREFERENCE");
              	            	reference_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_reference_model_nameGen != null) {
              	        for(Iterator it = list_reference_model_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.reference_model_name_return r = (PLSQL3Parser.reference_model_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("reference_model_name");
              	            	reference_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		reference_modelReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			reference_modelReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	reference_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			reference_modelReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_model_column_clausesGen != null) {
              	        for(Iterator it = list_model_column_clausesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_column_clauses_return r = (PLSQL3Parser.model_column_clauses_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_column_clauses");
              	            	reference_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cell_reference_optionsGen != null) {
              	        for(Iterator it = list_cell_reference_optionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cell_reference_options_return r = (PLSQL3Parser.cell_reference_options_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cell_reference_options");
              	            	reference_modelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = reference_modelReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end reference_model

    public static class reference_model_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start reference_model_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11995:1: reference_model_name returns [Node returnNode] : identifierGen+= identifier ;
    public final reference_model_name_return reference_model_name() throws RecognitionException {
        reference_model_name_return retval = new reference_model_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11996:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:11996:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_reference_model_name9005);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node reference_model_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		reference_model_nameReturnNode.setKind("reference_model_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	reference_model_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = reference_model_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end reference_model_name

    public static class return_rows_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start return_rows_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12016:1: return_rows_clause returns [Node returnNode] : keyRETURNGen+= keyRETURN (keyUPDATEDGen+= keyUPDATED | TK_0= 'ALL' ) TK_1= 'ROWS' ;
    public final return_rows_clause_return return_rows_clause() throws RecognitionException {
        return_rows_clause_return retval = new return_rows_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_keyRETURNGen=null;
        List list_keyUPDATEDGen=null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope keyUPDATEDGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12017:1: (keyRETURNGen+= keyRETURN (keyUPDATEDGen+= keyUPDATED | TK_0= 'ALL' ) TK_1= 'ROWS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12017:3: keyRETURNGen+= keyRETURN (keyUPDATEDGen+= keyUPDATED | TK_0= 'ALL' ) TK_1= 'ROWS'
            {
            pushFollow(FOLLOW_keyRETURN_in_return_rows_clause9026);
            keyRETURNGen=keyRETURN();
            _fsp--;
            if (failed) return retval;
            if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
            list_keyRETURNGen.add(keyRETURNGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12017:27: (keyUPDATEDGen+= keyUPDATED | TK_0= 'ALL' )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==220) ) {
                alt257=1;
            }
            else if ( (LA257_0==67) ) {
                alt257=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("12017:27: (keyUPDATEDGen+= keyUPDATED | TK_0= 'ALL' )", 257, 0, input);

                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12017:29: keyUPDATEDGen+= keyUPDATED
                    {
                    pushFollow(FOLLOW_keyUPDATED_in_return_rows_clause9032);
                    keyUPDATEDGen=keyUPDATED();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyUPDATEDGen==null) list_keyUPDATEDGen=new ArrayList();
                    list_keyUPDATEDGen.add(keyUPDATEDGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12017:57: TK_0= 'ALL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_return_rows_clause9038); if (failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)input.LT(1);
            match(input,145,FOLLOW_145_in_return_rows_clause9044); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node return_rows_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		return_rows_clauseReturnNode.setKind("return_rows_clause");
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	return_rows_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyUPDATEDGen != null) {
              	        for(Iterator it = list_keyUPDATEDGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyUPDATED_return r = (PLSQL3Parser.keyUPDATED_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyUPDATED");
              	            	return_rows_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		return_rows_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		return_rows_clauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = return_rows_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end return_rows_clause

    public static class return_type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start return_type
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12065:1: return_type returns [Node returnNode] : type_specGen+= type_spec ;
    public final return_type_return return_type() throws RecognitionException {
        return_type_return retval = new return_type_return();
        retval.start = input.LT(1);

        List list_type_specGen=null;
        RuleReturnScope type_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12066:1: (type_specGen+= type_spec )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12066:3: type_specGen+= type_spec
            {
            pushFollow(FOLLOW_type_spec_in_return_type9065);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node return_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		return_typeReturnNode.setKind("return_type");
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	return_typeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = return_typeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end return_type

    public static class returning_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start returning_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12086:1: returning_clause returns [Node returnNode] : (keyRETURNGen+= keyRETURN | keyRETURNINGGen+= keyRETURNING ) select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? TK_0= 'INTO' lvaluesGen+= lvalues ;
    public final returning_clause_return returning_clause() throws RecognitionException {
        returning_clause_return retval = new returning_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_keyRETURNGen=null;
        List list_keyRETURNINGGen=null;
        List list_select_listGen=null;
        List list_keyBULKGen=null;
        List list_keyCOLLECTGen=null;
        List list_lvaluesGen=null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope keyRETURNINGGen = null;
        RuleReturnScope select_listGen = null;
        RuleReturnScope keyBULKGen = null;
        RuleReturnScope keyCOLLECTGen = null;
        RuleReturnScope lvaluesGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:1: ( (keyRETURNGen+= keyRETURN | keyRETURNINGGen+= keyRETURNING ) select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? TK_0= 'INTO' lvaluesGen+= lvalues )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:3: (keyRETURNGen+= keyRETURN | keyRETURNINGGen+= keyRETURNING ) select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? TK_0= 'INTO' lvaluesGen+= lvalues
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:3: (keyRETURNGen+= keyRETURN | keyRETURNINGGen+= keyRETURNING )
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==253) ) {
                alt258=1;
            }
            else if ( (LA258_0==254) ) {
                alt258=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("12087:3: (keyRETURNGen+= keyRETURN | keyRETURNINGGen+= keyRETURNING )", 258, 0, input);

                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:5: keyRETURNGen+= keyRETURN
                    {
                    pushFollow(FOLLOW_keyRETURN_in_returning_clause9088);
                    keyRETURNGen=keyRETURN();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
                    list_keyRETURNGen.add(keyRETURNGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:31: keyRETURNINGGen+= keyRETURNING
                    {
                    pushFollow(FOLLOW_keyRETURNING_in_returning_clause9094);
                    keyRETURNINGGen=keyRETURNING();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRETURNINGGen==null) list_keyRETURNINGGen=new ArrayList();
                    list_keyRETURNINGGen.add(keyRETURNINGGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_select_list_in_returning_clause9100);
            select_listGen=select_list();
            _fsp--;
            if (failed) return retval;
            if (list_select_listGen==null) list_select_listGen=new ArrayList();
            list_select_listGen.add(select_listGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:91: (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==229) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12087:93: keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_returning_clause9106);
                    keyBULKGen=keyBULK();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyBULKGen==null) list_keyBULKGen=new ArrayList();
                    list_keyBULKGen.add(keyBULKGen);

                    pushFollow(FOLLOW_keyCOLLECT_in_returning_clause9110);
                    keyCOLLECTGen=keyCOLLECT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyCOLLECTGen==null) list_keyCOLLECTGen=new ArrayList();
                    list_keyCOLLECTGen.add(keyCOLLECTGen);


                    }
                    break;

            }

            TK_0=(Token)input.LT(1);
            match(input,119,FOLLOW_119_in_returning_clause9117); if (failed) return retval;
            pushFollow(FOLLOW_lvalues_in_returning_clause9121);
            lvaluesGen=lvalues();
            _fsp--;
            if (failed) return retval;
            if (list_lvaluesGen==null) list_lvaluesGen=new ArrayList();
            list_lvaluesGen.add(lvaluesGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node returning_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		returning_clauseReturnNode.setKind("returning_clause");
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyRETURNINGGen != null) {
              	        for(Iterator it = list_keyRETURNINGGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURNING_return r = (PLSQL3Parser.keyRETURNING_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURNING");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_select_listGen != null) {
              	        for(Iterator it = list_select_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_list_return r = (PLSQL3Parser.select_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_list");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyBULKGen != null) {
              	        for(Iterator it = list_keyBULKGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyBULK_return r = (PLSQL3Parser.keyBULK_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyBULK");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyCOLLECTGen != null) {
              	        for(Iterator it = list_keyCOLLECTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCOLLECT_return r = (PLSQL3Parser.keyCOLLECT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCOLLECT");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		returning_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_lvaluesGen != null) {
              	        for(Iterator it = list_lvaluesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.lvalues_return r = (PLSQL3Parser.lvalues_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("lvalues");
              	            	returning_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = returning_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end returning_clause

    public static class return_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start return_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12166:1: return_statement returns [Node returnNode] : keyRETURNGen+= keyRETURN (plsql_expressionGen+= plsql_expression )? ;
    public final return_statement_return return_statement() throws RecognitionException {
        return_statement_return retval = new return_statement_return();
        retval.start = input.LT(1);

        List list_keyRETURNGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope keyRETURNGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12167:1: (keyRETURNGen+= keyRETURN (plsql_expressionGen+= plsql_expression )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12167:3: keyRETURNGen+= keyRETURN (plsql_expressionGen+= plsql_expression )?
            {
            pushFollow(FOLLOW_keyRETURN_in_return_statement9142);
            keyRETURNGen=keyRETURN();
            _fsp--;
            if (failed) return retval;
            if (list_keyRETURNGen==null) list_keyRETURNGen=new ArrayList();
            list_keyRETURNGen.add(keyRETURNGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12167:27: (plsql_expressionGen+= plsql_expression )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==LPAREN||LA260_0==NUMBER||(LA260_0>=QUOTED_STRING && LA260_0<=MINUS)||LA260_0==COLON||(LA260_0>=56 && LA260_0<=58)||LA260_0==62||LA260_0==69||LA260_0==110||LA260_0==121||LA260_0==148||LA260_0==153||LA260_0==158||LA260_0==233) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12167:29: plsql_expressionGen+= plsql_expression
                    {
                    pushFollow(FOLLOW_plsql_expression_in_return_statement9148);
                    plsql_expressionGen=plsql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
                    list_plsql_expressionGen.add(plsql_expressionGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node return_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		return_statementReturnNode.setKind("return_statement");
              	    // Create a CST Node
              		if(list_keyRETURNGen != null) {
              	        for(Iterator it = list_keyRETURNGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRETURN_return r = (PLSQL3Parser.keyRETURN_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRETURN");
              	            	return_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	return_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = return_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end return_statement

    public static class rollback_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start rollback_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12197:1: rollback_statement returns [Node returnNode] : keyROLLBACKGen+= keyROLLBACK (keyWORKGen+= keyWORK )? (TK_0= 'TO' (TK_1= 'SAVEPOINT' )? savepoint_nameGen+= savepoint_name )? (TK_2= 'COMMENT' quoted_stringGen+= quoted_string )? ;
    public final rollback_statement_return rollback_statement() throws RecognitionException {
        rollback_statement_return retval = new rollback_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_keyROLLBACKGen=null;
        List list_keyWORKGen=null;
        List list_savepoint_nameGen=null;
        List list_quoted_stringGen=null;
        RuleReturnScope keyROLLBACKGen = null;
        RuleReturnScope keyWORKGen = null;
        RuleReturnScope savepoint_nameGen = null;
        RuleReturnScope quoted_stringGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12198:1: (keyROLLBACKGen+= keyROLLBACK (keyWORKGen+= keyWORK )? (TK_0= 'TO' (TK_1= 'SAVEPOINT' )? savepoint_nameGen+= savepoint_name )? (TK_2= 'COMMENT' quoted_stringGen+= quoted_string )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12198:3: keyROLLBACKGen+= keyROLLBACK (keyWORKGen+= keyWORK )? (TK_0= 'TO' (TK_1= 'SAVEPOINT' )? savepoint_nameGen+= savepoint_name )? (TK_2= 'COMMENT' quoted_stringGen+= quoted_string )?
            {
            pushFollow(FOLLOW_keyROLLBACK_in_rollback_statement9172);
            keyROLLBACKGen=keyROLLBACK();
            _fsp--;
            if (failed) return retval;
            if (list_keyROLLBACKGen==null) list_keyROLLBACKGen=new ArrayList();
            list_keyROLLBACKGen.add(keyROLLBACKGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12198:31: (keyWORKGen+= keyWORK )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==265) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12198:33: keyWORKGen+= keyWORK
                    {
                    pushFollow(FOLLOW_keyWORK_in_rollback_statement9178);
                    keyWORKGen=keyWORK();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyWORKGen==null) list_keyWORKGen=new ArrayList();
                    list_keyWORKGen.add(keyWORKGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12199:3: (TK_0= 'TO' (TK_1= 'SAVEPOINT' )? savepoint_nameGen+= savepoint_name )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==88) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12199:5: TK_0= 'TO' (TK_1= 'SAVEPOINT' )? savepoint_nameGen+= savepoint_name
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_rollback_statement9189); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12199:15: (TK_1= 'SAVEPOINT' )?
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==146) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12199:17: TK_1= 'SAVEPOINT'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,146,FOLLOW_146_in_rollback_statement9195); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_savepoint_name_in_rollback_statement9202);
                    savepoint_nameGen=savepoint_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_savepoint_nameGen==null) list_savepoint_nameGen=new ArrayList();
                    list_savepoint_nameGen.add(savepoint_nameGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12200:3: (TK_2= 'COMMENT' quoted_stringGen+= quoted_string )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==147) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12200:5: TK_2= 'COMMENT' quoted_stringGen+= quoted_string
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,147,FOLLOW_147_in_rollback_statement9213); if (failed) return retval;
                    pushFollow(FOLLOW_quoted_string_in_rollback_statement9217);
                    quoted_stringGen=quoted_string();
                    _fsp--;
                    if (failed) return retval;
                    if (list_quoted_stringGen==null) list_quoted_stringGen=new ArrayList();
                    list_quoted_stringGen.add(quoted_stringGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node rollback_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		rollback_statementReturnNode.setKind("rollback_statement");
              	    // Create a CST Node
              		if(list_keyROLLBACKGen != null) {
              	        for(Iterator it = list_keyROLLBACKGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyROLLBACK_return r = (PLSQL3Parser.keyROLLBACK_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyROLLBACK");
              	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyWORKGen != null) {
              	        for(Iterator it = list_keyWORKGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyWORK_return r = (PLSQL3Parser.keyWORK_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyWORK");
              	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		rollback_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		rollback_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_savepoint_nameGen != null) {
              	        for(Iterator it = list_savepoint_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.savepoint_name_return r = (PLSQL3Parser.savepoint_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("savepoint_name");
              	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		rollback_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_quoted_stringGen != null) {
              	        for(Iterator it = list_quoted_stringGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.quoted_string_return r = (PLSQL3Parser.quoted_string_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("quoted_string");
              	            	rollback_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = rollback_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rollback_statement

    public static class savepoint_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start savepoint_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12277:1: savepoint_name returns [Node returnNode] : identifierGen+= identifier ;
    public final savepoint_name_return savepoint_name() throws RecognitionException {
        savepoint_name_return retval = new savepoint_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12278:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12278:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_savepoint_name9241);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node savepoint_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		savepoint_nameReturnNode.setKind("savepoint_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	savepoint_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = savepoint_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end savepoint_name

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start savepoint_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12298:1: savepoint_statement returns [Node returnNode] : TK_0= 'SAVEPOINT' savepoint_nameGen+= savepoint_name ;
    public final savepoint_statement_return savepoint_statement() throws RecognitionException {
        savepoint_statement_return retval = new savepoint_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_savepoint_nameGen=null;
        RuleReturnScope savepoint_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12299:1: (TK_0= 'SAVEPOINT' savepoint_nameGen+= savepoint_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12299:3: TK_0= 'SAVEPOINT' savepoint_nameGen+= savepoint_name
            {
            TK_0=(Token)input.LT(1);
            match(input,146,FOLLOW_146_in_savepoint_statement9262); if (failed) return retval;
            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement9266);
            savepoint_nameGen=savepoint_name();
            _fsp--;
            if (failed) return retval;
            if (list_savepoint_nameGen==null) list_savepoint_nameGen=new ArrayList();
            list_savepoint_nameGen.add(savepoint_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node savepoint_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		savepoint_statementReturnNode.setKind("savepoint_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		savepoint_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_savepoint_nameGen != null) {
              	        for(Iterator it = list_savepoint_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.savepoint_name_return r = (PLSQL3Parser.savepoint_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("savepoint_name");
              	            	savepoint_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = savepoint_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end savepoint_statement

    public static class searched_case_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start searched_case_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12328:1: searched_case_statement returns [Node returnNode] : (TK_0= 'WHEN' plsql_expressionGen+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+ ;
    public final searched_case_statement_return searched_case_statement() throws RecognitionException {
        searched_case_statement_return retval = new searched_case_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_plsql_expressionGen=null;
        List list_seq_of_statementsGen=null;
        RuleReturnScope plsql_expressionGen = null;
        RuleReturnScope seq_of_statementsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12329:1: ( (TK_0= 'WHEN' plsql_expressionGen+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12329:3: (TK_0= 'WHEN' plsql_expressionGen+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12329:3: (TK_0= 'WHEN' plsql_expressionGen+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+
            int cnt265=0;
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( (LA265_0==116) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12329:5: TK_0= 'WHEN' plsql_expressionGen+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,116,FOLLOW_116_in_searched_case_statement9289); if (failed) return retval;
            	    pushFollow(FOLLOW_plsql_expression_in_searched_case_statement9293);
            	    plsql_expressionGen=plsql_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
            	    list_plsql_expressionGen.add(plsql_expressionGen);

            	    TK_1=(Token)input.LT(1);
            	    match(input,117,FOLLOW_117_in_searched_case_statement9297); if (failed) return retval;
            	    pushFollow(FOLLOW_seq_of_statements_in_searched_case_statement9301);
            	    seq_of_statementsGen=seq_of_statements();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            	    list_seq_of_statementsGen.add(seq_of_statementsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt265 >= 1 ) break loop265;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(265, input);
                        throw eee;
                }
                cnt265++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node searched_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		searched_case_statementReturnNode.setKind("searched_case_statement");
              	
              		// Create a special CST Node for terminal plsql_expressionGen aggregation
              		if(list_plsql_expressionGen != null) {
              	    for(int pos = 0; pos < list_plsql_expressionGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		searched_case_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_plsql_expressionGen != null) {		
              	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) list_plsql_expressionGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("plsql_expression");
              	    		searched_case_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		searched_case_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_seq_of_statementsGen != null) {		
              	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) list_seq_of_statementsGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("seq_of_statements");
              	    		searched_case_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = searched_case_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end searched_case_statement

    public static class searched_case_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start searched_case_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12380:1: searched_case_expression returns [Node returnNode] : (TK_0= 'WHEN' nested_conditionGen+= nested_condition TK_1= 'THEN' nested_expressionGen+= nested_expression )+ ;
    public final searched_case_expression_return searched_case_expression() throws RecognitionException {
        searched_case_expression_return retval = new searched_case_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_nested_conditionGen=null;
        List list_nested_expressionGen=null;
        RuleReturnScope nested_conditionGen = null;
        RuleReturnScope nested_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12381:1: ( (TK_0= 'WHEN' nested_conditionGen+= nested_condition TK_1= 'THEN' nested_expressionGen+= nested_expression )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12381:3: (TK_0= 'WHEN' nested_conditionGen+= nested_condition TK_1= 'THEN' nested_expressionGen+= nested_expression )+
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12381:3: (TK_0= 'WHEN' nested_conditionGen+= nested_condition TK_1= 'THEN' nested_expressionGen+= nested_expression )+
            int cnt266=0;
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);

                if ( (LA266_0==116) ) {
                    alt266=1;
                }


                switch (alt266) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12381:5: TK_0= 'WHEN' nested_conditionGen+= nested_condition TK_1= 'THEN' nested_expressionGen+= nested_expression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,116,FOLLOW_116_in_searched_case_expression9327); if (failed) return retval;
            	    pushFollow(FOLLOW_nested_condition_in_searched_case_expression9331);
            	    nested_conditionGen=nested_condition();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_conditionGen==null) list_nested_conditionGen=new ArrayList();
            	    list_nested_conditionGen.add(nested_conditionGen);

            	    TK_1=(Token)input.LT(1);
            	    match(input,117,FOLLOW_117_in_searched_case_expression9335); if (failed) return retval;
            	    pushFollow(FOLLOW_nested_expression_in_searched_case_expression9339);
            	    nested_expressionGen=nested_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            	    list_nested_expressionGen.add(nested_expressionGen);


            	    }
            	    break;

            	default :
            	    if ( cnt266 >= 1 ) break loop266;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(266, input);
                        throw eee;
                }
                cnt266++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node searched_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		searched_case_expressionReturnNode.setKind("searched_case_expression");
              	
              		// Create a special CST Node for terminal nested_conditionGen aggregation
              		if(list_nested_conditionGen != null) {
              	    for(int pos = 0; pos < list_nested_conditionGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		searched_case_expressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_nested_conditionGen != null) {		
              	    	PLSQL3Parser.nested_condition_return r = (PLSQL3Parser.nested_condition_return) list_nested_conditionGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_condition");
              	    		searched_case_expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		searched_case_expressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_nested_expressionGen != null) {		
              	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) list_nested_expressionGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_expression");
              	    		searched_case_expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = searched_case_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end searched_case_expression

    public static class select_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start select_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12432:1: select_command returns [Node returnNode] : select_statementGen+= select_statement ;
    public final select_command_return select_command() throws RecognitionException {
        select_command_return retval = new select_command_return();
        retval.start = input.LT(1);

        List list_select_statementGen=null;
        RuleReturnScope select_statementGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12433:1: (select_statementGen+= select_statement )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12433:3: select_statementGen+= select_statement
            {
            pushFollow(FOLLOW_select_statement_in_select_command9363);
            select_statementGen=select_statement();
            _fsp--;
            if (failed) return retval;
            if (list_select_statementGen==null) list_select_statementGen=new ArrayList();
            list_select_statementGen.add(select_statementGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node select_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		select_commandReturnNode.setKind("select_command");
              	    // Create a CST Node
              		if(list_select_statementGen != null) {
              	        for(Iterator it = list_select_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_statement_return r = (PLSQL3Parser.select_statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_statement");
              	            	select_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = select_commandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end select_command

    public static class select_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start select_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12453:1: select_expression returns [Node returnNode] : TK_0= 'SELECT' (TK_1= 'DISTINCT' | TK_2= 'UNIQUE' | TK_3= 'ALL' )? select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? (TK_4= 'INTO' lvaluesGen+= lvalues )? TK_5= 'FROM' (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN ) (where_clauseGen+= where_clause )? (hierarchical_query_clauseGen+= hierarchical_query_clause )? (group_by_clauseGen+= group_by_clause )? (TK_6= 'HAVING' sql_conditionGen+= sql_condition )? (model_clauseGen+= model_clause )? ( (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' ) (select_expressionGen+= select_expression | subqueryGen+= subquery ) )? (order_by_clauseGen+= order_by_clause )? ;
    public final select_expression_return select_expression() throws RecognitionException {
        select_expression_return retval = new select_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        List list_select_listGen=null;
        List list_keyBULKGen=null;
        List list_keyCOLLECTGen=null;
        List list_lvaluesGen=null;
        List list_table_reference_listGen=null;
        List list_join_clauseGen=null;
        List list_join_clauseGen_1=null;
        List list_where_clauseGen=null;
        List list_hierarchical_query_clauseGen=null;
        List list_group_by_clauseGen=null;
        List list_sql_conditionGen=null;
        List list_model_clauseGen=null;
        List list_select_expressionGen=null;
        List list_subqueryGen=null;
        List list_order_by_clauseGen=null;
        RuleReturnScope select_listGen = null;
        RuleReturnScope keyBULKGen = null;
        RuleReturnScope keyCOLLECTGen = null;
        RuleReturnScope lvaluesGen = null;
        RuleReturnScope table_reference_listGen = null;
        RuleReturnScope join_clauseGen = null;
        RuleReturnScope join_clauseGen_1 = null;
        RuleReturnScope where_clauseGen = null;
        RuleReturnScope hierarchical_query_clauseGen = null;
        RuleReturnScope group_by_clauseGen = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope model_clauseGen = null;
        RuleReturnScope select_expressionGen = null;
        RuleReturnScope subqueryGen = null;
        RuleReturnScope order_by_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12454:1: (TK_0= 'SELECT' (TK_1= 'DISTINCT' | TK_2= 'UNIQUE' | TK_3= 'ALL' )? select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? (TK_4= 'INTO' lvaluesGen+= lvalues )? TK_5= 'FROM' (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN ) (where_clauseGen+= where_clause )? (hierarchical_query_clauseGen+= hierarchical_query_clause )? (group_by_clauseGen+= group_by_clause )? (TK_6= 'HAVING' sql_conditionGen+= sql_condition )? (model_clauseGen+= model_clause )? ( (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' ) (select_expressionGen+= select_expression | subqueryGen+= subquery ) )? (order_by_clauseGen+= order_by_clause )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:3: TK_0= 'SELECT' (TK_1= 'DISTINCT' | TK_2= 'UNIQUE' | TK_3= 'ALL' )? select_listGen+= select_list (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )? (TK_4= 'INTO' lvaluesGen+= lvalues )? TK_5= 'FROM' (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN ) (where_clauseGen+= where_clause )? (hierarchical_query_clauseGen+= hierarchical_query_clause )? (group_by_clauseGen+= group_by_clause )? (TK_6= 'HAVING' sql_conditionGen+= sql_condition )? (model_clauseGen+= model_clause )? ( (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' ) (select_expressionGen+= select_expression | subqueryGen+= subquery ) )? (order_by_clauseGen+= order_by_clause )?
            {
            TK_0=(Token)input.LT(1);
            match(input,148,FOLLOW_148_in_select_expression9388); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:17: (TK_1= 'DISTINCT' | TK_2= 'UNIQUE' | TK_3= 'ALL' )?
            int alt267=4;
            switch ( input.LA(1) ) {
                case 121:
                    {
                    switch ( input.LA(2) ) {
                        case LPAREN:
                            {
                            int LA267_5 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            int LA267_6 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA267_7 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case ID:
                            {
                            int LA267_8 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            int LA267_9 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 110:
                            {
                            int LA267_10 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 158:
                            {
                            int LA267_11 = input.LA(3);

                            if ( (LA267_11==LPAREN) ) {
                                int LA267_24 = input.LA(4);

                                if ( (synpred388()) ) {
                                    alt267=1;
                                }
                            }
                            }
                            break;
                        case 121:
                            {
                            int LA267_12 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 58:
                            {
                            int LA267_13 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 233:
                            {
                            int LA267_14 = input.LA(3);

                            if ( (LA267_14==LPAREN) ) {
                                int LA267_25 = input.LA(4);

                                if ( (LA267_25==LPAREN) ) {
                                    int LA267_33 = input.LA(5);

                                    if ( (LA267_33==148) ) {
                                        int LA267_34 = input.LA(6);

                                        if ( (synpred388()) ) {
                                            alt267=1;
                                        }
                                    }
                                }
                            }
                            }
                            break;
                        case 56:
                            {
                            int LA267_15 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 57:
                            {
                            int LA267_16 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 153:
                            {
                            switch ( input.LA(3) ) {
                                case FOUND_ATTR:
                                    {
                                    int LA267_26 = input.LA(4);

                                    if ( (synpred388()) ) {
                                        alt267=1;
                                    }
                                    }
                                    break;
                                case NOTFOUND_ATTR:
                                    {
                                    int LA267_27 = input.LA(4);

                                    if ( (synpred388()) ) {
                                        alt267=1;
                                    }
                                    }
                                    break;
                                case ISOPEN_ATTR:
                                    {
                                    int LA267_28 = input.LA(4);

                                    if ( (synpred388()) ) {
                                        alt267=1;
                                    }
                                    }
                                    break;
                                case ROWCOUNT_ATTR:
                                    {
                                    int LA267_29 = input.LA(4);

                                    if ( (synpred388()) ) {
                                        alt267=1;
                                    }
                                    }
                                    break;
                                case BULK_ROWCOUNT_ATTR:
                                    {
                                    int LA267_30 = input.LA(4);

                                    if ( (synpred388()) ) {
                                        alt267=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case QUOTED_STRING:
                            {
                            int LA267_18 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUMBER:
                            {
                            int LA267_19 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case COLON:
                            {
                            int LA267_20 = input.LA(3);

                            if ( (LA267_20==ID) ) {
                                int LA267_31 = input.LA(4);

                                if ( (synpred388()) ) {
                                    alt267=1;
                                }
                            }
                            else if ( (LA267_20==DOUBLEQUOTED_STRING) ) {
                                int LA267_32 = input.LA(4);

                                if ( (synpred388()) ) {
                                    alt267=1;
                                }
                            }
                            }
                            break;
                        case 69:
                            {
                            int LA267_21 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case 148:
                            {
                            int LA267_22 = input.LA(3);

                            if ( (synpred388()) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case ASTERISK:
                            {
                            alt267=1;
                            }
                            break;
                    }

                    }
                    break;
                case 59:
                    {
                    alt267=2;
                    }
                    break;
                case 67:
                    {
                    alt267=3;
                    }
                    break;
            }

            switch (alt267) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:19: TK_1= 'DISTINCT'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,121,FOLLOW_121_in_select_expression9394); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:37: TK_2= 'UNIQUE'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_select_expression9400); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:53: TK_3= 'ALL'
                    {
                    TK_3=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_select_expression9406); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_select_list_in_select_expression9413);
            select_listGen=select_list();
            _fsp--;
            if (failed) return retval;
            if (list_select_listGen==null) list_select_listGen=new ArrayList();
            list_select_listGen.add(select_listGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12456:3: (keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==229) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12456:5: keyBULKGen+= keyBULK keyCOLLECTGen+= keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_select_expression9421);
                    keyBULKGen=keyBULK();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyBULKGen==null) list_keyBULKGen=new ArrayList();
                    list_keyBULKGen.add(keyBULKGen);

                    pushFollow(FOLLOW_keyCOLLECT_in_select_expression9425);
                    keyCOLLECTGen=keyCOLLECT();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyCOLLECTGen==null) list_keyCOLLECTGen=new ArrayList();
                    list_keyCOLLECTGen.add(keyCOLLECTGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12457:3: (TK_4= 'INTO' lvaluesGen+= lvalues )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==119) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12457:5: TK_4= 'INTO' lvaluesGen+= lvalues
                    {
                    TK_4=(Token)input.LT(1);
                    match(input,119,FOLLOW_119_in_select_expression9436); if (failed) return retval;
                    pushFollow(FOLLOW_lvalues_in_select_expression9440);
                    lvaluesGen=lvalues();
                    _fsp--;
                    if (failed) return retval;
                    if (list_lvaluesGen==null) list_lvaluesGen=new ArrayList();
                    list_lvaluesGen.add(lvaluesGen);


                    }
                    break;

            }

            TK_5=(Token)input.LT(1);
            match(input,113,FOLLOW_113_in_select_expression9449); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )
            int alt270=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA270_1 = input.LA(2);

                if ( (synpred393()) ) {
                    alt270=1;
                }
                else if ( (synpred394()) ) {
                    alt270=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )", 270, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA270_2 = input.LA(2);

                if ( (synpred393()) ) {
                    alt270=1;
                }
                else if ( (synpred394()) ) {
                    alt270=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )", 270, 2, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA270_3 = input.LA(2);

                if ( (synpred393()) ) {
                    alt270=1;
                }
                else if ( (synpred394()) ) {
                    alt270=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )", 270, 3, input);

                    throw nvae;
                }
                }
                break;
            case 137:
            case 217:
                {
                alt270=1;
                }
                break;
            case LPAREN:
                {
                int LA270_5 = input.LA(2);

                if ( (LA270_5==148) ) {
                    alt270=1;
                }
                else if ( ((LA270_5>=ID && LA270_5<=DOUBLEQUOTED_STRING)||LA270_5==110) ) {
                    alt270=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )", 270, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("12458:15: (table_reference_listGen+= table_reference_list | join_clauseGen+= join_clause | LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN )", 270, 0, input);

                throw nvae;
            }

            switch (alt270) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:17: table_reference_listGen+= table_reference_list
                    {
                    pushFollow(FOLLOW_table_reference_list_in_select_expression9455);
                    table_reference_listGen=table_reference_list();
                    _fsp--;
                    if (failed) return retval;
                    if (list_table_reference_listGen==null) list_table_reference_listGen=new ArrayList();
                    list_table_reference_listGen.add(table_reference_listGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:65: join_clauseGen+= join_clause
                    {
                    pushFollow(FOLLOW_join_clause_in_select_expression9461);
                    join_clauseGen=join_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_join_clauseGen==null) list_join_clauseGen=new ArrayList();
                    list_join_clauseGen.add(join_clauseGen);


                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:95: LPARENGen= LPAREN join_clauseGen_1+= join_clause RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_select_expression9467); if (failed) return retval;
                    pushFollow(FOLLOW_join_clause_in_select_expression9471);
                    join_clauseGen_1=join_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_join_clauseGen_1==null) list_join_clauseGen_1=new ArrayList();
                    list_join_clauseGen_1.add(join_clauseGen_1);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_select_expression9475); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:3: (where_clauseGen+= where_clause )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==114) ) {
                int LA271_1 = input.LA(2);

                if ( (synpred395()) ) {
                    alt271=1;
                }
            }
            switch (alt271) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:5: where_clauseGen+= where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_select_expression9485);
                    where_clauseGen=where_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_where_clauseGen==null) list_where_clauseGen=new ArrayList();
                    list_where_clauseGen.add(where_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:38: (hierarchical_query_clauseGen+= hierarchical_query_clause )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==126) ) {
                int LA272_1 = input.LA(2);

                if ( (synpred396()) ) {
                    alt272=1;
                }
            }
            else if ( (LA272_0==127) ) {
                int LA272_2 = input.LA(2);

                if ( (synpred396()) ) {
                    alt272=1;
                }
            }
            switch (alt272) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:40: hierarchical_query_clauseGen+= hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_select_expression9494);
                    hierarchical_query_clauseGen=hierarchical_query_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_hierarchical_query_clauseGen==null) list_hierarchical_query_clauseGen=new ArrayList();
                    list_hierarchical_query_clauseGen.add(hierarchical_query_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:99: (group_by_clauseGen+= group_by_clause )?
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==124) ) {
                int LA273_1 = input.LA(2);

                if ( (synpred397()) ) {
                    alt273=1;
                }
            }
            switch (alt273) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:101: group_by_clauseGen+= group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_select_expression9503);
                    group_by_clauseGen=group_by_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_group_by_clauseGen==null) list_group_by_clauseGen=new ArrayList();
                    list_group_by_clauseGen.add(group_by_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:3: (TK_6= 'HAVING' sql_conditionGen+= sql_condition )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==149) ) {
                int LA274_1 = input.LA(2);

                if ( (synpred398()) ) {
                    alt274=1;
                }
            }
            switch (alt274) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:5: TK_6= 'HAVING' sql_conditionGen+= sql_condition
                    {
                    TK_6=(Token)input.LT(1);
                    match(input,149,FOLLOW_149_in_select_expression9514); if (failed) return retval;
                    pushFollow(FOLLOW_sql_condition_in_select_expression9518);
                    sql_conditionGen=sql_condition();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                    list_sql_conditionGen.add(sql_conditionGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:54: (model_clauseGen+= model_clause )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==190) ) {
                int LA275_1 = input.LA(2);

                if ( (synpred399()) ) {
                    alt275=1;
                }
            }
            switch (alt275) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:56: model_clauseGen+= model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_select_expression9527);
                    model_clauseGen=model_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_model_clauseGen==null) list_model_clauseGen=new ArrayList();
                    list_model_clauseGen.add(model_clauseGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:3: ( (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' ) (select_expressionGen+= select_expression | subqueryGen+= subquery ) )?
            int alt279=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA279_1 = input.LA(2);

                    if ( (synpred404()) ) {
                        alt279=1;
                    }
                    }
                    break;
                case 151:
                    {
                    int LA279_2 = input.LA(2);

                    if ( (synpred404()) ) {
                        alt279=1;
                    }
                    }
                    break;
                case 152:
                    {
                    int LA279_3 = input.LA(2);

                    if ( (synpred404()) ) {
                        alt279=1;
                    }
                    }
                    break;
            }

            switch (alt279) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:5: (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' ) (select_expressionGen+= select_expression | subqueryGen+= subquery )
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:5: (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' )
                    int alt277=3;
                    switch ( input.LA(1) ) {
                    case 150:
                        {
                        alt277=1;
                        }
                        break;
                    case 151:
                        {
                        alt277=2;
                        }
                        break;
                    case 152:
                        {
                        alt277=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("12461:5: (TK_7= 'UNION' (TK_8= 'ALL' )? | TK_9= 'INTERSECT' | TK_10= 'MINUS' )", 277, 0, input);

                        throw nvae;
                    }

                    switch (alt277) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:7: TK_7= 'UNION' (TK_8= 'ALL' )?
                            {
                            TK_7=(Token)input.LT(1);
                            match(input,150,FOLLOW_150_in_select_expression9540); if (failed) return retval;
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:20: (TK_8= 'ALL' )?
                            int alt276=2;
                            int LA276_0 = input.LA(1);

                            if ( (LA276_0==67) ) {
                                alt276=1;
                            }
                            switch (alt276) {
                                case 1 :
                                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:22: TK_8= 'ALL'
                                    {
                                    TK_8=(Token)input.LT(1);
                                    match(input,67,FOLLOW_67_in_select_expression9546); if (failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12462:6: TK_9= 'INTERSECT'
                            {
                            TK_9=(Token)input.LT(1);
                            match(input,151,FOLLOW_151_in_select_expression9558); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12463:6: TK_10= 'MINUS'
                            {
                            TK_10=(Token)input.LT(1);
                            match(input,152,FOLLOW_152_in_select_expression9567); if (failed) return retval;

                            }
                            break;

                    }

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12465:4: (select_expressionGen+= select_expression | subqueryGen+= subquery )
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==148) ) {
                        alt278=1;
                    }
                    else if ( (LA278_0==LPAREN) ) {
                        alt278=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("12465:4: (select_expressionGen+= select_expression | subqueryGen+= subquery )", 278, 0, input);

                        throw nvae;
                    }
                    switch (alt278) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12465:6: select_expressionGen+= select_expression
                            {
                            pushFollow(FOLLOW_select_expression_in_select_expression9581);
                            select_expressionGen=select_expression();
                            _fsp--;
                            if (failed) return retval;
                            if (list_select_expressionGen==null) list_select_expressionGen=new ArrayList();
                            list_select_expressionGen.add(select_expressionGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12466:6: subqueryGen+= subquery
                            {
                            pushFollow(FOLLOW_subquery_in_select_expression9591);
                            subqueryGen=subquery();
                            _fsp--;
                            if (failed) return retval;
                            if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
                            list_subqueryGen.add(subqueryGen);


                            }
                            break;

                    }


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12469:3: (order_by_clauseGen+= order_by_clause )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==141) ) {
                int LA280_1 = input.LA(2);

                if ( (synpred405()) ) {
                    alt280=1;
                }
            }
            switch (alt280) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12469:5: order_by_clauseGen+= order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_select_expression9609);
                    order_by_clauseGen=order_by_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_order_by_clauseGen==null) list_order_by_clauseGen=new ArrayList();
                    list_order_by_clauseGen.add(order_by_clauseGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node select_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		select_expressionReturnNode.setKind("select_expression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_select_listGen != null) {
              	        for(Iterator it = list_select_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_list_return r = (PLSQL3Parser.select_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_list");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyBULKGen != null) {
              	        for(Iterator it = list_keyBULKGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyBULK_return r = (PLSQL3Parser.keyBULK_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyBULK");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyCOLLECTGen != null) {
              	        for(Iterator it = list_keyCOLLECTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCOLLECT_return r = (PLSQL3Parser.keyCOLLECT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCOLLECT");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_lvaluesGen != null) {
              	        for(Iterator it = list_lvaluesGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.lvalues_return r = (PLSQL3Parser.lvalues_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("lvalues");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_table_reference_listGen != null) {
              	        for(Iterator it = list_table_reference_listGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_reference_list_return r = (PLSQL3Parser.table_reference_list_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_reference_list");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_join_clauseGen != null) {
              	        for(Iterator it = list_join_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.join_clause_return r = (PLSQL3Parser.join_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("join_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			select_expressionReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_join_clauseGen_1 != null) {
              	        for(Iterator it = list_join_clauseGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.join_clause_return r = (PLSQL3Parser.join_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("join_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			select_expressionReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_where_clauseGen != null) {
              	        for(Iterator it = list_where_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.where_clause_return r = (PLSQL3Parser.where_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("where_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_hierarchical_query_clauseGen != null) {
              	        for(Iterator it = list_hierarchical_query_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.hierarchical_query_clause_return r = (PLSQL3Parser.hierarchical_query_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("hierarchical_query_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_group_by_clauseGen != null) {
              	        for(Iterator it = list_group_by_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.group_by_clause_return r = (PLSQL3Parser.group_by_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("group_by_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue(TK_6.getText());
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_model_clauseGen != null) {
              	        for(Iterator it = list_model_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.model_clause_return r = (PLSQL3Parser.model_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("model_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_7Leaf.setKind("TOKEN");
              	 		TK_7Leaf.setValue(TK_7.getText());
              			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
              			TK_7Leaf.setLine(TK_7.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_8Leaf.setKind("TOKEN");
              	 		TK_8Leaf.setValue(TK_8.getText());
              			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
              			TK_8Leaf.setLine(TK_8.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_9Leaf.setKind("TOKEN");
              	 		TK_9Leaf.setValue(TK_9.getText());
              			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
              			TK_9Leaf.setLine(TK_9.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_10Leaf.setKind("TOKEN");
              	 		TK_10Leaf.setValue(TK_10.getText());
              			TK_10Leaf.setPos(TK_10.getCharPositionInLine());
              			TK_10Leaf.setLine(TK_10.getLine());
              	 		select_expressionReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_select_expressionGen != null) {
              	        for(Iterator it = list_select_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_expression");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_order_by_clauseGen != null) {
              	        for(Iterator it = list_order_by_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.order_by_clause_return r = (PLSQL3Parser.order_by_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("order_by_clause");
              	            	select_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = select_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end select_expression

    public static class select_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start select_list
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12746:1: select_list returns [Node returnNode] : (ASTERISKGen= ASTERISK | displayed_columnGen+= displayed_column (COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column )* );
    public final select_list_return select_list() throws RecognitionException {
        select_list_return retval = new select_list_return();
        retval.start = input.LT(1);

        Token ASTERISKGen=null;
        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_displayed_columnGen=null;
        List list_displayed_columnGen_1=null;
        RuleReturnScope displayed_columnGen = null;
        RuleReturnScope displayed_columnGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12747:1: (ASTERISKGen= ASTERISK | displayed_columnGen+= displayed_column (COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column )* )
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==ASTERISK) ) {
                alt282=1;
            }
            else if ( (LA282_0==LPAREN||LA282_0==NUMBER||(LA282_0>=QUOTED_STRING && LA282_0<=MINUS)||LA282_0==COLON||(LA282_0>=56 && LA282_0<=58)||LA282_0==69||LA282_0==110||LA282_0==121||LA282_0==148||LA282_0==153||LA282_0==158||LA282_0==233) ) {
                alt282=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("12746:1: select_list returns [Node returnNode] : (ASTERISKGen= ASTERISK | displayed_columnGen+= displayed_column (COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column )* );", 282, 0, input);

                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12747:3: ASTERISKGen= ASTERISK
                    {
                    ASTERISKGen=(Token)input.LT(1);
                    match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list9633); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node select_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		select_listReturnNode.setKind("select_list");
                      	    // Create a CST Leaf
                      		if(ASTERISKGen != null) {
                      			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			ASTERISKGenLeaf.setKind("ASTERISK");
                      			ASTERISKGenLeaf.setValue(ASTERISKGen.getText());
                      			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
                      			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
                      			select_listReturnNode.getChildren().add(ASTERISKGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = select_listReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12764:4: displayed_columnGen+= displayed_column (COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column )*
                    {
                    pushFollow(FOLLOW_displayed_column_in_select_list9644);
                    displayed_columnGen=displayed_column();
                    _fsp--;
                    if (failed) return retval;
                    if (list_displayed_columnGen==null) list_displayed_columnGen=new ArrayList();
                    list_displayed_columnGen.add(displayed_columnGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12764:42: (COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column )*
                    loop281:
                    do {
                        int alt281=2;
                        int LA281_0 = input.LA(1);

                        if ( (LA281_0==COMMA) ) {
                            alt281=1;
                        }


                        switch (alt281) {
                    	case 1 :
                    	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12764:44: COMMAGen_List+= COMMA displayed_columnGen_1+= displayed_column
                    	    {
                    	    COMMAGen_List=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_select_list9650); if (failed) return retval;
                    	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
                    	    list_COMMAGen_List.add(COMMAGen_List);

                    	    pushFollow(FOLLOW_displayed_column_in_select_list9654);
                    	    displayed_columnGen_1=displayed_column();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if (list_displayed_columnGen_1==null) list_displayed_columnGen_1=new ArrayList();
                    	    list_displayed_columnGen_1.add(displayed_columnGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop281;
                        }
                    } while (true);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node select_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		select_listReturnNode.setKind("select_list");
                      	    // Create a CST Node
                      		if(list_displayed_columnGen != null) {
                      	        for(Iterator it = list_displayed_columnGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.displayed_column_return r = (PLSQL3Parser.displayed_column_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("displayed_column");
                      	            	select_listReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	
                      		// Create a special CST Node for terminal COMMAGen_List aggregation
                      		if(list_COMMAGen_List != null) {
                      	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
                      		// Terminal extractor
                      	    if(list_COMMAGen_List != null) {
                      		    Token t = (Token) list_COMMAGen_List.get(pos); 
                      		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COMMAGen_ListLeaf.setKind("COMMA");
                      			COMMAGen_ListLeaf.setValue(t.getText());
                      			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
                      			COMMAGen_ListLeaf.setLine(t.getLine());
                      			select_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_displayed_columnGen_1 != null) {		
                      	    	PLSQL3Parser.displayed_column_return r = (PLSQL3Parser.displayed_column_return) list_displayed_columnGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("displayed_column");
                      	    		select_listReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}
                      	
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = select_listReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end select_list

    public static class select_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start select_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12809:1: select_statement returns [Node returnNode] : select_expressionGen+= select_expression ;
    public final select_statement_return select_statement() throws RecognitionException {
        select_statement_return retval = new select_statement_return();
        retval.start = input.LT(1);

        List list_select_expressionGen=null;
        RuleReturnScope select_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12810:1: (select_expressionGen+= select_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12810:3: select_expressionGen+= select_expression
            {
            pushFollow(FOLLOW_select_expression_in_select_statement9679);
            select_expressionGen=select_expression();
            _fsp--;
            if (failed) return retval;
            if (list_select_expressionGen==null) list_select_expressionGen=new ArrayList();
            list_select_expressionGen.add(select_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node select_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		select_statementReturnNode.setKind("select_statement");
              	    // Create a CST Node
              		if(list_select_expressionGen != null) {
              	        for(Iterator it = list_select_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_expression");
              	            	select_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = select_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end select_statement

    public static class selected_table_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start selected_table
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12831:1: selected_table returns [Node returnNode] : (table_specGen+= table_spec | (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery ) (aliasGen+= alias )? ;
    public final selected_table_return selected_table() throws RecognitionException {
        selected_table_return retval = new selected_table_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_table_specGen=null;
        List list_keyTHEGen=null;
        List list_subqueryGen=null;
        List list_aliasGen=null;
        RuleReturnScope table_specGen = null;
        RuleReturnScope keyTHEGen = null;
        RuleReturnScope subqueryGen = null;
        RuleReturnScope aliasGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:1: ( (table_specGen+= table_spec | (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery ) (aliasGen+= alias )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:3: (table_specGen+= table_spec | (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery ) (aliasGen+= alias )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:3: (table_specGen+= table_spec | (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery )
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( ((LA284_0>=ID && LA284_0<=DOUBLEQUOTED_STRING)||LA284_0==110) ) {
                alt284=1;
            }
            else if ( (LA284_0==LPAREN||LA284_0==137||LA284_0==217) ) {
                alt284=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("12832:3: (table_specGen+= table_spec | (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery )", 284, 0, input);

                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:5: table_specGen+= table_spec
                    {
                    pushFollow(FOLLOW_table_spec_in_selected_table9704);
                    table_specGen=table_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_table_specGen==null) list_table_specGen=new ArrayList();
                    list_table_specGen.add(table_specGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:33: (TK_0= 'TABLE' | keyTHEGen+= keyTHE )? subqueryGen+= subquery
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:33: (TK_0= 'TABLE' | keyTHEGen+= keyTHE )?
                    int alt283=3;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==137) ) {
                        alt283=1;
                    }
                    else if ( (LA283_0==217) ) {
                        alt283=2;
                    }
                    switch (alt283) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:35: TK_0= 'TABLE'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,137,FOLLOW_137_in_selected_table9712); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:50: keyTHEGen+= keyTHE
                            {
                            pushFollow(FOLLOW_keyTHE_in_selected_table9718);
                            keyTHEGen=keyTHE();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyTHEGen==null) list_keyTHEGen=new ArrayList();
                            list_keyTHEGen.add(keyTHEGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_subquery_in_selected_table9725);
                    subqueryGen=subquery();
                    _fsp--;
                    if (failed) return retval;
                    if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
                    list_subqueryGen.add(subqueryGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:95: (aliasGen+= alias )?
            int alt285=2;
            switch ( input.LA(1) ) {
                case 50:
                    {
                    switch ( input.LA(2) ) {
                        case ID:
                            {
                            int LA285_6 = input.LA(3);

                            if ( (synpred411()) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            int LA285_7 = input.LA(3);

                            if ( (synpred411()) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case 110:
                            {
                            int LA285_8 = input.LA(3);

                            if ( (synpred411()) ) {
                                alt285=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
                case ID:
                    {
                    int LA285_2 = input.LA(2);

                    if ( (synpred411()) ) {
                        alt285=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA285_3 = input.LA(2);

                    if ( (synpred411()) ) {
                        alt285=1;
                    }
                    }
                    break;
                case 110:
                    {
                    int LA285_4 = input.LA(2);

                    if ( (synpred411()) ) {
                        alt285=1;
                    }
                    }
                    break;
            }

            switch (alt285) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:97: aliasGen+= alias
                    {
                    pushFollow(FOLLOW_alias_in_selected_table9733);
                    aliasGen=alias();
                    _fsp--;
                    if (failed) return retval;
                    if (list_aliasGen==null) list_aliasGen=new ArrayList();
                    list_aliasGen.add(aliasGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node selected_tableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		selected_tableReturnNode.setKind("selected_table");
              	    // Create a CST Node
              		if(list_table_specGen != null) {
              	        for(Iterator it = list_table_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_spec_return r = (PLSQL3Parser.table_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_spec");
              	            	selected_tableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		selected_tableReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyTHEGen != null) {
              	        for(Iterator it = list_keyTHEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTHE_return r = (PLSQL3Parser.keyTHE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTHE");
              	            	selected_tableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	selected_tableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_aliasGen != null) {
              	        for(Iterator it = list_aliasGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.alias_return r = (PLSQL3Parser.alias_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("alias");
              	            	selected_tableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = selected_tableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selected_table

    public static class seq_of_statements_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start seq_of_statements
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12891:1: seq_of_statements returns [Node returnNode] : statementGen+= statement SEMIGen= SEMI (statementGen_1+= statement SEMIGen_1_List+= SEMI )* ;
    public final seq_of_statements_return seq_of_statements() throws RecognitionException {
        seq_of_statements_return retval = new seq_of_statements_return();
        retval.start = input.LT(1);

        Token SEMIGen=null;
        Token SEMIGen_1_List=null;
        List list_SEMIGen_1_List=null;
        List list_statementGen=null;
        List list_statementGen_1=null;
        RuleReturnScope statementGen = null;
        RuleReturnScope statementGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12892:1: (statementGen+= statement SEMIGen= SEMI (statementGen_1+= statement SEMIGen_1_List+= SEMI )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12892:3: statementGen+= statement SEMIGen= SEMI (statementGen_1+= statement SEMIGen_1_List+= SEMI )*
            {
            pushFollow(FOLLOW_statement_in_seq_of_statements9757);
            statementGen=statement();
            _fsp--;
            if (failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements9761); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12892:40: (statementGen_1+= statement SEMIGen_1_List+= SEMI )*
            loop286:
            do {
                int alt286=2;
                int LA286_0 = input.LA(1);

                if ( ((LA286_0>=ID && LA286_0<=DOUBLEQUOTED_STRING)||LA286_0==LLABEL||LA286_0==COLON||LA286_0==53||LA286_0==58||LA286_0==60||(LA286_0>=69 && LA286_0<=70)||LA286_0==74||LA286_0==110||LA286_0==112||LA286_0==118||LA286_0==120||LA286_0==123||(LA286_0>=129 && LA286_0<=130)||(LA286_0>=135 && LA286_0<=136)||LA286_0==140||LA286_0==144||LA286_0==146||LA286_0==148||LA286_0==164||LA286_0==231||LA286_0==233||LA286_0==236||LA286_0==239||LA286_0==242||(LA286_0>=245 && LA286_0<=246)||LA286_0==253||LA286_0==256||LA286_0==258||LA286_0==260||LA286_0==264) ) {
                    alt286=1;
                }


                switch (alt286) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12892:42: statementGen_1+= statement SEMIGen_1_List+= SEMI
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements9767);
            	    statementGen_1=statement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
            	    list_statementGen_1.add(statementGen_1);

            	    SEMIGen_1_List=(Token)input.LT(1);
            	    match(input,SEMI,FOLLOW_SEMI_in_seq_of_statements9771); if (failed) return retval;
            	    if (list_SEMIGen_1_List==null) list_SEMIGen_1_List=new ArrayList();
            	    list_SEMIGen_1_List.add(SEMIGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop286;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node seq_of_statementsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		seq_of_statementsReturnNode.setKind("seq_of_statements");
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.statement_return r = (PLSQL3Parser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	seq_of_statementsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			seq_of_statementsReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              	
              		// Create a special CST Node for terminal statementGen_1 aggregation
              		if(list_statementGen_1 != null) {
              	    for(int pos = 0; pos < list_statementGen_1.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_statementGen_1 != null) {		
              	    	PLSQL3Parser.statement_return r = (PLSQL3Parser.statement_return) list_statementGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("statement");
              	    		seq_of_statementsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// Terminal extractor
              	    if(list_SEMIGen_1_List != null) {
              		    Token t = (Token) list_SEMIGen_1_List.get(pos); 
              		    Leaf SEMIGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGen_1_ListLeaf.setKind("SEMI");
              			SEMIGen_1_ListLeaf.setValue(t.getText());
              			SEMIGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			SEMIGen_1_ListLeaf.setLine(t.getLine());
              			seq_of_statementsReturnNode.getChildren().add(SEMIGen_1_ListLeaf);
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = seq_of_statementsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end seq_of_statements

    public static class set_transaction_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start set_transaction_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12946:1: set_transaction_command returns [Node returnNode] : TK_0= 'SET' keyTRANSACTIONGen+= keyTRANSACTION keyREADGen+= keyREAD keyONLYGen+= keyONLY ;
    public final set_transaction_command_return set_transaction_command() throws RecognitionException {
        set_transaction_command_return retval = new set_transaction_command_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_keyTRANSACTIONGen=null;
        List list_keyREADGen=null;
        List list_keyONLYGen=null;
        RuleReturnScope keyTRANSACTIONGen = null;
        RuleReturnScope keyREADGen = null;
        RuleReturnScope keyONLYGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12947:1: (TK_0= 'SET' keyTRANSACTIONGen+= keyTRANSACTION keyREADGen+= keyREAD keyONLYGen+= keyONLY )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12947:3: TK_0= 'SET' keyTRANSACTIONGen+= keyTRANSACTION keyREADGen+= keyREAD keyONLYGen+= keyONLY
            {
            TK_0=(Token)input.LT(1);
            match(input,70,FOLLOW_70_in_set_transaction_command9795); if (failed) return retval;
            pushFollow(FOLLOW_keyTRANSACTION_in_set_transaction_command9799);
            keyTRANSACTIONGen=keyTRANSACTION();
            _fsp--;
            if (failed) return retval;
            if (list_keyTRANSACTIONGen==null) list_keyTRANSACTIONGen=new ArrayList();
            list_keyTRANSACTIONGen.add(keyTRANSACTIONGen);

            pushFollow(FOLLOW_keyREAD_in_set_transaction_command9803);
            keyREADGen=keyREAD();
            _fsp--;
            if (failed) return retval;
            if (list_keyREADGen==null) list_keyREADGen=new ArrayList();
            list_keyREADGen.add(keyREADGen);

            pushFollow(FOLLOW_keyONLY_in_set_transaction_command9807);
            keyONLYGen=keyONLY();
            _fsp--;
            if (failed) return retval;
            if (list_keyONLYGen==null) list_keyONLYGen=new ArrayList();
            list_keyONLYGen.add(keyONLYGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node set_transaction_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		set_transaction_commandReturnNode.setKind("set_transaction_command");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		set_transaction_commandReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyTRANSACTIONGen != null) {
              	        for(Iterator it = list_keyTRANSACTIONGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTRANSACTION_return r = (PLSQL3Parser.keyTRANSACTION_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTRANSACTION");
              	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyREADGen != null) {
              	        for(Iterator it = list_keyREADGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyREAD_return r = (PLSQL3Parser.keyREAD_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyREAD");
              	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyONLYGen != null) {
              	        for(Iterator it = list_keyONLYGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyONLY_return r = (PLSQL3Parser.keyONLY_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyONLY");
              	            	set_transaction_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = set_transaction_commandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end set_transaction_command

    public static class schema_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start schema_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12996:1: schema_name returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final schema_name_return schema_name() throws RecognitionException {
        schema_name_return retval = new schema_name_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12997:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12997:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_schema_name9829);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node schema_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		schema_nameReturnNode.setKind("schema_name");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	schema_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = schema_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end schema_name

    public static class simple_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start simple_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13017:1: simple_expression returns [Node returnNode] : (boolean_literalGen+= boolean_literal | TK_0= 'SQL' (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR ) | column_specGen+= column_spec | QUOTED_STRINGGen= QUOTED_STRING | NUMBERGen= NUMBER | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? | TK_0= 'NULL' );
    public final simple_expression_return simple_expression() throws RecognitionException {
        simple_expression_return retval = new simple_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token FOUND_ATTRGen=null;
        Token NOTFOUND_ATTRGen=null;
        Token ISOPEN_ATTRGen=null;
        Token ROWCOUNT_ATTRGen=null;
        Token BULK_ROWCOUNT_ATTRGen=null;
        Token QUOTED_STRINGGen=null;
        Token NUMBERGen=null;
        Token COLONGen=null;
        Token COLONGen_1=null;
        List list_boolean_literalGen=null;
        List list_column_specGen=null;
        List list_host_variableGen=null;
        List list_host_variableGen_1=null;
        RuleReturnScope boolean_literalGen = null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope host_variableGen = null;
        RuleReturnScope host_variableGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13018:1: (boolean_literalGen+= boolean_literal | TK_0= 'SQL' (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR ) | column_specGen+= column_spec | QUOTED_STRINGGen= QUOTED_STRING | NUMBERGen= NUMBER | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? | TK_0= 'NULL' )
            int alt289=7;
            switch ( input.LA(1) ) {
            case 56:
            case 57:
                {
                alt289=1;
                }
                break;
            case 153:
                {
                alt289=2;
                }
                break;
            case ID:
            case DOUBLEQUOTED_STRING:
            case 110:
                {
                alt289=3;
                }
                break;
            case QUOTED_STRING:
                {
                alt289=4;
                }
                break;
            case NUMBER:
                {
                alt289=5;
                }
                break;
            case COLON:
                {
                alt289=6;
                }
                break;
            case 69:
                {
                alt289=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("13017:1: simple_expression returns [Node returnNode] : (boolean_literalGen+= boolean_literal | TK_0= 'SQL' (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR ) | column_specGen+= column_spec | QUOTED_STRINGGen= QUOTED_STRING | NUMBERGen= NUMBER | COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )? | TK_0= 'NULL' );", 289, 0, input);

                throw nvae;
            }

            switch (alt289) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13018:3: boolean_literalGen+= boolean_literal
                    {
                    pushFollow(FOLLOW_boolean_literal_in_simple_expression9851);
                    boolean_literalGen=boolean_literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_boolean_literalGen==null) list_boolean_literalGen=new ArrayList();
                    list_boolean_literalGen.add(boolean_literalGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a CST Node
                      		if(list_boolean_literalGen != null) {
                      	        for(Iterator it = list_boolean_literalGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.boolean_literal_return r = (PLSQL3Parser.boolean_literal_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("boolean_literal");
                      	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:4: TK_0= 'SQL' (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR )
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,153,FOLLOW_153_in_simple_expression9862); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:15: (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR )
                    int alt287=5;
                    switch ( input.LA(1) ) {
                    case FOUND_ATTR:
                        {
                        alt287=1;
                        }
                        break;
                    case NOTFOUND_ATTR:
                        {
                        alt287=2;
                        }
                        break;
                    case ISOPEN_ATTR:
                        {
                        alt287=3;
                        }
                        break;
                    case ROWCOUNT_ATTR:
                        {
                        alt287=4;
                        }
                        break;
                    case BULK_ROWCOUNT_ATTR:
                        {
                        alt287=5;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("13036:15: (FOUND_ATTRGen= FOUND_ATTR | NOTFOUND_ATTRGen= NOTFOUND_ATTR | ISOPEN_ATTRGen= ISOPEN_ATTR | ROWCOUNT_ATTRGen= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR )", 287, 0, input);

                        throw nvae;
                    }

                    switch (alt287) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:17: FOUND_ATTRGen= FOUND_ATTR
                            {
                            FOUND_ATTRGen=(Token)input.LT(1);
                            match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_simple_expression9868); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:44: NOTFOUND_ATTRGen= NOTFOUND_ATTR
                            {
                            NOTFOUND_ATTRGen=(Token)input.LT(1);
                            match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_simple_expression9874); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:77: ISOPEN_ATTRGen= ISOPEN_ATTR
                            {
                            ISOPEN_ATTRGen=(Token)input.LT(1);
                            match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_simple_expression9880); if (failed) return retval;

                            }
                            break;
                        case 4 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:106: ROWCOUNT_ATTRGen= ROWCOUNT_ATTR
                            {
                            ROWCOUNT_ATTRGen=(Token)input.LT(1);
                            match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_simple_expression9886); if (failed) return retval;

                            }
                            break;
                        case 5 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13036:139: BULK_ROWCOUNT_ATTRGen= BULK_ROWCOUNT_ATTR
                            {
                            BULK_ROWCOUNT_ATTRGen=(Token)input.LT(1);
                            match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_simple_expression9892); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		simple_expressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(FOUND_ATTRGen != null) {
                      			Leaf FOUND_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			FOUND_ATTRGenLeaf.setKind("FOUND_ATTR");
                      			FOUND_ATTRGenLeaf.setValue(FOUND_ATTRGen.getText());
                      			FOUND_ATTRGenLeaf.setPos(FOUND_ATTRGen.getCharPositionInLine());
                      			FOUND_ATTRGenLeaf.setLine(FOUND_ATTRGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(FOUND_ATTRGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOTFOUND_ATTRGen != null) {
                      			Leaf NOTFOUND_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOTFOUND_ATTRGenLeaf.setKind("NOTFOUND_ATTR");
                      			NOTFOUND_ATTRGenLeaf.setValue(NOTFOUND_ATTRGen.getText());
                      			NOTFOUND_ATTRGenLeaf.setPos(NOTFOUND_ATTRGen.getCharPositionInLine());
                      			NOTFOUND_ATTRGenLeaf.setLine(NOTFOUND_ATTRGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(NOTFOUND_ATTRGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ISOPEN_ATTRGen != null) {
                      			Leaf ISOPEN_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			ISOPEN_ATTRGenLeaf.setKind("ISOPEN_ATTR");
                      			ISOPEN_ATTRGenLeaf.setValue(ISOPEN_ATTRGen.getText());
                      			ISOPEN_ATTRGenLeaf.setPos(ISOPEN_ATTRGen.getCharPositionInLine());
                      			ISOPEN_ATTRGenLeaf.setLine(ISOPEN_ATTRGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(ISOPEN_ATTRGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ROWCOUNT_ATTRGen != null) {
                      			Leaf ROWCOUNT_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			ROWCOUNT_ATTRGenLeaf.setKind("ROWCOUNT_ATTR");
                      			ROWCOUNT_ATTRGenLeaf.setValue(ROWCOUNT_ATTRGen.getText());
                      			ROWCOUNT_ATTRGenLeaf.setPos(ROWCOUNT_ATTRGen.getCharPositionInLine());
                      			ROWCOUNT_ATTRGenLeaf.setLine(ROWCOUNT_ATTRGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(ROWCOUNT_ATTRGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(BULK_ROWCOUNT_ATTRGen != null) {
                      			Leaf BULK_ROWCOUNT_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			BULK_ROWCOUNT_ATTRGenLeaf.setKind("BULK_ROWCOUNT_ATTR");
                      			BULK_ROWCOUNT_ATTRGenLeaf.setValue(BULK_ROWCOUNT_ATTRGen.getText());
                      			BULK_ROWCOUNT_ATTRGenLeaf.setPos(BULK_ROWCOUNT_ATTRGen.getCharPositionInLine());
                      			BULK_ROWCOUNT_ATTRGenLeaf.setLine(BULK_ROWCOUNT_ATTRGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(BULK_ROWCOUNT_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13098:4: column_specGen+= column_spec
                    {
                    pushFollow(FOLLOW_column_spec_in_simple_expression9905);
                    column_specGen=column_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                    list_column_specGen.add(column_specGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13116:4: QUOTED_STRINGGen= QUOTED_STRING
                    {
                    QUOTED_STRINGGen=(Token)input.LT(1);
                    match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_simple_expression9916); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a CST Leaf
                      		if(QUOTED_STRINGGen != null) {
                      			Leaf QUOTED_STRINGGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			QUOTED_STRINGGenLeaf.setKind("QUOTED_STRING");
                      			QUOTED_STRINGGenLeaf.setValue(QUOTED_STRINGGen.getText());
                      			QUOTED_STRINGGenLeaf.setPos(QUOTED_STRINGGen.getCharPositionInLine());
                      			QUOTED_STRINGGenLeaf.setLine(QUOTED_STRINGGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(QUOTED_STRINGGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13133:4: NUMBERGen= NUMBER
                    {
                    NUMBERGen=(Token)input.LT(1);
                    match(input,NUMBER,FOLLOW_NUMBER_in_simple_expression9927); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13150:5: COLONGen= COLON host_variableGen+= host_variable (COLONGen_1= COLON host_variableGen_1+= host_variable )?
                    {
                    COLONGen=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_simple_expression9939); if (failed) return retval;
                    pushFollow(FOLLOW_host_variable_in_simple_expression9943);
                    host_variableGen=host_variable();
                    _fsp--;
                    if (failed) return retval;
                    if (list_host_variableGen==null) list_host_variableGen=new ArrayList();
                    list_host_variableGen.add(host_variableGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13150:52: (COLONGen_1= COLON host_variableGen_1+= host_variable )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==COLON) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13150:54: COLONGen_1= COLON host_variableGen_1+= host_variable
                            {
                            COLONGen_1=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_simple_expression9949); if (failed) return retval;
                            pushFollow(FOLLOW_host_variable_in_simple_expression9953);
                            host_variableGen_1=host_variable();
                            _fsp--;
                            if (failed) return retval;
                            if (list_host_variableGen_1==null) list_host_variableGen_1=new ArrayList();
                            list_host_variableGen_1.add(host_variableGen_1);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a CST Leaf
                      		if(COLONGen != null) {
                      			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COLONGenLeaf.setKind("COLON");
                      			COLONGenLeaf.setValue(COLONGen.getText());
                      			COLONGenLeaf.setPos(COLONGen.getCharPositionInLine());
                      			COLONGenLeaf.setLine(COLONGen.getLine());
                      			simple_expressionReturnNode.getChildren().add(COLONGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_host_variableGen != null) {
                      	        for(Iterator it = list_host_variableGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("host_variable");
                      	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(COLONGen_1 != null) {
                      			Leaf COLONGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			COLONGen_1Leaf.setKind("COLON");
                      			COLONGen_1Leaf.setValue(COLONGen_1.getText());
                      			COLONGen_1Leaf.setPos(COLONGen_1.getCharPositionInLine());
                      			COLONGen_1Leaf.setLine(COLONGen_1.getLine());
                      			simple_expressionReturnNode.getChildren().add(COLONGen_1Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_host_variableGen_1 != null) {
                      	        for(Iterator it = list_host_variableGen_1.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.host_variable_return r = (PLSQL3Parser.host_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("host_variable");
                      	            	simple_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13200:4: TK_0= 'NULL'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_simple_expression9972); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node simple_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_expressionReturnNode.setKind("simple_expression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		simple_expressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_expressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end simple_expression

    public static class simple_case_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start simple_case_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13219:1: simple_case_statement returns [Node returnNode] : plsql_expressionGen+= plsql_expression (TK_0= 'WHEN' plsql_expressionGen_1+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+ ;
    public final simple_case_statement_return simple_case_statement() throws RecognitionException {
        simple_case_statement_return retval = new simple_case_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_plsql_expressionGen=null;
        List list_plsql_expressionGen_1=null;
        List list_seq_of_statementsGen=null;
        RuleReturnScope plsql_expressionGen = null;
        RuleReturnScope plsql_expressionGen_1 = null;
        RuleReturnScope seq_of_statementsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13220:1: (plsql_expressionGen+= plsql_expression (TK_0= 'WHEN' plsql_expressionGen_1+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13220:3: plsql_expressionGen+= plsql_expression (TK_0= 'WHEN' plsql_expressionGen_1+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+
            {
            pushFollow(FOLLOW_plsql_expression_in_simple_case_statement9994);
            plsql_expressionGen=plsql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
            list_plsql_expressionGen.add(plsql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13220:41: (TK_0= 'WHEN' plsql_expressionGen_1+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements )+
            int cnt290=0;
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( (LA290_0==116) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13220:43: TK_0= 'WHEN' plsql_expressionGen_1+= plsql_expression TK_1= 'THEN' seq_of_statementsGen+= seq_of_statements
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,116,FOLLOW_116_in_simple_case_statement10000); if (failed) return retval;
            	    pushFollow(FOLLOW_plsql_expression_in_simple_case_statement10004);
            	    plsql_expressionGen_1=plsql_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_plsql_expressionGen_1==null) list_plsql_expressionGen_1=new ArrayList();
            	    list_plsql_expressionGen_1.add(plsql_expressionGen_1);

            	    TK_1=(Token)input.LT(1);
            	    match(input,117,FOLLOW_117_in_simple_case_statement10008); if (failed) return retval;
            	    pushFollow(FOLLOW_seq_of_statements_in_simple_case_statement10012);
            	    seq_of_statementsGen=seq_of_statements();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_seq_of_statementsGen==null) list_seq_of_statementsGen=new ArrayList();
            	    list_seq_of_statementsGen.add(seq_of_statementsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt290 >= 1 ) break loop290;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(290, input);
                        throw eee;
                }
                cnt290++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node simple_case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		simple_case_statementReturnNode.setKind("simple_case_statement");
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	simple_case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal plsql_expressionGen_1 aggregation
              		if(list_plsql_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_plsql_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		simple_case_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_plsql_expressionGen_1 != null) {		
              	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) list_plsql_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("plsql_expression");
              	    		simple_case_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		simple_case_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_seq_of_statementsGen != null) {		
              	    	PLSQL3Parser.seq_of_statements_return r = (PLSQL3Parser.seq_of_statements_return) list_seq_of_statementsGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("seq_of_statements");
              	    		simple_case_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = simple_case_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end simple_case_statement

    public static class simple_case_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start simple_case_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13281:1: simple_case_expression returns [Node returnNode] : nested_expressionGen+= nested_expression (TK_0= 'WHEN' nested_expressionGen_1+= nested_expression TK_1= 'THEN' nested_expressionGen_2+= nested_expression )+ ;
    public final simple_case_expression_return simple_case_expression() throws RecognitionException {
        simple_case_expression_return retval = new simple_case_expression_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_nested_expressionGen=null;
        List list_nested_expressionGen_1=null;
        List list_nested_expressionGen_2=null;
        RuleReturnScope nested_expressionGen = null;
        RuleReturnScope nested_expressionGen_1 = null;
        RuleReturnScope nested_expressionGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13282:1: (nested_expressionGen+= nested_expression (TK_0= 'WHEN' nested_expressionGen_1+= nested_expression TK_1= 'THEN' nested_expressionGen_2+= nested_expression )+ )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13282:3: nested_expressionGen+= nested_expression (TK_0= 'WHEN' nested_expressionGen_1+= nested_expression TK_1= 'THEN' nested_expressionGen_2+= nested_expression )+
            {
            pushFollow(FOLLOW_nested_expression_in_simple_case_expression10036);
            nested_expressionGen=nested_expression();
            _fsp--;
            if (failed) return retval;
            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            list_nested_expressionGen.add(nested_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13282:43: (TK_0= 'WHEN' nested_expressionGen_1+= nested_expression TK_1= 'THEN' nested_expressionGen_2+= nested_expression )+
            int cnt291=0;
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==116) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13282:45: TK_0= 'WHEN' nested_expressionGen_1+= nested_expression TK_1= 'THEN' nested_expressionGen_2+= nested_expression
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,116,FOLLOW_116_in_simple_case_expression10042); if (failed) return retval;
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression10046);
            	    nested_expressionGen_1=nested_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_expressionGen_1==null) list_nested_expressionGen_1=new ArrayList();
            	    list_nested_expressionGen_1.add(nested_expressionGen_1);

            	    TK_1=(Token)input.LT(1);
            	    match(input,117,FOLLOW_117_in_simple_case_expression10050); if (failed) return retval;
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression10054);
            	    nested_expressionGen_2=nested_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_expressionGen_2==null) list_nested_expressionGen_2=new ArrayList();
            	    list_nested_expressionGen_2.add(nested_expressionGen_2);


            	    }
            	    break;

            	default :
            	    if ( cnt291 >= 1 ) break loop291;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(291, input);
                        throw eee;
                }
                cnt291++;
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node simple_case_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		simple_case_expressionReturnNode.setKind("simple_case_expression");
              	    // Create a CST Node
              		if(list_nested_expressionGen != null) {
              	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_expression");
              	            	simple_case_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal nested_expressionGen_1 aggregation
              		if(list_nested_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_nested_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		simple_case_expressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_nested_expressionGen_1 != null) {		
              	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) list_nested_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_expression");
              	    		simple_case_expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		simple_case_expressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_nested_expressionGen_2 != null) {		
              	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) list_nested_expressionGen_2.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_expression");
              	    		simple_case_expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = simple_case_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end simple_case_expression

    public static class single_column_for_loop_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start single_column_for_loop
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13343:1: single_column_for_loop returns [Node returnNode] : TK_0= 'FOR' column_nameGen+= column_name (TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN | (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal ) ;
    public final single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        single_column_for_loop_return retval = new single_column_for_loop_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_column_nameGen=null;
        List list_literalsGen=null;
        List list_subqueryGen=null;
        List list_patternGen=null;
        List list_literalGen=null;
        List list_literalGen_1=null;
        List list_keyINCREMENTGen=null;
        List list_keyDECREMENTGen=null;
        List list_literalGen_2=null;
        RuleReturnScope column_nameGen = null;
        RuleReturnScope literalsGen = null;
        RuleReturnScope subqueryGen = null;
        RuleReturnScope patternGen = null;
        RuleReturnScope literalGen = null;
        RuleReturnScope literalGen_1 = null;
        RuleReturnScope keyINCREMENTGen = null;
        RuleReturnScope keyDECREMENTGen = null;
        RuleReturnScope literalGen_2 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13344:1: (TK_0= 'FOR' column_nameGen+= column_name (TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN | (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal ) )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13344:3: TK_0= 'FOR' column_nameGen+= column_name (TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN | (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal )
            {
            TK_0=(Token)input.LT(1);
            match(input,140,FOLLOW_140_in_single_column_for_loop10078); if (failed) return retval;
            pushFollow(FOLLOW_column_name_in_single_column_for_loop10082);
            column_nameGen=column_name();
            _fsp--;
            if (failed) return retval;
            if (list_column_nameGen==null) list_column_nameGen=new ArrayList();
            list_column_nameGen.add(column_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13345:3: (TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN | (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal )
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==51) ) {
                alt295=1;
            }
            else if ( (LA295_0==72||LA295_0==113) ) {
                alt295=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("13345:3: (TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN | (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal )", 295, 0, input);

                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13345:5: TK_1= 'IN' LPARENGen= LPAREN (literalsGen+= literals | subqueryGen+= subquery ) RPARENGen= RPAREN
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_single_column_for_loop10090); if (failed) return retval;
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_single_column_for_loop10094); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13345:32: (literalsGen+= literals | subqueryGen+= subquery )
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==NUMBER||LA292_0==QUOTED_STRING||(LA292_0>=PLUS && LA292_0<=MINUS)) ) {
                        alt292=1;
                    }
                    else if ( (LA292_0==LPAREN) ) {
                        alt292=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("13345:32: (literalsGen+= literals | subqueryGen+= subquery )", 292, 0, input);

                        throw nvae;
                    }
                    switch (alt292) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13345:34: literalsGen+= literals
                            {
                            pushFollow(FOLLOW_literals_in_single_column_for_loop10100);
                            literalsGen=literals();
                            _fsp--;
                            if (failed) return retval;
                            if (list_literalsGen==null) list_literalsGen=new ArrayList();
                            list_literalsGen.add(literalsGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13345:58: subqueryGen+= subquery
                            {
                            pushFollow(FOLLOW_subquery_in_single_column_for_loop10106);
                            subqueryGen=subquery();
                            _fsp--;
                            if (failed) return retval;
                            if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
                            list_subqueryGen.add(subqueryGen);


                            }
                            break;

                    }

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_single_column_for_loop10112); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:5: (TK_2= 'LIKE' patternGen+= pattern )? TK_3= 'FROM' literalGen+= literal TK_4= 'TO' literalGen_1+= literal (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT ) literalGen_2+= literal
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:5: (TK_2= 'LIKE' patternGen+= pattern )?
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==72) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:7: TK_2= 'LIKE' patternGen+= pattern
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,72,FOLLOW_72_in_single_column_for_loop10122); if (failed) return retval;
                            pushFollow(FOLLOW_pattern_in_single_column_for_loop10126);
                            patternGen=pattern();
                            _fsp--;
                            if (failed) return retval;
                            if (list_patternGen==null) list_patternGen=new ArrayList();
                            list_patternGen.add(patternGen);


                            }
                            break;

                    }

                    TK_3=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_single_column_for_loop10133); if (failed) return retval;
                    pushFollow(FOLLOW_literal_in_single_column_for_loop10137);
                    literalGen=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen==null) list_literalGen=new ArrayList();
                    list_literalGen.add(literalGen);

                    TK_4=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_single_column_for_loop10141); if (failed) return retval;
                    pushFollow(FOLLOW_literal_in_single_column_for_loop10145);
                    literalGen_1=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen_1==null) list_literalGen_1=new ArrayList();
                    list_literalGen_1.add(literalGen_1);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:106: (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT )
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==174) ) {
                        alt294=1;
                    }
                    else if ( (LA294_0==165) ) {
                        alt294=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("13346:106: (keyINCREMENTGen+= keyINCREMENT | keyDECREMENTGen+= keyDECREMENT )", 294, 0, input);

                        throw nvae;
                    }
                    switch (alt294) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:108: keyINCREMENTGen+= keyINCREMENT
                            {
                            pushFollow(FOLLOW_keyINCREMENT_in_single_column_for_loop10151);
                            keyINCREMENTGen=keyINCREMENT();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyINCREMENTGen==null) list_keyINCREMENTGen=new ArrayList();
                            list_keyINCREMENTGen.add(keyINCREMENTGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13346:140: keyDECREMENTGen+= keyDECREMENT
                            {
                            pushFollow(FOLLOW_keyDECREMENT_in_single_column_for_loop10157);
                            keyDECREMENTGen=keyDECREMENT();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyDECREMENTGen==null) list_keyDECREMENTGen=new ArrayList();
                            list_keyDECREMENTGen.add(keyDECREMENTGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_literal_in_single_column_for_loop10163);
                    literalGen_2=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen_2==null) list_literalGen_2=new ArrayList();
                    list_literalGen_2.add(literalGen_2);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node single_column_for_loopReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		single_column_for_loopReturnNode.setKind("single_column_for_loop");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		single_column_for_loopReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_column_nameGen != null) {
              	        for(Iterator it = list_column_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_name_return r = (PLSQL3Parser.column_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_name");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		single_column_for_loopReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			single_column_for_loopReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_literalsGen != null) {
              	        for(Iterator it = list_literalsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literals_return r = (PLSQL3Parser.literals_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literals");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			single_column_for_loopReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		single_column_for_loopReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_patternGen != null) {
              	        for(Iterator it = list_patternGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.pattern_return r = (PLSQL3Parser.pattern_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pattern");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		single_column_for_loopReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_literalGen != null) {
              	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		single_column_for_loopReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_literalGen_1 != null) {
              	        for(Iterator it = list_literalGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyINCREMENTGen != null) {
              	        for(Iterator it = list_keyINCREMENTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyINCREMENT_return r = (PLSQL3Parser.keyINCREMENT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyINCREMENT");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyDECREMENTGen != null) {
              	        for(Iterator it = list_keyDECREMENTGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyDECREMENT_return r = (PLSQL3Parser.keyDECREMENT_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyDECREMENT");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_literalGen_2 != null) {
              	        for(Iterator it = list_literalGen_2.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	single_column_for_loopReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = single_column_for_loopReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end single_column_for_loop

    public static class sql_condition_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_condition
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13510:1: sql_condition returns [Node returnNode] : condition_orGen+= condition_or ;
    public final sql_condition_return sql_condition() throws RecognitionException {
        sql_condition_return retval = new sql_condition_return();
        retval.start = input.LT(1);

        List list_condition_orGen=null;
        RuleReturnScope condition_orGen = null;
         isSql = true; 
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13512:2: (condition_orGen+= condition_or )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13512:4: condition_orGen+= condition_or
            {
            pushFollow(FOLLOW_condition_or_in_sql_condition10194);
            condition_orGen=condition_or();
            _fsp--;
            if (failed) return retval;
            if (list_condition_orGen==null) list_condition_orGen=new ArrayList();
            list_condition_orGen.add(condition_orGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node sql_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		sql_conditionReturnNode.setKind("sql_condition");
              	    // Create a CST Node
              		if(list_condition_orGen != null) {
              	        for(Iterator it = list_condition_orGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.condition_or_return r = (PLSQL3Parser.condition_or_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition_or");
              	            	sql_conditionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = sql_conditionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_condition

    public static class sql_identifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_identifier
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13533:1: sql_identifier returns [Node returnNode] : (identifierGen+= identifier | TK_0= 'ROWID' );
    public final sql_identifier_return sql_identifier() throws RecognitionException {
        sql_identifier_return retval = new sql_identifier_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13534:1: (identifierGen+= identifier | TK_0= 'ROWID' )
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( ((LA296_0>=ID && LA296_0<=DOUBLEQUOTED_STRING)) ) {
                alt296=1;
            }
            else if ( (LA296_0==110) ) {
                alt296=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("13533:1: sql_identifier returns [Node returnNode] : (identifierGen+= identifier | TK_0= 'ROWID' );", 296, 0, input);

                throw nvae;
            }
            switch (alt296) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13534:3: identifierGen+= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_sql_identifier10217);
                    identifierGen=identifier();
                    _fsp--;
                    if (failed) return retval;
                    if (list_identifierGen==null) list_identifierGen=new ArrayList();
                    list_identifierGen.add(identifierGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node sql_identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		sql_identifierReturnNode.setKind("sql_identifier");
                      	    // Create a CST Node
                      		if(list_identifierGen != null) {
                      	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifier");
                      	            	sql_identifierReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = sql_identifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13552:4: TK_0= 'ROWID'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_sql_identifier10228); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node sql_identifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		sql_identifierReturnNode.setKind("sql_identifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue(TK_0.getText());
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		sql_identifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = sql_identifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_identifier

    public static class sql_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13572:1: sql_statement returns [Node returnNode] : sql_commandGen+= sql_command ;
    public final sql_statement_return sql_statement() throws RecognitionException {
        sql_statement_return retval = new sql_statement_return();
        retval.start = input.LT(1);

        List list_sql_commandGen=null;
        RuleReturnScope sql_commandGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13573:1: (sql_commandGen+= sql_command )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13573:3: sql_commandGen+= sql_command
            {
            pushFollow(FOLLOW_sql_command_in_sql_statement10252);
            sql_commandGen=sql_command();
            _fsp--;
            if (failed) return retval;
            if (list_sql_commandGen==null) list_sql_commandGen=new ArrayList();
            list_sql_commandGen.add(sql_commandGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node sql_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		sql_statementReturnNode.setKind("sql_statement");
              	    // Create a CST Node
              		if(list_sql_commandGen != null) {
              	        for(Iterator it = list_sql_commandGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_command_return r = (PLSQL3Parser.sql_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_command");
              	            	sql_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = sql_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_statement

    public static class sql_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13593:1: sql_command returns [Node returnNode] : (to_modify_dataGen+= to_modify_data | to_control_dataGen+= to_control_data );
    public final sql_command_return sql_command() throws RecognitionException {
        sql_command_return retval = new sql_command_return();
        retval.start = input.LT(1);

        List list_to_modify_dataGen=null;
        List list_to_control_dataGen=null;
        RuleReturnScope to_modify_dataGen = null;
        RuleReturnScope to_control_dataGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13594:1: (to_modify_dataGen+= to_modify_data | to_control_dataGen+= to_control_data )
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==70||LA297_0==112||LA297_0==130||LA297_0==135||LA297_0==148) ) {
                alt297=1;
            }
            else if ( (LA297_0==60||LA297_0==118||LA297_0==136||LA297_0==146||LA297_0==231||LA297_0==242||LA297_0==256) ) {
                alt297=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("13593:1: sql_command returns [Node returnNode] : (to_modify_dataGen+= to_modify_data | to_control_dataGen+= to_control_data );", 297, 0, input);

                throw nvae;
            }
            switch (alt297) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13594:3: to_modify_dataGen+= to_modify_data
                    {
                    pushFollow(FOLLOW_to_modify_data_in_sql_command10273);
                    to_modify_dataGen=to_modify_data();
                    _fsp--;
                    if (failed) return retval;
                    if (list_to_modify_dataGen==null) list_to_modify_dataGen=new ArrayList();
                    list_to_modify_dataGen.add(to_modify_dataGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node sql_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		sql_commandReturnNode.setKind("sql_command");
                      	    // Create a CST Node
                      		if(list_to_modify_dataGen != null) {
                      	        for(Iterator it = list_to_modify_dataGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.to_modify_data_return r = (PLSQL3Parser.to_modify_data_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("to_modify_data");
                      	            	sql_commandReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = sql_commandReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13612:4: to_control_dataGen+= to_control_data
                    {
                    pushFollow(FOLLOW_to_control_data_in_sql_command10284);
                    to_control_dataGen=to_control_data();
                    _fsp--;
                    if (failed) return retval;
                    if (list_to_control_dataGen==null) list_to_control_dataGen=new ArrayList();
                    list_to_control_dataGen.add(to_control_dataGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node sql_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		sql_commandReturnNode.setKind("sql_command");
                      	    // Create a CST Node
                      		if(list_to_control_dataGen != null) {
                      	        for(Iterator it = list_to_control_dataGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.to_control_data_return r = (PLSQL3Parser.to_control_data_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("to_control_data");
                      	            	sql_commandReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = sql_commandReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_command

    public static class subquery_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start subquery
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13632:1: subquery returns [Node returnNode] : LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN ;
    public final subquery_return subquery() throws RecognitionException {
        subquery_return retval = new subquery_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_select_commandGen=null;
        RuleReturnScope select_commandGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13633:1: (LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13633:3: LPARENGen= LPAREN select_commandGen+= select_command RPARENGen= RPAREN
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_subquery10305); if (failed) return retval;
            pushFollow(FOLLOW_select_command_in_subquery10309);
            select_commandGen=select_command();
            _fsp--;
            if (failed) return retval;
            if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
            list_select_commandGen.add(select_commandGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_subquery10313); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node subqueryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		subqueryReturnNode.setKind("subquery");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			subqueryReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_select_commandGen != null) {
              	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("select_command");
              	            	subqueryReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			subqueryReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = subqueryReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subquery

    public static class subscript_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start subscript
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13671:1: subscript returns [Node returnNode] : plsql_expressionGen+= plsql_expression ;
    public final subscript_return subscript() throws RecognitionException {
        subscript_return retval = new subscript_return();
        retval.start = input.LT(1);

        List list_plsql_expressionGen=null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13672:1: (plsql_expressionGen+= plsql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13672:3: plsql_expressionGen+= plsql_expression
            {
            pushFollow(FOLLOW_plsql_expression_in_subscript10334);
            plsql_expressionGen=plsql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
            list_plsql_expressionGen.add(plsql_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node subscriptReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		subscriptReturnNode.setKind("subscript");
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	subscriptReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = subscriptReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subscript

    public static class subtype_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start subtype_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13692:1: subtype_declaration returns [Node returnNode] : keySUBTYPEGen+= keySUBTYPE type_specGen+= type_spec TK_0= 'IS' type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' | keyRANGEGen+= keyRANGE literalGen+= literal DOUBLEDOTGen= DOUBLEDOT literalGen_1+= literal )? SEMIGen= SEMI ;
    public final subtype_declaration_return subtype_declaration() throws RecognitionException {
        subtype_declaration_return retval = new subtype_declaration_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token DOUBLEDOTGen=null;
        Token SEMIGen=null;
        List list_keySUBTYPEGen=null;
        List list_type_specGen=null;
        List list_type_specGen_1=null;
        List list_keyRANGEGen=null;
        List list_literalGen=null;
        List list_literalGen_1=null;
        RuleReturnScope keySUBTYPEGen = null;
        RuleReturnScope type_specGen = null;
        RuleReturnScope type_specGen_1 = null;
        RuleReturnScope keyRANGEGen = null;
        RuleReturnScope literalGen = null;
        RuleReturnScope literalGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13693:1: (keySUBTYPEGen+= keySUBTYPE type_specGen+= type_spec TK_0= 'IS' type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' | keyRANGEGen+= keyRANGE literalGen+= literal DOUBLEDOTGen= DOUBLEDOT literalGen_1+= literal )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13693:3: keySUBTYPEGen+= keySUBTYPE type_specGen+= type_spec TK_0= 'IS' type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' | keyRANGEGen+= keyRANGE literalGen+= literal DOUBLEDOTGen= DOUBLEDOT literalGen_1+= literal )? SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keySUBTYPE_in_subtype_declaration10356);
            keySUBTYPEGen=keySUBTYPE();
            _fsp--;
            if (failed) return retval;
            if (list_keySUBTYPEGen==null) list_keySUBTYPEGen=new ArrayList();
            list_keySUBTYPEGen.add(keySUBTYPEGen);

            pushFollow(FOLLOW_type_spec_in_subtype_declaration10360);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_subtype_declaration10364); if (failed) return retval;
            pushFollow(FOLLOW_type_spec_in_subtype_declaration10368);
            type_specGen_1=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen_1==null) list_type_specGen_1=new ArrayList();
            list_type_specGen_1.add(type_specGen_1);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13693:89: (TK_1= 'NOT' TK_2= 'NULL' | keyRANGEGen+= keyRANGE literalGen+= literal DOUBLEDOTGen= DOUBLEDOT literalGen_1+= literal )?
            int alt298=3;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==62) ) {
                alt298=1;
            }
            else if ( (LA298_0==247) ) {
                alt298=2;
            }
            switch (alt298) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13693:91: TK_1= 'NOT' TK_2= 'NULL'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_subtype_declaration10374); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_subtype_declaration10378); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13693:116: keyRANGEGen+= keyRANGE literalGen+= literal DOUBLEDOTGen= DOUBLEDOT literalGen_1+= literal
                    {
                    pushFollow(FOLLOW_keyRANGE_in_subtype_declaration10384);
                    keyRANGEGen=keyRANGE();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyRANGEGen==null) list_keyRANGEGen=new ArrayList();
                    list_keyRANGEGen.add(keyRANGEGen);

                    pushFollow(FOLLOW_literal_in_subtype_declaration10388);
                    literalGen=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen==null) list_literalGen=new ArrayList();
                    list_literalGen.add(literalGen);

                    DOUBLEDOTGen=(Token)input.LT(1);
                    match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_subtype_declaration10392); if (failed) return retval;
                    pushFollow(FOLLOW_literal_in_subtype_declaration10396);
                    literalGen_1=literal();
                    _fsp--;
                    if (failed) return retval;
                    if (list_literalGen_1==null) list_literalGen_1=new ArrayList();
                    list_literalGen_1.add(literalGen_1);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_subtype_declaration10403); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node subtype_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		subtype_declarationReturnNode.setKind("subtype_declaration");
              	    // Create a CST Node
              		if(list_keySUBTYPEGen != null) {
              	        for(Iterator it = list_keySUBTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keySUBTYPE_return r = (PLSQL3Parser.keySUBTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keySUBTYPE");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		subtype_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_type_specGen_1 != null) {
              	        for(Iterator it = list_type_specGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		subtype_declarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		subtype_declarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyRANGEGen != null) {
              	        for(Iterator it = list_keyRANGEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyRANGE_return r = (PLSQL3Parser.keyRANGE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyRANGE");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_literalGen != null) {
              	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOUBLEDOTGen != null) {
              			Leaf DOUBLEDOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOUBLEDOTGenLeaf.setKind("DOUBLEDOT");
              			DOUBLEDOTGenLeaf.setValue(DOUBLEDOTGen.getText());
              			DOUBLEDOTGenLeaf.setPos(DOUBLEDOTGen.getCharPositionInLine());
              			DOUBLEDOTGenLeaf.setLine(DOUBLEDOTGen.getLine());
              			subtype_declarationReturnNode.getChildren().add(DOUBLEDOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_literalGen_1 != null) {
              	        for(Iterator it = list_literalGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.literal_return r = (PLSQL3Parser.literal_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("literal");
              	            	subtype_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			subtype_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = subtype_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subtype_declaration

    public static class statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start statement
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13808:1: statement returns [Node returnNode] : (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);

        List list_assignment_statementGen=null;
        List list_exit_statementGen=null;
        List list_goto_statementGen=null;
        List list_case_statementGen=null;
        List list_if_statementGen=null;
        List list_loop_statementGen=null;
        List list_null_statementGen=null;
        List list_raise_statementGen=null;
        List list_return_statementGen=null;
        List list_sql_statementGen=null;
        List list_plsql_blockGen=null;
        List list_function_callGen=null;
        RuleReturnScope assignment_statementGen = null;
        RuleReturnScope exit_statementGen = null;
        RuleReturnScope goto_statementGen = null;
        RuleReturnScope case_statementGen = null;
        RuleReturnScope if_statementGen = null;
        RuleReturnScope loop_statementGen = null;
        RuleReturnScope null_statementGen = null;
        RuleReturnScope raise_statementGen = null;
        RuleReturnScope return_statementGen = null;
        RuleReturnScope sql_statementGen = null;
        RuleReturnScope plsql_blockGen = null;
        RuleReturnScope function_callGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13809:1: (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call )
            int alt299=12;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA299_1 = input.LA(2);

                if ( (synpred434()) ) {
                    alt299=1;
                }
                else if ( (synpred437()) ) {
                    alt299=4;
                }
                else if ( (synpred444()) ) {
                    alt299=11;
                }
                else if ( (true) ) {
                    alt299=12;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("13808:1: statement returns [Node returnNode] : (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call );", 299, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA299_2 = input.LA(2);

                if ( (synpred434()) ) {
                    alt299=1;
                }
                else if ( (synpred437()) ) {
                    alt299=4;
                }
                else if ( (synpred444()) ) {
                    alt299=11;
                }
                else if ( (true) ) {
                    alt299=12;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("13808:1: statement returns [Node returnNode] : (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call );", 299, 2, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                alt299=1;
                }
                break;
            case 236:
                {
                alt299=2;
                }
                break;
            case 123:
                {
                alt299=3;
                }
                break;
            case 58:
                {
                alt299=4;
                }
                break;
            case 129:
                {
                alt299=5;
                }
                break;
            case LLABEL:
                {
                int LA299_8 = input.LA(2);

                if ( (synpred439()) ) {
                    alt299=6;
                }
                else if ( (synpred444()) ) {
                    alt299=11;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("13808:1: statement returns [Node returnNode] : (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call );", 299, 8, input);

                    throw nvae;
                }
                }
                break;
            case 140:
            case 239:
            case 264:
                {
                alt299=6;
                }
                break;
            case 69:
                {
                alt299=7;
                }
                break;
            case 246:
                {
                alt299=8;
                }
                break;
            case 253:
                {
                alt299=9;
                }
                break;
            case 60:
            case 70:
            case 112:
            case 118:
            case 130:
            case 135:
            case 136:
            case 146:
            case 148:
            case 231:
            case 242:
            case 256:
                {
                alt299=10;
                }
                break;
            case 53:
            case 74:
            case 120:
            case 144:
            case 164:
            case 233:
            case 245:
            case 258:
            case 260:
                {
                alt299=11;
                }
                break;
            case 110:
                {
                alt299=12;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("13808:1: statement returns [Node returnNode] : (assignment_statementGen+= assignment_statement | exit_statementGen+= exit_statement | goto_statementGen+= goto_statement | case_statementGen+= case_statement | if_statementGen+= if_statement | loop_statementGen+= loop_statement | null_statementGen+= null_statement | raise_statementGen+= raise_statement | return_statementGen+= return_statement | sql_statementGen+= sql_statement | plsql_blockGen+= plsql_block | function_callGen+= function_call );", 299, 0, input);

                throw nvae;
            }

            switch (alt299) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13809:3: assignment_statementGen+= assignment_statement
                    {
                    pushFollow(FOLLOW_assignment_statement_in_statement10425);
                    assignment_statementGen=assignment_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_assignment_statementGen==null) list_assignment_statementGen=new ArrayList();
                    list_assignment_statementGen.add(assignment_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_assignment_statementGen != null) {
                      	        for(Iterator it = list_assignment_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.assignment_statement_return r = (PLSQL3Parser.assignment_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("assignment_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13827:4: exit_statementGen+= exit_statement
                    {
                    pushFollow(FOLLOW_exit_statement_in_statement10436);
                    exit_statementGen=exit_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_exit_statementGen==null) list_exit_statementGen=new ArrayList();
                    list_exit_statementGen.add(exit_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_exit_statementGen != null) {
                      	        for(Iterator it = list_exit_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.exit_statement_return r = (PLSQL3Parser.exit_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exit_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13845:4: goto_statementGen+= goto_statement
                    {
                    pushFollow(FOLLOW_goto_statement_in_statement10447);
                    goto_statementGen=goto_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_goto_statementGen==null) list_goto_statementGen=new ArrayList();
                    list_goto_statementGen.add(goto_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_goto_statementGen != null) {
                      	        for(Iterator it = list_goto_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.goto_statement_return r = (PLSQL3Parser.goto_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("goto_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13863:4: case_statementGen+= case_statement
                    {
                    pushFollow(FOLLOW_case_statement_in_statement10458);
                    case_statementGen=case_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_case_statementGen==null) list_case_statementGen=new ArrayList();
                    list_case_statementGen.add(case_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_case_statementGen != null) {
                      	        for(Iterator it = list_case_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.case_statement_return r = (PLSQL3Parser.case_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("case_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13881:4: if_statementGen+= if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_statement10469);
                    if_statementGen=if_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_if_statementGen==null) list_if_statementGen=new ArrayList();
                    list_if_statementGen.add(if_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_if_statementGen != null) {
                      	        for(Iterator it = list_if_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.if_statement_return r = (PLSQL3Parser.if_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("if_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13899:4: loop_statementGen+= loop_statement
                    {
                    pushFollow(FOLLOW_loop_statement_in_statement10481);
                    loop_statementGen=loop_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_loop_statementGen==null) list_loop_statementGen=new ArrayList();
                    list_loop_statementGen.add(loop_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_loop_statementGen != null) {
                      	        for(Iterator it = list_loop_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.loop_statement_return r = (PLSQL3Parser.loop_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("loop_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13917:4: null_statementGen+= null_statement
                    {
                    pushFollow(FOLLOW_null_statement_in_statement10493);
                    null_statementGen=null_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_null_statementGen==null) list_null_statementGen=new ArrayList();
                    list_null_statementGen.add(null_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_null_statementGen != null) {
                      	        for(Iterator it = list_null_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.null_statement_return r = (PLSQL3Parser.null_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("null_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13935:4: raise_statementGen+= raise_statement
                    {
                    pushFollow(FOLLOW_raise_statement_in_statement10504);
                    raise_statementGen=raise_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_raise_statementGen==null) list_raise_statementGen=new ArrayList();
                    list_raise_statementGen.add(raise_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_raise_statementGen != null) {
                      	        for(Iterator it = list_raise_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.raise_statement_return r = (PLSQL3Parser.raise_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("raise_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13953:4: return_statementGen+= return_statement
                    {
                    pushFollow(FOLLOW_return_statement_in_statement10515);
                    return_statementGen=return_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_return_statementGen==null) list_return_statementGen=new ArrayList();
                    list_return_statementGen.add(return_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_return_statementGen != null) {
                      	        for(Iterator it = list_return_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.return_statement_return r = (PLSQL3Parser.return_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("return_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13971:4: sql_statementGen+= sql_statement
                    {
                    pushFollow(FOLLOW_sql_statement_in_statement10526);
                    sql_statementGen=sql_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_statementGen==null) list_sql_statementGen=new ArrayList();
                    list_sql_statementGen.add(sql_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_sql_statementGen != null) {
                      	        for(Iterator it = list_sql_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_statement_return r = (PLSQL3Parser.sql_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13989:4: plsql_blockGen+= plsql_block
                    {
                    pushFollow(FOLLOW_plsql_block_in_statement10537);
                    plsql_blockGen=plsql_block();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_blockGen==null) list_plsql_blockGen=new ArrayList();
                    list_plsql_blockGen.add(plsql_blockGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_plsql_blockGen != null) {
                      	        for(Iterator it = list_plsql_blockGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_block_return r = (PLSQL3Parser.plsql_block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14008:4: function_callGen+= function_call
                    {
                    pushFollow(FOLLOW_function_call_in_statement10549);
                    function_callGen=function_call();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_callGen==null) list_function_callGen=new ArrayList();
                    list_function_callGen.add(function_callGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_function_callGen != null) {
                      	        for(Iterator it = list_function_callGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_call_return r = (PLSQL3Parser.function_call_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_call");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end statement

    public static class table_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start table_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14028:1: table_name returns [Node returnNode] : sql_identifierGen+= sql_identifier ;
    public final table_name_return table_name() throws RecognitionException {
        table_name_return retval = new table_name_return();
        retval.start = input.LT(1);

        List list_sql_identifierGen=null;
        RuleReturnScope sql_identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14029:1: (sql_identifierGen+= sql_identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14029:3: sql_identifierGen+= sql_identifier
            {
            pushFollow(FOLLOW_sql_identifier_in_table_name10570);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node table_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		table_nameReturnNode.setKind("table_name");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	table_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = table_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end table_name

    public static class table_reference_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start table_reference_list
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14049:1: table_reference_list returns [Node returnNode] : selected_tableGen+= selected_table (COMMAGen_List+= COMMA selected_tableGen_1+= selected_table )* ;
    public final table_reference_list_return table_reference_list() throws RecognitionException {
        table_reference_list_return retval = new table_reference_list_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_selected_tableGen=null;
        List list_selected_tableGen_1=null;
        RuleReturnScope selected_tableGen = null;
        RuleReturnScope selected_tableGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:1: (selected_tableGen+= selected_table (COMMAGen_List+= COMMA selected_tableGen_1+= selected_table )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:3: selected_tableGen+= selected_table (COMMAGen_List+= COMMA selected_tableGen_1+= selected_table )*
            {
            pushFollow(FOLLOW_selected_table_in_table_reference_list10591);
            selected_tableGen=selected_table();
            _fsp--;
            if (failed) return retval;
            if (list_selected_tableGen==null) list_selected_tableGen=new ArrayList();
            list_selected_tableGen.add(selected_tableGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:37: (COMMAGen_List+= COMMA selected_tableGen_1+= selected_table )*
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);

                if ( (LA300_0==COMMA) ) {
                    int LA300_26 = input.LA(2);

                    if ( (synpred445()) ) {
                        alt300=1;
                    }


                }


                switch (alt300) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:39: COMMAGen_List+= COMMA selected_tableGen_1+= selected_table
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_table_reference_list10597); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_selected_table_in_table_reference_list10601);
            	    selected_tableGen_1=selected_table();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_selected_tableGen_1==null) list_selected_tableGen_1=new ArrayList();
            	    list_selected_tableGen_1.add(selected_tableGen_1);


            	    }
            	    break;

            	default :
            	    break loop300;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node table_reference_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		table_reference_listReturnNode.setKind("table_reference_list");
              	    // Create a CST Node
              		if(list_selected_tableGen != null) {
              	        for(Iterator it = list_selected_tableGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("selected_table");
              	            	table_reference_listReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			table_reference_listReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_selected_tableGen_1 != null) {		
              	    	PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) list_selected_tableGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("selected_table");
              	    		table_reference_listReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = table_reference_listReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end table_reference_list

    public static class table_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start table_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14095:1: table_spec returns [Node returnNode] : (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name (AT_SIGNGen= AT_SIGN link_nameGen+= link_name )? ;
    public final table_spec_return table_spec() throws RecognitionException {
        table_spec_return retval = new table_spec_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token AT_SIGNGen=null;
        List list_schema_nameGen=null;
        List list_table_nameGen=null;
        List list_link_nameGen=null;
        RuleReturnScope schema_nameGen = null;
        RuleReturnScope table_nameGen = null;
        RuleReturnScope link_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:1: ( (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name (AT_SIGNGen= AT_SIGN link_nameGen+= link_name )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:3: (schema_nameGen+= schema_name DOTGen= DOT )? table_nameGen+= table_name (AT_SIGNGen= AT_SIGN link_nameGen+= link_name )?
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:3: (schema_nameGen+= schema_name DOTGen= DOT )?
            int alt301=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA301_1 = input.LA(2);

                    if ( (LA301_1==DOT) ) {
                        alt301=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA301_2 = input.LA(2);

                    if ( (LA301_2==DOT) ) {
                        alt301=1;
                    }
                    }
                    break;
                case 110:
                    {
                    int LA301_3 = input.LA(2);

                    if ( (LA301_3==DOT) ) {
                        alt301=1;
                    }
                    }
                    break;
            }

            switch (alt301) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:5: schema_nameGen+= schema_name DOTGen= DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_table_spec10627);
                    schema_nameGen=schema_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_schema_nameGen==null) list_schema_nameGen=new ArrayList();
                    list_schema_nameGen.add(schema_nameGen);

                    DOTGen=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_table_spec10631); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_table_spec10638);
            table_nameGen=table_name();
            _fsp--;
            if (failed) return retval;
            if (list_table_nameGen==null) list_table_nameGen=new ArrayList();
            list_table_nameGen.add(table_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:73: (AT_SIGNGen= AT_SIGN link_nameGen+= link_name )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==AT_SIGN) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14096:75: AT_SIGNGen= AT_SIGN link_nameGen+= link_name
                    {
                    AT_SIGNGen=(Token)input.LT(1);
                    match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_spec10644); if (failed) return retval;
                    pushFollow(FOLLOW_link_name_in_table_spec10648);
                    link_nameGen=link_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_link_nameGen==null) list_link_nameGen=new ArrayList();
                    list_link_nameGen.add(link_nameGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node table_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		table_specReturnNode.setKind("table_spec");
              	    // Create a CST Node
              		if(list_schema_nameGen != null) {
              	        for(Iterator it = list_schema_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.schema_name_return r = (PLSQL3Parser.schema_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schema_name");
              	            	table_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGenLeaf.setKind("DOT");
              			DOTGenLeaf.setValue(DOTGen.getText());
              			DOTGenLeaf.setPos(DOTGen.getCharPositionInLine());
              			DOTGenLeaf.setLine(DOTGen.getLine());
              			table_specReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_table_nameGen != null) {
              	        for(Iterator it = list_table_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.table_name_return r = (PLSQL3Parser.table_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("table_name");
              	            	table_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(AT_SIGNGen != null) {
              			Leaf AT_SIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			AT_SIGNGenLeaf.setKind("AT_SIGN");
              			AT_SIGNGenLeaf.setValue(AT_SIGNGen.getText());
              			AT_SIGNGenLeaf.setPos(AT_SIGNGen.getCharPositionInLine());
              			AT_SIGNGenLeaf.setLine(AT_SIGNGen.getLine());
              			table_specReturnNode.getChildren().add(AT_SIGNGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_link_nameGen != null) {
              	        for(Iterator it = list_link_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.link_name_return r = (PLSQL3Parser.link_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("link_name");
              	            	table_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = table_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end table_spec

    public static class table_type_dec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start table_type_dec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14154:1: table_type_dec returns [Node returnNode] : keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' TK_1= 'TABLE' TK_2= 'OF' type_specGen+= type_spec (TK_3= 'NOT' TK_4= 'NULL' )? (TK_5= 'INDEX' TK_6= 'BY' (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN ) )? SEMIGen= SEMI ;
    public final table_type_dec_return table_type_dec() throws RecognitionException {
        table_type_dec_return retval = new table_type_dec_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token SEMIGen=null;
        List list_keyTYPEGen=null;
        List list_type_nameGen=null;
        List list_type_specGen=null;
        List list_integerGen=null;
        RuleReturnScope keyTYPEGen = null;
        RuleReturnScope type_nameGen = null;
        RuleReturnScope type_specGen = null;
        RuleReturnScope integerGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14155:1: (keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' TK_1= 'TABLE' TK_2= 'OF' type_specGen+= type_spec (TK_3= 'NOT' TK_4= 'NULL' )? (TK_5= 'INDEX' TK_6= 'BY' (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN ) )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14155:3: keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' TK_1= 'TABLE' TK_2= 'OF' type_specGen+= type_spec (TK_3= 'NOT' TK_4= 'NULL' )? (TK_5= 'INDEX' TK_6= 'BY' (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN ) )? SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyTYPE_in_table_type_dec10672);
            keyTYPEGen=keyTYPE();
            _fsp--;
            if (failed) return retval;
            if (list_keyTYPEGen==null) list_keyTYPEGen=new ArrayList();
            list_keyTYPEGen.add(keyTYPEGen);

            pushFollow(FOLLOW_type_name_in_table_type_dec10676);
            type_nameGen=type_name();
            _fsp--;
            if (failed) return retval;
            if (list_type_nameGen==null) list_type_nameGen=new ArrayList();
            list_type_nameGen.add(type_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_table_type_dec10680); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,137,FOLLOW_137_in_table_type_dec10684); if (failed) return retval;
            TK_2=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_table_type_dec10691); if (failed) return retval;
            pushFollow(FOLLOW_type_spec_in_table_type_dec10695);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14156:37: (TK_3= 'NOT' TK_4= 'NULL' )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==62) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14156:39: TK_3= 'NOT' TK_4= 'NULL'
                    {
                    TK_3=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_table_type_dec10701); if (failed) return retval;
                    TK_4=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_table_type_dec10705); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14157:3: (TK_5= 'INDEX' TK_6= 'BY' (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN ) )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==154) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14157:5: TK_5= 'INDEX' TK_6= 'BY' (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN )
                    {
                    TK_5=(Token)input.LT(1);
                    match(input,154,FOLLOW_154_in_table_type_dec10716); if (failed) return retval;
                    TK_6=(Token)input.LT(1);
                    match(input,125,FOLLOW_125_in_table_type_dec10720); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14158:4: (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN )
                    int alt304=3;
                    switch ( input.LA(1) ) {
                    case 75:
                        {
                        alt304=1;
                        }
                        break;
                    case 105:
                        {
                        alt304=2;
                        }
                        break;
                    case 99:
                        {
                        alt304=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("14158:4: (TK_7= 'BINARY_INTEGER' | TK_8= 'PLS_INTEGER' | TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN )", 304, 0, input);

                        throw nvae;
                    }

                    switch (alt304) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14158:6: TK_7= 'BINARY_INTEGER'
                            {
                            TK_7=(Token)input.LT(1);
                            match(input,75,FOLLOW_75_in_table_type_dec10730); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14159:6: TK_8= 'PLS_INTEGER'
                            {
                            TK_8=(Token)input.LT(1);
                            match(input,105,FOLLOW_105_in_table_type_dec10739); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14160:6: TK_9= 'VARCHAR2' LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN
                            {
                            TK_9=(Token)input.LT(1);
                            match(input,99,FOLLOW_99_in_table_type_dec10748); if (failed) return retval;
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_table_type_dec10752); if (failed) return retval;
                            pushFollow(FOLLOW_integer_in_table_type_dec10756);
                            integerGen=integer();
                            _fsp--;
                            if (failed) return retval;
                            if (list_integerGen==null) list_integerGen=new ArrayList();
                            list_integerGen.add(integerGen);

                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_table_type_dec10760); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_table_type_dec10776); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node table_type_decReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		table_type_decReturnNode.setKind("table_type_dec");
              	    // Create a CST Node
              		if(list_keyTYPEGen != null) {
              	        for(Iterator it = list_keyTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTYPE");
              	            	table_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_nameGen != null) {
              	        for(Iterator it = list_type_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_name");
              	            	table_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	table_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue(TK_6.getText());
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_7Leaf.setKind("TOKEN");
              	 		TK_7Leaf.setValue(TK_7.getText());
              			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
              			TK_7Leaf.setLine(TK_7.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_8Leaf.setKind("TOKEN");
              	 		TK_8Leaf.setValue(TK_8.getText());
              			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
              			TK_8Leaf.setLine(TK_8.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_9Leaf.setKind("TOKEN");
              	 		TK_9Leaf.setValue(TK_9.getText());
              			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
              			TK_9Leaf.setLine(TK_9.getLine());
              	 		table_type_decReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			table_type_decReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_integerGen != null) {
              	        for(Iterator it = list_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer");
              	            	table_type_decReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			table_type_decReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			table_type_decReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = table_type_decReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end table_type_dec

    public static class to_modify_data_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start to_modify_data
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14330:1: to_modify_data returns [Node returnNode] : (select_commandGen+= select_command | insert_commandGen+= insert_command | update_commandGen+= update_command | delete_commandGen+= delete_command | set_transaction_commandGen+= set_transaction_command );
    public final to_modify_data_return to_modify_data() throws RecognitionException {
        to_modify_data_return retval = new to_modify_data_return();
        retval.start = input.LT(1);

        List list_select_commandGen=null;
        List list_insert_commandGen=null;
        List list_update_commandGen=null;
        List list_delete_commandGen=null;
        List list_set_transaction_commandGen=null;
        RuleReturnScope select_commandGen = null;
        RuleReturnScope insert_commandGen = null;
        RuleReturnScope update_commandGen = null;
        RuleReturnScope delete_commandGen = null;
        RuleReturnScope set_transaction_commandGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14331:1: (select_commandGen+= select_command | insert_commandGen+= insert_command | update_commandGen+= update_command | delete_commandGen+= delete_command | set_transaction_commandGen+= set_transaction_command )
            int alt306=5;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt306=1;
                }
                break;
            case 130:
                {
                alt306=2;
                }
                break;
            case 135:
                {
                alt306=3;
                }
                break;
            case 112:
                {
                alt306=4;
                }
                break;
            case 70:
                {
                alt306=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("14330:1: to_modify_data returns [Node returnNode] : (select_commandGen+= select_command | insert_commandGen+= insert_command | update_commandGen+= update_command | delete_commandGen+= delete_command | set_transaction_commandGen+= set_transaction_command );", 306, 0, input);

                throw nvae;
            }

            switch (alt306) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14331:3: select_commandGen+= select_command
                    {
                    pushFollow(FOLLOW_select_command_in_to_modify_data10797);
                    select_commandGen=select_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_select_commandGen==null) list_select_commandGen=new ArrayList();
                    list_select_commandGen.add(select_commandGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_modify_dataReturnNode.setKind("to_modify_data");
                      	    // Create a CST Node
                      		if(list_select_commandGen != null) {
                      	        for(Iterator it = list_select_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_command_return r = (PLSQL3Parser.select_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_command");
                      	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_modify_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14349:4: insert_commandGen+= insert_command
                    {
                    pushFollow(FOLLOW_insert_command_in_to_modify_data10808);
                    insert_commandGen=insert_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_insert_commandGen==null) list_insert_commandGen=new ArrayList();
                    list_insert_commandGen.add(insert_commandGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_modify_dataReturnNode.setKind("to_modify_data");
                      	    // Create a CST Node
                      		if(list_insert_commandGen != null) {
                      	        for(Iterator it = list_insert_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.insert_command_return r = (PLSQL3Parser.insert_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("insert_command");
                      	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_modify_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14367:4: update_commandGen+= update_command
                    {
                    pushFollow(FOLLOW_update_command_in_to_modify_data10819);
                    update_commandGen=update_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_update_commandGen==null) list_update_commandGen=new ArrayList();
                    list_update_commandGen.add(update_commandGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_modify_dataReturnNode.setKind("to_modify_data");
                      	    // Create a CST Node
                      		if(list_update_commandGen != null) {
                      	        for(Iterator it = list_update_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.update_command_return r = (PLSQL3Parser.update_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("update_command");
                      	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_modify_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14385:4: delete_commandGen+= delete_command
                    {
                    pushFollow(FOLLOW_delete_command_in_to_modify_data10830);
                    delete_commandGen=delete_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_delete_commandGen==null) list_delete_commandGen=new ArrayList();
                    list_delete_commandGen.add(delete_commandGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_modify_dataReturnNode.setKind("to_modify_data");
                      	    // Create a CST Node
                      		if(list_delete_commandGen != null) {
                      	        for(Iterator it = list_delete_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.delete_command_return r = (PLSQL3Parser.delete_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("delete_command");
                      	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_modify_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14403:4: set_transaction_commandGen+= set_transaction_command
                    {
                    pushFollow(FOLLOW_set_transaction_command_in_to_modify_data10841);
                    set_transaction_commandGen=set_transaction_command();
                    _fsp--;
                    if (failed) return retval;
                    if (list_set_transaction_commandGen==null) list_set_transaction_commandGen=new ArrayList();
                    list_set_transaction_commandGen.add(set_transaction_commandGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_modify_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_modify_dataReturnNode.setKind("to_modify_data");
                      	    // Create a CST Node
                      		if(list_set_transaction_commandGen != null) {
                      	        for(Iterator it = list_set_transaction_commandGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.set_transaction_command_return r = (PLSQL3Parser.set_transaction_command_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("set_transaction_command");
                      	            	to_modify_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_modify_dataReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end to_modify_data

    public static class to_control_data_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start to_control_data
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14423:1: to_control_data returns [Node returnNode] : (close_statementGen+= close_statement | commit_statementGen+= commit_statement | fetch_statementGen+= fetch_statement | lock_table_statementGen+= lock_table_statement | open_statementGen+= open_statement | rollback_statementGen+= rollback_statement | savepoint_statementGen+= savepoint_statement );
    public final to_control_data_return to_control_data() throws RecognitionException {
        to_control_data_return retval = new to_control_data_return();
        retval.start = input.LT(1);

        List list_close_statementGen=null;
        List list_commit_statementGen=null;
        List list_fetch_statementGen=null;
        List list_lock_table_statementGen=null;
        List list_open_statementGen=null;
        List list_rollback_statementGen=null;
        List list_savepoint_statementGen=null;
        RuleReturnScope close_statementGen = null;
        RuleReturnScope commit_statementGen = null;
        RuleReturnScope fetch_statementGen = null;
        RuleReturnScope lock_table_statementGen = null;
        RuleReturnScope open_statementGen = null;
        RuleReturnScope rollback_statementGen = null;
        RuleReturnScope savepoint_statementGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14424:1: (close_statementGen+= close_statement | commit_statementGen+= commit_statement | fetch_statementGen+= fetch_statement | lock_table_statementGen+= lock_table_statement | open_statementGen+= open_statement | rollback_statementGen+= rollback_statement | savepoint_statementGen+= savepoint_statement )
            int alt307=7;
            switch ( input.LA(1) ) {
            case 231:
                {
                alt307=1;
                }
                break;
            case 60:
                {
                alt307=2;
                }
                break;
            case 118:
                {
                alt307=3;
                }
                break;
            case 136:
                {
                alt307=4;
                }
                break;
            case 242:
                {
                alt307=5;
                }
                break;
            case 256:
                {
                alt307=6;
                }
                break;
            case 146:
                {
                alt307=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("14423:1: to_control_data returns [Node returnNode] : (close_statementGen+= close_statement | commit_statementGen+= commit_statement | fetch_statementGen+= fetch_statement | lock_table_statementGen+= lock_table_statement | open_statementGen+= open_statement | rollback_statementGen+= rollback_statement | savepoint_statementGen+= savepoint_statement );", 307, 0, input);

                throw nvae;
            }

            switch (alt307) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14424:3: close_statementGen+= close_statement
                    {
                    pushFollow(FOLLOW_close_statement_in_to_control_data10862);
                    close_statementGen=close_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_close_statementGen==null) list_close_statementGen=new ArrayList();
                    list_close_statementGen.add(close_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_close_statementGen != null) {
                      	        for(Iterator it = list_close_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.close_statement_return r = (PLSQL3Parser.close_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("close_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14442:4: commit_statementGen+= commit_statement
                    {
                    pushFollow(FOLLOW_commit_statement_in_to_control_data10873);
                    commit_statementGen=commit_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_commit_statementGen==null) list_commit_statementGen=new ArrayList();
                    list_commit_statementGen.add(commit_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_commit_statementGen != null) {
                      	        for(Iterator it = list_commit_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.commit_statement_return r = (PLSQL3Parser.commit_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("commit_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14460:4: fetch_statementGen+= fetch_statement
                    {
                    pushFollow(FOLLOW_fetch_statement_in_to_control_data10884);
                    fetch_statementGen=fetch_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_fetch_statementGen==null) list_fetch_statementGen=new ArrayList();
                    list_fetch_statementGen.add(fetch_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_fetch_statementGen != null) {
                      	        for(Iterator it = list_fetch_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.fetch_statement_return r = (PLSQL3Parser.fetch_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("fetch_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14478:4: lock_table_statementGen+= lock_table_statement
                    {
                    pushFollow(FOLLOW_lock_table_statement_in_to_control_data10895);
                    lock_table_statementGen=lock_table_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_lock_table_statementGen==null) list_lock_table_statementGen=new ArrayList();
                    list_lock_table_statementGen.add(lock_table_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_lock_table_statementGen != null) {
                      	        for(Iterator it = list_lock_table_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.lock_table_statement_return r = (PLSQL3Parser.lock_table_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("lock_table_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14496:4: open_statementGen+= open_statement
                    {
                    pushFollow(FOLLOW_open_statement_in_to_control_data10906);
                    open_statementGen=open_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_open_statementGen==null) list_open_statementGen=new ArrayList();
                    list_open_statementGen.add(open_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_open_statementGen != null) {
                      	        for(Iterator it = list_open_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.open_statement_return r = (PLSQL3Parser.open_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("open_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14514:4: rollback_statementGen+= rollback_statement
                    {
                    pushFollow(FOLLOW_rollback_statement_in_to_control_data10917);
                    rollback_statementGen=rollback_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_rollback_statementGen==null) list_rollback_statementGen=new ArrayList();
                    list_rollback_statementGen.add(rollback_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_rollback_statementGen != null) {
                      	        for(Iterator it = list_rollback_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.rollback_statement_return r = (PLSQL3Parser.rollback_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("rollback_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14532:4: savepoint_statementGen+= savepoint_statement
                    {
                    pushFollow(FOLLOW_savepoint_statement_in_to_control_data10928);
                    savepoint_statementGen=savepoint_statement();
                    _fsp--;
                    if (failed) return retval;
                    if (list_savepoint_statementGen==null) list_savepoint_statementGen=new ArrayList();
                    list_savepoint_statementGen.add(savepoint_statementGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node to_control_dataReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		to_control_dataReturnNode.setKind("to_control_data");
                      	    // Create a CST Node
                      		if(list_savepoint_statementGen != null) {
                      	        for(Iterator it = list_savepoint_statementGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.savepoint_statement_return r = (PLSQL3Parser.savepoint_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("savepoint_statement");
                      	            	to_control_dataReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = to_control_dataReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end to_control_data

    public static class type_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start type_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14552:1: type_declaration returns [Node returnNode] : keyTYPEGen+= keyTYPE type_specGen+= type_spec TK_0= 'IS' (keyNEWGen+= keyNEW )? (type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? | LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN ) SEMIGen= SEMI ;
    public final type_declaration_return type_declaration() throws RecognitionException {
        type_declaration_return retval = new type_declaration_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token SEMIGen=null;
        List list_keyTYPEGen=null;
        List list_type_specGen=null;
        List list_keyNEWGen=null;
        List list_type_specGen_1=null;
        List list_plsql_expressionsGen=null;
        RuleReturnScope keyTYPEGen = null;
        RuleReturnScope type_specGen = null;
        RuleReturnScope keyNEWGen = null;
        RuleReturnScope type_specGen_1 = null;
        RuleReturnScope plsql_expressionsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:1: (keyTYPEGen+= keyTYPE type_specGen+= type_spec TK_0= 'IS' (keyNEWGen+= keyNEW )? (type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? | LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN ) SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:3: keyTYPEGen+= keyTYPE type_specGen+= type_spec TK_0= 'IS' (keyNEWGen+= keyNEW )? (type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? | LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN ) SEMIGen= SEMI
            {
            pushFollow(FOLLOW_keyTYPE_in_type_declaration10950);
            keyTYPEGen=keyTYPE();
            _fsp--;
            if (failed) return retval;
            if (list_keyTYPEGen==null) list_keyTYPEGen=new ArrayList();
            list_keyTYPEGen.add(keyTYPEGen);

            pushFollow(FOLLOW_type_spec_in_type_declaration10954);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_type_declaration10958); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:57: (keyNEWGen+= keyNEW )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==240) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:59: keyNEWGen+= keyNEW
                    {
                    pushFollow(FOLLOW_keyNEW_in_type_declaration10964);
                    keyNEWGen=keyNEW();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyNEWGen==null) list_keyNEWGen=new ArrayList();
                    list_keyNEWGen.add(keyNEWGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:80: (type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? | LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( ((LA310_0>=ID && LA310_0<=DOUBLEQUOTED_STRING)||(LA310_0>=75 && LA310_0<=87)||(LA310_0>=90 && LA310_0<=111)||LA310_0==177||(LA310_0>=215 && LA310_0<=216)) ) {
                alt310=1;
            }
            else if ( (LA310_0==LPAREN) ) {
                alt310=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("14553:80: (type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? | LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN )", 310, 0, input);

                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:82: type_specGen_1+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )?
                    {
                    pushFollow(FOLLOW_type_spec_in_type_declaration10973);
                    type_specGen_1=type_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_type_specGen_1==null) list_type_specGen_1=new ArrayList();
                    list_type_specGen_1.add(type_specGen_1);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:108: (TK_1= 'NOT' TK_2= 'NULL' )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==62) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:110: TK_1= 'NOT' TK_2= 'NULL'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,62,FOLLOW_62_in_type_declaration10979); if (failed) return retval;
                            TK_2=(Token)input.LT(1);
                            match(input,69,FOLLOW_69_in_type_declaration10983); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14553:138: LPARENGen= LPAREN plsql_expressionsGen+= plsql_expressions RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_type_declaration10992); if (failed) return retval;
                    pushFollow(FOLLOW_plsql_expressions_in_type_declaration10996);
                    plsql_expressionsGen=plsql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionsGen==null) list_plsql_expressionsGen=new ArrayList();
                    list_plsql_expressionsGen.add(plsql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_type_declaration11000); if (failed) return retval;

                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_type_declaration11006); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node type_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		type_declarationReturnNode.setKind("type_declaration");
              	    // Create a CST Node
              		if(list_keyTYPEGen != null) {
              	        for(Iterator it = list_keyTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTYPE");
              	            	type_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	type_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		type_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyNEWGen != null) {
              	        for(Iterator it = list_keyNEWGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyNEW_return r = (PLSQL3Parser.keyNEW_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyNEW");
              	            	type_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_specGen_1 != null) {
              	        for(Iterator it = list_type_specGen_1.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	type_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		type_declarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		type_declarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			type_declarationReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_plsql_expressionsGen != null) {
              	        for(Iterator it = list_plsql_expressionsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expressions_return r = (PLSQL3Parser.plsql_expressions_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expressions");
              	            	type_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			type_declarationReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			type_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = type_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type_declaration

    public static class type_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start type_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14667:1: type_name returns [Node returnNode] : identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* ;
    public final type_name_return type_name() throws RecognitionException {
        type_name_return retval = new type_name_return();
        retval.start = input.LT(1);

        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_identifierGen=null;
        List list_identifierGen_1=null;
        RuleReturnScope identifierGen = null;
        RuleReturnScope identifierGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14668:1: (identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14668:3: identifierGen+= identifier (DOTGen_List+= DOT identifierGen_1+= identifier )*
            {
            pushFollow(FOLLOW_identifier_in_type_name11027);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14668:29: (DOTGen_List+= DOT identifierGen_1+= identifier )*
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==DOT) ) {
                    alt311=1;
                }


                switch (alt311) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14668:31: DOTGen_List+= DOT identifierGen_1+= identifier
            	    {
            	    DOTGen_List=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_type_name11033); if (failed) return retval;
            	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
            	    list_DOTGen_List.add(DOTGen_List);

            	    pushFollow(FOLLOW_identifier_in_type_name11037);
            	    identifierGen_1=identifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_identifierGen_1==null) list_identifierGen_1=new ArrayList();
            	    list_identifierGen_1.add(identifierGen_1);


            	    }
            	    break;

            	default :
            	    break loop311;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node type_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		type_nameReturnNode.setKind("type_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	type_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal DOTGen_List aggregation
              		if(list_DOTGen_List != null) {
              	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_DOTGen_List != null) {
              		    Token t = (Token) list_DOTGen_List.get(pos); 
              		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_ListLeaf.setKind("DOT");
              			DOTGen_ListLeaf.setValue(t.getText());
              			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			DOTGen_ListLeaf.setLine(t.getLine());
              			type_nameReturnNode.getChildren().add(DOTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_identifierGen_1 != null) {		
              	    	PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) list_identifierGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("identifier");
              	    		type_nameReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = type_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type_name

    public static class type_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start type_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14713:1: type_spec returns [Node returnNode] : (datatypeGen+= datatype | column_specGen+= column_spec TYPE_ATTRGen= TYPE_ATTR | table_specGen+= table_spec ROWTYPE_ATTRGen= ROWTYPE_ATTR | type_nameGen+= type_name (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? );
    public final type_spec_return type_spec() throws RecognitionException {
        type_spec_return retval = new type_spec_return();
        retval.start = input.LT(1);

        Token TYPE_ATTRGen=null;
        Token ROWTYPE_ATTRGen=null;
        Token LPARENGen=null;
        Token NUMBERGen=null;
        Token RPARENGen=null;
        List list_datatypeGen=null;
        List list_column_specGen=null;
        List list_table_specGen=null;
        List list_type_nameGen=null;
        RuleReturnScope datatypeGen = null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope table_specGen = null;
        RuleReturnScope type_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14714:1: (datatypeGen+= datatype | column_specGen+= column_spec TYPE_ATTRGen= TYPE_ATTR | table_specGen+= table_spec ROWTYPE_ATTRGen= ROWTYPE_ATTR | type_nameGen+= type_name (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? )
            int alt313=4;
            alt313 = dfa313.predict(input);
            switch (alt313) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14714:3: datatypeGen+= datatype
                    {
                    pushFollow(FOLLOW_datatype_in_type_spec11061);
                    datatypeGen=datatype();
                    _fsp--;
                    if (failed) return retval;
                    if (list_datatypeGen==null) list_datatypeGen=new ArrayList();
                    list_datatypeGen.add(datatypeGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		type_specReturnNode.setKind("type_spec");
                      	    // Create a CST Node
                      		if(list_datatypeGen != null) {
                      	        for(Iterator it = list_datatypeGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.datatype_return r = (PLSQL3Parser.datatype_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("datatype");
                      	            	type_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = type_specReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14733:4: column_specGen+= column_spec TYPE_ATTRGen= TYPE_ATTR
                    {
                    pushFollow(FOLLOW_column_spec_in_type_spec11074);
                    column_specGen=column_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_column_specGen==null) list_column_specGen=new ArrayList();
                    list_column_specGen.add(column_specGen);

                    TYPE_ATTRGen=(Token)input.LT(1);
                    match(input,TYPE_ATTR,FOLLOW_TYPE_ATTR_in_type_spec11078); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		type_specReturnNode.setKind("type_spec");
                      	    // Create a CST Node
                      		if(list_column_specGen != null) {
                      	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("column_spec");
                      	            	type_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(TYPE_ATTRGen != null) {
                      			Leaf TYPE_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			TYPE_ATTRGenLeaf.setKind("TYPE_ATTR");
                      			TYPE_ATTRGenLeaf.setValue(TYPE_ATTRGen.getText());
                      			TYPE_ATTRGenLeaf.setPos(TYPE_ATTRGen.getCharPositionInLine());
                      			TYPE_ATTRGenLeaf.setLine(TYPE_ATTRGen.getLine());
                      			type_specReturnNode.getChildren().add(TYPE_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = type_specReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14761:4: table_specGen+= table_spec ROWTYPE_ATTRGen= ROWTYPE_ATTR
                    {
                    pushFollow(FOLLOW_table_spec_in_type_spec11090);
                    table_specGen=table_spec();
                    _fsp--;
                    if (failed) return retval;
                    if (list_table_specGen==null) list_table_specGen=new ArrayList();
                    list_table_specGen.add(table_specGen);

                    ROWTYPE_ATTRGen=(Token)input.LT(1);
                    match(input,ROWTYPE_ATTR,FOLLOW_ROWTYPE_ATTR_in_type_spec11094); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		type_specReturnNode.setKind("type_spec");
                      	    // Create a CST Node
                      		if(list_table_specGen != null) {
                      	        for(Iterator it = list_table_specGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.table_spec_return r = (PLSQL3Parser.table_spec_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("table_spec");
                      	            	type_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(ROWTYPE_ATTRGen != null) {
                      			Leaf ROWTYPE_ATTRGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			ROWTYPE_ATTRGenLeaf.setKind("ROWTYPE_ATTR");
                      			ROWTYPE_ATTRGenLeaf.setValue(ROWTYPE_ATTRGen.getText());
                      			ROWTYPE_ATTRGenLeaf.setPos(ROWTYPE_ATTRGen.getCharPositionInLine());
                      			ROWTYPE_ATTRGenLeaf.setLine(ROWTYPE_ATTRGen.getLine());
                      			type_specReturnNode.getChildren().add(ROWTYPE_ATTRGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = type_specReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14789:4: type_nameGen+= type_name (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    {
                    pushFollow(FOLLOW_type_name_in_type_spec11106);
                    type_nameGen=type_name();
                    _fsp--;
                    if (failed) return retval;
                    if (list_type_nameGen==null) list_type_nameGen=new ArrayList();
                    list_type_nameGen.add(type_nameGen);

                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14789:28: (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==LPAREN) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14789:30: LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN
                            {
                            LPARENGen=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_type_spec11112); if (failed) return retval;
                            NUMBERGen=(Token)input.LT(1);
                            match(input,NUMBER,FOLLOW_NUMBER_in_type_spec11116); if (failed) return retval;
                            RPARENGen=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_type_spec11120); if (failed) return retval;

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node type_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		type_specReturnNode.setKind("type_spec");
                      	    // Create a CST Node
                      		if(list_type_nameGen != null) {
                      	        for(Iterator it = list_type_nameGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type_name");
                      	            	type_specReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			type_specReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NUMBERGenLeaf.setKind("NUMBER");
                      			NUMBERGenLeaf.setValue(NUMBERGen.getText());
                      			NUMBERGenLeaf.setPos(NUMBERGen.getCharPositionInLine());
                      			NUMBERGenLeaf.setLine(NUMBERGen.getLine());
                      			type_specReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			type_specReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = type_specReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type_spec

    public static class update_column_specs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start update_column_specs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14835:1: update_column_specs returns [Node returnNode] : update_column_specGen+= update_column_spec (COMMAGen_List+= COMMA update_column_specGen_1+= update_column_spec )* ;
    public final update_column_specs_return update_column_specs() throws RecognitionException {
        update_column_specs_return retval = new update_column_specs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_update_column_specGen=null;
        List list_update_column_specGen_1=null;
        RuleReturnScope update_column_specGen = null;
        RuleReturnScope update_column_specGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14836:1: (update_column_specGen+= update_column_spec (COMMAGen_List+= COMMA update_column_specGen_1+= update_column_spec )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14836:3: update_column_specGen+= update_column_spec (COMMAGen_List+= COMMA update_column_specGen_1+= update_column_spec )*
            {
            pushFollow(FOLLOW_update_column_spec_in_update_column_specs11143);
            update_column_specGen=update_column_spec();
            _fsp--;
            if (failed) return retval;
            if (list_update_column_specGen==null) list_update_column_specGen=new ArrayList();
            list_update_column_specGen.add(update_column_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14836:45: (COMMAGen_List+= COMMA update_column_specGen_1+= update_column_spec )*
            loop314:
            do {
                int alt314=2;
                int LA314_0 = input.LA(1);

                if ( (LA314_0==COMMA) ) {
                    alt314=1;
                }


                switch (alt314) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14836:47: COMMAGen_List+= COMMA update_column_specGen_1+= update_column_spec
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_update_column_specs11149); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_update_column_spec_in_update_column_specs11153);
            	    update_column_specGen_1=update_column_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_update_column_specGen_1==null) list_update_column_specGen_1=new ArrayList();
            	    list_update_column_specGen_1.add(update_column_specGen_1);


            	    }
            	    break;

            	default :
            	    break loop314;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node update_column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		update_column_specsReturnNode.setKind("update_column_specs");
              	    // Create a CST Node
              		if(list_update_column_specGen != null) {
              	        for(Iterator it = list_update_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.update_column_spec_return r = (PLSQL3Parser.update_column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("update_column_spec");
              	            	update_column_specsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			update_column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_update_column_specGen_1 != null) {		
              	    	PLSQL3Parser.update_column_spec_return r = (PLSQL3Parser.update_column_spec_return) list_update_column_specGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("update_column_spec");
              	    		update_column_specsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = update_column_specsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end update_column_specs

    public static class update_column_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start update_column_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14881:1: update_column_spec returns [Node returnNode] : column_specGen+= column_spec EQGen= EQ sql_expressionGen+= sql_expression ;
    public final update_column_spec_return update_column_spec() throws RecognitionException {
        update_column_spec_return retval = new update_column_spec_return();
        retval.start = input.LT(1);

        Token EQGen=null;
        List list_column_specGen=null;
        List list_sql_expressionGen=null;
        RuleReturnScope column_specGen = null;
        RuleReturnScope sql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14882:1: (column_specGen+= column_spec EQGen= EQ sql_expressionGen+= sql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14882:3: column_specGen+= column_spec EQGen= EQ sql_expressionGen+= sql_expression
            {
            pushFollow(FOLLOW_column_spec_in_update_column_spec11177);
            column_specGen=column_spec();
            _fsp--;
            if (failed) return retval;
            if (list_column_specGen==null) list_column_specGen=new ArrayList();
            list_column_specGen.add(column_specGen);

            EQGen=(Token)input.LT(1);
            match(input,EQ,FOLLOW_EQ_in_update_column_spec11181); if (failed) return retval;
            pushFollow(FOLLOW_sql_expression_in_update_column_spec11185);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node update_column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		update_column_specReturnNode.setKind("update_column_spec");
              	    // Create a CST Node
              		if(list_column_specGen != null) {
              	        for(Iterator it = list_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_spec_return r = (PLSQL3Parser.column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_spec");
              	            	update_column_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(EQGen != null) {
              			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			EQGenLeaf.setKind("EQ");
              			EQGenLeaf.setValue(EQGen.getText());
              			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
              			EQGenLeaf.setLine(EQGen.getLine());
              			update_column_specReturnNode.getChildren().add(EQGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	update_column_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = update_column_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end update_column_spec

    public static class update_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start update_command
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14921:1: update_command returns [Node returnNode] : TK_0= 'UPDATE' selected_tableGen+= selected_table TK_1= 'SET' (update_nested_column_specsGen+= update_nested_column_specs | update_column_specsGen+= update_column_specs ) (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )? ;
    public final update_command_return update_command() throws RecognitionException {
        update_command_return retval = new update_command_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_selected_tableGen=null;
        List list_update_nested_column_specsGen=null;
        List list_update_column_specsGen=null;
        List list_keyCURRENT_OFGen=null;
        List list_cursor_nameGen=null;
        List list_sql_conditionGen=null;
        List list_returning_clauseGen=null;
        RuleReturnScope selected_tableGen = null;
        RuleReturnScope update_nested_column_specsGen = null;
        RuleReturnScope update_column_specsGen = null;
        RuleReturnScope keyCURRENT_OFGen = null;
        RuleReturnScope cursor_nameGen = null;
        RuleReturnScope sql_conditionGen = null;
        RuleReturnScope returning_clauseGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14922:1: (TK_0= 'UPDATE' selected_tableGen+= selected_table TK_1= 'SET' (update_nested_column_specsGen+= update_nested_column_specs | update_column_specsGen+= update_column_specs ) (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14922:3: TK_0= 'UPDATE' selected_tableGen+= selected_table TK_1= 'SET' (update_nested_column_specsGen+= update_nested_column_specs | update_column_specsGen+= update_column_specs ) (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )? (returning_clauseGen+= returning_clause )?
            {
            TK_0=(Token)input.LT(1);
            match(input,135,FOLLOW_135_in_update_command11206); if (failed) return retval;
            pushFollow(FOLLOW_selected_table_in_update_command11210);
            selected_tableGen=selected_table();
            _fsp--;
            if (failed) return retval;
            if (list_selected_tableGen==null) list_selected_tableGen=new ArrayList();
            list_selected_tableGen.add(selected_tableGen);

            TK_1=(Token)input.LT(1);
            match(input,70,FOLLOW_70_in_update_command11216); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14924:3: (update_nested_column_specsGen+= update_nested_column_specs | update_column_specsGen+= update_column_specs )
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==LPAREN) ) {
                alt315=1;
            }
            else if ( ((LA315_0>=ID && LA315_0<=DOUBLEQUOTED_STRING)||LA315_0==110) ) {
                alt315=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("14924:3: (update_nested_column_specsGen+= update_nested_column_specs | update_column_specsGen+= update_column_specs )", 315, 0, input);

                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14924:5: update_nested_column_specsGen+= update_nested_column_specs
                    {
                    pushFollow(FOLLOW_update_nested_column_specs_in_update_command11225);
                    update_nested_column_specsGen=update_nested_column_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_update_nested_column_specsGen==null) list_update_nested_column_specsGen=new ArrayList();
                    list_update_nested_column_specsGen.add(update_nested_column_specsGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14925:5: update_column_specsGen+= update_column_specs
                    {
                    pushFollow(FOLLOW_update_column_specs_in_update_command11233);
                    update_column_specsGen=update_column_specs();
                    _fsp--;
                    if (failed) return retval;
                    if (list_update_column_specsGen==null) list_update_column_specsGen=new ArrayList();
                    list_update_column_specsGen.add(update_column_specsGen);


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14927:3: (TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition ) )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==114) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14927:5: TK_2= 'WHERE' (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,114,FOLLOW_114_in_update_command11245); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14928:4: (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==161) ) {
                        alt316=1;
                    }
                    else if ( (LA316_0==LPAREN||LA316_0==NUMBER||(LA316_0>=QUOTED_STRING && LA316_0<=MINUS)||LA316_0==COLON||(LA316_0>=56 && LA316_0<=58)||LA316_0==62||(LA316_0>=64 && LA316_0<=66)||LA316_0==69||LA316_0==110||LA316_0==121||LA316_0==148||LA316_0==153||LA316_0==158||LA316_0==168||LA316_0==202||LA316_0==218||LA316_0==233) ) {
                        alt316=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("14928:4: (keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name | sql_conditionGen+= sql_condition )", 316, 0, input);

                        throw nvae;
                    }
                    switch (alt316) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14928:6: keyCURRENT_OFGen+= keyCURRENT_OF cursor_nameGen+= cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_update_command11254);
                            keyCURRENT_OFGen=keyCURRENT_OF();
                            _fsp--;
                            if (failed) return retval;
                            if (list_keyCURRENT_OFGen==null) list_keyCURRENT_OFGen=new ArrayList();
                            list_keyCURRENT_OFGen.add(keyCURRENT_OFGen);

                            pushFollow(FOLLOW_cursor_name_in_update_command11258);
                            cursor_nameGen=cursor_name();
                            _fsp--;
                            if (failed) return retval;
                            if (list_cursor_nameGen==null) list_cursor_nameGen=new ArrayList();
                            list_cursor_nameGen.add(cursor_nameGen);


                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14929:6: sql_conditionGen+= sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_update_command11267);
                            sql_conditionGen=sql_condition();
                            _fsp--;
                            if (failed) return retval;
                            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
                            list_sql_conditionGen.add(sql_conditionGen);


                            }
                            break;

                    }


                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14932:3: (returning_clauseGen+= returning_clause )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=253 && LA318_0<=254)) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14932:5: returning_clauseGen+= returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_update_command11285);
                    returning_clauseGen=returning_clause();
                    _fsp--;
                    if (failed) return retval;
                    if (list_returning_clauseGen==null) list_returning_clauseGen=new ArrayList();
                    list_returning_clauseGen.add(returning_clauseGen);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node update_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		update_commandReturnNode.setKind("update_command");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		update_commandReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_selected_tableGen != null) {
              	        for(Iterator it = list_selected_tableGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.selected_table_return r = (PLSQL3Parser.selected_table_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("selected_table");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		update_commandReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_update_nested_column_specsGen != null) {
              	        for(Iterator it = list_update_nested_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.update_nested_column_specs_return r = (PLSQL3Parser.update_nested_column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("update_nested_column_specs");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_update_column_specsGen != null) {
              	        for(Iterator it = list_update_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.update_column_specs_return r = (PLSQL3Parser.update_column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("update_column_specs");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		update_commandReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyCURRENT_OFGen != null) {
              	        for(Iterator it = list_keyCURRENT_OFGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyCURRENT_OF_return r = (PLSQL3Parser.keyCURRENT_OF_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyCURRENT_OF");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_cursor_nameGen != null) {
              	        for(Iterator it = list_cursor_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.cursor_name_return r = (PLSQL3Parser.cursor_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cursor_name");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_returning_clauseGen != null) {
              	        for(Iterator it = list_returning_clauseGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.returning_clause_return r = (PLSQL3Parser.returning_clause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("returning_clause");
              	            	update_commandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = update_commandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end update_command

    public static class update_nested_column_specs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start update_nested_column_specs
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15039:1: update_nested_column_specs returns [Node returnNode] : update_nested_column_specGen+= update_nested_column_spec (COMMAGen_List+= COMMA update_nested_column_specGen_1+= update_nested_column_spec )* ;
    public final update_nested_column_specs_return update_nested_column_specs() throws RecognitionException {
        update_nested_column_specs_return retval = new update_nested_column_specs_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_update_nested_column_specGen=null;
        List list_update_nested_column_specGen_1=null;
        RuleReturnScope update_nested_column_specGen = null;
        RuleReturnScope update_nested_column_specGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15040:1: (update_nested_column_specGen+= update_nested_column_spec (COMMAGen_List+= COMMA update_nested_column_specGen_1+= update_nested_column_spec )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15040:3: update_nested_column_specGen+= update_nested_column_spec (COMMAGen_List+= COMMA update_nested_column_specGen_1+= update_nested_column_spec )*
            {
            pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs11309);
            update_nested_column_specGen=update_nested_column_spec();
            _fsp--;
            if (failed) return retval;
            if (list_update_nested_column_specGen==null) list_update_nested_column_specGen=new ArrayList();
            list_update_nested_column_specGen.add(update_nested_column_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15040:59: (COMMAGen_List+= COMMA update_nested_column_specGen_1+= update_nested_column_spec )*
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);

                if ( (LA319_0==COMMA) ) {
                    alt319=1;
                }


                switch (alt319) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15040:61: COMMAGen_List+= COMMA update_nested_column_specGen_1+= update_nested_column_spec
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_update_nested_column_specs11315); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs11319);
            	    update_nested_column_specGen_1=update_nested_column_spec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_update_nested_column_specGen_1==null) list_update_nested_column_specGen_1=new ArrayList();
            	    list_update_nested_column_specGen_1.add(update_nested_column_specGen_1);


            	    }
            	    break;

            	default :
            	    break loop319;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node update_nested_column_specsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		update_nested_column_specsReturnNode.setKind("update_nested_column_specs");
              	    // Create a CST Node
              		if(list_update_nested_column_specGen != null) {
              	        for(Iterator it = list_update_nested_column_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.update_nested_column_spec_return r = (PLSQL3Parser.update_nested_column_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("update_nested_column_spec");
              	            	update_nested_column_specsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			update_nested_column_specsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_update_nested_column_specGen_1 != null) {		
              	    	PLSQL3Parser.update_nested_column_spec_return r = (PLSQL3Parser.update_nested_column_spec_return) list_update_nested_column_specGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("update_nested_column_spec");
              	    		update_nested_column_specsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = update_nested_column_specsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end update_nested_column_specs

    public static class update_nested_column_spec_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start update_nested_column_spec
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15085:1: update_nested_column_spec returns [Node returnNode] : LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN EQGen= EQ subqueryGen+= subquery ;
    public final update_nested_column_spec_return update_nested_column_spec() throws RecognitionException {
        update_nested_column_spec_return retval = new update_nested_column_spec_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        Token EQGen=null;
        List list_column_specsGen=null;
        List list_subqueryGen=null;
        RuleReturnScope column_specsGen = null;
        RuleReturnScope subqueryGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15086:1: (LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN EQGen= EQ subqueryGen+= subquery )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15086:3: LPARENGen= LPAREN column_specsGen+= column_specs RPARENGen= RPAREN EQGen= EQ subqueryGen+= subquery
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_update_nested_column_spec11343); if (failed) return retval;
            pushFollow(FOLLOW_column_specs_in_update_nested_column_spec11347);
            column_specsGen=column_specs();
            _fsp--;
            if (failed) return retval;
            if (list_column_specsGen==null) list_column_specsGen=new ArrayList();
            list_column_specsGen.add(column_specsGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_update_nested_column_spec11351); if (failed) return retval;
            EQGen=(Token)input.LT(1);
            match(input,EQ,FOLLOW_EQ_in_update_nested_column_spec11355); if (failed) return retval;
            pushFollow(FOLLOW_subquery_in_update_nested_column_spec11359);
            subqueryGen=subquery();
            _fsp--;
            if (failed) return retval;
            if (list_subqueryGen==null) list_subqueryGen=new ArrayList();
            list_subqueryGen.add(subqueryGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node update_nested_column_specReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		update_nested_column_specReturnNode.setKind("update_nested_column_spec");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			update_nested_column_specReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_column_specsGen != null) {
              	        for(Iterator it = list_column_specsGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.column_specs_return r = (PLSQL3Parser.column_specs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("column_specs");
              	            	update_nested_column_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			update_nested_column_specReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(EQGen != null) {
              			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			EQGenLeaf.setKind("EQ");
              			EQGenLeaf.setValue(EQGen.getText());
              			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
              			EQGenLeaf.setLine(EQGen.getLine());
              			update_nested_column_specReturnNode.getChildren().add(EQGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_subqueryGen != null) {
              	        for(Iterator it = list_subqueryGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.subquery_return r = (PLSQL3Parser.subquery_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("subquery");
              	            	update_nested_column_specReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = update_nested_column_specReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end update_nested_column_spec

    public static class user_defined_function_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start user_defined_function
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15143:1: user_defined_function returns [Node returnNode] : sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )* (DOTGen_1= DOT (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' ) )? ;
    public final user_defined_function_return user_defined_function() throws RecognitionException {
        user_defined_function_return retval = new user_defined_function_return();
        retval.start = input.LT(1);

        Token DOTGen_1=null;
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token DOTGen_List=null;
        List list_DOTGen_List=null;
        List list_sql_identifierGen=null;
        List list_sql_identifierGen_1=null;
        RuleReturnScope sql_identifierGen = null;
        RuleReturnScope sql_identifierGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:1: (sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )* (DOTGen_1= DOT (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' ) )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:3: sql_identifierGen+= sql_identifier (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )* (DOTGen_1= DOT (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' ) )?
            {
            pushFollow(FOLLOW_sql_identifier_in_user_defined_function11380);
            sql_identifierGen=sql_identifier();
            _fsp--;
            if (failed) return retval;
            if (list_sql_identifierGen==null) list_sql_identifierGen=new ArrayList();
            list_sql_identifierGen.add(sql_identifierGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:37: (DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier )*
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);

                if ( (LA320_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case ID:
                        {
                        int LA320_3 = input.LA(3);

                        if ( (synpred476()) ) {
                            alt320=1;
                        }


                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA320_4 = input.LA(3);

                        if ( (synpred476()) ) {
                            alt320=1;
                        }


                        }
                        break;
                    case 110:
                        {
                        int LA320_5 = input.LA(3);

                        if ( (synpred476()) ) {
                            alt320=1;
                        }


                        }
                        break;

                    }

                }


                switch (alt320) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:39: DOTGen_List+= DOT sql_identifierGen_1+= sql_identifier
            	    {
            	    DOTGen_List=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_user_defined_function11386); if (failed) return retval;
            	    if (list_DOTGen_List==null) list_DOTGen_List=new ArrayList();
            	    list_DOTGen_List.add(DOTGen_List);

            	    pushFollow(FOLLOW_sql_identifier_in_user_defined_function11390);
            	    sql_identifierGen_1=sql_identifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_sql_identifierGen_1==null) list_sql_identifierGen_1=new ArrayList();
            	    list_sql_identifierGen_1.add(sql_identifierGen_1);


            	    }
            	    break;

            	default :
            	    break loop320;
                }
            } while (true);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:95: (DOTGen_1= DOT (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' ) )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==DOT) ) {
                int LA322_1 = input.LA(2);

                if ( ((LA322_1>=64 && LA322_1<=65)||LA322_1==112) ) {
                    alt322=1;
                }
            }
            switch (alt322) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:97: DOTGen_1= DOT (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' )
                    {
                    DOTGen_1=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_user_defined_function11399); if (failed) return retval;
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:110: (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' )
                    int alt321=3;
                    switch ( input.LA(1) ) {
                    case 65:
                        {
                        alt321=1;
                        }
                        break;
                    case 64:
                        {
                        alt321=2;
                        }
                        break;
                    case 112:
                        {
                        alt321=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("15144:110: (TK_0= 'EXISTS' | TK_1= 'PRIOR' | TK_2= 'DELETE' )", 321, 0, input);

                        throw nvae;
                    }

                    switch (alt321) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:112: TK_0= 'EXISTS'
                            {
                            TK_0=(Token)input.LT(1);
                            match(input,65,FOLLOW_65_in_user_defined_function11405); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:128: TK_1= 'PRIOR'
                            {
                            TK_1=(Token)input.LT(1);
                            match(input,64,FOLLOW_64_in_user_defined_function11411); if (failed) return retval;

                            }
                            break;
                        case 3 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:143: TK_2= 'DELETE'
                            {
                            TK_2=(Token)input.LT(1);
                            match(input,112,FOLLOW_112_in_user_defined_function11417); if (failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node user_defined_functionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		user_defined_functionReturnNode.setKind("user_defined_function");
              	    // Create a CST Node
              		if(list_sql_identifierGen != null) {
              	        for(Iterator it = list_sql_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_identifier");
              	            	user_defined_functionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal DOTGen_List aggregation
              		if(list_DOTGen_List != null) {
              	    for(int pos = 0; pos < list_DOTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_DOTGen_List != null) {
              		    Token t = (Token) list_DOTGen_List.get(pos); 
              		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_ListLeaf.setKind("DOT");
              			DOTGen_ListLeaf.setValue(t.getText());
              			DOTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			DOTGen_ListLeaf.setLine(t.getLine());
              			user_defined_functionReturnNode.getChildren().add(DOTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_sql_identifierGen_1 != null) {		
              	    	PLSQL3Parser.sql_identifier_return r = (PLSQL3Parser.sql_identifier_return) list_sql_identifierGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("sql_identifier");
              	    		user_defined_functionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	    // Create a CST Leaf
              		if(DOTGen_1 != null) {
              			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOTGen_1Leaf.setKind("DOT");
              			DOTGen_1Leaf.setValue(DOTGen_1.getText());
              			DOTGen_1Leaf.setPos(DOTGen_1.getCharPositionInLine());
              			DOTGen_1Leaf.setLine(DOTGen_1.getLine());
              			user_defined_functionReturnNode.getChildren().add(DOTGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		user_defined_functionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		user_defined_functionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		user_defined_functionReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = user_defined_functionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end user_defined_function

    public static class variable_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variable_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15225:1: variable_declaration returns [Node returnNode] : variable_nameGen+= variable_name (TK_0= 'CONSTANT' )? type_specGen+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? SEMIGen= SEMI ;
    public final variable_declaration_return variable_declaration() throws RecognitionException {
        variable_declaration_return retval = new variable_declaration_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token ASSIGNGen=null;
        Token TK_3=null;
        Token SEMIGen=null;
        List list_variable_nameGen=null;
        List list_type_specGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope variable_nameGen = null;
        RuleReturnScope type_specGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15226:1: (variable_nameGen+= variable_name (TK_0= 'CONSTANT' )? type_specGen+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? SEMIGen= SEMI )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15226:3: variable_nameGen+= variable_name (TK_0= 'CONSTANT' )? type_specGen+= type_spec (TK_1= 'NOT' TK_2= 'NULL' )? ( (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )? SEMIGen= SEMI
            {
            pushFollow(FOLLOW_variable_name_in_variable_declaration11444);
            variable_nameGen=variable_name();
            _fsp--;
            if (failed) return retval;
            if (list_variable_nameGen==null) list_variable_nameGen=new ArrayList();
            list_variable_nameGen.add(variable_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15226:35: (TK_0= 'CONSTANT' )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==155) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15226:36: TK_0= 'CONSTANT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,155,FOLLOW_155_in_variable_declaration11449); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_in_variable_declaration11457);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15227:27: (TK_1= 'NOT' TK_2= 'NULL' )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==62) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15227:28: TK_1= 'NOT' TK_2= 'NULL'
                    {
                    TK_1=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_variable_declaration11462); if (failed) return retval;
                    TK_2=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_variable_declaration11466); if (failed) return retval;

                    }
                    break;

            }

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15228:3: ( (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' ) plsql_expressionGen+= plsql_expression )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==ASSIGN||LA326_0==52) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15228:5: (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' ) plsql_expressionGen+= plsql_expression
                    {
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15228:5: (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' )
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==ASSIGN) ) {
                        alt325=1;
                    }
                    else if ( (LA325_0==52) ) {
                        alt325=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("15228:5: (ASSIGNGen= ASSIGN | TK_3= 'DEFAULT' )", 325, 0, input);

                        throw nvae;
                    }
                    switch (alt325) {
                        case 1 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15228:7: ASSIGNGen= ASSIGN
                            {
                            ASSIGNGen=(Token)input.LT(1);
                            match(input,ASSIGN,FOLLOW_ASSIGN_in_variable_declaration11479); if (failed) return retval;

                            }
                            break;
                        case 2 :
                            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15228:26: TK_3= 'DEFAULT'
                            {
                            TK_3=(Token)input.LT(1);
                            match(input,52,FOLLOW_52_in_variable_declaration11485); if (failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_plsql_expression_in_variable_declaration11491);
                    plsql_expressionGen=plsql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
                    list_plsql_expressionGen.add(plsql_expressionGen);


                    }
                    break;

            }

            SEMIGen=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_variable_declaration11497); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variable_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variable_declarationReturnNode.setKind("variable_declaration");
              	    // Create a CST Node
              		if(list_variable_nameGen != null) {
              	        for(Iterator it = list_variable_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variable_name");
              	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		variable_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		variable_declarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		variable_declarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ASSIGNGen != null) {
              			Leaf ASSIGNGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASSIGNGenLeaf.setKind("ASSIGN");
              			ASSIGNGenLeaf.setValue(ASSIGNGen.getText());
              			ASSIGNGenLeaf.setPos(ASSIGNGen.getCharPositionInLine());
              			ASSIGNGenLeaf.setLine(ASSIGNGen.getLine());
              			variable_declarationReturnNode.getChildren().add(ASSIGNGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		variable_declarationReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	variable_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(SEMIGen != null) {
              			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			SEMIGenLeaf.setKind("SEMI");
              			SEMIGenLeaf.setValue(SEMIGen.getText());
              			SEMIGenLeaf.setPos(SEMIGen.getCharPositionInLine());
              			SEMIGenLeaf.setLine(SEMIGen.getLine());
              			variable_declarationReturnNode.getChildren().add(SEMIGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variable_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end variable_declaration

    public static class variable_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variable_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15322:1: variable_expression returns [Node returnNode] : variable_nameGen+= variable_name ;
    public final variable_expression_return variable_expression() throws RecognitionException {
        variable_expression_return retval = new variable_expression_return();
        retval.start = input.LT(1);

        List list_variable_nameGen=null;
        RuleReturnScope variable_nameGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15323:1: (variable_nameGen+= variable_name )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15323:3: variable_nameGen+= variable_name
            {
            pushFollow(FOLLOW_variable_name_in_variable_expression11518);
            variable_nameGen=variable_name();
            _fsp--;
            if (failed) return retval;
            if (list_variable_nameGen==null) list_variable_nameGen=new ArrayList();
            list_variable_nameGen.add(variable_nameGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variable_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variable_expressionReturnNode.setKind("variable_expression");
              	    // Create a CST Node
              		if(list_variable_nameGen != null) {
              	        for(Iterator it = list_variable_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variable_name");
              	            	variable_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variable_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end variable_expression

    public static class variable_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variable_name
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15343:1: variable_name returns [Node returnNode] : identifierGen+= identifier ;
    public final variable_name_return variable_name() throws RecognitionException {
        variable_name_return retval = new variable_name_return();
        retval.start = input.LT(1);

        List list_identifierGen=null;
        RuleReturnScope identifierGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15344:1: (identifierGen+= identifier )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15344:3: identifierGen+= identifier
            {
            pushFollow(FOLLOW_identifier_in_variable_name11540);
            identifierGen=identifier();
            _fsp--;
            if (failed) return retval;
            if (list_identifierGen==null) list_identifierGen=new ArrayList();
            list_identifierGen.add(identifierGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variable_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variable_nameReturnNode.setKind("variable_name");
              	    // Create a CST Node
              		if(list_identifierGen != null) {
              	        for(Iterator it = list_identifierGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.identifier_return r = (PLSQL3Parser.identifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identifier");
              	            	variable_nameReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variable_nameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end variable_name

    public static class variable_names_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start variable_names
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15364:1: variable_names returns [Node returnNode] : variable_nameGen+= variable_name (COMMAGen_List+= COMMA variable_nameGen_1+= variable_name )* ;
    public final variable_names_return variable_names() throws RecognitionException {
        variable_names_return retval = new variable_names_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_variable_nameGen=null;
        List list_variable_nameGen_1=null;
        RuleReturnScope variable_nameGen = null;
        RuleReturnScope variable_nameGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15365:1: (variable_nameGen+= variable_name (COMMAGen_List+= COMMA variable_nameGen_1+= variable_name )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15365:3: variable_nameGen+= variable_name (COMMAGen_List+= COMMA variable_nameGen_1+= variable_name )*
            {
            pushFollow(FOLLOW_variable_name_in_variable_names11562);
            variable_nameGen=variable_name();
            _fsp--;
            if (failed) return retval;
            if (list_variable_nameGen==null) list_variable_nameGen=new ArrayList();
            list_variable_nameGen.add(variable_nameGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15365:35: (COMMAGen_List+= COMMA variable_nameGen_1+= variable_name )*
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);

                if ( (LA327_0==COMMA) ) {
                    alt327=1;
                }


                switch (alt327) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15365:37: COMMAGen_List+= COMMA variable_nameGen_1+= variable_name
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_variable_names11568); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_variable_name_in_variable_names11572);
            	    variable_nameGen_1=variable_name();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_variable_nameGen_1==null) list_variable_nameGen_1=new ArrayList();
            	    list_variable_nameGen_1.add(variable_nameGen_1);


            	    }
            	    break;

            	default :
            	    break loop327;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node variable_namesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variable_namesReturnNode.setKind("variable_names");
              	    // Create a CST Node
              		if(list_variable_nameGen != null) {
              	        for(Iterator it = list_variable_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variable_name");
              	            	variable_namesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			variable_namesReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_variable_nameGen_1 != null) {		
              	    	PLSQL3Parser.variable_name_return r = (PLSQL3Parser.variable_name_return) list_variable_nameGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("variable_name");
              	    		variable_namesReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variable_namesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end variable_names

    public static class varray_declaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start varray_declaration
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15410:1: varray_declaration returns [Node returnNode] : keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' (keyVARRAYGen+= keyVARRAY | keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY ) LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN TK_1= 'OF' type_specGen+= type_spec (TK_2= 'NOT' TK_3= 'NULL' )? ;
    public final varray_declaration_return varray_declaration() throws RecognitionException {
        varray_declaration_return retval = new varray_declaration_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LPARENGen=null;
        Token RPARENGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_keyTYPEGen=null;
        List list_type_nameGen=null;
        List list_keyVARRAYGen=null;
        List list_keyVARYINGGen=null;
        List list_keyARRAYGen=null;
        List list_integerGen=null;
        List list_type_specGen=null;
        RuleReturnScope keyTYPEGen = null;
        RuleReturnScope type_nameGen = null;
        RuleReturnScope keyVARRAYGen = null;
        RuleReturnScope keyVARYINGGen = null;
        RuleReturnScope keyARRAYGen = null;
        RuleReturnScope integerGen = null;
        RuleReturnScope type_specGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15411:1: (keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' (keyVARRAYGen+= keyVARRAY | keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY ) LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN TK_1= 'OF' type_specGen+= type_spec (TK_2= 'NOT' TK_3= 'NULL' )? )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15411:3: keyTYPEGen+= keyTYPE type_nameGen+= type_name TK_0= 'IS' (keyVARRAYGen+= keyVARRAY | keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY ) LPARENGen= LPAREN integerGen+= integer RPARENGen= RPAREN TK_1= 'OF' type_specGen+= type_spec (TK_2= 'NOT' TK_3= 'NULL' )?
            {
            pushFollow(FOLLOW_keyTYPE_in_varray_declaration11596);
            keyTYPEGen=keyTYPE();
            _fsp--;
            if (failed) return retval;
            if (list_keyTYPEGen==null) list_keyTYPEGen=new ArrayList();
            list_keyTYPEGen.add(keyTYPEGen);

            pushFollow(FOLLOW_type_name_in_varray_declaration11600);
            type_nameGen=type_name();
            _fsp--;
            if (failed) return retval;
            if (list_type_nameGen==null) list_type_nameGen=new ArrayList();
            list_type_nameGen.add(type_nameGen);

            TK_0=(Token)input.LT(1);
            match(input,68,FOLLOW_68_in_varray_declaration11604); if (failed) return retval;
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15412:3: (keyVARRAYGen+= keyVARRAY | keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY )
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==262) ) {
                alt328=1;
            }
            else if ( (LA328_0==263) ) {
                alt328=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("15412:3: (keyVARRAYGen+= keyVARRAY | keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY )", 328, 0, input);

                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15412:5: keyVARRAYGen+= keyVARRAY
                    {
                    pushFollow(FOLLOW_keyVARRAY_in_varray_declaration11613);
                    keyVARRAYGen=keyVARRAY();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyVARRAYGen==null) list_keyVARRAYGen=new ArrayList();
                    list_keyVARRAYGen.add(keyVARRAYGen);


                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15412:31: keyVARYINGGen+= keyVARYING keyARRAYGen+= keyARRAY
                    {
                    pushFollow(FOLLOW_keyVARYING_in_varray_declaration11619);
                    keyVARYINGGen=keyVARYING();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyVARYINGGen==null) list_keyVARYINGGen=new ArrayList();
                    list_keyVARYINGGen.add(keyVARYINGGen);

                    pushFollow(FOLLOW_keyARRAY_in_varray_declaration11623);
                    keyARRAYGen=keyARRAY();
                    _fsp--;
                    if (failed) return retval;
                    if (list_keyARRAYGen==null) list_keyARRAYGen=new ArrayList();
                    list_keyARRAYGen.add(keyARRAYGen);


                    }
                    break;

            }

            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_varray_declaration11629); if (failed) return retval;
            pushFollow(FOLLOW_integer_in_varray_declaration11633);
            integerGen=integer();
            _fsp--;
            if (failed) return retval;
            if (list_integerGen==null) list_integerGen=new ArrayList();
            list_integerGen.add(integerGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_varray_declaration11637); if (failed) return retval;
            TK_1=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_varray_declaration11643); if (failed) return retval;
            pushFollow(FOLLOW_type_spec_in_varray_declaration11647);
            type_specGen=type_spec();
            _fsp--;
            if (failed) return retval;
            if (list_type_specGen==null) list_type_specGen=new ArrayList();
            list_type_specGen.add(type_specGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15413:37: (TK_2= 'NOT' TK_3= 'NULL' )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==62) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15413:39: TK_2= 'NOT' TK_3= 'NULL'
                    {
                    TK_2=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_varray_declaration11653); if (failed) return retval;
                    TK_3=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_varray_declaration11657); if (failed) return retval;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node varray_declarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		varray_declarationReturnNode.setKind("varray_declaration");
              	    // Create a CST Node
              		if(list_keyTYPEGen != null) {
              	        for(Iterator it = list_keyTYPEGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyTYPE_return r = (PLSQL3Parser.keyTYPE_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyTYPE");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_type_nameGen != null) {
              	        for(Iterator it = list_type_nameGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_name_return r = (PLSQL3Parser.type_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_name");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		varray_declarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_keyVARRAYGen != null) {
              	        for(Iterator it = list_keyVARRAYGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyVARRAY_return r = (PLSQL3Parser.keyVARRAY_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyVARRAY");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyVARYINGGen != null) {
              	        for(Iterator it = list_keyVARYINGGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyVARYING_return r = (PLSQL3Parser.keyVARYING_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyVARYING");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_keyARRAYGen != null) {
              	        for(Iterator it = list_keyARRAYGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.keyARRAY_return r = (PLSQL3Parser.keyARRAY_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("keyARRAY");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			varray_declarationReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_integerGen != null) {
              	        for(Iterator it = list_integerGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.integer_return r = (PLSQL3Parser.integer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("integer");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			varray_declarationReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		varray_declarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_type_specGen != null) {
              	        for(Iterator it = list_type_specGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.type_spec_return r = (PLSQL3Parser.type_spec_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type_spec");
              	            	varray_declarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		varray_declarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		varray_declarationReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = varray_declarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end varray_declaration

    public static class where_clause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start where_clause
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15547:1: where_clause returns [Node returnNode] : TK_0= 'WHERE' sql_conditionGen+= sql_condition ;
    public final where_clause_return where_clause() throws RecognitionException {
        where_clause_return retval = new where_clause_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_sql_conditionGen=null;
        RuleReturnScope sql_conditionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15548:1: (TK_0= 'WHERE' sql_conditionGen+= sql_condition )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15548:3: TK_0= 'WHERE' sql_conditionGen+= sql_condition
            {
            TK_0=(Token)input.LT(1);
            match(input,114,FOLLOW_114_in_where_clause11681); if (failed) return retval;
            pushFollow(FOLLOW_sql_condition_in_where_clause11685);
            sql_conditionGen=sql_condition();
            _fsp--;
            if (failed) return retval;
            if (list_sql_conditionGen==null) list_sql_conditionGen=new ArrayList();
            list_sql_conditionGen.add(sql_conditionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node where_clauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		where_clauseReturnNode.setKind("where_clause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		where_clauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_sql_conditionGen != null) {
              	        for(Iterator it = list_sql_conditionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_condition_return r = (PLSQL3Parser.sql_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_condition");
              	            	where_clauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = where_clauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end where_clause

    public static class expression_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expression_list
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15581:1: expression_list returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN | sql_expressionsGen+= sql_expressions );
    public final expression_list_return expression_list() throws RecognitionException {
        expression_list_return retval = new expression_list_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_sql_expressionsGen=null;
        RuleReturnScope sql_expressionsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15582:1: (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN | sql_expressionsGen+= sql_expressions )
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==LPAREN) ) {
                int LA330_1 = input.LA(2);

                if ( (synpred487()) ) {
                    alt330=1;
                }
                else if ( (true) ) {
                    alt330=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15581:1: expression_list returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN | sql_expressionsGen+= sql_expressions );", 330, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA330_0==NUMBER||(LA330_0>=QUOTED_STRING && LA330_0<=MINUS)||LA330_0==COLON||(LA330_0>=56 && LA330_0<=58)||LA330_0==69||LA330_0==110||LA330_0==121||LA330_0==148||LA330_0==153||LA330_0==158||LA330_0==233) ) {
                alt330=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("15581:1: expression_list returns [Node returnNode] : (LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN | sql_expressionsGen+= sql_expressions );", 330, 0, input);

                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15582:3: LPARENGen= LPAREN sql_expressionsGen+= sql_expressions RPARENGen= RPAREN
                    {
                    LPARENGen=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_expression_list11713); if (failed) return retval;
                    pushFollow(FOLLOW_sql_expressions_in_expression_list11717);
                    sql_expressionsGen=sql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                    list_sql_expressionsGen.add(sql_expressionsGen);

                    RPARENGen=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_expression_list11721); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expression_listReturnNode.setKind("expression_list");
                      	    // Create a CST Leaf
                      		if(LPARENGen != null) {
                      			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LPARENGenLeaf.setKind("LPAREN");
                      			LPARENGenLeaf.setValue(LPARENGen.getText());
                      			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
                      			LPARENGenLeaf.setLine(LPARENGen.getLine());
                      			expression_listReturnNode.getChildren().add(LPARENGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	expression_listReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARENGen != null) {
                      			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			RPARENGenLeaf.setKind("RPAREN");
                      			RPARENGenLeaf.setValue(RPARENGen.getText());
                      			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
                      			RPARENGenLeaf.setLine(RPARENGen.getLine());
                      			expression_listReturnNode.getChildren().add(RPARENGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expression_listReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15618:4: sql_expressionsGen+= sql_expressions
                    {
                    pushFollow(FOLLOW_sql_expressions_in_expression_list11732);
                    sql_expressionsGen=sql_expressions();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionsGen==null) list_sql_expressionsGen=new ArrayList();
                    list_sql_expressionsGen.add(sql_expressionsGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expression_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expression_listReturnNode.setKind("expression_list");
                      	    // Create a CST Node
                      		if(list_sql_expressionsGen != null) {
                      	        for(Iterator it = list_sql_expressionsGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expressions_return r = (PLSQL3Parser.sql_expressions_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expressions");
                      	            	expression_listReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expression_listReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expression_list

    public static class plsql_expressions_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_expressions
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15638:1: plsql_expressions returns [Node returnNode] : plsql_expressionGen+= plsql_expression (COMMAGen_List+= COMMA plsql_expressionGen_1+= plsql_expression )* ;
    public final plsql_expressions_return plsql_expressions() throws RecognitionException {
        plsql_expressions_return retval = new plsql_expressions_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_plsql_expressionGen=null;
        List list_plsql_expressionGen_1=null;
        RuleReturnScope plsql_expressionGen = null;
        RuleReturnScope plsql_expressionGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15639:1: (plsql_expressionGen+= plsql_expression (COMMAGen_List+= COMMA plsql_expressionGen_1+= plsql_expression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15639:3: plsql_expressionGen+= plsql_expression (COMMAGen_List+= COMMA plsql_expressionGen_1+= plsql_expression )*
            {
            pushFollow(FOLLOW_plsql_expression_in_plsql_expressions11753);
            plsql_expressionGen=plsql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
            list_plsql_expressionGen.add(plsql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15639:41: (COMMAGen_List+= COMMA plsql_expressionGen_1+= plsql_expression )*
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==COMMA) ) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15639:43: COMMAGen_List+= COMMA plsql_expressionGen_1+= plsql_expression
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_plsql_expressions11759); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_plsql_expression_in_plsql_expressions11763);
            	    plsql_expressionGen_1=plsql_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_plsql_expressionGen_1==null) list_plsql_expressionGen_1=new ArrayList();
            	    list_plsql_expressionGen_1.add(plsql_expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_expressionsReturnNode.setKind("plsql_expressions");
              	    // Create a CST Node
              		if(list_plsql_expressionGen != null) {
              	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("plsql_expression");
              	            	plsql_expressionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			plsql_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_plsql_expressionGen_1 != null) {		
              	    	PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) list_plsql_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("plsql_expression");
              	    		plsql_expressionsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_expressionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_expressions

    public static class plsql_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start plsql_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15684:1: plsql_expression returns [Node returnNode] : expr_boolGen+= expr_bool ;
    public final plsql_expression_return plsql_expression() throws RecognitionException {
        plsql_expression_return retval = new plsql_expression_return();
        retval.start = input.LT(1);

        List list_expr_boolGen=null;
        RuleReturnScope expr_boolGen = null;
         isSql = false; 
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15686:2: (expr_boolGen+= expr_bool )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15686:4: expr_boolGen+= expr_bool
            {
            pushFollow(FOLLOW_expr_bool_in_plsql_expression11794);
            expr_boolGen=expr_bool();
            _fsp--;
            if (failed) return retval;
            if (list_expr_boolGen==null) list_expr_boolGen=new ArrayList();
            list_expr_boolGen.add(expr_boolGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node plsql_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		plsql_expressionReturnNode.setKind("plsql_expression");
              	    // Create a CST Node
              		if(list_expr_boolGen != null) {
              	        for(Iterator it = list_expr_boolGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_bool_return r = (PLSQL3Parser.expr_bool_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_bool");
              	            	plsql_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = plsql_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end plsql_expression

    public static class sql_expressions_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_expressions
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15706:1: sql_expressions returns [Node returnNode] : sql_expressionGen+= sql_expression (COMMAGen_List+= COMMA sql_expressionGen_1+= sql_expression )* ;
    public final sql_expressions_return sql_expressions() throws RecognitionException {
        sql_expressions_return retval = new sql_expressions_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_sql_expressionGen=null;
        List list_sql_expressionGen_1=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope sql_expressionGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:1: (sql_expressionGen+= sql_expression (COMMAGen_List+= COMMA sql_expressionGen_1+= sql_expression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:3: sql_expressionGen+= sql_expression (COMMAGen_List+= COMMA sql_expressionGen_1+= sql_expression )*
            {
            pushFollow(FOLLOW_sql_expression_in_sql_expressions11815);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:37: (COMMAGen_List+= COMMA sql_expressionGen_1+= sql_expression )*
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==COMMA) ) {
                    int LA332_2 = input.LA(2);

                    if ( (synpred489()) ) {
                        alt332=1;
                    }


                }


                switch (alt332) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:39: COMMAGen_List+= COMMA sql_expressionGen_1+= sql_expression
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_sql_expressions11821); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_sql_expression_in_sql_expressions11825);
            	    sql_expressionGen_1=sql_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_sql_expressionGen_1==null) list_sql_expressionGen_1=new ArrayList();
            	    list_sql_expressionGen_1.add(sql_expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node sql_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		sql_expressionsReturnNode.setKind("sql_expressions");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	sql_expressionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			sql_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_sql_expressionGen_1 != null) {		
              	    	PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) list_sql_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("sql_expression");
              	    		sql_expressionsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = sql_expressionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_expressions

    public static class sql_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start sql_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15752:1: sql_expression returns [Node returnNode] : expr_addGen+= expr_add ;
    public final sql_expression_return sql_expression() throws RecognitionException {
        sql_expression_return retval = new sql_expression_return();
        retval.start = input.LT(1);

        List list_expr_addGen=null;
        RuleReturnScope expr_addGen = null;
         isSql = true; 
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15754:2: (expr_addGen+= expr_add )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15754:4: expr_addGen+= expr_add
            {
            pushFollow(FOLLOW_expr_add_in_sql_expression11856);
            expr_addGen=expr_add();
            _fsp--;
            if (failed) return retval;
            if (list_expr_addGen==null) list_expr_addGen=new ArrayList();
            list_expr_addGen.add(expr_addGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node sql_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		sql_expressionReturnNode.setKind("sql_expression");
              	    // Create a CST Node
              		if(list_expr_addGen != null) {
              	        for(Iterator it = list_expr_addGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_add");
              	            	sql_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = sql_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sql_expression

    public static class nested_expressions_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nested_expressions
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15774:1: nested_expressions returns [Node returnNode] : nested_expressionGen+= nested_expression (COMMAGen_List+= COMMA nested_expressionGen_1+= nested_expression )* ;
    public final nested_expressions_return nested_expressions() throws RecognitionException {
        nested_expressions_return retval = new nested_expressions_return();
        retval.start = input.LT(1);

        Token COMMAGen_List=null;
        List list_COMMAGen_List=null;
        List list_nested_expressionGen=null;
        List list_nested_expressionGen_1=null;
        RuleReturnScope nested_expressionGen = null;
        RuleReturnScope nested_expressionGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15775:1: (nested_expressionGen+= nested_expression (COMMAGen_List+= COMMA nested_expressionGen_1+= nested_expression )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15775:3: nested_expressionGen+= nested_expression (COMMAGen_List+= COMMA nested_expressionGen_1+= nested_expression )*
            {
            pushFollow(FOLLOW_nested_expression_in_nested_expressions11878);
            nested_expressionGen=nested_expression();
            _fsp--;
            if (failed) return retval;
            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            list_nested_expressionGen.add(nested_expressionGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15775:43: (COMMAGen_List+= COMMA nested_expressionGen_1+= nested_expression )*
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);

                if ( (LA333_0==COMMA) ) {
                    alt333=1;
                }


                switch (alt333) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15775:45: COMMAGen_List+= COMMA nested_expressionGen_1+= nested_expression
            	    {
            	    COMMAGen_List=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_nested_expressions11884); if (failed) return retval;
            	    if (list_COMMAGen_List==null) list_COMMAGen_List=new ArrayList();
            	    list_COMMAGen_List.add(COMMAGen_List);

            	    pushFollow(FOLLOW_nested_expression_in_nested_expressions11888);
            	    nested_expressionGen_1=nested_expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_expressionGen_1==null) list_nested_expressionGen_1=new ArrayList();
            	    list_nested_expressionGen_1.add(nested_expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop333;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node nested_expressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nested_expressionsReturnNode.setKind("nested_expressions");
              	    // Create a CST Node
              		if(list_nested_expressionGen != null) {
              	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_expression");
              	            	nested_expressionsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal COMMAGen_List aggregation
              		if(list_COMMAGen_List != null) {
              	    for(int pos = 0; pos < list_COMMAGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_COMMAGen_List != null) {
              		    Token t = (Token) list_COMMAGen_List.get(pos); 
              		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			COMMAGen_ListLeaf.setKind("COMMA");
              			COMMAGen_ListLeaf.setValue(t.getText());
              			COMMAGen_ListLeaf.setPos(t.getCharPositionInLine());
              			COMMAGen_ListLeaf.setLine(t.getLine());
              			nested_expressionsReturnNode.getChildren().add(COMMAGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_nested_expressionGen_1 != null) {		
              	    	PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) list_nested_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_expression");
              	    		nested_expressionsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nested_expressionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nested_expressions

    public static class nested_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start nested_expression
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );
    public final nested_expression_return nested_expression() throws RecognitionException {
        nested_expression_return retval = new nested_expression_return();
        retval.start = input.LT(1);

        List list_sql_expressionGen=null;
        List list_plsql_expressionGen=null;
        RuleReturnScope sql_expressionGen = null;
        RuleReturnScope plsql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15821:1: ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression )
            int alt334=2;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                int LA334_1 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 1, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA334_2 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA334_3 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 3, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA334_4 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 4, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA334_5 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 5, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA334_6 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 6, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA334_7 = input.LA(2);

                if ( (((synpred491()&&  isSql )&& isSql )) ) {
                    alt334=1;
                }
                else if ( (( !isSql && isSql )) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 7, input);

                    throw nvae;
                }
                }
                break;
            case 121:
                {
                int LA334_8 = input.LA(2);

                if ( (((synpred491()&&  isSql )&& isSql )) ) {
                    alt334=1;
                }
                else if ( (( !isSql && isSql )) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 8, input);

                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA334_9 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 9, input);

                    throw nvae;
                }
                }
                break;
            case 233:
                {
                int LA334_10 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 10, input);

                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA334_11 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 11, input);

                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA334_12 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 12, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA334_13 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 13, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA334_14 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 14, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA334_15 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 15, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                int LA334_16 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 16, input);

                    throw nvae;
                }
                }
                break;
            case 69:
                {
                int LA334_17 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 17, input);

                    throw nvae;
                }
                }
                break;
            case 148:
                {
                int LA334_18 = input.LA(2);

                if ( ((synpred491()&&  isSql )) ) {
                    alt334=1;
                }
                else if ( ( !isSql ) ) {
                    alt334=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 18, input);

                    throw nvae;
                }
                }
                break;
            case 62:
                {
                alt334=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("15820:1: nested_expression returns [Node returnNode] : ({...}?sql_expressionGen+= sql_expression | {...}?plsql_expressionGen+= plsql_expression );", 334, 0, input);

                throw nvae;
            }

            switch (alt334) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15821:3: {...}?sql_expressionGen+= sql_expression
                    {
                    if ( !(  isSql ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", "  isSql ");
                    }
                    pushFollow(FOLLOW_sql_expression_in_nested_expression11915);
                    sql_expressionGen=sql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
                    list_sql_expressionGen.add(sql_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node nested_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		nested_expressionReturnNode.setKind("nested_expression");
                      	    // Create a CST Node
                      		if(list_sql_expressionGen != null) {
                      	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("sql_expression");
                      	            	nested_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = nested_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15839:4: {...}?plsql_expressionGen+= plsql_expression
                    {
                    if ( !( !isSql ) ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", " !isSql ");
                    }
                    pushFollow(FOLLOW_plsql_expression_in_nested_expression11928);
                    plsql_expressionGen=plsql_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_plsql_expressionGen==null) list_plsql_expressionGen=new ArrayList();
                    list_plsql_expressionGen.add(plsql_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node nested_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		nested_expressionReturnNode.setKind("nested_expression");
                      	    // Create a CST Node
                      		if(list_plsql_expressionGen != null) {
                      	        for(Iterator it = list_plsql_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.plsql_expression_return r = (PLSQL3Parser.plsql_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("plsql_expression");
                      	            	nested_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = nested_expressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nested_expression

    public static class expr_bool_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_bool
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15859:1: expr_bool returns [Node returnNode] : expr_orGen+= expr_or (TK_0= 'OR' expr_orGen_1+= expr_or )* ;
    public final expr_bool_return expr_bool() throws RecognitionException {
        expr_bool_return retval = new expr_bool_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_expr_orGen=null;
        List list_expr_orGen_1=null;
        RuleReturnScope expr_orGen = null;
        RuleReturnScope expr_orGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:1: (expr_orGen+= expr_or (TK_0= 'OR' expr_orGen_1+= expr_or )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:3: expr_orGen+= expr_or (TK_0= 'OR' expr_orGen_1+= expr_or )*
            {
            pushFollow(FOLLOW_expr_or_in_expr_bool11950);
            expr_orGen=expr_or();
            _fsp--;
            if (failed) return retval;
            if (list_expr_orGen==null) list_expr_orGen=new ArrayList();
            list_expr_orGen.add(expr_orGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:23: (TK_0= 'OR' expr_orGen_1+= expr_or )*
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);

                if ( (LA335_0==73) ) {
                    int LA335_2 = input.LA(2);

                    if ( (synpred492()) ) {
                        alt335=1;
                    }


                }


                switch (alt335) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:25: TK_0= 'OR' expr_orGen_1+= expr_or
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,73,FOLLOW_73_in_expr_bool11956); if (failed) return retval;
            	    pushFollow(FOLLOW_expr_or_in_expr_bool11960);
            	    expr_orGen_1=expr_or();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_orGen_1==null) list_expr_orGen_1=new ArrayList();
            	    list_expr_orGen_1.add(expr_orGen_1);


            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_boolReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_boolReturnNode.setKind("expr_bool");
              	    // Create a CST Node
              		if(list_expr_orGen != null) {
              	        for(Iterator it = list_expr_orGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_or_return r = (PLSQL3Parser.expr_or_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_or");
              	            	expr_boolReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal expr_orGen_1 aggregation
              		if(list_expr_orGen_1 != null) {
              	    for(int pos = 0; pos < list_expr_orGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expr_boolReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expr_orGen_1 != null) {		
              	    	PLSQL3Parser.expr_or_return r = (PLSQL3Parser.expr_or_return) list_expr_orGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_or");
              	    		expr_boolReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_boolReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_bool

    public static class expr_or_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_or
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15904:1: expr_or returns [Node returnNode] : expr_andGen+= expr_and (TK_0= 'AND' expr_andGen_1+= expr_and )* ;
    public final expr_or_return expr_or() throws RecognitionException {
        expr_or_return retval = new expr_or_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_expr_andGen=null;
        List list_expr_andGen_1=null;
        RuleReturnScope expr_andGen = null;
        RuleReturnScope expr_andGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:1: (expr_andGen+= expr_and (TK_0= 'AND' expr_andGen_1+= expr_and )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:3: expr_andGen+= expr_and (TK_0= 'AND' expr_andGen_1+= expr_and )*
            {
            pushFollow(FOLLOW_expr_and_in_expr_or11985);
            expr_andGen=expr_and();
            _fsp--;
            if (failed) return retval;
            if (list_expr_andGen==null) list_expr_andGen=new ArrayList();
            list_expr_andGen.add(expr_andGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:25: (TK_0= 'AND' expr_andGen_1+= expr_and )*
            loop336:
            do {
                int alt336=2;
                int LA336_0 = input.LA(1);

                if ( (LA336_0==61) ) {
                    int LA336_2 = input.LA(2);

                    if ( (synpred493()) ) {
                        alt336=1;
                    }


                }


                switch (alt336) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:27: TK_0= 'AND' expr_andGen_1+= expr_and
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,61,FOLLOW_61_in_expr_or11991); if (failed) return retval;
            	    pushFollow(FOLLOW_expr_and_in_expr_or11995);
            	    expr_andGen_1=expr_and();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_andGen_1==null) list_expr_andGen_1=new ArrayList();
            	    list_expr_andGen_1.add(expr_andGen_1);


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_orReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_orReturnNode.setKind("expr_or");
              	    // Create a CST Node
              		if(list_expr_andGen != null) {
              	        for(Iterator it = list_expr_andGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_and_return r = (PLSQL3Parser.expr_and_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_and");
              	            	expr_orReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal expr_andGen_1 aggregation
              		if(list_expr_andGen_1 != null) {
              	    for(int pos = 0; pos < list_expr_andGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expr_orReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expr_andGen_1 != null) {		
              	    	PLSQL3Parser.expr_and_return r = (PLSQL3Parser.expr_and_return) list_expr_andGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_and");
              	    		expr_orReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_orReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_or

    public static class expr_and_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_and
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15949:1: expr_and returns [Node returnNode] : (TK_0= 'NOT' )? expr_notGen+= expr_not ;
    public final expr_and_return expr_and() throws RecognitionException {
        expr_and_return retval = new expr_and_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        List list_expr_notGen=null;
        RuleReturnScope expr_notGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15950:1: ( (TK_0= 'NOT' )? expr_notGen+= expr_not )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15950:3: (TK_0= 'NOT' )? expr_notGen+= expr_not
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15950:3: (TK_0= 'NOT' )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==62) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15950:5: TK_0= 'NOT'
                    {
                    TK_0=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_expr_and12022); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_expr_not_in_expr_and12029);
            expr_notGen=expr_not();
            _fsp--;
            if (failed) return retval;
            if (list_expr_notGen==null) list_expr_notGen=new ArrayList();
            list_expr_notGen.add(expr_notGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_andReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_andReturnNode.setKind("expr_and");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expr_andReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expr_notGen != null) {
              	        for(Iterator it = list_expr_notGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_not_return r = (PLSQL3Parser.expr_not_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_not");
              	            	expr_andReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_andReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_and

    public static class expr_not_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_not
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15979:1: expr_not returns [Node returnNode] : expr_addGen+= expr_add (relational_opGen+= relational_op expr_addGen_1+= expr_add | FOUND_ATTRGen_List+= FOUND_ATTR | NOTFOUND_ATTRGen_List+= NOTFOUND_ATTR | ISOPEN_ATTRGen_List+= ISOPEN_ATTR | ROWCOUNT_ATTRGen_List+= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen_List+= BULK_ROWCOUNT_ATTR | TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'NULL' | (TK_3= 'NOT' )? TK_4= 'LIKE' expr_addGen_2+= expr_add | (TK_5= 'NOT' )? TK_6= 'BETWEEN' expr_addGen_3+= expr_add TK_7= 'AND' expr_addGen_4+= expr_add | (TK_8= 'NOT' )? TK_9= 'IN' LPARENGen_List+= LPAREN nested_expressionsGen+= nested_expressions RPARENGen_List+= RPAREN )* ;
    public final expr_not_return expr_not() throws RecognitionException {
        expr_not_return retval = new expr_not_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token FOUND_ATTRGen_List=null;
        Token NOTFOUND_ATTRGen_List=null;
        Token ISOPEN_ATTRGen_List=null;
        Token ROWCOUNT_ATTRGen_List=null;
        Token BULK_ROWCOUNT_ATTRGen_List=null;
        Token LPARENGen_List=null;
        Token RPARENGen_List=null;
        List list_FOUND_ATTRGen_List=null;
        List list_NOTFOUND_ATTRGen_List=null;
        List list_ISOPEN_ATTRGen_List=null;
        List list_ROWCOUNT_ATTRGen_List=null;
        List list_BULK_ROWCOUNT_ATTRGen_List=null;
        List list_LPARENGen_List=null;
        List list_RPARENGen_List=null;
        List list_expr_addGen=null;
        List list_relational_opGen=null;
        List list_expr_addGen_1=null;
        List list_expr_addGen_2=null;
        List list_expr_addGen_3=null;
        List list_expr_addGen_4=null;
        List list_nested_expressionsGen=null;
        RuleReturnScope expr_addGen = null;
        RuleReturnScope relational_opGen = null;
        RuleReturnScope expr_addGen_1 = null;
        RuleReturnScope expr_addGen_2 = null;
        RuleReturnScope expr_addGen_3 = null;
        RuleReturnScope expr_addGen_4 = null;
        RuleReturnScope nested_expressionsGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15980:1: (expr_addGen+= expr_add (relational_opGen+= relational_op expr_addGen_1+= expr_add | FOUND_ATTRGen_List+= FOUND_ATTR | NOTFOUND_ATTRGen_List+= NOTFOUND_ATTR | ISOPEN_ATTRGen_List+= ISOPEN_ATTR | ROWCOUNT_ATTRGen_List+= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen_List+= BULK_ROWCOUNT_ATTR | TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'NULL' | (TK_3= 'NOT' )? TK_4= 'LIKE' expr_addGen_2+= expr_add | (TK_5= 'NOT' )? TK_6= 'BETWEEN' expr_addGen_3+= expr_add TK_7= 'AND' expr_addGen_4+= expr_add | (TK_8= 'NOT' )? TK_9= 'IN' LPARENGen_List+= LPAREN nested_expressionsGen+= nested_expressions RPARENGen_List+= RPAREN )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15980:3: expr_addGen+= expr_add (relational_opGen+= relational_op expr_addGen_1+= expr_add | FOUND_ATTRGen_List+= FOUND_ATTR | NOTFOUND_ATTRGen_List+= NOTFOUND_ATTR | ISOPEN_ATTRGen_List+= ISOPEN_ATTR | ROWCOUNT_ATTRGen_List+= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen_List+= BULK_ROWCOUNT_ATTR | TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'NULL' | (TK_3= 'NOT' )? TK_4= 'LIKE' expr_addGen_2+= expr_add | (TK_5= 'NOT' )? TK_6= 'BETWEEN' expr_addGen_3+= expr_add TK_7= 'AND' expr_addGen_4+= expr_add | (TK_8= 'NOT' )? TK_9= 'IN' LPARENGen_List+= LPAREN nested_expressionsGen+= nested_expressions RPARENGen_List+= RPAREN )*
            {
            pushFollow(FOLLOW_expr_add_in_expr_not12051);
            expr_addGen=expr_add();
            _fsp--;
            if (failed) return retval;
            if (list_expr_addGen==null) list_expr_addGen=new ArrayList();
            list_expr_addGen.add(expr_addGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15981:3: (relational_opGen+= relational_op expr_addGen_1+= expr_add | FOUND_ATTRGen_List+= FOUND_ATTR | NOTFOUND_ATTRGen_List+= NOTFOUND_ATTR | ISOPEN_ATTRGen_List+= ISOPEN_ATTR | ROWCOUNT_ATTRGen_List+= ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTRGen_List+= BULK_ROWCOUNT_ATTR | TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'NULL' | (TK_3= 'NOT' )? TK_4= 'LIKE' expr_addGen_2+= expr_add | (TK_5= 'NOT' )? TK_6= 'BETWEEN' expr_addGen_3+= expr_add TK_7= 'AND' expr_addGen_4+= expr_add | (TK_8= 'NOT' )? TK_9= 'IN' LPARENGen_List+= LPAREN nested_expressionsGen+= nested_expressions RPARENGen_List+= RPAREN )*
            loop342:
            do {
                int alt342=11;
                switch ( input.LA(1) ) {
                case 62:
                    {
                    int LA342_2 = input.LA(2);

                    if ( (synpred504()) ) {
                        alt342=8;
                    }
                    else if ( (synpred506()) ) {
                        alt342=9;
                    }
                    else if ( (synpred508()) ) {
                        alt342=10;
                    }


                    }
                    break;
                case 63:
                    {
                    int LA342_3 = input.LA(2);

                    if ( (synpred506()) ) {
                        alt342=9;
                    }


                    }
                    break;
                case EQ:
                    {
                    int LA342_4 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case NOT_EQ:
                    {
                    int LA342_5 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case GTH:
                    {
                    int LA342_6 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case GEQ:
                    {
                    int LA342_7 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case LTH:
                    {
                    int LA342_8 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case LEQ:
                    {
                    int LA342_9 = input.LA(2);

                    if ( (synpred495()) ) {
                        alt342=1;
                    }


                    }
                    break;
                case 51:
                    {
                    int LA342_10 = input.LA(2);

                    if ( (synpred508()) ) {
                        alt342=10;
                    }


                    }
                    break;
                case 68:
                    {
                    int LA342_11 = input.LA(2);

                    if ( (synpred502()) ) {
                        alt342=7;
                    }


                    }
                    break;
                case 72:
                    {
                    int LA342_12 = input.LA(2);

                    if ( (synpred504()) ) {
                        alt342=8;
                    }


                    }
                    break;
                case FOUND_ATTR:
                    {
                    int LA342_13 = input.LA(2);

                    if ( (synpred496()) ) {
                        alt342=2;
                    }


                    }
                    break;
                case NOTFOUND_ATTR:
                    {
                    int LA342_14 = input.LA(2);

                    if ( (synpred497()) ) {
                        alt342=3;
                    }


                    }
                    break;
                case ISOPEN_ATTR:
                    {
                    int LA342_15 = input.LA(2);

                    if ( (synpred498()) ) {
                        alt342=4;
                    }


                    }
                    break;
                case ROWCOUNT_ATTR:
                    {
                    int LA342_16 = input.LA(2);

                    if ( (synpred499()) ) {
                        alt342=5;
                    }


                    }
                    break;
                case BULK_ROWCOUNT_ATTR:
                    {
                    int LA342_17 = input.LA(2);

                    if ( (synpred500()) ) {
                        alt342=6;
                    }


                    }
                    break;

                }

                switch (alt342) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15981:5: relational_opGen+= relational_op expr_addGen_1+= expr_add
            	    {
            	    pushFollow(FOLLOW_relational_op_in_expr_not12060);
            	    relational_opGen=relational_op();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_relational_opGen==null) list_relational_opGen=new ArrayList();
            	    list_relational_opGen.add(relational_opGen);

            	    pushFollow(FOLLOW_expr_add_in_expr_not12064);
            	    expr_addGen_1=expr_add();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_addGen_1==null) list_expr_addGen_1=new ArrayList();
            	    list_expr_addGen_1.add(expr_addGen_1);


            	    }
            	    break;
            	case 2 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:5: FOUND_ATTRGen_List+= FOUND_ATTR
            	    {
            	    FOUND_ATTRGen_List=(Token)input.LT(1);
            	    match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_expr_not12072); if (failed) return retval;
            	    if (list_FOUND_ATTRGen_List==null) list_FOUND_ATTRGen_List=new ArrayList();
            	    list_FOUND_ATTRGen_List.add(FOUND_ATTRGen_List);


            	    }
            	    break;
            	case 3 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:38: NOTFOUND_ATTRGen_List+= NOTFOUND_ATTR
            	    {
            	    NOTFOUND_ATTRGen_List=(Token)input.LT(1);
            	    match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_expr_not12078); if (failed) return retval;
            	    if (list_NOTFOUND_ATTRGen_List==null) list_NOTFOUND_ATTRGen_List=new ArrayList();
            	    list_NOTFOUND_ATTRGen_List.add(NOTFOUND_ATTRGen_List);


            	    }
            	    break;
            	case 4 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:77: ISOPEN_ATTRGen_List+= ISOPEN_ATTR
            	    {
            	    ISOPEN_ATTRGen_List=(Token)input.LT(1);
            	    match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_expr_not12084); if (failed) return retval;
            	    if (list_ISOPEN_ATTRGen_List==null) list_ISOPEN_ATTRGen_List=new ArrayList();
            	    list_ISOPEN_ATTRGen_List.add(ISOPEN_ATTRGen_List);


            	    }
            	    break;
            	case 5 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:112: ROWCOUNT_ATTRGen_List+= ROWCOUNT_ATTR
            	    {
            	    ROWCOUNT_ATTRGen_List=(Token)input.LT(1);
            	    match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_expr_not12090); if (failed) return retval;
            	    if (list_ROWCOUNT_ATTRGen_List==null) list_ROWCOUNT_ATTRGen_List=new ArrayList();
            	    list_ROWCOUNT_ATTRGen_List.add(ROWCOUNT_ATTRGen_List);


            	    }
            	    break;
            	case 6 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:151: BULK_ROWCOUNT_ATTRGen_List+= BULK_ROWCOUNT_ATTR
            	    {
            	    BULK_ROWCOUNT_ATTRGen_List=(Token)input.LT(1);
            	    match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not12096); if (failed) return retval;
            	    if (list_BULK_ROWCOUNT_ATTRGen_List==null) list_BULK_ROWCOUNT_ATTRGen_List=new ArrayList();
            	    list_BULK_ROWCOUNT_ATTRGen_List.add(BULK_ROWCOUNT_ATTRGen_List);


            	    }
            	    break;
            	case 7 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:5: TK_0= 'IS' (TK_1= 'NOT' )? TK_2= 'NULL'
            	    {
            	    TK_0=(Token)input.LT(1);
            	    match(input,68,FOLLOW_68_in_expr_not12104); if (failed) return retval;
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:15: (TK_1= 'NOT' )?
            	    int alt338=2;
            	    int LA338_0 = input.LA(1);

            	    if ( (LA338_0==62) ) {
            	        alt338=1;
            	    }
            	    switch (alt338) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:17: TK_1= 'NOT'
            	            {
            	            TK_1=(Token)input.LT(1);
            	            match(input,62,FOLLOW_62_in_expr_not12110); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    TK_2=(Token)input.LT(1);
            	    match(input,69,FOLLOW_69_in_expr_not12117); if (failed) return retval;

            	    }
            	    break;
            	case 8 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:5: (TK_3= 'NOT' )? TK_4= 'LIKE' expr_addGen_2+= expr_add
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:5: (TK_3= 'NOT' )?
            	    int alt339=2;
            	    int LA339_0 = input.LA(1);

            	    if ( (LA339_0==62) ) {
            	        alt339=1;
            	    }
            	    switch (alt339) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:7: TK_3= 'NOT'
            	            {
            	            TK_3=(Token)input.LT(1);
            	            match(input,62,FOLLOW_62_in_expr_not12127); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    TK_4=(Token)input.LT(1);
            	    match(input,72,FOLLOW_72_in_expr_not12134); if (failed) return retval;
            	    pushFollow(FOLLOW_expr_add_in_expr_not12138);
            	    expr_addGen_2=expr_add();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_addGen_2==null) list_expr_addGen_2=new ArrayList();
            	    list_expr_addGen_2.add(expr_addGen_2);


            	    }
            	    break;
            	case 9 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:5: (TK_5= 'NOT' )? TK_6= 'BETWEEN' expr_addGen_3+= expr_add TK_7= 'AND' expr_addGen_4+= expr_add
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:5: (TK_5= 'NOT' )?
            	    int alt340=2;
            	    int LA340_0 = input.LA(1);

            	    if ( (LA340_0==62) ) {
            	        alt340=1;
            	    }
            	    switch (alt340) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:7: TK_5= 'NOT'
            	            {
            	            TK_5=(Token)input.LT(1);
            	            match(input,62,FOLLOW_62_in_expr_not12148); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    TK_6=(Token)input.LT(1);
            	    match(input,63,FOLLOW_63_in_expr_not12155); if (failed) return retval;
            	    pushFollow(FOLLOW_expr_add_in_expr_not12159);
            	    expr_addGen_3=expr_add();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_addGen_3==null) list_expr_addGen_3=new ArrayList();
            	    list_expr_addGen_3.add(expr_addGen_3);

            	    TK_7=(Token)input.LT(1);
            	    match(input,61,FOLLOW_61_in_expr_not12163); if (failed) return retval;
            	    pushFollow(FOLLOW_expr_add_in_expr_not12167);
            	    expr_addGen_4=expr_add();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_addGen_4==null) list_expr_addGen_4=new ArrayList();
            	    list_expr_addGen_4.add(expr_addGen_4);


            	    }
            	    break;
            	case 10 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:5: (TK_8= 'NOT' )? TK_9= 'IN' LPARENGen_List+= LPAREN nested_expressionsGen+= nested_expressions RPARENGen_List+= RPAREN
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:5: (TK_8= 'NOT' )?
            	    int alt341=2;
            	    int LA341_0 = input.LA(1);

            	    if ( (LA341_0==62) ) {
            	        alt341=1;
            	    }
            	    switch (alt341) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:7: TK_8= 'NOT'
            	            {
            	            TK_8=(Token)input.LT(1);
            	            match(input,62,FOLLOW_62_in_expr_not12177); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    TK_9=(Token)input.LT(1);
            	    match(input,51,FOLLOW_51_in_expr_not12184); if (failed) return retval;
            	    LPARENGen_List=(Token)input.LT(1);
            	    match(input,LPAREN,FOLLOW_LPAREN_in_expr_not12188); if (failed) return retval;
            	    if (list_LPARENGen_List==null) list_LPARENGen_List=new ArrayList();
            	    list_LPARENGen_List.add(LPARENGen_List);

            	    pushFollow(FOLLOW_nested_expressions_in_expr_not12192);
            	    nested_expressionsGen=nested_expressions();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_nested_expressionsGen==null) list_nested_expressionsGen=new ArrayList();
            	    list_nested_expressionsGen.add(nested_expressionsGen);

            	    RPARENGen_List=(Token)input.LT(1);
            	    match(input,RPAREN,FOLLOW_RPAREN_in_expr_not12196); if (failed) return retval;
            	    if (list_RPARENGen_List==null) list_RPARENGen_List=new ArrayList();
            	    list_RPARENGen_List.add(RPARENGen_List);


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_notReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_notReturnNode.setKind("expr_not");
              	    // Create a CST Node
              		if(list_expr_addGen != null) {
              	        for(Iterator it = list_expr_addGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_add");
              	            	expr_notReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal relational_opGen aggregation
              		if(list_relational_opGen != null) {
              	    for(int pos = 0; pos < list_relational_opGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_relational_opGen != null) {		
              	    	PLSQL3Parser.relational_op_return r = (PLSQL3Parser.relational_op_return) list_relational_opGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("relational_op");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_expr_addGen_1 != null) {		
              	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) list_expr_addGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_add");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal FOUND_ATTRGen_List aggregation
              		if(list_FOUND_ATTRGen_List != null) {
              	    for(int pos = 0; pos < list_FOUND_ATTRGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_FOUND_ATTRGen_List != null) {
              		    Token t = (Token) list_FOUND_ATTRGen_List.get(pos); 
              		    Leaf FOUND_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			FOUND_ATTRGen_ListLeaf.setKind("FOUND_ATTR");
              			FOUND_ATTRGen_ListLeaf.setValue(t.getText());
              			FOUND_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
              			FOUND_ATTRGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(FOUND_ATTRGen_ListLeaf);
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal NOTFOUND_ATTRGen_List aggregation
              		if(list_NOTFOUND_ATTRGen_List != null) {
              	    for(int pos = 0; pos < list_NOTFOUND_ATTRGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_NOTFOUND_ATTRGen_List != null) {
              		    Token t = (Token) list_NOTFOUND_ATTRGen_List.get(pos); 
              		    Leaf NOTFOUND_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			NOTFOUND_ATTRGen_ListLeaf.setKind("NOTFOUND_ATTR");
              			NOTFOUND_ATTRGen_ListLeaf.setValue(t.getText());
              			NOTFOUND_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
              			NOTFOUND_ATTRGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(NOTFOUND_ATTRGen_ListLeaf);
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal ISOPEN_ATTRGen_List aggregation
              		if(list_ISOPEN_ATTRGen_List != null) {
              	    for(int pos = 0; pos < list_ISOPEN_ATTRGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_ISOPEN_ATTRGen_List != null) {
              		    Token t = (Token) list_ISOPEN_ATTRGen_List.get(pos); 
              		    Leaf ISOPEN_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ISOPEN_ATTRGen_ListLeaf.setKind("ISOPEN_ATTR");
              			ISOPEN_ATTRGen_ListLeaf.setValue(t.getText());
              			ISOPEN_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
              			ISOPEN_ATTRGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(ISOPEN_ATTRGen_ListLeaf);
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal ROWCOUNT_ATTRGen_List aggregation
              		if(list_ROWCOUNT_ATTRGen_List != null) {
              	    for(int pos = 0; pos < list_ROWCOUNT_ATTRGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_ROWCOUNT_ATTRGen_List != null) {
              		    Token t = (Token) list_ROWCOUNT_ATTRGen_List.get(pos); 
              		    Leaf ROWCOUNT_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ROWCOUNT_ATTRGen_ListLeaf.setKind("ROWCOUNT_ATTR");
              			ROWCOUNT_ATTRGen_ListLeaf.setValue(t.getText());
              			ROWCOUNT_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
              			ROWCOUNT_ATTRGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(ROWCOUNT_ATTRGen_ListLeaf);
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal BULK_ROWCOUNT_ATTRGen_List aggregation
              		if(list_BULK_ROWCOUNT_ATTRGen_List != null) {
              	    for(int pos = 0; pos < list_BULK_ROWCOUNT_ATTRGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_BULK_ROWCOUNT_ATTRGen_List != null) {
              		    Token t = (Token) list_BULK_ROWCOUNT_ATTRGen_List.get(pos); 
              		    Leaf BULK_ROWCOUNT_ATTRGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			BULK_ROWCOUNT_ATTRGen_ListLeaf.setKind("BULK_ROWCOUNT_ATTR");
              			BULK_ROWCOUNT_ATTRGen_ListLeaf.setValue(t.getText());
              			BULK_ROWCOUNT_ATTRGen_ListLeaf.setPos(t.getCharPositionInLine());
              			BULK_ROWCOUNT_ATTRGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(BULK_ROWCOUNT_ATTRGen_ListLeaf);
              		}
              		}
              		}
              	
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue(TK_1.getText());
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue(TK_2.getText());
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	
              		// Create a special CST Node for terminal expr_addGen_2 aggregation
              		if(list_expr_addGen_2 != null) {
              	    for(int pos = 0; pos < list_expr_addGen_2.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue(TK_3.getText());
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue(TK_4.getText());
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expr_addGen_2 != null) {		
              	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) list_expr_addGen_2.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_add");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal expr_addGen_3 aggregation
              		if(list_expr_addGen_3 != null) {
              	    for(int pos = 0; pos < list_expr_addGen_3.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue(TK_5.getText());
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue(TK_6.getText());
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expr_addGen_3 != null) {		
              	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) list_expr_addGen_3.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_add");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_7Leaf.setKind("TOKEN");
              	 		TK_7Leaf.setValue(TK_7.getText());
              			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
              			TK_7Leaf.setLine(TK_7.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expr_addGen_4 != null) {		
              	    	PLSQL3Parser.expr_add_return r = (PLSQL3Parser.expr_add_return) list_expr_addGen_4.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_add");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              	
              		// Create a special CST Node for terminal LPARENGen_List aggregation
              		if(list_LPARENGen_List != null) {
              	    for(int pos = 0; pos < list_LPARENGen_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_8Leaf.setKind("TOKEN");
              	 		TK_8Leaf.setValue(TK_8.getText());
              			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
              			TK_8Leaf.setLine(TK_8.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_9Leaf.setKind("TOKEN");
              	 		TK_9Leaf.setValue(TK_9.getText());
              			TK_9Leaf.setPos(TK_9.getCharPositionInLine());
              			TK_9Leaf.setLine(TK_9.getLine());
              	 		expr_notReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_LPARENGen_List != null) {
              		    Token t = (Token) list_LPARENGen_List.get(pos); 
              		    Leaf LPARENGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGen_ListLeaf.setKind("LPAREN");
              			LPARENGen_ListLeaf.setValue(t.getText());
              			LPARENGen_ListLeaf.setPos(t.getCharPositionInLine());
              			LPARENGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(LPARENGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_nested_expressionsGen != null) {		
              	    	PLSQL3Parser.nested_expressions_return r = (PLSQL3Parser.nested_expressions_return) list_nested_expressionsGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("nested_expressions");
              	    		expr_notReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// Terminal extractor
              	    if(list_RPARENGen_List != null) {
              		    Token t = (Token) list_RPARENGen_List.get(pos); 
              		    Leaf RPARENGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGen_ListLeaf.setKind("RPAREN");
              			RPARENGen_ListLeaf.setValue(t.getText());
              			RPARENGen_ListLeaf.setPos(t.getCharPositionInLine());
              			RPARENGen_ListLeaf.setLine(t.getLine());
              			expr_notReturnNode.getChildren().add(RPARENGen_ListLeaf);
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_notReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_not

    public static class relational_op_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start relational_op
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16278:1: relational_op returns [Node returnNode] : (EQGen= EQ | LTHGen= LTH | GTHGen= GTH | NOT_EQGen= NOT_EQ | LEQGen= LEQ | GEQGen= GEQ );
    public final relational_op_return relational_op() throws RecognitionException {
        relational_op_return retval = new relational_op_return();
        retval.start = input.LT(1);

        Token EQGen=null;
        Token LTHGen=null;
        Token GTHGen=null;
        Token NOT_EQGen=null;
        Token LEQGen=null;
        Token GEQGen=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16279:1: (EQGen= EQ | LTHGen= LTH | GTHGen= GTH | NOT_EQGen= NOT_EQ | LEQGen= LEQ | GEQGen= GEQ )
            int alt343=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt343=1;
                }
                break;
            case LTH:
                {
                alt343=2;
                }
                break;
            case GTH:
                {
                alt343=3;
                }
                break;
            case NOT_EQ:
                {
                alt343=4;
                }
                break;
            case LEQ:
                {
                alt343=5;
                }
                break;
            case GEQ:
                {
                alt343=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("16278:1: relational_op returns [Node returnNode] : (EQGen= EQ | LTHGen= LTH | GTHGen= GTH | NOT_EQGen= NOT_EQ | LEQGen= LEQ | GEQGen= GEQ );", 343, 0, input);

                throw nvae;
            }

            switch (alt343) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16279:3: EQGen= EQ
                    {
                    EQGen=(Token)input.LT(1);
                    match(input,EQ,FOLLOW_EQ_in_relational_op12223); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(EQGen != null) {
                      			Leaf EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			EQGenLeaf.setKind("EQ");
                      			EQGenLeaf.setValue(EQGen.getText());
                      			EQGenLeaf.setPos(EQGen.getCharPositionInLine());
                      			EQGenLeaf.setLine(EQGen.getLine());
                      			relational_opReturnNode.getChildren().add(EQGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16295:6: LTHGen= LTH
                    {
                    LTHGen=(Token)input.LT(1);
                    match(input,LTH,FOLLOW_LTH_in_relational_op12233); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(LTHGen != null) {
                      			Leaf LTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LTHGenLeaf.setKind("LTH");
                      			LTHGenLeaf.setValue(LTHGen.getText());
                      			LTHGenLeaf.setPos(LTHGen.getCharPositionInLine());
                      			LTHGenLeaf.setLine(LTHGen.getLine());
                      			relational_opReturnNode.getChildren().add(LTHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16311:6: GTHGen= GTH
                    {
                    GTHGen=(Token)input.LT(1);
                    match(input,GTH,FOLLOW_GTH_in_relational_op12243); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(GTHGen != null) {
                      			Leaf GTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GTHGenLeaf.setKind("GTH");
                      			GTHGenLeaf.setValue(GTHGen.getText());
                      			GTHGenLeaf.setPos(GTHGen.getCharPositionInLine());
                      			GTHGenLeaf.setLine(GTHGen.getLine());
                      			relational_opReturnNode.getChildren().add(GTHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16327:6: NOT_EQGen= NOT_EQ
                    {
                    NOT_EQGen=(Token)input.LT(1);
                    match(input,NOT_EQ,FOLLOW_NOT_EQ_in_relational_op12253); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(NOT_EQGen != null) {
                      			Leaf NOT_EQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			NOT_EQGenLeaf.setKind("NOT_EQ");
                      			NOT_EQGenLeaf.setValue(NOT_EQGen.getText());
                      			NOT_EQGenLeaf.setPos(NOT_EQGen.getCharPositionInLine());
                      			NOT_EQGenLeaf.setLine(NOT_EQGen.getLine());
                      			relational_opReturnNode.getChildren().add(NOT_EQGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16343:6: LEQGen= LEQ
                    {
                    LEQGen=(Token)input.LT(1);
                    match(input,LEQ,FOLLOW_LEQ_in_relational_op12263); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(LEQGen != null) {
                      			Leaf LEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			LEQGenLeaf.setKind("LEQ");
                      			LEQGenLeaf.setValue(LEQGen.getText());
                      			LEQGenLeaf.setPos(LEQGen.getCharPositionInLine());
                      			LEQGenLeaf.setLine(LEQGen.getLine());
                      			relational_opReturnNode.getChildren().add(LEQGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16359:6: GEQGen= GEQ
                    {
                    GEQGen=(Token)input.LT(1);
                    match(input,GEQ,FOLLOW_GEQ_in_relational_op12273); if (failed) return retval;
                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node relational_opReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relational_opReturnNode.setKind("relational_op");
                      	    // Create a CST Leaf
                      		if(GEQGen != null) {
                      			Leaf GEQGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			GEQGenLeaf.setKind("GEQ");
                      			GEQGenLeaf.setValue(GEQGen.getText());
                      			GEQGenLeaf.setPos(GEQGen.getCharPositionInLine());
                      			GEQGenLeaf.setLine(GEQGen.getLine());
                      			relational_opReturnNode.getChildren().add(GEQGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relational_opReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end relational_op

    public static class expr_add_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_add
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16378:1: expr_add returns [Node returnNode] : expr_mulGen+= expr_mul ( (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR ) expr_mulGen_1+= expr_mul )* ;
    public final expr_add_return expr_add() throws RecognitionException {
        expr_add_return retval = new expr_add_return();
        retval.start = input.LT(1);

        Token PLUSGen=null;
        Token MINUSGen=null;
        Token DOUBLEVERTBARGen=null;
        List list_expr_mulGen=null;
        List list_expr_mulGen_1=null;
        RuleReturnScope expr_mulGen = null;
        RuleReturnScope expr_mulGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:1: (expr_mulGen+= expr_mul ( (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR ) expr_mulGen_1+= expr_mul )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:3: expr_mulGen+= expr_mul ( (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR ) expr_mulGen_1+= expr_mul )*
            {
            pushFollow(FOLLOW_expr_mul_in_expr_add12295);
            expr_mulGen=expr_mul();
            _fsp--;
            if (failed) return retval;
            if (list_expr_mulGen==null) list_expr_mulGen=new ArrayList();
            list_expr_mulGen.add(expr_mulGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:25: ( (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR ) expr_mulGen_1+= expr_mul )*
            loop345:
            do {
                int alt345=2;
                switch ( input.LA(1) ) {
                case PLUS:
                    {
                    int LA345_2 = input.LA(2);

                    if ( (synpred516()) ) {
                        alt345=1;
                    }


                    }
                    break;
                case MINUS:
                    {
                    int LA345_3 = input.LA(2);

                    if ( (synpred516()) ) {
                        alt345=1;
                    }


                    }
                    break;
                case DOUBLEVERTBAR:
                    {
                    int LA345_4 = input.LA(2);

                    if ( (synpred516()) ) {
                        alt345=1;
                    }


                    }
                    break;

                }

                switch (alt345) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:27: (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR ) expr_mulGen_1+= expr_mul
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:27: (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR )
            	    int alt344=3;
            	    switch ( input.LA(1) ) {
            	    case PLUS:
            	        {
            	        alt344=1;
            	        }
            	        break;
            	    case MINUS:
            	        {
            	        alt344=2;
            	        }
            	        break;
            	    case DOUBLEVERTBAR:
            	        {
            	        alt344=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("16379:27: (PLUSGen= PLUS | MINUSGen= MINUS | DOUBLEVERTBARGen= DOUBLEVERTBAR )", 344, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt344) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:29: PLUSGen= PLUS
            	            {
            	            PLUSGen=(Token)input.LT(1);
            	            match(input,PLUS,FOLLOW_PLUS_in_expr_add12303); if (failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:44: MINUSGen= MINUS
            	            {
            	            MINUSGen=(Token)input.LT(1);
            	            match(input,MINUS,FOLLOW_MINUS_in_expr_add12309); if (failed) return retval;

            	            }
            	            break;
            	        case 3 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:61: DOUBLEVERTBARGen= DOUBLEVERTBAR
            	            {
            	            DOUBLEVERTBARGen=(Token)input.LT(1);
            	            match(input,DOUBLEVERTBAR,FOLLOW_DOUBLEVERTBAR_in_expr_add12315); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expr_mul_in_expr_add12321);
            	    expr_mulGen_1=expr_mul();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_mulGen_1==null) list_expr_mulGen_1=new ArrayList();
            	    list_expr_mulGen_1.add(expr_mulGen_1);


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_addReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_addReturnNode.setKind("expr_add");
              	    // Create a CST Node
              		if(list_expr_mulGen != null) {
              	        for(Iterator it = list_expr_mulGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_mul_return r = (PLSQL3Parser.expr_mul_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_mul");
              	            	expr_addReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal expr_mulGen_1 aggregation
              		if(list_expr_mulGen_1 != null) {
              	    for(int pos = 0; pos < list_expr_mulGen_1.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(PLUSGen != null) {
              			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			PLUSGenLeaf.setKind("PLUS");
              			PLUSGenLeaf.setValue(PLUSGen.getText());
              			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
              			PLUSGenLeaf.setLine(PLUSGen.getLine());
              			expr_addReturnNode.getChildren().add(PLUSGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			MINUSGenLeaf.setKind("MINUS");
              			MINUSGenLeaf.setValue(MINUSGen.getText());
              			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
              			MINUSGenLeaf.setLine(MINUSGen.getLine());
              			expr_addReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DOUBLEVERTBARGen != null) {
              			Leaf DOUBLEVERTBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DOUBLEVERTBARGenLeaf.setKind("DOUBLEVERTBAR");
              			DOUBLEVERTBARGenLeaf.setValue(DOUBLEVERTBARGen.getText());
              			DOUBLEVERTBARGenLeaf.setPos(DOUBLEVERTBARGen.getCharPositionInLine());
              			DOUBLEVERTBARGenLeaf.setLine(DOUBLEVERTBARGen.getLine());
              			expr_addReturnNode.getChildren().add(DOUBLEVERTBARGenLeaf);
              		}
              		// No Terminal extractor
              	    if(list_expr_mulGen_1 != null) {		
              	    	PLSQL3Parser.expr_mul_return r = (PLSQL3Parser.expr_mul_return) list_expr_mulGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_mul");
              	    		expr_addReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_addReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_add

    public static class expr_mul_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_mul
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16441:1: expr_mul returns [Node returnNode] : expr_signGen+= expr_sign ( (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE ) expr_signGen_1+= expr_sign )* ;
    public final expr_mul_return expr_mul() throws RecognitionException {
        expr_mul_return retval = new expr_mul_return();
        retval.start = input.LT(1);

        Token ASTERISKGen=null;
        Token DIVIDEGen=null;
        List list_expr_signGen=null;
        List list_expr_signGen_1=null;
        RuleReturnScope expr_signGen = null;
        RuleReturnScope expr_signGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:1: (expr_signGen+= expr_sign ( (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE ) expr_signGen_1+= expr_sign )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:3: expr_signGen+= expr_sign ( (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE ) expr_signGen_1+= expr_sign )*
            {
            pushFollow(FOLLOW_expr_sign_in_expr_mul12346);
            expr_signGen=expr_sign();
            _fsp--;
            if (failed) return retval;
            if (list_expr_signGen==null) list_expr_signGen=new ArrayList();
            list_expr_signGen.add(expr_signGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:27: ( (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE ) expr_signGen_1+= expr_sign )*
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==ASTERISK) ) {
                    int LA347_2 = input.LA(2);

                    if ( (synpred518()) ) {
                        alt347=1;
                    }


                }
                else if ( (LA347_0==DIVIDE) ) {
                    int LA347_3 = input.LA(2);

                    if ( (synpred518()) ) {
                        alt347=1;
                    }


                }


                switch (alt347) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:29: (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE ) expr_signGen_1+= expr_sign
            	    {
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:29: (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE )
            	    int alt346=2;
            	    int LA346_0 = input.LA(1);

            	    if ( (LA346_0==ASTERISK) ) {
            	        alt346=1;
            	    }
            	    else if ( (LA346_0==DIVIDE) ) {
            	        alt346=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("16442:29: (ASTERISKGen= ASTERISK | DIVIDEGen= DIVIDE )", 346, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt346) {
            	        case 1 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:31: ASTERISKGen= ASTERISK
            	            {
            	            ASTERISKGen=(Token)input.LT(1);
            	            match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_mul12354); if (failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:54: DIVIDEGen= DIVIDE
            	            {
            	            DIVIDEGen=(Token)input.LT(1);
            	            match(input,DIVIDE,FOLLOW_DIVIDE_in_expr_mul12360); if (failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expr_sign_in_expr_mul12366);
            	    expr_signGen_1=expr_sign();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_signGen_1==null) list_expr_signGen_1=new ArrayList();
            	    list_expr_signGen_1.add(expr_signGen_1);


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_mulReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_mulReturnNode.setKind("expr_mul");
              	    // Create a CST Node
              		if(list_expr_signGen != null) {
              	        for(Iterator it = list_expr_signGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_sign_return r = (PLSQL3Parser.expr_sign_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_sign");
              	            	expr_mulReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal expr_signGen_1 aggregation
              		if(list_expr_signGen_1 != null) {
              	    for(int pos = 0; pos < list_expr_signGen_1.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(ASTERISKGen != null) {
              			Leaf ASTERISKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ASTERISKGenLeaf.setKind("ASTERISK");
              			ASTERISKGenLeaf.setValue(ASTERISKGen.getText());
              			ASTERISKGenLeaf.setPos(ASTERISKGen.getCharPositionInLine());
              			ASTERISKGenLeaf.setLine(ASTERISKGen.getLine());
              			expr_mulReturnNode.getChildren().add(ASTERISKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DIVIDEGen != null) {
              			Leaf DIVIDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			DIVIDEGenLeaf.setKind("DIVIDE");
              			DIVIDEGenLeaf.setValue(DIVIDEGen.getText());
              			DIVIDEGenLeaf.setPos(DIVIDEGen.getCharPositionInLine());
              			DIVIDEGenLeaf.setLine(DIVIDEGen.getLine());
              			expr_mulReturnNode.getChildren().add(DIVIDEGenLeaf);
              		}
              		// No Terminal extractor
              	    if(list_expr_signGen_1 != null) {		
              	    	PLSQL3Parser.expr_sign_return r = (PLSQL3Parser.expr_sign_return) list_expr_signGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_sign");
              	    		expr_mulReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_mulReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_mul

    public static class expr_sign_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_sign
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16495:1: expr_sign returns [Node returnNode] : (PLUSGen= PLUS | MINUSGen= MINUS )? expr_powGen+= expr_pow ;
    public final expr_sign_return expr_sign() throws RecognitionException {
        expr_sign_return retval = new expr_sign_return();
        retval.start = input.LT(1);

        Token PLUSGen=null;
        Token MINUSGen=null;
        List list_expr_powGen=null;
        RuleReturnScope expr_powGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16496:1: ( (PLUSGen= PLUS | MINUSGen= MINUS )? expr_powGen+= expr_pow )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16496:3: (PLUSGen= PLUS | MINUSGen= MINUS )? expr_powGen+= expr_pow
            {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16496:3: (PLUSGen= PLUS | MINUSGen= MINUS )?
            int alt348=3;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==PLUS) ) {
                alt348=1;
            }
            else if ( (LA348_0==MINUS) ) {
                alt348=2;
            }
            switch (alt348) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16496:5: PLUSGen= PLUS
                    {
                    PLUSGen=(Token)input.LT(1);
                    match(input,PLUS,FOLLOW_PLUS_in_expr_sign12393); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16496:20: MINUSGen= MINUS
                    {
                    MINUSGen=(Token)input.LT(1);
                    match(input,MINUS,FOLLOW_MINUS_in_expr_sign12399); if (failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_expr_pow_in_expr_sign12406);
            expr_powGen=expr_pow();
            _fsp--;
            if (failed) return retval;
            if (list_expr_powGen==null) list_expr_powGen=new ArrayList();
            list_expr_powGen.add(expr_powGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_signReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_signReturnNode.setKind("expr_sign");
              	    // Create a CST Leaf
              		if(PLUSGen != null) {
              			Leaf PLUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			PLUSGenLeaf.setKind("PLUS");
              			PLUSGenLeaf.setValue(PLUSGen.getText());
              			PLUSGenLeaf.setPos(PLUSGen.getCharPositionInLine());
              			PLUSGenLeaf.setLine(PLUSGen.getLine());
              			expr_signReturnNode.getChildren().add(PLUSGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			MINUSGenLeaf.setKind("MINUS");
              			MINUSGenLeaf.setValue(MINUSGen.getText());
              			MINUSGenLeaf.setPos(MINUSGen.getCharPositionInLine());
              			MINUSGenLeaf.setLine(MINUSGen.getLine());
              			expr_signReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_expr_powGen != null) {
              	        for(Iterator it = list_expr_powGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_pow_return r = (PLSQL3Parser.expr_pow_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_pow");
              	            	expr_signReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_signReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_sign

    public static class expr_paren_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_paren
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16534:1: expr_paren returns [Node returnNode] : LPARENGen= LPAREN nested_expressionGen+= nested_expression RPARENGen= RPAREN ;
    public final expr_paren_return expr_paren() throws RecognitionException {
        expr_paren_return retval = new expr_paren_return();
        retval.start = input.LT(1);

        Token LPARENGen=null;
        Token RPARENGen=null;
        List list_nested_expressionGen=null;
        RuleReturnScope nested_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16535:1: (LPARENGen= LPAREN nested_expressionGen+= nested_expression RPARENGen= RPAREN )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16535:3: LPARENGen= LPAREN nested_expressionGen+= nested_expression RPARENGen= RPAREN
            {
            LPARENGen=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_expr_paren12427); if (failed) return retval;
            pushFollow(FOLLOW_nested_expression_in_expr_paren12431);
            nested_expressionGen=nested_expression();
            _fsp--;
            if (failed) return retval;
            if (list_nested_expressionGen==null) list_nested_expressionGen=new ArrayList();
            list_nested_expressionGen.add(nested_expressionGen);

            RPARENGen=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_expr_paren12435); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_parenReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_parenReturnNode.setKind("expr_paren");
              	    // Create a CST Leaf
              		if(LPARENGen != null) {
              			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			LPARENGenLeaf.setKind("LPAREN");
              			LPARENGenLeaf.setValue(LPARENGen.getText());
              			LPARENGenLeaf.setPos(LPARENGen.getCharPositionInLine());
              			LPARENGenLeaf.setLine(LPARENGen.getLine());
              			expr_parenReturnNode.getChildren().add(LPARENGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_nested_expressionGen != null) {
              	        for(Iterator it = list_nested_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.nested_expression_return r = (PLSQL3Parser.nested_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nested_expression");
              	            	expr_parenReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RPARENGen != null) {
              			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			RPARENGenLeaf.setKind("RPAREN");
              			RPARENGenLeaf.setValue(RPARENGen.getText());
              			RPARENGenLeaf.setPos(RPARENGen.getCharPositionInLine());
              			RPARENGenLeaf.setLine(RPARENGen.getLine());
              			expr_parenReturnNode.getChildren().add(RPARENGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_parenReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_paren

    public static class expr_pow_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_pow
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16573:1: expr_pow returns [Node returnNode] : expr_exprGen+= expr_expr (EXPONENTGen_List+= EXPONENT expr_exprGen_1+= expr_expr )* ;
    public final expr_pow_return expr_pow() throws RecognitionException {
        expr_pow_return retval = new expr_pow_return();
        retval.start = input.LT(1);

        Token EXPONENTGen_List=null;
        List list_EXPONENTGen_List=null;
        List list_expr_exprGen=null;
        List list_expr_exprGen_1=null;
        RuleReturnScope expr_exprGen = null;
        RuleReturnScope expr_exprGen_1 = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:1: (expr_exprGen+= expr_expr (EXPONENTGen_List+= EXPONENT expr_exprGen_1+= expr_expr )* )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:3: expr_exprGen+= expr_expr (EXPONENTGen_List+= EXPONENT expr_exprGen_1+= expr_expr )*
            {
            pushFollow(FOLLOW_expr_expr_in_expr_pow12457);
            expr_exprGen=expr_expr();
            _fsp--;
            if (failed) return retval;
            if (list_expr_exprGen==null) list_expr_exprGen=new ArrayList();
            list_expr_exprGen.add(expr_exprGen);

            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:27: (EXPONENTGen_List+= EXPONENT expr_exprGen_1+= expr_expr )*
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==EXPONENT) ) {
                    int LA349_2 = input.LA(2);

                    if ( (synpred521()) ) {
                        alt349=1;
                    }


                }


                switch (alt349) {
            	case 1 :
            	    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:29: EXPONENTGen_List+= EXPONENT expr_exprGen_1+= expr_expr
            	    {
            	    EXPONENTGen_List=(Token)input.LT(1);
            	    match(input,EXPONENT,FOLLOW_EXPONENT_in_expr_pow12463); if (failed) return retval;
            	    if (list_EXPONENTGen_List==null) list_EXPONENTGen_List=new ArrayList();
            	    list_EXPONENTGen_List.add(EXPONENTGen_List);

            	    pushFollow(FOLLOW_expr_expr_in_expr_pow12467);
            	    expr_exprGen_1=expr_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if (list_expr_exprGen_1==null) list_expr_exprGen_1=new ArrayList();
            	    list_expr_exprGen_1.add(expr_exprGen_1);


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node expr_powReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expr_powReturnNode.setKind("expr_pow");
              	    // Create a CST Node
              		if(list_expr_exprGen != null) {
              	        for(Iterator it = list_expr_exprGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.expr_expr_return r = (PLSQL3Parser.expr_expr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expr_expr");
              	            	expr_powReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	
              		// Create a special CST Node for terminal EXPONENTGen_List aggregation
              		if(list_EXPONENTGen_List != null) {
              	    for(int pos = 0; pos < list_EXPONENTGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_EXPONENTGen_List != null) {
              		    Token t = (Token) list_EXPONENTGen_List.get(pos); 
              		    Leaf EXPONENTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			EXPONENTGen_ListLeaf.setKind("EXPONENT");
              			EXPONENTGen_ListLeaf.setValue(t.getText());
              			EXPONENTGen_ListLeaf.setPos(t.getCharPositionInLine());
              			EXPONENTGen_ListLeaf.setLine(t.getLine());
              			expr_powReturnNode.getChildren().add(EXPONENTGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_expr_exprGen_1 != null) {		
              	    	PLSQL3Parser.expr_expr_return r = (PLSQL3Parser.expr_expr_return) list_expr_exprGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expr_expr");
              	    		expr_powReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}
              	
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expr_powReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_pow

    public static class expr_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start expr_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16619:1: expr_expr returns [Node returnNode] : (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression );
    public final expr_expr_return expr_expr() throws RecognitionException {
        expr_expr_return retval = new expr_expr_return();
        retval.start = input.LT(1);

        List list_expr_parenGen=null;
        List list_function_expressionGen=null;
        List list_case_expressionGen=null;
        List list_cursor_expressionGen=null;
        List list_simple_expressionGen=null;
        List list_select_expressionGen=null;
        RuleReturnScope expr_parenGen = null;
        RuleReturnScope function_expressionGen = null;
        RuleReturnScope case_expressionGen = null;
        RuleReturnScope cursor_expressionGen = null;
        RuleReturnScope simple_expressionGen = null;
        RuleReturnScope select_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16620:1: (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression )
            int alt350=6;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt350=1;
                }
                break;
            case ID:
                {
                int LA350_2 = input.LA(2);

                if ( (synpred523()) ) {
                    alt350=2;
                }
                else if ( (synpred526()) ) {
                    alt350=5;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("16619:1: expr_expr returns [Node returnNode] : (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression );", 350, 2, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA350_3 = input.LA(2);

                if ( (synpred523()) ) {
                    alt350=2;
                }
                else if ( (synpred526()) ) {
                    alt350=5;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("16619:1: expr_expr returns [Node returnNode] : (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression );", 350, 3, input);

                    throw nvae;
                }
                }
                break;
            case 110:
                {
                int LA350_4 = input.LA(2);

                if ( (synpred523()) ) {
                    alt350=2;
                }
                else if ( (synpred526()) ) {
                    alt350=5;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("16619:1: expr_expr returns [Node returnNode] : (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression );", 350, 4, input);

                    throw nvae;
                }
                }
                break;
            case 121:
            case 158:
                {
                alt350=2;
                }
                break;
            case 58:
                {
                alt350=3;
                }
                break;
            case 233:
                {
                alt350=4;
                }
                break;
            case NUMBER:
            case QUOTED_STRING:
            case COLON:
            case 56:
            case 57:
            case 69:
            case 153:
                {
                alt350=5;
                }
                break;
            case 148:
                {
                alt350=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("16619:1: expr_expr returns [Node returnNode] : (expr_parenGen+= expr_paren | function_expressionGen+= function_expression | case_expressionGen+= case_expression | cursor_expressionGen+= cursor_expression | simple_expressionGen+= simple_expression | select_expressionGen+= select_expression );", 350, 0, input);

                throw nvae;
            }

            switch (alt350) {
                case 1 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16620:3: expr_parenGen+= expr_paren
                    {
                    pushFollow(FOLLOW_expr_paren_in_expr_expr12492);
                    expr_parenGen=expr_paren();
                    _fsp--;
                    if (failed) return retval;
                    if (list_expr_parenGen==null) list_expr_parenGen=new ArrayList();
                    list_expr_parenGen.add(expr_parenGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_expr_parenGen != null) {
                      	        for(Iterator it = list_expr_parenGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.expr_paren_return r = (PLSQL3Parser.expr_paren_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expr_paren");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16638:4: function_expressionGen+= function_expression
                    {
                    pushFollow(FOLLOW_function_expression_in_expr_expr12503);
                    function_expressionGen=function_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_function_expressionGen==null) list_function_expressionGen=new ArrayList();
                    list_function_expressionGen.add(function_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_function_expressionGen != null) {
                      	        for(Iterator it = list_function_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.function_expression_return r = (PLSQL3Parser.function_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_expression");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16657:4: case_expressionGen+= case_expression
                    {
                    pushFollow(FOLLOW_case_expression_in_expr_expr12515);
                    case_expressionGen=case_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_case_expressionGen==null) list_case_expressionGen=new ArrayList();
                    list_case_expressionGen.add(case_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_case_expressionGen != null) {
                      	        for(Iterator it = list_case_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.case_expression_return r = (PLSQL3Parser.case_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("case_expression");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16675:4: cursor_expressionGen+= cursor_expression
                    {
                    pushFollow(FOLLOW_cursor_expression_in_expr_expr12526);
                    cursor_expressionGen=cursor_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_cursor_expressionGen==null) list_cursor_expressionGen=new ArrayList();
                    list_cursor_expressionGen.add(cursor_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_cursor_expressionGen != null) {
                      	        for(Iterator it = list_cursor_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.cursor_expression_return r = (PLSQL3Parser.cursor_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("cursor_expression");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16693:4: simple_expressionGen+= simple_expression
                    {
                    pushFollow(FOLLOW_simple_expression_in_expr_expr12537);
                    simple_expressionGen=simple_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_simple_expressionGen==null) list_simple_expressionGen=new ArrayList();
                    list_simple_expressionGen.add(simple_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_simple_expressionGen != null) {
                      	        for(Iterator it = list_simple_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.simple_expression_return r = (PLSQL3Parser.simple_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("simple_expression");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16711:4: select_expressionGen+= select_expression
                    {
                    pushFollow(FOLLOW_select_expression_in_expr_expr12548);
                    select_expressionGen=select_expression();
                    _fsp--;
                    if (failed) return retval;
                    if (list_select_expressionGen==null) list_select_expressionGen=new ArrayList();
                    list_select_expressionGen.add(select_expressionGen);

                    if ( backtracking==0 ) {
                      
                      		// Create return CST Node
                      		Node expr_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		expr_exprReturnNode.setKind("expr_expr");
                      	    // Create a CST Node
                      		if(list_select_expressionGen != null) {
                      	        for(Iterator it = list_select_expressionGen.iterator(); it.hasNext(); )  { 
                      	            PLSQL3Parser.select_expression_return r = (PLSQL3Parser.select_expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("select_expression");
                      	            	expr_exprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = expr_exprReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_expr

    public static class integer_expr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start integer_expr
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16740:1: integer_expr returns [Node returnNode] : sql_expressionGen+= sql_expression ;
    public final integer_expr_return integer_expr() throws RecognitionException {
        integer_expr_return retval = new integer_expr_return();
        retval.start = input.LT(1);

        List list_sql_expressionGen=null;
        RuleReturnScope sql_expressionGen = null;
        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16741:1: (sql_expressionGen+= sql_expression )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16741:3: sql_expressionGen+= sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_integer_expr12578);
            sql_expressionGen=sql_expression();
            _fsp--;
            if (failed) return retval;
            if (list_sql_expressionGen==null) list_sql_expressionGen=new ArrayList();
            list_sql_expressionGen.add(sql_expressionGen);

            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node integer_exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		integer_exprReturnNode.setKind("integer_expr");
              	    // Create a CST Node
              		if(list_sql_expressionGen != null) {
              	        for(Iterator it = list_sql_expressionGen.iterator(); it.hasNext(); )  { 
              	            PLSQL3Parser.sql_expression_return r = (PLSQL3Parser.sql_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("sql_expression");
              	            	integer_exprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = integer_exprReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end integer_expr

    public static class keyA_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyA
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16764:1: keyA returns [Node returnNode] : TK_0= 'A' ;
    public final keyA_return keyA() throws RecognitionException {
        keyA_return retval = new keyA_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16765:1: (TK_0= 'A' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16765:3: TK_0= 'A'
            {
            TK_0=(Token)input.LT(1);
            match(input,156,FOLLOW_156_in_keyA12603); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyAReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyAReturnNode.setKind("keyA");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyAReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyAReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyA

    public static class keyAUTOMATIC_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyAUTOMATIC
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16782:1: keyAUTOMATIC returns [Node returnNode] : TK_0= 'AUTOMATIC' ;
    public final keyAUTOMATIC_return keyAUTOMATIC() throws RecognitionException {
        keyAUTOMATIC_return retval = new keyAUTOMATIC_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16783:1: (TK_0= 'AUTOMATIC' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16783:3: TK_0= 'AUTOMATIC'
            {
            TK_0=(Token)input.LT(1);
            match(input,157,FOLLOW_157_in_keyAUTOMATIC12621); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyAUTOMATICReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyAUTOMATICReturnNode.setKind("keyAUTOMATIC");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyAUTOMATICReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyAUTOMATICReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyAUTOMATIC

    public static class keyCOUNT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCOUNT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16800:1: keyCOUNT returns [Node returnNode] : TK_0= 'COUNT' ;
    public final keyCOUNT_return keyCOUNT() throws RecognitionException {
        keyCOUNT_return retval = new keyCOUNT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16801:1: (TK_0= 'COUNT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16801:3: TK_0= 'COUNT'
            {
            TK_0=(Token)input.LT(1);
            match(input,158,FOLLOW_158_in_keyCOUNT12639); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCOUNTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCOUNTReturnNode.setKind("keyCOUNT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCOUNTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCOUNTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCOUNT

    public static class keyCROSS_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCROSS
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16818:1: keyCROSS returns [Node returnNode] : TK_0= 'CROSS' ;
    public final keyCROSS_return keyCROSS() throws RecognitionException {
        keyCROSS_return retval = new keyCROSS_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16819:1: (TK_0= 'CROSS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16819:3: TK_0= 'CROSS'
            {
            TK_0=(Token)input.LT(1);
            match(input,159,FOLLOW_159_in_keyCROSS12657); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCROSSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCROSSReturnNode.setKind("keyCROSS");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCROSSReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCROSSReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCROSS

    public static class keyCUBE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCUBE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16836:1: keyCUBE returns [Node returnNode] : TK_0= 'CUBE' ;
    public final keyCUBE_return keyCUBE() throws RecognitionException {
        keyCUBE_return retval = new keyCUBE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16837:1: (TK_0= 'CUBE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16837:3: TK_0= 'CUBE'
            {
            TK_0=(Token)input.LT(1);
            match(input,160,FOLLOW_160_in_keyCUBE12675); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCUBEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCUBEReturnNode.setKind("keyCUBE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCUBEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCUBEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCUBE

    public static class keyCURRENT_OF_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCURRENT_OF
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16854:1: keyCURRENT_OF returns [Node returnNode] : TK_0= 'CURRENT_OF' ;
    public final keyCURRENT_OF_return keyCURRENT_OF() throws RecognitionException {
        keyCURRENT_OF_return retval = new keyCURRENT_OF_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16855:1: (TK_0= 'CURRENT_OF' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16855:3: TK_0= 'CURRENT_OF'
            {
            TK_0=(Token)input.LT(1);
            match(input,161,FOLLOW_161_in_keyCURRENT_OF12693); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCURRENT_OFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCURRENT_OFReturnNode.setKind("keyCURRENT_OF");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCURRENT_OFReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCURRENT_OFReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCURRENT_OF

    public static class keyDAY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyDAY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16872:1: keyDAY returns [Node returnNode] : TK_0= 'DAY' ;
    public final keyDAY_return keyDAY() throws RecognitionException {
        keyDAY_return retval = new keyDAY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16873:1: (TK_0= 'DAY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16873:3: TK_0= 'DAY'
            {
            TK_0=(Token)input.LT(1);
            match(input,162,FOLLOW_162_in_keyDAY12711); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyDAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyDAYReturnNode.setKind("keyDAY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyDAYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyDAYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyDAY

    public static class keyDBTIMEZONE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyDBTIMEZONE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16890:1: keyDBTIMEZONE returns [Node returnNode] : TK_0= 'DBTIMEZONE' ;
    public final keyDBTIMEZONE_return keyDBTIMEZONE() throws RecognitionException {
        keyDBTIMEZONE_return retval = new keyDBTIMEZONE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16891:1: (TK_0= 'DBTIMEZONE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16891:3: TK_0= 'DBTIMEZONE'
            {
            TK_0=(Token)input.LT(1);
            match(input,163,FOLLOW_163_in_keyDBTIMEZONE12729); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyDBTIMEZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyDBTIMEZONEReturnNode.setKind("keyDBTIMEZONE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyDBTIMEZONEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyDBTIMEZONEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyDBTIMEZONE

    public static class keyDECLARE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyDECLARE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16908:1: keyDECLARE returns [Node returnNode] : TK_0= 'DECLARE' ;
    public final keyDECLARE_return keyDECLARE() throws RecognitionException {
        keyDECLARE_return retval = new keyDECLARE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16909:1: (TK_0= 'DECLARE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16909:3: TK_0= 'DECLARE'
            {
            TK_0=(Token)input.LT(1);
            match(input,164,FOLLOW_164_in_keyDECLARE12747); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyDECLAREReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyDECLAREReturnNode.setKind("keyDECLARE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyDECLAREReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyDECLAREReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyDECLARE

    public static class keyDECREMENT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyDECREMENT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16926:1: keyDECREMENT returns [Node returnNode] : TK_0= 'DECREMENT' ;
    public final keyDECREMENT_return keyDECREMENT() throws RecognitionException {
        keyDECREMENT_return retval = new keyDECREMENT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16927:1: (TK_0= 'DECREMENT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16927:3: TK_0= 'DECREMENT'
            {
            TK_0=(Token)input.LT(1);
            match(input,165,FOLLOW_165_in_keyDECREMENT12765); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyDECREMENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyDECREMENTReturnNode.setKind("keyDECREMENT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyDECREMENTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyDECREMENTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyDECREMENT

    public static class keyDIMENSION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyDIMENSION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16944:1: keyDIMENSION returns [Node returnNode] : TK_0= 'DIMENSION' ;
    public final keyDIMENSION_return keyDIMENSION() throws RecognitionException {
        keyDIMENSION_return retval = new keyDIMENSION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16945:1: (TK_0= 'DIMENSION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16945:3: TK_0= 'DIMENSION'
            {
            TK_0=(Token)input.LT(1);
            match(input,166,FOLLOW_166_in_keyDIMENSION12783); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyDIMENSIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyDIMENSIONReturnNode.setKind("keyDIMENSION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyDIMENSIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyDIMENSIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyDIMENSION

    public static class keyEMPTY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyEMPTY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16962:1: keyEMPTY returns [Node returnNode] : TK_0= 'EMPTY' ;
    public final keyEMPTY_return keyEMPTY() throws RecognitionException {
        keyEMPTY_return retval = new keyEMPTY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16963:1: (TK_0= 'EMPTY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16963:3: TK_0= 'EMPTY'
            {
            TK_0=(Token)input.LT(1);
            match(input,167,FOLLOW_167_in_keyEMPTY12801); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyEMPTYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyEMPTYReturnNode.setKind("keyEMPTY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyEMPTYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyEMPTYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyEMPTY

    public static class keyEQUALS_PATH_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyEQUALS_PATH
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16980:1: keyEQUALS_PATH returns [Node returnNode] : TK_0= 'EQUALS_PATH' ;
    public final keyEQUALS_PATH_return keyEQUALS_PATH() throws RecognitionException {
        keyEQUALS_PATH_return retval = new keyEQUALS_PATH_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16981:1: (TK_0= 'EQUALS_PATH' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16981:3: TK_0= 'EQUALS_PATH'
            {
            TK_0=(Token)input.LT(1);
            match(input,168,FOLLOW_168_in_keyEQUALS_PATH12819); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyEQUALS_PATHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyEQUALS_PATHReturnNode.setKind("keyEQUALS_PATH");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyEQUALS_PATHReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyEQUALS_PATHReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyEQUALS_PATH

    public static class keyESCAPE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyESCAPE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16998:1: keyESCAPE returns [Node returnNode] : TK_0= 'ESCAPE' ;
    public final keyESCAPE_return keyESCAPE() throws RecognitionException {
        keyESCAPE_return retval = new keyESCAPE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16999:1: (TK_0= 'ESCAPE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16999:3: TK_0= 'ESCAPE'
            {
            TK_0=(Token)input.LT(1);
            match(input,169,FOLLOW_169_in_keyESCAPE12837); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyESCAPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyESCAPEReturnNode.setKind("keyESCAPE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyESCAPEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyESCAPEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyESCAPE

    public static class keyFIRST_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyFIRST
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17016:1: keyFIRST returns [Node returnNode] : TK_0= 'FIRST' ;
    public final keyFIRST_return keyFIRST() throws RecognitionException {
        keyFIRST_return retval = new keyFIRST_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17017:1: (TK_0= 'FIRST' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17017:3: TK_0= 'FIRST'
            {
            TK_0=(Token)input.LT(1);
            match(input,170,FOLLOW_170_in_keyFIRST12855); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyFIRSTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyFIRSTReturnNode.setKind("keyFIRST");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyFIRSTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyFIRSTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyFIRST

    public static class keyFULL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyFULL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17034:1: keyFULL returns [Node returnNode] : TK_0= 'FULL' ;
    public final keyFULL_return keyFULL() throws RecognitionException {
        keyFULL_return retval = new keyFULL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17035:1: (TK_0= 'FULL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17035:3: TK_0= 'FULL'
            {
            TK_0=(Token)input.LT(1);
            match(input,171,FOLLOW_171_in_keyFULL12873); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyFULLReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyFULLReturnNode.setKind("keyFULL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyFULLReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyFULLReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyFULL

    public static class keyGROUPING_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyGROUPING
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17052:1: keyGROUPING returns [Node returnNode] : TK_0= 'GROUPING' ;
    public final keyGROUPING_return keyGROUPING() throws RecognitionException {
        keyGROUPING_return retval = new keyGROUPING_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17053:1: (TK_0= 'GROUPING' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17053:3: TK_0= 'GROUPING'
            {
            TK_0=(Token)input.LT(1);
            match(input,172,FOLLOW_172_in_keyGROUPING12891); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyGROUPINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyGROUPINGReturnNode.setKind("keyGROUPING");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyGROUPINGReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyGROUPINGReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyGROUPING

    public static class keyIGNORE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyIGNORE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17070:1: keyIGNORE returns [Node returnNode] : TK_0= 'IGNORE' ;
    public final keyIGNORE_return keyIGNORE() throws RecognitionException {
        keyIGNORE_return retval = new keyIGNORE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17071:1: (TK_0= 'IGNORE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17071:3: TK_0= 'IGNORE'
            {
            TK_0=(Token)input.LT(1);
            match(input,173,FOLLOW_173_in_keyIGNORE12909); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyIGNOREReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyIGNOREReturnNode.setKind("keyIGNORE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyIGNOREReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyIGNOREReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyIGNORE

    public static class keyINCREMENT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyINCREMENT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17088:1: keyINCREMENT returns [Node returnNode] : TK_0= 'INCREMENT' ;
    public final keyINCREMENT_return keyINCREMENT() throws RecognitionException {
        keyINCREMENT_return retval = new keyINCREMENT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17089:1: (TK_0= 'INCREMENT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17089:3: TK_0= 'INCREMENT'
            {
            TK_0=(Token)input.LT(1);
            match(input,174,FOLLOW_174_in_keyINCREMENT12927); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyINCREMENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyINCREMENTReturnNode.setKind("keyINCREMENT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyINCREMENTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyINCREMENTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyINCREMENT

    public static class keyINFINITE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyINFINITE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17106:1: keyINFINITE returns [Node returnNode] : TK_0= 'INFINITE' ;
    public final keyINFINITE_return keyINFINITE() throws RecognitionException {
        keyINFINITE_return retval = new keyINFINITE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17107:1: (TK_0= 'INFINITE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17107:3: TK_0= 'INFINITE'
            {
            TK_0=(Token)input.LT(1);
            match(input,175,FOLLOW_175_in_keyINFINITE12945); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyINFINITEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyINFINITEReturnNode.setKind("keyINFINITE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyINFINITEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyINFINITEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyINFINITE

    public static class keyINNER_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyINNER
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17124:1: keyINNER returns [Node returnNode] : TK_0= 'INNER' ;
    public final keyINNER_return keyINNER() throws RecognitionException {
        keyINNER_return retval = new keyINNER_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17125:1: (TK_0= 'INNER' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17125:3: TK_0= 'INNER'
            {
            TK_0=(Token)input.LT(1);
            match(input,176,FOLLOW_176_in_keyINNER12963); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyINNERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyINNERReturnNode.setKind("keyINNER");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyINNERReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyINNERReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyINNER

    public static class keyINTERVAL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyINTERVAL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17142:1: keyINTERVAL returns [Node returnNode] : TK_0= 'INTERVAL' ;
    public final keyINTERVAL_return keyINTERVAL() throws RecognitionException {
        keyINTERVAL_return retval = new keyINTERVAL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17143:1: (TK_0= 'INTERVAL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17143:3: TK_0= 'INTERVAL'
            {
            TK_0=(Token)input.LT(1);
            match(input,177,FOLLOW_177_in_keyINTERVAL12981); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyINTERVALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyINTERVALReturnNode.setKind("keyINTERVAL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyINTERVALReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyINTERVALReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyINTERVAL

    public static class keyITERATE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyITERATE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17160:1: keyITERATE returns [Node returnNode] : TK_0= 'ITERATE' ;
    public final keyITERATE_return keyITERATE() throws RecognitionException {
        keyITERATE_return retval = new keyITERATE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17161:1: (TK_0= 'ITERATE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17161:3: TK_0= 'ITERATE'
            {
            TK_0=(Token)input.LT(1);
            match(input,178,FOLLOW_178_in_keyITERATE12999); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyITERATEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyITERATEReturnNode.setKind("keyITERATE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyITERATEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyITERATEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyITERATE

    public static class keyJOIN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyJOIN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17178:1: keyJOIN returns [Node returnNode] : TK_0= 'JOIN' ;
    public final keyJOIN_return keyJOIN() throws RecognitionException {
        keyJOIN_return retval = new keyJOIN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17179:1: (TK_0= 'JOIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17179:3: TK_0= 'JOIN'
            {
            TK_0=(Token)input.LT(1);
            match(input,179,FOLLOW_179_in_keyJOIN13017); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyJOINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyJOINReturnNode.setKind("keyJOIN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyJOINReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyJOINReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyJOIN

    public static class keyKEEP_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyKEEP
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17196:1: keyKEEP returns [Node returnNode] : TK_0= 'KEEP' ;
    public final keyKEEP_return keyKEEP() throws RecognitionException {
        keyKEEP_return retval = new keyKEEP_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17197:1: (TK_0= 'KEEP' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17197:3: TK_0= 'KEEP'
            {
            TK_0=(Token)input.LT(1);
            match(input,180,FOLLOW_180_in_keyKEEP13035); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyKEEPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyKEEPReturnNode.setKind("keyKEEP");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyKEEPReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyKEEPReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyKEEP

    public static class keyLAST_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLAST
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17214:1: keyLAST returns [Node returnNode] : TK_0= 'LAST' ;
    public final keyLAST_return keyLAST() throws RecognitionException {
        keyLAST_return retval = new keyLAST_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17215:1: (TK_0= 'LAST' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17215:3: TK_0= 'LAST'
            {
            TK_0=(Token)input.LT(1);
            match(input,181,FOLLOW_181_in_keyLAST13053); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLASTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLASTReturnNode.setKind("keyLAST");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLASTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLASTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLAST

    public static class keyLEFT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLEFT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17232:1: keyLEFT returns [Node returnNode] : TK_0= 'LEFT' ;
    public final keyLEFT_return keyLEFT() throws RecognitionException {
        keyLEFT_return retval = new keyLEFT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17233:1: (TK_0= 'LEFT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17233:3: TK_0= 'LEFT'
            {
            TK_0=(Token)input.LT(1);
            match(input,182,FOLLOW_182_in_keyLEFT13071); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLEFTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLEFTReturnNode.setKind("keyLEFT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLEFTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLEFTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLEFT

    public static class keyLIKE2_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLIKE2
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17250:1: keyLIKE2 returns [Node returnNode] : TK_0= 'LIKE2' ;
    public final keyLIKE2_return keyLIKE2() throws RecognitionException {
        keyLIKE2_return retval = new keyLIKE2_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17251:1: (TK_0= 'LIKE2' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17251:3: TK_0= 'LIKE2'
            {
            TK_0=(Token)input.LT(1);
            match(input,183,FOLLOW_183_in_keyLIKE213089); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLIKE2ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLIKE2ReturnNode.setKind("keyLIKE2");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLIKE2ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLIKE2ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLIKE2

    public static class keyLIKE4_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLIKE4
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17268:1: keyLIKE4 returns [Node returnNode] : TK_0= 'LIKE4' ;
    public final keyLIKE4_return keyLIKE4() throws RecognitionException {
        keyLIKE4_return retval = new keyLIKE4_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17269:1: (TK_0= 'LIKE4' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17269:3: TK_0= 'LIKE4'
            {
            TK_0=(Token)input.LT(1);
            match(input,184,FOLLOW_184_in_keyLIKE413107); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLIKE4ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLIKE4ReturnNode.setKind("keyLIKE4");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLIKE4ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLIKE4ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLIKE4

    public static class keyLIKEC_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLIKEC
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17286:1: keyLIKEC returns [Node returnNode] : TK_0= 'LIKEC' ;
    public final keyLIKEC_return keyLIKEC() throws RecognitionException {
        keyLIKEC_return retval = new keyLIKEC_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17287:1: (TK_0= 'LIKEC' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17287:3: TK_0= 'LIKEC'
            {
            TK_0=(Token)input.LT(1);
            match(input,185,FOLLOW_185_in_keyLIKEC13125); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLIKECReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLIKECReturnNode.setKind("keyLIKEC");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLIKECReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLIKECReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLIKEC

    public static class keyLOCAL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLOCAL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17304:1: keyLOCAL returns [Node returnNode] : TK_0= 'LOCAL' ;
    public final keyLOCAL_return keyLOCAL() throws RecognitionException {
        keyLOCAL_return retval = new keyLOCAL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17305:1: (TK_0= 'LOCAL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17305:3: TK_0= 'LOCAL'
            {
            TK_0=(Token)input.LT(1);
            match(input,186,FOLLOW_186_in_keyLOCAL13143); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLOCALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLOCALReturnNode.setKind("keyLOCAL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLOCALReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLOCALReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLOCAL

    public static class keyMAIN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyMAIN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17322:1: keyMAIN returns [Node returnNode] : TK_0= 'MAIN' ;
    public final keyMAIN_return keyMAIN() throws RecognitionException {
        keyMAIN_return retval = new keyMAIN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17323:1: (TK_0= 'MAIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17323:3: TK_0= 'MAIN'
            {
            TK_0=(Token)input.LT(1);
            match(input,187,FOLLOW_187_in_keyMAIN13161); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyMAINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyMAINReturnNode.setKind("keyMAIN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyMAINReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyMAINReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyMAIN

    public static class keyMEASURES_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyMEASURES
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17340:1: keyMEASURES returns [Node returnNode] : TK_0= 'MEASURES' ;
    public final keyMEASURES_return keyMEASURES() throws RecognitionException {
        keyMEASURES_return retval = new keyMEASURES_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17341:1: (TK_0= 'MEASURES' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17341:3: TK_0= 'MEASURES'
            {
            TK_0=(Token)input.LT(1);
            match(input,188,FOLLOW_188_in_keyMEASURES13179); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyMEASURESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyMEASURESReturnNode.setKind("keyMEASURES");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyMEASURESReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyMEASURESReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyMEASURES

    public static class keyMEMBER_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyMEMBER
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17358:1: keyMEMBER returns [Node returnNode] : TK_0= 'MEMBER' ;
    public final keyMEMBER_return keyMEMBER() throws RecognitionException {
        keyMEMBER_return retval = new keyMEMBER_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17359:1: (TK_0= 'MEMBER' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17359:3: TK_0= 'MEMBER'
            {
            TK_0=(Token)input.LT(1);
            match(input,189,FOLLOW_189_in_keyMEMBER13197); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyMEMBERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyMEMBERReturnNode.setKind("keyMEMBER");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyMEMBERReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyMEMBERReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyMEMBER

    public static class keyMODEL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyMODEL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17376:1: keyMODEL returns [Node returnNode] : TK_0= 'MODEL' ;
    public final keyMODEL_return keyMODEL() throws RecognitionException {
        keyMODEL_return retval = new keyMODEL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17377:1: (TK_0= 'MODEL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17377:3: TK_0= 'MODEL'
            {
            TK_0=(Token)input.LT(1);
            match(input,190,FOLLOW_190_in_keyMODEL13215); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyMODELReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyMODELReturnNode.setKind("keyMODEL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyMODELReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyMODELReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyMODEL

    public static class keyMONTH_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyMONTH
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17394:1: keyMONTH returns [Node returnNode] : TK_0= 'MONTH' ;
    public final keyMONTH_return keyMONTH() throws RecognitionException {
        keyMONTH_return retval = new keyMONTH_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17395:1: (TK_0= 'MONTH' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17395:3: TK_0= 'MONTH'
            {
            TK_0=(Token)input.LT(1);
            match(input,191,FOLLOW_191_in_keyMONTH13233); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyMONTHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyMONTHReturnNode.setKind("keyMONTH");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyMONTHReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyMONTHReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyMONTH

    public static class keyNAN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNAN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17412:1: keyNAN returns [Node returnNode] : TK_0= 'NAN' ;
    public final keyNAN_return keyNAN() throws RecognitionException {
        keyNAN_return retval = new keyNAN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17413:1: (TK_0= 'NAN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17413:3: TK_0= 'NAN'
            {
            TK_0=(Token)input.LT(1);
            match(input,192,FOLLOW_192_in_keyNAN13251); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNANReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNANReturnNode.setKind("keyNAN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNANReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNANReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNAN

    public static class keyNATURAL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNATURAL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17430:1: keyNATURAL returns [Node returnNode] : TK_0= 'NATURAL' ;
    public final keyNATURAL_return keyNATURAL() throws RecognitionException {
        keyNATURAL_return retval = new keyNATURAL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17431:1: (TK_0= 'NATURAL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17431:3: TK_0= 'NATURAL'
            {
            TK_0=(Token)input.LT(1);
            match(input,78,FOLLOW_78_in_keyNATURAL13269); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNATURALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNATURALReturnNode.setKind("keyNATURAL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNATURALReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNATURALReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNATURAL

    public static class keyNAV_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNAV
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17448:1: keyNAV returns [Node returnNode] : TK_0= 'NAV' ;
    public final keyNAV_return keyNAV() throws RecognitionException {
        keyNAV_return retval = new keyNAV_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17449:1: (TK_0= 'NAV' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17449:3: TK_0= 'NAV'
            {
            TK_0=(Token)input.LT(1);
            match(input,193,FOLLOW_193_in_keyNAV13287); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNAVReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNAVReturnNode.setKind("keyNAV");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNAVReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNAVReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNAV

    public static class keyNOCYCLE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNOCYCLE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17466:1: keyNOCYCLE returns [Node returnNode] : TK_0= 'NOCYCLE' ;
    public final keyNOCYCLE_return keyNOCYCLE() throws RecognitionException {
        keyNOCYCLE_return retval = new keyNOCYCLE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17467:1: (TK_0= 'NOCYCLE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17467:3: TK_0= 'NOCYCLE'
            {
            TK_0=(Token)input.LT(1);
            match(input,194,FOLLOW_194_in_keyNOCYCLE13305); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNOCYCLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNOCYCLEReturnNode.setKind("keyNOCYCLE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNOCYCLEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNOCYCLEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNOCYCLE

    public static class keyNULLS_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNULLS
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17484:1: keyNULLS returns [Node returnNode] : TK_0= 'NULLS' ;
    public final keyNULLS_return keyNULLS() throws RecognitionException {
        keyNULLS_return retval = new keyNULLS_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17485:1: (TK_0= 'NULLS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17485:3: TK_0= 'NULLS'
            {
            TK_0=(Token)input.LT(1);
            match(input,195,FOLLOW_195_in_keyNULLS13323); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNULLSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNULLSReturnNode.setKind("keyNULLS");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNULLSReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNULLSReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNULLS

    public static class keyONLY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyONLY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17502:1: keyONLY returns [Node returnNode] : TK_0= 'ONLY' ;
    public final keyONLY_return keyONLY() throws RecognitionException {
        keyONLY_return retval = new keyONLY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17503:1: (TK_0= 'ONLY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17503:3: TK_0= 'ONLY'
            {
            TK_0=(Token)input.LT(1);
            match(input,196,FOLLOW_196_in_keyONLY13341); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyONLYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyONLYReturnNode.setKind("keyONLY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyONLYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyONLYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyONLY

    public static class keyOUTER_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyOUTER
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17520:1: keyOUTER returns [Node returnNode] : TK_0= 'OUTER' ;
    public final keyOUTER_return keyOUTER() throws RecognitionException {
        keyOUTER_return retval = new keyOUTER_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17521:1: (TK_0= 'OUTER' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17521:3: TK_0= 'OUTER'
            {
            TK_0=(Token)input.LT(1);
            match(input,197,FOLLOW_197_in_keyOUTER13359); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyOUTERReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyOUTERReturnNode.setKind("keyOUTER");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyOUTERReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyOUTERReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyOUTER

    public static class keyPARTITION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyPARTITION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17538:1: keyPARTITION returns [Node returnNode] : TK_0= 'PARTITION' ;
    public final keyPARTITION_return keyPARTITION() throws RecognitionException {
        keyPARTITION_return retval = new keyPARTITION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17539:1: (TK_0= 'PARTITION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17539:3: TK_0= 'PARTITION'
            {
            TK_0=(Token)input.LT(1);
            match(input,198,FOLLOW_198_in_keyPARTITION13377); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyPARTITIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyPARTITIONReturnNode.setKind("keyPARTITION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyPARTITIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyPARTITIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyPARTITION

    public static class keyPRECISION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyPRECISION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17556:1: keyPRECISION returns [Node returnNode] : TK_0= 'PRECISION' ;
    public final keyPRECISION_return keyPRECISION() throws RecognitionException {
        keyPRECISION_return retval = new keyPRECISION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17557:1: (TK_0= 'PRECISION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17557:3: TK_0= 'PRECISION'
            {
            TK_0=(Token)input.LT(1);
            match(input,199,FOLLOW_199_in_keyPRECISION13395); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyPRECISIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyPRECISIONReturnNode.setKind("keyPRECISION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyPRECISIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyPRECISIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyPRECISION

    public static class keyPRESENT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyPRESENT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17574:1: keyPRESENT returns [Node returnNode] : TK_0= 'PRESENT' ;
    public final keyPRESENT_return keyPRESENT() throws RecognitionException {
        keyPRESENT_return retval = new keyPRESENT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17575:1: (TK_0= 'PRESENT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17575:3: TK_0= 'PRESENT'
            {
            TK_0=(Token)input.LT(1);
            match(input,200,FOLLOW_200_in_keyPRESENT13413); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyPRESENTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyPRESENTReturnNode.setKind("keyPRESENT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyPRESENTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyPRESENTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyPRESENT

    public static class keyREFERENCE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREFERENCE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17592:1: keyREFERENCE returns [Node returnNode] : TK_0= 'REFERENCE' ;
    public final keyREFERENCE_return keyREFERENCE() throws RecognitionException {
        keyREFERENCE_return retval = new keyREFERENCE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17593:1: (TK_0= 'REFERENCE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17593:3: TK_0= 'REFERENCE'
            {
            TK_0=(Token)input.LT(1);
            match(input,201,FOLLOW_201_in_keyREFERENCE13431); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREFERENCEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREFERENCEReturnNode.setKind("keyREFERENCE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREFERENCEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREFERENCEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREFERENCE

    public static class keyREGEXP_LIKE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREGEXP_LIKE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17610:1: keyREGEXP_LIKE returns [Node returnNode] : TK_0= 'REGEXP_LIKE' ;
    public final keyREGEXP_LIKE_return keyREGEXP_LIKE() throws RecognitionException {
        keyREGEXP_LIKE_return retval = new keyREGEXP_LIKE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17611:1: (TK_0= 'REGEXP_LIKE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17611:3: TK_0= 'REGEXP_LIKE'
            {
            TK_0=(Token)input.LT(1);
            match(input,202,FOLLOW_202_in_keyREGEXP_LIKE13449); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREGEXP_LIKEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREGEXP_LIKEReturnNode.setKind("keyREGEXP_LIKE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREGEXP_LIKEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREGEXP_LIKEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREGEXP_LIKE

    public static class keyRIGHT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRIGHT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17628:1: keyRIGHT returns [Node returnNode] : TK_0= 'RIGHT' ;
    public final keyRIGHT_return keyRIGHT() throws RecognitionException {
        keyRIGHT_return retval = new keyRIGHT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17629:1: (TK_0= 'RIGHT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17629:3: TK_0= 'RIGHT'
            {
            TK_0=(Token)input.LT(1);
            match(input,203,FOLLOW_203_in_keyRIGHT13467); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRIGHTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRIGHTReturnNode.setKind("keyRIGHT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRIGHTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRIGHTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRIGHT

    public static class keyROLLUP_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyROLLUP
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17646:1: keyROLLUP returns [Node returnNode] : TK_0= 'ROLLUP' ;
    public final keyROLLUP_return keyROLLUP() throws RecognitionException {
        keyROLLUP_return retval = new keyROLLUP_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17647:1: (TK_0= 'ROLLUP' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17647:3: TK_0= 'ROLLUP'
            {
            TK_0=(Token)input.LT(1);
            match(input,204,FOLLOW_204_in_keyROLLUP13485); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyROLLUPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyROLLUPReturnNode.setKind("keyROLLUP");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyROLLUPReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyROLLUPReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyROLLUP

    public static class keyRULES_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRULES
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17664:1: keyRULES returns [Node returnNode] : TK_0= 'RULES' ;
    public final keyRULES_return keyRULES() throws RecognitionException {
        keyRULES_return retval = new keyRULES_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17665:1: (TK_0= 'RULES' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17665:3: TK_0= 'RULES'
            {
            TK_0=(Token)input.LT(1);
            match(input,205,FOLLOW_205_in_keyRULES13503); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRULESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRULESReturnNode.setKind("keyRULES");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRULESReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRULESReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRULES

    public static class keySECOND_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySECOND
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17682:1: keySECOND returns [Node returnNode] : TK_0= 'SECOND' ;
    public final keySECOND_return keySECOND() throws RecognitionException {
        keySECOND_return retval = new keySECOND_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17683:1: (TK_0= 'SECOND' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17683:3: TK_0= 'SECOND'
            {
            TK_0=(Token)input.LT(1);
            match(input,206,FOLLOW_206_in_keySECOND13521); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySECONDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySECONDReturnNode.setKind("keySECOND");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySECONDReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySECONDReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySECOND

    public static class keySECONDS_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySECONDS
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17700:1: keySECONDS returns [Node returnNode] : TK_0= 'SECONDS' ;
    public final keySECONDS_return keySECONDS() throws RecognitionException {
        keySECONDS_return retval = new keySECONDS_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17701:1: (TK_0= 'SECONDS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17701:3: TK_0= 'SECONDS'
            {
            TK_0=(Token)input.LT(1);
            match(input,207,FOLLOW_207_in_keySECONDS13539); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySECONDSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySECONDSReturnNode.setKind("keySECONDS");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySECONDSReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySECONDSReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySECONDS

    public static class keySEQUENTIAL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySEQUENTIAL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17718:1: keySEQUENTIAL returns [Node returnNode] : TK_0= 'SEQUENTIAL' ;
    public final keySEQUENTIAL_return keySEQUENTIAL() throws RecognitionException {
        keySEQUENTIAL_return retval = new keySEQUENTIAL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17719:1: (TK_0= 'SEQUENTIAL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17719:3: TK_0= 'SEQUENTIAL'
            {
            TK_0=(Token)input.LT(1);
            match(input,208,FOLLOW_208_in_keySEQUENTIAL13557); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySEQUENTIALReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySEQUENTIALReturnNode.setKind("keySEQUENTIAL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySEQUENTIALReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySEQUENTIALReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySEQUENTIAL

    public static class keySESSIONTIMEZONE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySESSIONTIMEZONE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17736:1: keySESSIONTIMEZONE returns [Node returnNode] : TK_0= 'SESSIONTIMEZONE' ;
    public final keySESSIONTIMEZONE_return keySESSIONTIMEZONE() throws RecognitionException {
        keySESSIONTIMEZONE_return retval = new keySESSIONTIMEZONE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17737:1: (TK_0= 'SESSIONTIMEZONE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17737:3: TK_0= 'SESSIONTIMEZONE'
            {
            TK_0=(Token)input.LT(1);
            match(input,209,FOLLOW_209_in_keySESSIONTIMEZONE13575); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySESSIONTIMEZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySESSIONTIMEZONEReturnNode.setKind("keySESSIONTIMEZONE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySESSIONTIMEZONEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySESSIONTIMEZONEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySESSIONTIMEZONE

    public static class keySETS_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySETS
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17754:1: keySETS returns [Node returnNode] : TK_0= 'SETS' ;
    public final keySETS_return keySETS() throws RecognitionException {
        keySETS_return retval = new keySETS_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17755:1: (TK_0= 'SETS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17755:3: TK_0= 'SETS'
            {
            TK_0=(Token)input.LT(1);
            match(input,210,FOLLOW_210_in_keySETS13593); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySETSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySETSReturnNode.setKind("keySETS");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySETSReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySETSReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySETS

    public static class keySIBLINGS_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySIBLINGS
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17772:1: keySIBLINGS returns [Node returnNode] : TK_0= 'SIBLINGS' ;
    public final keySIBLINGS_return keySIBLINGS() throws RecognitionException {
        keySIBLINGS_return retval = new keySIBLINGS_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17773:1: (TK_0= 'SIBLINGS' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17773:3: TK_0= 'SIBLINGS'
            {
            TK_0=(Token)input.LT(1);
            match(input,211,FOLLOW_211_in_keySIBLINGS13611); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySIBLINGSReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySIBLINGSReturnNode.setKind("keySIBLINGS");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySIBLINGSReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySIBLINGSReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySIBLINGS

    public static class keySINGLE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySINGLE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17790:1: keySINGLE returns [Node returnNode] : TK_0= 'SINGLE' ;
    public final keySINGLE_return keySINGLE() throws RecognitionException {
        keySINGLE_return retval = new keySINGLE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17791:1: (TK_0= 'SINGLE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17791:3: TK_0= 'SINGLE'
            {
            TK_0=(Token)input.LT(1);
            match(input,212,FOLLOW_212_in_keySINGLE13629); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySINGLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySINGLEReturnNode.setKind("keySINGLE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySINGLEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySINGLEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySINGLE

    public static class keySOME_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySOME
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17808:1: keySOME returns [Node returnNode] : TK_0= 'SOME' ;
    public final keySOME_return keySOME() throws RecognitionException {
        keySOME_return retval = new keySOME_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17809:1: (TK_0= 'SOME' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17809:3: TK_0= 'SOME'
            {
            TK_0=(Token)input.LT(1);
            match(input,213,FOLLOW_213_in_keySOME13647); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySOMEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySOMEReturnNode.setKind("keySOME");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySOMEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySOMEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySOME

    public static class keySUBMULTISET_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySUBMULTISET
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17826:1: keySUBMULTISET returns [Node returnNode] : TK_0= 'SUBMULTISET' ;
    public final keySUBMULTISET_return keySUBMULTISET() throws RecognitionException {
        keySUBMULTISET_return retval = new keySUBMULTISET_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17827:1: (TK_0= 'SUBMULTISET' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17827:3: TK_0= 'SUBMULTISET'
            {
            TK_0=(Token)input.LT(1);
            match(input,214,FOLLOW_214_in_keySUBMULTISET13665); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySUBMULTISETReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySUBMULTISETReturnNode.setKind("keySUBMULTISET");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySUBMULTISETReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySUBMULTISETReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySUBMULTISET

    public static class keyTIME_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyTIME
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17844:1: keyTIME returns [Node returnNode] : TK_0= 'TIME' ;
    public final keyTIME_return keyTIME() throws RecognitionException {
        keyTIME_return retval = new keyTIME_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17845:1: (TK_0= 'TIME' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17845:3: TK_0= 'TIME'
            {
            TK_0=(Token)input.LT(1);
            match(input,215,FOLLOW_215_in_keyTIME13683); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyTIMEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyTIMEReturnNode.setKind("keyTIME");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyTIMEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyTIMEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyTIME

    public static class keyTIMESTAMP_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyTIMESTAMP
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17862:1: keyTIMESTAMP returns [Node returnNode] : TK_0= 'TIMESTAMP' ;
    public final keyTIMESTAMP_return keyTIMESTAMP() throws RecognitionException {
        keyTIMESTAMP_return retval = new keyTIMESTAMP_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17863:1: (TK_0= 'TIMESTAMP' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17863:3: TK_0= 'TIMESTAMP'
            {
            TK_0=(Token)input.LT(1);
            match(input,216,FOLLOW_216_in_keyTIMESTAMP13701); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyTIMESTAMPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyTIMESTAMPReturnNode.setKind("keyTIMESTAMP");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyTIMESTAMPReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyTIMESTAMPReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyTIMESTAMP

    public static class keyTHE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyTHE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17880:1: keyTHE returns [Node returnNode] : TK_0= 'THE' ;
    public final keyTHE_return keyTHE() throws RecognitionException {
        keyTHE_return retval = new keyTHE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17881:1: (TK_0= 'THE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17881:3: TK_0= 'THE'
            {
            TK_0=(Token)input.LT(1);
            match(input,217,FOLLOW_217_in_keyTHE13719); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyTHEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyTHEReturnNode.setKind("keyTHE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyTHEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyTHEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyTHE

    public static class keyUNDER_PATH_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyUNDER_PATH
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17898:1: keyUNDER_PATH returns [Node returnNode] : TK_0= 'UNDER_PATH' ;
    public final keyUNDER_PATH_return keyUNDER_PATH() throws RecognitionException {
        keyUNDER_PATH_return retval = new keyUNDER_PATH_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17899:1: (TK_0= 'UNDER_PATH' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17899:3: TK_0= 'UNDER_PATH'
            {
            TK_0=(Token)input.LT(1);
            match(input,218,FOLLOW_218_in_keyUNDER_PATH13737); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyUNDER_PATHReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyUNDER_PATHReturnNode.setKind("keyUNDER_PATH");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyUNDER_PATHReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyUNDER_PATHReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyUNDER_PATH

    public static class keyUNTIL_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyUNTIL
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17916:1: keyUNTIL returns [Node returnNode] : TK_0= 'UNTIL' ;
    public final keyUNTIL_return keyUNTIL() throws RecognitionException {
        keyUNTIL_return retval = new keyUNTIL_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17917:1: (TK_0= 'UNTIL' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17917:3: TK_0= 'UNTIL'
            {
            TK_0=(Token)input.LT(1);
            match(input,219,FOLLOW_219_in_keyUNTIL13755); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyUNTILReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyUNTILReturnNode.setKind("keyUNTIL");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyUNTILReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyUNTILReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyUNTIL

    public static class keyUPDATED_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyUPDATED
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17934:1: keyUPDATED returns [Node returnNode] : TK_0= 'UPDATED' ;
    public final keyUPDATED_return keyUPDATED() throws RecognitionException {
        keyUPDATED_return retval = new keyUPDATED_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17935:1: (TK_0= 'UPDATED' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17935:3: TK_0= 'UPDATED'
            {
            TK_0=(Token)input.LT(1);
            match(input,220,FOLLOW_220_in_keyUPDATED13773); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyUPDATEDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyUPDATEDReturnNode.setKind("keyUPDATED");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyUPDATEDReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyUPDATEDReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyUPDATED

    public static class keyUPSERT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyUPSERT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17952:1: keyUPSERT returns [Node returnNode] : TK_0= 'UPSERT' ;
    public final keyUPSERT_return keyUPSERT() throws RecognitionException {
        keyUPSERT_return retval = new keyUPSERT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17953:1: (TK_0= 'UPSERT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17953:3: TK_0= 'UPSERT'
            {
            TK_0=(Token)input.LT(1);
            match(input,221,FOLLOW_221_in_keyUPSERT13791); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyUPSERTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyUPSERTReturnNode.setKind("keyUPSERT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyUPSERTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyUPSERTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyUPSERT

    public static class keyWAIT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyWAIT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17970:1: keyWAIT returns [Node returnNode] : TK_0= 'WAIT' ;
    public final keyWAIT_return keyWAIT() throws RecognitionException {
        keyWAIT_return retval = new keyWAIT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17971:1: (TK_0= 'WAIT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17971:3: TK_0= 'WAIT'
            {
            TK_0=(Token)input.LT(1);
            match(input,222,FOLLOW_222_in_keyWAIT13809); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyWAITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyWAITReturnNode.setKind("keyWAIT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyWAITReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyWAITReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyWAIT

    public static class keyYEAR_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyYEAR
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17988:1: keyYEAR returns [Node returnNode] : TK_0= 'YEAR' ;
    public final keyYEAR_return keyYEAR() throws RecognitionException {
        keyYEAR_return retval = new keyYEAR_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17989:1: (TK_0= 'YEAR' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:17989:3: TK_0= 'YEAR'
            {
            TK_0=(Token)input.LT(1);
            match(input,223,FOLLOW_223_in_keyYEAR13827); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyYEARReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyYEARReturnNode.setKind("keyYEAR");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyYEARReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyYEARReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyYEAR

    public static class keyZONE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyZONE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18006:1: keyZONE returns [Node returnNode] : TK_0= 'ZONE' ;
    public final keyZONE_return keyZONE() throws RecognitionException {
        keyZONE_return retval = new keyZONE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18007:1: (TK_0= 'ZONE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18007:3: TK_0= 'ZONE'
            {
            TK_0=(Token)input.LT(1);
            match(input,224,FOLLOW_224_in_keyZONE13845); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyZONEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyZONEReturnNode.setKind("keyZONE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyZONEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyZONEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyZONE

    public static class keyARRAY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyARRAY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18024:1: keyARRAY returns [Node returnNode] : TK_0= 'ARRAY' ;
    public final keyARRAY_return keyARRAY() throws RecognitionException {
        keyARRAY_return retval = new keyARRAY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18025:1: (TK_0= 'ARRAY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18025:3: TK_0= 'ARRAY'
            {
            TK_0=(Token)input.LT(1);
            match(input,225,FOLLOW_225_in_keyARRAY13863); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyARRAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyARRAYReturnNode.setKind("keyARRAY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyARRAYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyARRAYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyARRAY

    public static class keyAUTONOMOUS_TRANSACTION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyAUTONOMOUS_TRANSACTION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18042:1: keyAUTONOMOUS_TRANSACTION returns [Node returnNode] : TK_0= 'AUTONOMOUS_TRANSACTION' ;
    public final keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION() throws RecognitionException {
        keyAUTONOMOUS_TRANSACTION_return retval = new keyAUTONOMOUS_TRANSACTION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18043:1: (TK_0= 'AUTONOMOUS_TRANSACTION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18043:3: TK_0= 'AUTONOMOUS_TRANSACTION'
            {
            TK_0=(Token)input.LT(1);
            match(input,226,FOLLOW_226_in_keyAUTONOMOUS_TRANSACTION13881); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyAUTONOMOUS_TRANSACTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyAUTONOMOUS_TRANSACTIONReturnNode.setKind("keyAUTONOMOUS_TRANSACTION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyAUTONOMOUS_TRANSACTIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyAUTONOMOUS_TRANSACTIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyAUTONOMOUS_TRANSACTION

    public static class keyBODY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyBODY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18060:1: keyBODY returns [Node returnNode] : TK_0= 'BODY' ;
    public final keyBODY_return keyBODY() throws RecognitionException {
        keyBODY_return retval = new keyBODY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18061:1: (TK_0= 'BODY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18061:3: TK_0= 'BODY'
            {
            TK_0=(Token)input.LT(1);
            match(input,227,FOLLOW_227_in_keyBODY13899); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyBODYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyBODYReturnNode.setKind("keyBODY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyBODYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyBODYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyBODY

    public static class keyBUILTIN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyBUILTIN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18078:1: keyBUILTIN returns [Node returnNode] : TK_0= 'BUILTIN' ;
    public final keyBUILTIN_return keyBUILTIN() throws RecognitionException {
        keyBUILTIN_return retval = new keyBUILTIN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18079:1: (TK_0= 'BUILTIN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18079:3: TK_0= 'BUILTIN'
            {
            TK_0=(Token)input.LT(1);
            match(input,228,FOLLOW_228_in_keyBUILTIN13917); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyBUILTINReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyBUILTINReturnNode.setKind("keyBUILTIN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyBUILTINReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyBUILTINReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyBUILTIN

    public static class keyBULK_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyBULK
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18096:1: keyBULK returns [Node returnNode] : TK_0= 'BULK' ;
    public final keyBULK_return keyBULK() throws RecognitionException {
        keyBULK_return retval = new keyBULK_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18097:1: (TK_0= 'BULK' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18097:3: TK_0= 'BULK'
            {
            TK_0=(Token)input.LT(1);
            match(input,229,FOLLOW_229_in_keyBULK13935); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyBULKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyBULKReturnNode.setKind("keyBULK");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyBULKReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyBULKReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyBULK

    public static class keyBYTE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyBYTE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18114:1: keyBYTE returns [Node returnNode] : TK_0= 'BYTE' ;
    public final keyBYTE_return keyBYTE() throws RecognitionException {
        keyBYTE_return retval = new keyBYTE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18115:1: (TK_0= 'BYTE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18115:3: TK_0= 'BYTE'
            {
            TK_0=(Token)input.LT(1);
            match(input,230,FOLLOW_230_in_keyBYTE13953); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyBYTEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyBYTEReturnNode.setKind("keyBYTE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyBYTEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyBYTEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyBYTE

    public static class keyCLOSE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCLOSE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18132:1: keyCLOSE returns [Node returnNode] : TK_0= 'CLOSE' ;
    public final keyCLOSE_return keyCLOSE() throws RecognitionException {
        keyCLOSE_return retval = new keyCLOSE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18133:1: (TK_0= 'CLOSE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18133:3: TK_0= 'CLOSE'
            {
            TK_0=(Token)input.LT(1);
            match(input,231,FOLLOW_231_in_keyCLOSE13971); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCLOSEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCLOSEReturnNode.setKind("keyCLOSE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCLOSEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCLOSEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCLOSE

    public static class keyCOLLECT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCOLLECT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18150:1: keyCOLLECT returns [Node returnNode] : TK_0= 'COLLECT' ;
    public final keyCOLLECT_return keyCOLLECT() throws RecognitionException {
        keyCOLLECT_return retval = new keyCOLLECT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18151:1: (TK_0= 'COLLECT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18151:3: TK_0= 'COLLECT'
            {
            TK_0=(Token)input.LT(1);
            match(input,232,FOLLOW_232_in_keyCOLLECT13989); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCOLLECTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCOLLECTReturnNode.setKind("keyCOLLECT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCOLLECTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCOLLECTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCOLLECT

    public static class keyCURSOR_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyCURSOR
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18168:1: keyCURSOR returns [Node returnNode] : TK_0= 'CURSOR' ;
    public final keyCURSOR_return keyCURSOR() throws RecognitionException {
        keyCURSOR_return retval = new keyCURSOR_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18169:1: (TK_0= 'CURSOR' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18169:3: TK_0= 'CURSOR'
            {
            TK_0=(Token)input.LT(1);
            match(input,233,FOLLOW_233_in_keyCURSOR14007); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyCURSORReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyCURSORReturnNode.setKind("keyCURSOR");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyCURSORReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyCURSORReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyCURSOR

    public static class keyELSIF_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyELSIF
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18186:1: keyELSIF returns [Node returnNode] : TK_0= 'ELSIF' ;
    public final keyELSIF_return keyELSIF() throws RecognitionException {
        keyELSIF_return retval = new keyELSIF_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18187:1: (TK_0= 'ELSIF' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18187:3: TK_0= 'ELSIF'
            {
            TK_0=(Token)input.LT(1);
            match(input,234,FOLLOW_234_in_keyELSIF14025); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyELSIFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyELSIFReturnNode.setKind("keyELSIF");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyELSIFReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyELSIFReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyELSIF

    public static class keyEXCEPTION_INIT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyEXCEPTION_INIT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18204:1: keyEXCEPTION_INIT returns [Node returnNode] : TK_0= 'EXCEPTION_INIT' ;
    public final keyEXCEPTION_INIT_return keyEXCEPTION_INIT() throws RecognitionException {
        keyEXCEPTION_INIT_return retval = new keyEXCEPTION_INIT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18205:1: (TK_0= 'EXCEPTION_INIT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18205:3: TK_0= 'EXCEPTION_INIT'
            {
            TK_0=(Token)input.LT(1);
            match(input,235,FOLLOW_235_in_keyEXCEPTION_INIT14044); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyEXCEPTION_INITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyEXCEPTION_INITReturnNode.setKind("keyEXCEPTION_INIT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyEXCEPTION_INITReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyEXCEPTION_INITReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyEXCEPTION_INIT

    public static class keyEXIT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyEXIT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18222:1: keyEXIT returns [Node returnNode] : TK_0= 'EXIT' ;
    public final keyEXIT_return keyEXIT() throws RecognitionException {
        keyEXIT_return retval = new keyEXIT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18223:1: (TK_0= 'EXIT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18223:3: TK_0= 'EXIT'
            {
            TK_0=(Token)input.LT(1);
            match(input,236,FOLLOW_236_in_keyEXIT14062); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyEXITReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyEXITReturnNode.setKind("keyEXIT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyEXITReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyEXITReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyEXIT

    public static class keyFIPSFLAG_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyFIPSFLAG
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18240:1: keyFIPSFLAG returns [Node returnNode] : TK_0= 'FIPSFLAG' ;
    public final keyFIPSFLAG_return keyFIPSFLAG() throws RecognitionException {
        keyFIPSFLAG_return retval = new keyFIPSFLAG_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18241:1: (TK_0= 'FIPSFLAG' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18241:3: TK_0= 'FIPSFLAG'
            {
            TK_0=(Token)input.LT(1);
            match(input,237,FOLLOW_237_in_keyFIPSFLAG14080); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyFIPSFLAGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyFIPSFLAGReturnNode.setKind("keyFIPSFLAG");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyFIPSFLAGReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyFIPSFLAGReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyFIPSFLAG

    public static class keyFUNCTION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyFUNCTION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18258:1: keyFUNCTION returns [Node returnNode] : TK_0= 'FUNCTION' ;
    public final keyFUNCTION_return keyFUNCTION() throws RecognitionException {
        keyFUNCTION_return retval = new keyFUNCTION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18259:1: (TK_0= 'FUNCTION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18259:3: TK_0= 'FUNCTION'
            {
            TK_0=(Token)input.LT(1);
            match(input,120,FOLLOW_120_in_keyFUNCTION14098); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyFUNCTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyFUNCTIONReturnNode.setKind("keyFUNCTION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyFUNCTIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyFUNCTIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyFUNCTION

    public static class keyINTERFACE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyINTERFACE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18276:1: keyINTERFACE returns [Node returnNode] : TK_0= 'INTERFACE' ;
    public final keyINTERFACE_return keyINTERFACE() throws RecognitionException {
        keyINTERFACE_return retval = new keyINTERFACE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18277:1: (TK_0= 'INTERFACE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18277:3: TK_0= 'INTERFACE'
            {
            TK_0=(Token)input.LT(1);
            match(input,238,FOLLOW_238_in_keyINTERFACE14116); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyINTERFACEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyINTERFACEReturnNode.setKind("keyINTERFACE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyINTERFACEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyINTERFACEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyINTERFACE

    public static class keyLOOP_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyLOOP
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18294:1: keyLOOP returns [Node returnNode] : TK_0= 'LOOP' ;
    public final keyLOOP_return keyLOOP() throws RecognitionException {
        keyLOOP_return retval = new keyLOOP_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18295:1: (TK_0= 'LOOP' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18295:3: TK_0= 'LOOP'
            {
            TK_0=(Token)input.LT(1);
            match(input,239,FOLLOW_239_in_keyLOOP14134); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyLOOPReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyLOOPReturnNode.setKind("keyLOOP");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyLOOPReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyLOOPReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyLOOP

    public static class keyNEW_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNEW
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18312:1: keyNEW returns [Node returnNode] : TK_0= 'NEW' ;
    public final keyNEW_return keyNEW() throws RecognitionException {
        keyNEW_return retval = new keyNEW_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18313:1: (TK_0= 'NEW' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18313:3: TK_0= 'NEW'
            {
            TK_0=(Token)input.LT(1);
            match(input,240,FOLLOW_240_in_keyNEW14153); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNEWReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNEWReturnNode.setKind("keyNEW");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNEWReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNEWReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNEW

    public static class keyNEW_NAMES_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyNEW_NAMES
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18330:1: keyNEW_NAMES returns [Node returnNode] : TK_0= 'NEW_NAMES' ;
    public final keyNEW_NAMES_return keyNEW_NAMES() throws RecognitionException {
        keyNEW_NAMES_return retval = new keyNEW_NAMES_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18331:1: (TK_0= 'NEW_NAMES' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18331:3: TK_0= 'NEW_NAMES'
            {
            TK_0=(Token)input.LT(1);
            match(input,241,FOLLOW_241_in_keyNEW_NAMES14171); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyNEW_NAMESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyNEW_NAMESReturnNode.setKind("keyNEW_NAMES");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyNEW_NAMESReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyNEW_NAMESReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyNEW_NAMES

    public static class keyOPEN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyOPEN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18348:1: keyOPEN returns [Node returnNode] : TK_0= 'OPEN' ;
    public final keyOPEN_return keyOPEN() throws RecognitionException {
        keyOPEN_return retval = new keyOPEN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18349:1: (TK_0= 'OPEN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18349:3: TK_0= 'OPEN'
            {
            TK_0=(Token)input.LT(1);
            match(input,242,FOLLOW_242_in_keyOPEN14189); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyOPENReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyOPENReturnNode.setKind("keyOPEN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyOPENReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyOPENReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyOPEN

    public static class keyOUT_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyOUT
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18366:1: keyOUT returns [Node returnNode] : TK_0= 'OUT' ;
    public final keyOUT_return keyOUT() throws RecognitionException {
        keyOUT_return retval = new keyOUT_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18367:1: (TK_0= 'OUT' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18367:3: TK_0= 'OUT'
            {
            TK_0=(Token)input.LT(1);
            match(input,243,FOLLOW_243_in_keyOUT14207); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyOUTReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyOUTReturnNode.setKind("keyOUT");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyOUTReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyOUTReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyOUT

    public static class keyPACKAGE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyPACKAGE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18384:1: keyPACKAGE returns [Node returnNode] : TK_0= 'PACKAGE' ;
    public final keyPACKAGE_return keyPACKAGE() throws RecognitionException {
        keyPACKAGE_return retval = new keyPACKAGE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18385:1: (TK_0= 'PACKAGE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18385:3: TK_0= 'PACKAGE'
            {
            TK_0=(Token)input.LT(1);
            match(input,244,FOLLOW_244_in_keyPACKAGE14226); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyPACKAGEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyPACKAGEReturnNode.setKind("keyPACKAGE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyPACKAGEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyPACKAGEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyPACKAGE

    public static class keyPRAGMA_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyPRAGMA
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18402:1: keyPRAGMA returns [Node returnNode] : TK_0= 'PRAGMA' ;
    public final keyPRAGMA_return keyPRAGMA() throws RecognitionException {
        keyPRAGMA_return retval = new keyPRAGMA_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18403:1: (TK_0= 'PRAGMA' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18403:3: TK_0= 'PRAGMA'
            {
            TK_0=(Token)input.LT(1);
            match(input,245,FOLLOW_245_in_keyPRAGMA14245); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyPRAGMAReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyPRAGMAReturnNode.setKind("keyPRAGMA");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyPRAGMAReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyPRAGMAReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyPRAGMA

    public static class keyRAISE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRAISE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18420:1: keyRAISE returns [Node returnNode] : TK_0= 'RAISE' ;
    public final keyRAISE_return keyRAISE() throws RecognitionException {
        keyRAISE_return retval = new keyRAISE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18421:1: (TK_0= 'RAISE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18421:3: TK_0= 'RAISE'
            {
            TK_0=(Token)input.LT(1);
            match(input,246,FOLLOW_246_in_keyRAISE14264); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRAISEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRAISEReturnNode.setKind("keyRAISE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRAISEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRAISEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRAISE

    public static class keyRANGE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRANGE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18438:1: keyRANGE returns [Node returnNode] : TK_0= 'RANGE' ;
    public final keyRANGE_return keyRANGE() throws RecognitionException {
        keyRANGE_return retval = new keyRANGE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18439:1: (TK_0= 'RANGE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18439:3: TK_0= 'RANGE'
            {
            TK_0=(Token)input.LT(1);
            match(input,247,FOLLOW_247_in_keyRANGE14283); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRANGEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRANGEReturnNode.setKind("keyRANGE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRANGEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRANGEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRANGE

    public static class keyREAD_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREAD
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18456:1: keyREAD returns [Node returnNode] : TK_0= 'READ' ;
    public final keyREAD_return keyREAD() throws RecognitionException {
        keyREAD_return retval = new keyREAD_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18457:1: (TK_0= 'READ' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18457:3: TK_0= 'READ'
            {
            TK_0=(Token)input.LT(1);
            match(input,248,FOLLOW_248_in_keyREAD14301); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREADReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREADReturnNode.setKind("keyREAD");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREADReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREADReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREAD

    public static class keyRECORD_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRECORD
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18474:1: keyRECORD returns [Node returnNode] : TK_0= 'RECORD' ;
    public final keyRECORD_return keyRECORD() throws RecognitionException {
        keyRECORD_return retval = new keyRECORD_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18475:1: (TK_0= 'RECORD' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18475:3: TK_0= 'RECORD'
            {
            TK_0=(Token)input.LT(1);
            match(input,249,FOLLOW_249_in_keyRECORD14319); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRECORDReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRECORDReturnNode.setKind("keyRECORD");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRECORDReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRECORDReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRECORD

    public static class keyREF_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREF
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18492:1: keyREF returns [Node returnNode] : TK_0= 'REF' ;
    public final keyREF_return keyREF() throws RecognitionException {
        keyREF_return retval = new keyREF_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18493:1: (TK_0= 'REF' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18493:3: TK_0= 'REF'
            {
            TK_0=(Token)input.LT(1);
            match(input,250,FOLLOW_250_in_keyREF14338); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREFReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREFReturnNode.setKind("keyREF");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREFReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREFReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREF

    public static class keyREPLACE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREPLACE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18510:1: keyREPLACE returns [Node returnNode] : TK_0= 'REPLACE' ;
    public final keyREPLACE_return keyREPLACE() throws RecognitionException {
        keyREPLACE_return retval = new keyREPLACE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18511:1: (TK_0= 'REPLACE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18511:3: TK_0= 'REPLACE'
            {
            TK_0=(Token)input.LT(1);
            match(input,251,FOLLOW_251_in_keyREPLACE14356); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREPLACEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREPLACEReturnNode.setKind("keyREPLACE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREPLACEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREPLACEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREPLACE

    public static class keyRESTRICT_REFERENCES_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRESTRICT_REFERENCES
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18528:1: keyRESTRICT_REFERENCES returns [Node returnNode] : TK_0= 'RESTRICT_REFERENCES' ;
    public final keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES() throws RecognitionException {
        keyRESTRICT_REFERENCES_return retval = new keyRESTRICT_REFERENCES_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18529:1: (TK_0= 'RESTRICT_REFERENCES' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18529:3: TK_0= 'RESTRICT_REFERENCES'
            {
            TK_0=(Token)input.LT(1);
            match(input,252,FOLLOW_252_in_keyRESTRICT_REFERENCES14374); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRESTRICT_REFERENCESReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRESTRICT_REFERENCESReturnNode.setKind("keyRESTRICT_REFERENCES");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRESTRICT_REFERENCESReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRESTRICT_REFERENCESReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRESTRICT_REFERENCES

    public static class keyRETURN_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRETURN
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18546:1: keyRETURN returns [Node returnNode] : TK_0= 'RETURN' ;
    public final keyRETURN_return keyRETURN() throws RecognitionException {
        keyRETURN_return retval = new keyRETURN_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18547:1: (TK_0= 'RETURN' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18547:3: TK_0= 'RETURN'
            {
            TK_0=(Token)input.LT(1);
            match(input,253,FOLLOW_253_in_keyRETURN14392); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRETURNReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRETURNReturnNode.setKind("keyRETURN");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRETURNReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRETURNReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRETURN

    public static class keyRETURNING_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyRETURNING
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18564:1: keyRETURNING returns [Node returnNode] : TK_0= 'RETURNING' ;
    public final keyRETURNING_return keyRETURNING() throws RecognitionException {
        keyRETURNING_return retval = new keyRETURNING_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18565:1: (TK_0= 'RETURNING' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18565:3: TK_0= 'RETURNING'
            {
            TK_0=(Token)input.LT(1);
            match(input,254,FOLLOW_254_in_keyRETURNING14411); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyRETURNINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyRETURNINGReturnNode.setKind("keyRETURNING");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyRETURNINGReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyRETURNINGReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyRETURNING

    public static class keyREVERSE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyREVERSE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18582:1: keyREVERSE returns [Node returnNode] : TK_0= 'REVERSE' ;
    public final keyREVERSE_return keyREVERSE() throws RecognitionException {
        keyREVERSE_return retval = new keyREVERSE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18583:1: (TK_0= 'REVERSE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18583:3: TK_0= 'REVERSE'
            {
            TK_0=(Token)input.LT(1);
            match(input,255,FOLLOW_255_in_keyREVERSE14430); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyREVERSEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyREVERSEReturnNode.setKind("keyREVERSE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyREVERSEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyREVERSEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyREVERSE

    public static class keyROLLBACK_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyROLLBACK
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18600:1: keyROLLBACK returns [Node returnNode] : TK_0= 'ROLLBACK' ;
    public final keyROLLBACK_return keyROLLBACK() throws RecognitionException {
        keyROLLBACK_return retval = new keyROLLBACK_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18601:1: (TK_0= 'ROLLBACK' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18601:3: TK_0= 'ROLLBACK'
            {
            TK_0=(Token)input.LT(1);
            match(input,256,FOLLOW_256_in_keyROLLBACK14448); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyROLLBACKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyROLLBACKReturnNode.setKind("keyROLLBACK");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyROLLBACKReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyROLLBACKReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyROLLBACK

    public static class keySERIALLY_REUSABLE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySERIALLY_REUSABLE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18618:1: keySERIALLY_REUSABLE returns [Node returnNode] : TK_0= 'SERIALLY_REUSABLE' ;
    public final keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE() throws RecognitionException {
        keySERIALLY_REUSABLE_return retval = new keySERIALLY_REUSABLE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18619:1: (TK_0= 'SERIALLY_REUSABLE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18619:3: TK_0= 'SERIALLY_REUSABLE'
            {
            TK_0=(Token)input.LT(1);
            match(input,257,FOLLOW_257_in_keySERIALLY_REUSABLE14466); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySERIALLY_REUSABLEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySERIALLY_REUSABLEReturnNode.setKind("keySERIALLY_REUSABLE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySERIALLY_REUSABLEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySERIALLY_REUSABLEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySERIALLY_REUSABLE

    public static class keySUBTYPE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keySUBTYPE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18636:1: keySUBTYPE returns [Node returnNode] : TK_0= 'SUBTYPE' ;
    public final keySUBTYPE_return keySUBTYPE() throws RecognitionException {
        keySUBTYPE_return retval = new keySUBTYPE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18637:1: (TK_0= 'SUBTYPE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18637:3: TK_0= 'SUBTYPE'
            {
            TK_0=(Token)input.LT(1);
            match(input,258,FOLLOW_258_in_keySUBTYPE14484); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keySUBTYPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keySUBTYPEReturnNode.setKind("keySUBTYPE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keySUBTYPEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keySUBTYPEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keySUBTYPE

    public static class keyTRANSACTION_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyTRANSACTION
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18654:1: keyTRANSACTION returns [Node returnNode] : TK_0= 'TRANSACTION' ;
    public final keyTRANSACTION_return keyTRANSACTION() throws RecognitionException {
        keyTRANSACTION_return retval = new keyTRANSACTION_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18655:1: (TK_0= 'TRANSACTION' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18655:3: TK_0= 'TRANSACTION'
            {
            TK_0=(Token)input.LT(1);
            match(input,259,FOLLOW_259_in_keyTRANSACTION14502); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyTRANSACTIONReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyTRANSACTIONReturnNode.setKind("keyTRANSACTION");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyTRANSACTIONReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyTRANSACTIONReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyTRANSACTION

    public static class keyTYPE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyTYPE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18672:1: keyTYPE returns [Node returnNode] : TK_0= 'TYPE' ;
    public final keyTYPE_return keyTYPE() throws RecognitionException {
        keyTYPE_return retval = new keyTYPE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18673:1: (TK_0= 'TYPE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18673:3: TK_0= 'TYPE'
            {
            TK_0=(Token)input.LT(1);
            match(input,260,FOLLOW_260_in_keyTYPE14520); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyTYPEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyTYPEReturnNode.setKind("keyTYPE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyTYPEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyTYPEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyTYPE

    public static class keyUSING_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyUSING
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18690:1: keyUSING returns [Node returnNode] : TK_0= 'USING' ;
    public final keyUSING_return keyUSING() throws RecognitionException {
        keyUSING_return retval = new keyUSING_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18691:1: (TK_0= 'USING' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18691:3: TK_0= 'USING'
            {
            TK_0=(Token)input.LT(1);
            match(input,261,FOLLOW_261_in_keyUSING14538); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyUSINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyUSINGReturnNode.setKind("keyUSING");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyUSINGReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyUSINGReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyUSING

    public static class keyVARRAY_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyVARRAY
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18708:1: keyVARRAY returns [Node returnNode] : TK_0= 'VARRAY' ;
    public final keyVARRAY_return keyVARRAY() throws RecognitionException {
        keyVARRAY_return retval = new keyVARRAY_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18709:1: (TK_0= 'VARRAY' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18709:3: TK_0= 'VARRAY'
            {
            TK_0=(Token)input.LT(1);
            match(input,262,FOLLOW_262_in_keyVARRAY14556); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyVARRAYReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyVARRAYReturnNode.setKind("keyVARRAY");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyVARRAYReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyVARRAYReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyVARRAY

    public static class keyVARYING_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyVARYING
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18726:1: keyVARYING returns [Node returnNode] : TK_0= 'VARYING' ;
    public final keyVARYING_return keyVARYING() throws RecognitionException {
        keyVARYING_return retval = new keyVARYING_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18727:1: (TK_0= 'VARYING' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18727:3: TK_0= 'VARYING'
            {
            TK_0=(Token)input.LT(1);
            match(input,263,FOLLOW_263_in_keyVARYING14574); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyVARYINGReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyVARYINGReturnNode.setKind("keyVARYING");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyVARYINGReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyVARYINGReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyVARYING

    public static class keyWHILE_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyWHILE
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18744:1: keyWHILE returns [Node returnNode] : TK_0= 'WHILE' ;
    public final keyWHILE_return keyWHILE() throws RecognitionException {
        keyWHILE_return retval = new keyWHILE_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18745:1: (TK_0= 'WHILE' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18745:3: TK_0= 'WHILE'
            {
            TK_0=(Token)input.LT(1);
            match(input,264,FOLLOW_264_in_keyWHILE14592); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyWHILEReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyWHILEReturnNode.setKind("keyWHILE");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyWHILEReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyWHILEReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyWHILE

    public static class keyWORK_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start keyWORK
    // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18762:1: keyWORK returns [Node returnNode] : TK_0= 'WORK' ;
    public final keyWORK_return keyWORK() throws RecognitionException {
        keyWORK_return retval = new keyWORK_return();
        retval.start = input.LT(1);

        Token TK_0=null;

        try {
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18763:1: (TK_0= 'WORK' )
            // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:18763:3: TK_0= 'WORK'
            {
            TK_0=(Token)input.LT(1);
            match(input,265,FOLLOW_265_in_keyWORK14611); if (failed) return retval;
            if ( backtracking==0 ) {
              
              		// Create return CST Node
              		Node keyWORKReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		keyWORKReturnNode.setKind("keyWORK");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue(TK_0.getText());
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		keyWORKReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = keyWORKReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyWORK

    // $ANTLR start synpred23
    public final void synpred23_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:800:3: ( sql_condition )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:800:3: sql_condition
        {
        pushFollow(FOLLOW_sql_condition_in_synpred23687);
        sql_condition();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred23

    // $ANTLR start synpred24
    public final void synpred24_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:817:6: ( sql_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:817:6: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred24697);
        sql_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred24

    // $ANTLR start synpred32
    public final void synpred32_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:37: ( 'AND' condition_not )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1172:37: 'AND' condition_not
        {
        match(input,61,FOLLOW_61_in_synpred321001); if (failed) return ;
        pushFollow(FOLLOW_condition_not_in_synpred321005);
        condition_not();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred32

    // $ANTLR start synpred36
    public final void synpred36_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:220: ( outer_join_sign )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:220: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred361125);
        outer_join_sign();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred36

    // $ANTLR start synpred37
    public final void synpred37_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:3: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:3: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred371076); if (failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred371080);
        sql_expressions();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred371084); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:73: ( outer_join_sign )?
        int alt354=2;
        int LA354_0 = input.LA(1);

        if ( (LA354_0==LPAREN) ) {
            alt354=1;
        }
        switch (alt354) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:75: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred371090);
                outer_join_sign();
                _fsp--;
                if (failed) return ;

                }
                break;

        }

        if ( (input.LA(1)>=EQ && input.LA(1)<=NOT_EQ) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred371095);    throw mse;
        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred371111); if (failed) return ;
        pushFollow(FOLLOW_select_command_in_synpred371115);
        select_command();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred371119); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:218: ( outer_join_sign )?
        int alt355=2;
        int LA355_0 = input.LA(1);

        if ( (LA355_0==LPAREN) ) {
            alt355=1;
        }
        switch (alt355) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1285:220: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred371125);
                outer_join_sign();
                _fsp--;
                if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred37

    // $ANTLR start synpred46
    public final void synpred46_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:201: ( sql_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:201: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred461210);
        sql_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred46

    // $ANTLR start synpred47
    public final void synpred47_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:311: ( outer_join_sign )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1387:311: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred471232);
        outer_join_sign();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred47

    // $ANTLR start synpred50
    public final void synpred50_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1691:4: ( condition_is )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1691:4: condition_is
        {
        pushFollow(FOLLOW_condition_is_in_synpred501355);
        condition_is();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred50

    // $ANTLR start synpred51
    public final void synpred51_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1709:4: ( condition_comparison )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1709:4: condition_comparison
        {
        pushFollow(FOLLOW_condition_comparison_in_synpred511366);
        condition_comparison();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred51

    // $ANTLR start synpred52
    public final void synpred52_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1727:4: ( condition_group_comparison )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1727:4: condition_group_comparison
        {
        pushFollow(FOLLOW_condition_group_comparison_in_synpred521377);
        condition_group_comparison();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred52

    // $ANTLR start synpred53
    public final void synpred53_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1745:4: ( condition_in )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1745:4: condition_in
        {
        pushFollow(FOLLOW_condition_in_in_synpred531388);
        condition_in();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred53

    // $ANTLR start synpred54
    public final void synpred54_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1763:4: ( condition_is_a_set )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1763:4: condition_is_a_set
        {
        pushFollow(FOLLOW_condition_is_a_set_in_synpred541399);
        condition_is_a_set();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred54

    // $ANTLR start synpred55
    public final void synpred55_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1781:4: ( condition_is_any )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1781:4: condition_is_any
        {
        pushFollow(FOLLOW_condition_is_any_in_synpred551410);
        condition_is_any();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred55

    // $ANTLR start synpred56
    public final void synpred56_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1799:4: ( condition_is_empty )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1799:4: condition_is_empty
        {
        pushFollow(FOLLOW_condition_is_empty_in_synpred561421);
        condition_is_empty();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred56

    // $ANTLR start synpred57
    public final void synpred57_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1817:4: ( condition_is_of_type )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1817:4: condition_is_of_type
        {
        pushFollow(FOLLOW_condition_is_of_type_in_synpred571432);
        condition_is_of_type();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred57

    // $ANTLR start synpred58
    public final void synpred58_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1835:4: ( condition_is_present )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1835:4: condition_is_present
        {
        pushFollow(FOLLOW_condition_is_present_in_synpred581443);
        condition_is_present();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred58

    // $ANTLR start synpred59
    public final void synpred59_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1853:4: ( condition_like )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1853:4: condition_like
        {
        pushFollow(FOLLOW_condition_like_in_synpred591454);
        condition_like();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred59

    // $ANTLR start synpred60
    public final void synpred60_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1871:4: ( condition_member )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1871:4: condition_member
        {
        pushFollow(FOLLOW_condition_member_in_synpred601465);
        condition_member();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred60

    // $ANTLR start synpred61
    public final void synpred61_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1889:4: ( condition_between )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1889:4: condition_between
        {
        pushFollow(FOLLOW_condition_between_in_synpred611476);
        condition_between();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred61

    // $ANTLR start synpred63
    public final void synpred63_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1925:4: ( condition_submultiset )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:1925:4: condition_submultiset
        {
        pushFollow(FOLLOW_condition_submultiset_in_synpred631498);
        condition_submultiset();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred63

    // $ANTLR start synpred69
    public final void synpred69_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:176: ( grouping_expression_list )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:176: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred691604);
        grouping_expression_list();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred69

    // $ANTLR start synpred70
    public final void synpred70_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:3: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:3: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred701552); if (failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred701556);
        sql_expressions();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred701560); if (failed) return ;
        if ( (input.LA(1)>=EQ && input.LA(1)<=NOT_EQ) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred701562);    throw mse;
        }

        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:105: ( 'ANY' | keySOME | 'ALL' )
        int alt356=3;
        switch ( input.LA(1) ) {
        case 66:
            {
            alt356=1;
            }
            break;
        case 213:
            {
            alt356=2;
            }
            break;
        case 67:
            {
            alt356=3;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("2000:105: ( 'ANY' | keySOME | 'ALL' )", 356, 0, input);

            throw nvae;
        }

        switch (alt356) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:107: 'ANY'
                {
                match(input,66,FOLLOW_66_in_synpred701580); if (failed) return ;

                }
                break;
            case 2 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:120: keySOME
                {
                pushFollow(FOLLOW_keySOME_in_synpred701586);
                keySOME();
                _fsp--;
                if (failed) return ;

                }
                break;
            case 3 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:142: 'ALL'
                {
                match(input,67,FOLLOW_67_in_synpred701592); if (failed) return ;

                }
                break;

        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred701598); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:174: ( grouping_expression_list | select_command )
        int alt357=2;
        int LA357_0 = input.LA(1);

        if ( (LA357_0==LPAREN||LA357_0==NUMBER||(LA357_0>=QUOTED_STRING && LA357_0<=MINUS)||LA357_0==COLON||(LA357_0>=56 && LA357_0<=58)||LA357_0==69||LA357_0==110||LA357_0==121||LA357_0==153||LA357_0==158||LA357_0==233) ) {
            alt357=1;
        }
        else if ( (LA357_0==148) ) {
            int LA357_18 = input.LA(2);

            if ( (synpred69()) ) {
                alt357=1;
            }
            else if ( (true) ) {
                alt357=2;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("2000:174: ( grouping_expression_list | select_command )", 357, 18, input);

                throw nvae;
            }
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("2000:174: ( grouping_expression_list | select_command )", 357, 0, input);

            throw nvae;
        }
        switch (alt357) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:176: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred701604);
                grouping_expression_list();
                _fsp--;
                if (failed) return ;

                }
                break;
            case 2 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2000:232: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred701610);
                select_command();
                _fsp--;
                if (failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred701616); if (failed) return ;

        }
    }
    // $ANTLR end synpred70

    // $ANTLR start synpred78
    public final void synpred78_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:191: ( sql_expressions )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2120:191: sql_expressions
        {
        pushFollow(FOLLOW_sql_expressions_in_synpred781695);
        sql_expressions();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred78

    // $ANTLR start synpred80
    public final void synpred80_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:120: ( grouping_expression_list )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:120: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred801759);
        grouping_expression_list();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred80

    // $ANTLR start synpred81
    public final void synpred81_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:3: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:3: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred811728); if (failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred811732);
        sql_expressions();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred811736); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:73: ( 'NOT' )?
        int alt358=2;
        int LA358_0 = input.LA(1);

        if ( (LA358_0==62) ) {
            alt358=1;
        }
        switch (alt358) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:75: 'NOT'
                {
                match(input,62,FOLLOW_62_in_synpred811742); if (failed) return ;

                }
                break;

        }

        match(input,51,FOLLOW_51_in_synpred811749); if (failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred811753); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:118: ( grouping_expression_list | select_command )
        int alt359=2;
        int LA359_0 = input.LA(1);

        if ( (LA359_0==LPAREN||LA359_0==NUMBER||(LA359_0>=QUOTED_STRING && LA359_0<=MINUS)||LA359_0==COLON||(LA359_0>=56 && LA359_0<=58)||LA359_0==69||LA359_0==110||LA359_0==121||LA359_0==153||LA359_0==158||LA359_0==233) ) {
            alt359=1;
        }
        else if ( (LA359_0==148) ) {
            int LA359_18 = input.LA(2);

            if ( (synpred80()) ) {
                alt359=1;
            }
            else if ( (true) ) {
                alt359=2;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("2261:118: ( grouping_expression_list | select_command )", 359, 18, input);

                throw nvae;
            }
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("2261:118: ( grouping_expression_list | select_command )", 359, 0, input);

            throw nvae;
        }
        switch (alt359) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:120: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred811759);
                grouping_expression_list();
                _fsp--;
                if (failed) return ;

                }
                break;
            case 2 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2261:176: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred811765);
                select_command();
                _fsp--;
                if (failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred811771); if (failed) return ;

        }
    }
    // $ANTLR end synpred81

    // $ANTLR start synpred83
    public final void synpred83_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:83: ( expression_list )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2353:83: expression_list
        {
        pushFollow(FOLLOW_expression_list_in_synpred831805);
        expression_list();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred83

    // $ANTLR start synpred96
    public final void synpred96_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:179: ( keyESCAPE sql_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2770:179: keyESCAPE sql_expression
        {
        pushFollow(FOLLOW_keyESCAPE_in_synpred962141);
        keyESCAPE();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred962145);
        sql_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred96

    // $ANTLR start synpred100
    public final void synpred100_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:37: ( 'OR' condition_and )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:2976:37: 'OR' condition_and
        {
        match(input,73,FOLLOW_73_in_synpred1002258); if (failed) return ;
        pushFollow(FOLLOW_condition_and_in_synpred1002262);
        condition_and();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred100

    // $ANTLR start synpred203
    public final void synpred203_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:5: ( column_spec DOT ASTERISK )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5523:5: column_spec DOT ASTERISK
        {
        pushFollow(FOLLOW_column_spec_in_synpred2034065);
        column_spec();
        _fsp--;
        if (failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred2034069); if (failed) return ;
        match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred2034073); if (failed) return ;

        }
    }
    // $ANTLR end synpred203

    // $ANTLR start synpred209
    public final void synpred209_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5893:5: ( variable_names )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:5893:5: variable_names
        {
        pushFollow(FOLLOW_variable_names_in_synpred2094383);
        variable_names();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred209

    // $ANTLR start synpred227
    public final void synpred227_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:23: ( LPAREN nested_expression RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6395:23: LPAREN nested_expression RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred2274825); if (failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred2274829);
        nested_expression();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred2274833); if (failed) return ;

        }
    }
    // $ANTLR end synpred227

    // $ANTLR start synpred233
    public final void synpred233_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:37: ( COMMA group_by_expr )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6762:37: COMMA group_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred2335068); if (failed) return ;
        pushFollow(FOLLOW_group_by_expr_in_synpred2335072);
        group_by_expr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred233

    // $ANTLR start synpred235
    public final void synpred235_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:41: ( COMMA expression_list )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:6867:41: COMMA expression_list
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred2355146); if (failed) return ;
        pushFollow(FOLLOW_expression_list_in_synpred2355150);
        expression_list();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred235

    // $ANTLR start synpred249
    public final void synpred249_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:31: ( inner_cross_join_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:31: inner_cross_join_clause
        {
        pushFollow(FOLLOW_inner_cross_join_clause_in_synpred2495663);
        inner_cross_join_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred249

    // $ANTLR start synpred250
    public final void synpred250_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:85: ( outer_join_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:7579:85: outer_join_clause
        {
        pushFollow(FOLLOW_outer_join_clause_in_synpred2505669);
        outer_join_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred250

    // $ANTLR start synpred263
    public final void synpred263_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:19: ( numeric_loop_param )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:8023:19: numeric_loop_param
        {
        pushFollow(FOLLOW_numeric_loop_param_in_synpred2636029);
        numeric_loop_param();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred263

    // $ANTLR start synpred294
    public final void synpred294_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9139:3: ({...}? condition_or )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9139:3: {...}? condition_or
        {
        if ( !(  isSql ) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred294", "  isSql ");
        }
        pushFollow(FOLLOW_condition_or_in_synpred2946821);
        condition_or();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred294

    // $ANTLR start synpred299
    public final void synpred299_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:5: ( 'ASC' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:5: 'ASC'
        {
        match(input,142,FOLLOW_142_in_synpred2997090); if (failed) return ;

        }
    }
    // $ANTLR end synpred299

    // $ANTLR start synpred300
    public final void synpred300_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:18: ( 'DESC' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:18: 'DESC'
        {
        match(input,143,FOLLOW_143_in_synpred3007096); if (failed) return ;

        }
    }
    // $ANTLR end synpred300

    // $ANTLR start synpred301
    public final void synpred301_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:35: ( keyNULLS keyFIRST )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:35: keyNULLS keyFIRST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred3017105);
        keyNULLS();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_keyFIRST_in_synpred3017109);
        keyFIRST();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred301

    // $ANTLR start synpred302
    public final void synpred302_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:81: ( keyNULLS keyLAST )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9478:81: keyNULLS keyLAST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred3027115);
        keyNULLS();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_keyLAST_in_synpred3027119);
        keyLAST();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred302

    // $ANTLR start synpred303
    public final void synpred303_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:37: ( COMMA order_by_expr )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9557:37: COMMA order_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred3037149); if (failed) return ;
        pushFollow(FOLLOW_order_by_expr_in_synpred3037153);
        order_by_expr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred303

    // $ANTLR start synpred307
    public final void synpred307_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9607:31: ( query_partition_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9607:31: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred3077231);
        query_partition_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred307

    // $ANTLR start synpred308
    public final void synpred308_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:5: ( 'ON' sql_condition )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:5: 'ON' sql_condition
        {
        match(input,128,FOLLOW_128_in_synpred3087242); if (failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred3087246);
        sql_condition();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred308

    // $ANTLR start synpred309
    public final void synpred309_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:49: ( keyUSING LPAREN column_specs RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:9608:49: keyUSING LPAREN column_specs RPAREN
        {
        pushFollow(FOLLOW_keyUSING_in_synpred3097252);
        keyUSING();
        _fsp--;
        if (failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred3097256); if (failed) return ;
        pushFollow(FOLLOW_column_specs_in_synpred3097260);
        column_specs();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred3097264); if (failed) return ;

        }
    }
    // $ANTLR end synpred309

    // $ANTLR start synpred388
    public final void synpred388_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:19: ( 'DISTINCT' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12455:19: 'DISTINCT'
        {
        match(input,121,FOLLOW_121_in_synpred3889394); if (failed) return ;

        }
    }
    // $ANTLR end synpred388

    // $ANTLR start synpred393
    public final void synpred393_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:17: ( table_reference_list )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:17: table_reference_list
        {
        pushFollow(FOLLOW_table_reference_list_in_synpred3939455);
        table_reference_list();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred393

    // $ANTLR start synpred394
    public final void synpred394_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:65: ( join_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12458:65: join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred3949461);
        join_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred394

    // $ANTLR start synpred395
    public final void synpred395_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:5: ( where_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:5: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred3959485);
        where_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred395

    // $ANTLR start synpred396
    public final void synpred396_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:40: ( hierarchical_query_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:40: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred3969494);
        hierarchical_query_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred396

    // $ANTLR start synpred397
    public final void synpred397_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:101: ( group_by_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12459:101: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred3979503);
        group_by_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred397

    // $ANTLR start synpred398
    public final void synpred398_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:5: ( 'HAVING' sql_condition )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:5: 'HAVING' sql_condition
        {
        match(input,149,FOLLOW_149_in_synpred3989514); if (failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred3989518);
        sql_condition();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred398

    // $ANTLR start synpred399
    public final void synpred399_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:56: ( model_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12460:56: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred3999527);
        model_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred399

    // $ANTLR start synpred404
    public final void synpred404_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:5: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
        {
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
        int alt437=3;
        switch ( input.LA(1) ) {
        case 150:
            {
            alt437=1;
            }
            break;
        case 151:
            {
            alt437=2;
            }
            break;
        case 152:
            {
            alt437=3;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("12461:5: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )", 437, 0, input);

            throw nvae;
        }

        switch (alt437) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:7: 'UNION' ( 'ALL' )?
                {
                match(input,150,FOLLOW_150_in_synpred4049540); if (failed) return ;
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:20: ( 'ALL' )?
                int alt436=2;
                int LA436_0 = input.LA(1);

                if ( (LA436_0==67) ) {
                    alt436=1;
                }
                switch (alt436) {
                    case 1 :
                        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12461:22: 'ALL'
                        {
                        match(input,67,FOLLOW_67_in_synpred4049546); if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12462:6: 'INTERSECT'
                {
                match(input,151,FOLLOW_151_in_synpred4049558); if (failed) return ;

                }
                break;
            case 3 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12463:6: 'MINUS'
                {
                match(input,152,FOLLOW_152_in_synpred4049567); if (failed) return ;

                }
                break;

        }

        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12465:4: ( select_expression | subquery )
        int alt438=2;
        int LA438_0 = input.LA(1);

        if ( (LA438_0==148) ) {
            alt438=1;
        }
        else if ( (LA438_0==LPAREN) ) {
            alt438=2;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("12465:4: ( select_expression | subquery )", 438, 0, input);

            throw nvae;
        }
        switch (alt438) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12465:6: select_expression
                {
                pushFollow(FOLLOW_select_expression_in_synpred4049581);
                select_expression();
                _fsp--;
                if (failed) return ;

                }
                break;
            case 2 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12466:6: subquery
                {
                pushFollow(FOLLOW_subquery_in_synpred4049591);
                subquery();
                _fsp--;
                if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred404

    // $ANTLR start synpred405
    public final void synpred405_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12469:5: ( order_by_clause )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12469:5: order_by_clause
        {
        pushFollow(FOLLOW_order_by_clause_in_synpred4059609);
        order_by_clause();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred405

    // $ANTLR start synpred411
    public final void synpred411_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:97: ( alias )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:12832:97: alias
        {
        pushFollow(FOLLOW_alias_in_synpred4119733);
        alias();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred411

    // $ANTLR start synpred434
    public final void synpred434_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13809:3: ( assignment_statement )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13809:3: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred43410425);
        assignment_statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred434

    // $ANTLR start synpred437
    public final void synpred437_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13863:4: ( case_statement )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13863:4: case_statement
        {
        pushFollow(FOLLOW_case_statement_in_synpred43710458);
        case_statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred437

    // $ANTLR start synpred439
    public final void synpred439_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13899:4: ( loop_statement )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13899:4: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred43910481);
        loop_statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred439

    // $ANTLR start synpred444
    public final void synpred444_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13989:4: ( plsql_block )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:13989:4: plsql_block
        {
        pushFollow(FOLLOW_plsql_block_in_synpred44410537);
        plsql_block();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred444

    // $ANTLR start synpred445
    public final void synpred445_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:39: ( COMMA selected_table )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:14050:39: COMMA selected_table
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred44510597); if (failed) return ;
        pushFollow(FOLLOW_selected_table_in_synpred44510601);
        selected_table();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred445

    // $ANTLR start synpred476
    public final void synpred476_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:39: ( DOT sql_identifier )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15144:39: DOT sql_identifier
        {
        match(input,DOT,FOLLOW_DOT_in_synpred47611386); if (failed) return ;
        pushFollow(FOLLOW_sql_identifier_in_synpred47611390);
        sql_identifier();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred476

    // $ANTLR start synpred487
    public final void synpred487_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15582:3: ( LPAREN sql_expressions RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15582:3: LPAREN sql_expressions RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred48711713); if (failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred48711717);
        sql_expressions();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred48711721); if (failed) return ;

        }
    }
    // $ANTLR end synpred487

    // $ANTLR start synpred489
    public final void synpred489_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:39: ( COMMA sql_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15707:39: COMMA sql_expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred48911821); if (failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred48911825);
        sql_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred489

    // $ANTLR start synpred491
    public final void synpred491_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15821:3: ({...}? sql_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15821:3: {...}? sql_expression
        {
        if ( !(  isSql ) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred491", "  isSql ");
        }
        pushFollow(FOLLOW_sql_expression_in_synpred49111915);
        sql_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred491

    // $ANTLR start synpred492
    public final void synpred492_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:25: ( 'OR' expr_or )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15860:25: 'OR' expr_or
        {
        match(input,73,FOLLOW_73_in_synpred49211956); if (failed) return ;
        pushFollow(FOLLOW_expr_or_in_synpred49211960);
        expr_or();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred492

    // $ANTLR start synpred493
    public final void synpred493_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:27: ( 'AND' expr_and )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15905:27: 'AND' expr_and
        {
        match(input,61,FOLLOW_61_in_synpred49311991); if (failed) return ;
        pushFollow(FOLLOW_expr_and_in_synpred49311995);
        expr_and();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred493

    // $ANTLR start synpred495
    public final void synpred495_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15981:5: ( relational_op expr_add )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15981:5: relational_op expr_add
        {
        pushFollow(FOLLOW_relational_op_in_synpred49512060);
        relational_op();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred49512064);
        expr_add();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred495

    // $ANTLR start synpred496
    public final void synpred496_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:5: ( FOUND_ATTR )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:5: FOUND_ATTR
        {
        match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_synpred49612072); if (failed) return ;

        }
    }
    // $ANTLR end synpred496

    // $ANTLR start synpred497
    public final void synpred497_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:38: ( NOTFOUND_ATTR )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:38: NOTFOUND_ATTR
        {
        match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_synpred49712078); if (failed) return ;

        }
    }
    // $ANTLR end synpred497

    // $ANTLR start synpred498
    public final void synpred498_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:77: ( ISOPEN_ATTR )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:77: ISOPEN_ATTR
        {
        match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_synpred49812084); if (failed) return ;

        }
    }
    // $ANTLR end synpred498

    // $ANTLR start synpred499
    public final void synpred499_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:112: ( ROWCOUNT_ATTR )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:112: ROWCOUNT_ATTR
        {
        match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_synpred49912090); if (failed) return ;

        }
    }
    // $ANTLR end synpred499

    // $ANTLR start synpred500
    public final void synpred500_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:151: ( BULK_ROWCOUNT_ATTR )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15982:151: BULK_ROWCOUNT_ATTR
        {
        match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred50012096); if (failed) return ;

        }
    }
    // $ANTLR end synpred500

    // $ANTLR start synpred502
    public final void synpred502_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:5: ( 'IS' ( 'NOT' )? 'NULL' )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:5: 'IS' ( 'NOT' )? 'NULL'
        {
        match(input,68,FOLLOW_68_in_synpred50212104); if (failed) return ;
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:15: ( 'NOT' )?
        int alt444=2;
        int LA444_0 = input.LA(1);

        if ( (LA444_0==62) ) {
            alt444=1;
        }
        switch (alt444) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15983:17: 'NOT'
                {
                match(input,62,FOLLOW_62_in_synpred50212110); if (failed) return ;

                }
                break;

        }

        match(input,69,FOLLOW_69_in_synpred50212117); if (failed) return ;

        }
    }
    // $ANTLR end synpred502

    // $ANTLR start synpred504
    public final void synpred504_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:5: ( ( 'NOT' )? 'LIKE' expr_add )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:5: ( 'NOT' )? 'LIKE' expr_add
        {
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:5: ( 'NOT' )?
        int alt445=2;
        int LA445_0 = input.LA(1);

        if ( (LA445_0==62) ) {
            alt445=1;
        }
        switch (alt445) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15984:7: 'NOT'
                {
                match(input,62,FOLLOW_62_in_synpred50412127); if (failed) return ;

                }
                break;

        }

        match(input,72,FOLLOW_72_in_synpred50412134); if (failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred50412138);
        expr_add();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred504

    // $ANTLR start synpred506
    public final void synpred506_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:5: ( ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:5: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
        {
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:5: ( 'NOT' )?
        int alt446=2;
        int LA446_0 = input.LA(1);

        if ( (LA446_0==62) ) {
            alt446=1;
        }
        switch (alt446) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15985:7: 'NOT'
                {
                match(input,62,FOLLOW_62_in_synpred50612148); if (failed) return ;

                }
                break;

        }

        match(input,63,FOLLOW_63_in_synpred50612155); if (failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred50612159);
        expr_add();
        _fsp--;
        if (failed) return ;
        match(input,61,FOLLOW_61_in_synpred50612163); if (failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred50612167);
        expr_add();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred506

    // $ANTLR start synpred508
    public final void synpred508_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:5: ( ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:5: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
        {
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:5: ( 'NOT' )?
        int alt447=2;
        int LA447_0 = input.LA(1);

        if ( (LA447_0==62) ) {
            alt447=1;
        }
        switch (alt447) {
            case 1 :
                // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:15986:7: 'NOT'
                {
                match(input,62,FOLLOW_62_in_synpred50812177); if (failed) return ;

                }
                break;

        }

        match(input,51,FOLLOW_51_in_synpred50812184); if (failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred50812188); if (failed) return ;
        pushFollow(FOLLOW_nested_expressions_in_synpred50812192);
        nested_expressions();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred50812196); if (failed) return ;

        }
    }
    // $ANTLR end synpred508

    // $ANTLR start synpred516
    public final void synpred516_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:27: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16379:27: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS)||input.LA(1)==DOUBLEVERTBAR ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred51612299);    throw mse;
        }

        pushFollow(FOLLOW_expr_mul_in_synpred51612321);
        expr_mul();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred516

    // $ANTLR start synpred518
    public final void synpred518_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:29: ( ( ASTERISK | DIVIDE ) expr_sign )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16442:29: ( ASTERISK | DIVIDE ) expr_sign
        {
        if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred51812350);    throw mse;
        }

        pushFollow(FOLLOW_expr_sign_in_synpred51812366);
        expr_sign();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred518

    // $ANTLR start synpred521
    public final void synpred521_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:29: ( EXPONENT expr_expr )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16574:29: EXPONENT expr_expr
        {
        match(input,EXPONENT,FOLLOW_EXPONENT_in_synpred52112463); if (failed) return ;
        pushFollow(FOLLOW_expr_expr_in_synpred52112467);
        expr_expr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred521

    // $ANTLR start synpred523
    public final void synpred523_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16638:4: ( function_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16638:4: function_expression
        {
        pushFollow(FOLLOW_function_expression_in_synpred52312503);
        function_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred523

    // $ANTLR start synpred526
    public final void synpred526_fragment() throws RecognitionException {   
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16693:4: ( simple_expression )
        // /home/jlcanovas/workspace/Grammar2Model.examples.PLSQL2ASTMModel/ASTMextraction/gen/PLSQL3.ge3:16693:4: simple_expression
        {
        pushFollow(FOLLOW_simple_expression_in_synpred52612537);
        simple_expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred526

    public final boolean synpred491() {
        backtracking++;
        int start = input.mark();
        try {
            synpred491_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred393() {
        backtracking++;
        int start = input.mark();
        try {
            synpred393_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred299() {
        backtracking++;
        int start = input.mark();
        try {
            synpred299_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred394() {
        backtracking++;
        int start = input.mark();
        try {
            synpred394_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred80() {
        backtracking++;
        int start = input.mark();
        try {
            synpred80_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred395() {
        backtracking++;
        int start = input.mark();
        try {
            synpred395_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred46() {
        backtracking++;
        int start = input.mark();
        try {
            synpred46_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred81() {
        backtracking++;
        int start = input.mark();
        try {
            synpred81_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred396() {
        backtracking++;
        int start = input.mark();
        try {
            synpred396_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred495() {
        backtracking++;
        int start = input.mark();
        try {
            synpred495_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred404() {
        backtracking++;
        int start = input.mark();
        try {
            synpred404_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred83() {
        backtracking++;
        int start = input.mark();
        try {
            synpred83_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred47() {
        backtracking++;
        int start = input.mark();
        try {
            synpred47_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred493() {
        backtracking++;
        int start = input.mark();
        try {
            synpred493_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred492() {
        backtracking++;
        int start = input.mark();
        try {
            synpred492_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred499() {
        backtracking++;
        int start = input.mark();
        try {
            synpred499_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred498() {
        backtracking++;
        int start = input.mark();
        try {
            synpred498_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred303() {
        backtracking++;
        int start = input.mark();
        try {
            synpred303_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred497() {
        backtracking++;
        int start = input.mark();
        try {
            synpred497_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred302() {
        backtracking++;
        int start = input.mark();
        try {
            synpred302_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred496() {
        backtracking++;
        int start = input.mark();
        try {
            synpred496_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred508() {
        backtracking++;
        int start = input.mark();
        try {
            synpred508_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred301() {
        backtracking++;
        int start = input.mark();
        try {
            synpred301_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred294() {
        backtracking++;
        int start = input.mark();
        try {
            synpred294_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred397() {
        backtracking++;
        int start = input.mark();
        try {
            synpred397_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred300() {
        backtracking++;
        int start = input.mark();
        try {
            synpred300_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred506() {
        backtracking++;
        int start = input.mark();
        try {
            synpred506_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred398() {
        backtracking++;
        int start = input.mark();
        try {
            synpred398_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred399() {
        backtracking++;
        int start = input.mark();
        try {
            synpred399_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred504() {
        backtracking++;
        int start = input.mark();
        try {
            synpred504_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred502() {
        backtracking++;
        int start = input.mark();
        try {
            synpred502_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred500() {
        backtracking++;
        int start = input.mark();
        try {
            synpred500_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred308() {
        backtracking++;
        int start = input.mark();
        try {
            synpred308_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred309() {
        backtracking++;
        int start = input.mark();
        try {
            synpred309_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred307() {
        backtracking++;
        int start = input.mark();
        try {
            synpred307_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred250() {
        backtracking++;
        int start = input.mark();
        try {
            synpred250_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred405() {
        backtracking++;
        int start = input.mark();
        try {
            synpred405_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred70() {
        backtracking++;
        int start = input.mark();
        try {
            synpred70_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred32() {
        backtracking++;
        int start = input.mark();
        try {
            synpred32_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred37() {
        backtracking++;
        int start = input.mark();
        try {
            synpred37_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred36() {
        backtracking++;
        int start = input.mark();
        try {
            synpred36_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred78() {
        backtracking++;
        int start = input.mark();
        try {
            synpred78_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred227() {
        backtracking++;
        int start = input.mark();
        try {
            synpred227_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred263() {
        backtracking++;
        int start = input.mark();
        try {
            synpred263_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred69() {
        backtracking++;
        int start = input.mark();
        try {
            synpred69_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred437() {
        backtracking++;
        int start = input.mark();
        try {
            synpred437_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred526() {
        backtracking++;
        int start = input.mark();
        try {
            synpred526_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred434() {
        backtracking++;
        int start = input.mark();
        try {
            synpred434_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred61() {
        backtracking++;
        int start = input.mark();
        try {
            synpred61_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred100() {
        backtracking++;
        int start = input.mark();
        try {
            synpred100_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred63() {
        backtracking++;
        int start = input.mark();
        try {
            synpred63_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred476() {
        backtracking++;
        int start = input.mark();
        try {
            synpred476_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred60() {
        backtracking++;
        int start = input.mark();
        try {
            synpred60_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred521() {
        backtracking++;
        int start = input.mark();
        try {
            synpred521_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred235() {
        backtracking++;
        int start = input.mark();
        try {
            synpred235_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred23() {
        backtracking++;
        int start = input.mark();
        try {
            synpred23_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred24() {
        backtracking++;
        int start = input.mark();
        try {
            synpred24_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred523() {
        backtracking++;
        int start = input.mark();
        try {
            synpred523_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred233() {
        backtracking++;
        int start = input.mark();
        try {
            synpred233_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred439() {
        backtracking++;
        int start = input.mark();
        try {
            synpred439_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred445() {
        backtracking++;
        int start = input.mark();
        try {
            synpred445_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred96() {
        backtracking++;
        int start = input.mark();
        try {
            synpred96_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred516() {
        backtracking++;
        int start = input.mark();
        try {
            synpred516_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred59() {
        backtracking++;
        int start = input.mark();
        try {
            synpred59_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred518() {
        backtracking++;
        int start = input.mark();
        try {
            synpred518_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred58() {
        backtracking++;
        int start = input.mark();
        try {
            synpred58_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred57() {
        backtracking++;
        int start = input.mark();
        try {
            synpred57_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred56() {
        backtracking++;
        int start = input.mark();
        try {
            synpred56_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred411() {
        backtracking++;
        int start = input.mark();
        try {
            synpred411_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred55() {
        backtracking++;
        int start = input.mark();
        try {
            synpred55_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred54() {
        backtracking++;
        int start = input.mark();
        try {
            synpred54_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred444() {
        backtracking++;
        int start = input.mark();
        try {
            synpred444_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred53() {
        backtracking++;
        int start = input.mark();
        try {
            synpred53_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred489() {
        backtracking++;
        int start = input.mark();
        try {
            synpred489_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred52() {
        backtracking++;
        int start = input.mark();
        try {
            synpred52_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred51() {
        backtracking++;
        int start = input.mark();
        try {
            synpred51_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred50() {
        backtracking++;
        int start = input.mark();
        try {
            synpred50_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred209() {
        backtracking++;
        int start = input.mark();
        try {
            synpred209_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred487() {
        backtracking++;
        int start = input.mark();
        try {
            synpred487_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred203() {
        backtracking++;
        int start = input.mark();
        try {
            synpred203_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred388() {
        backtracking++;
        int start = input.mark();
        try {
            synpred388_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred249() {
        backtracking++;
        int start = input.mark();
        try {
            synpred249_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA119 dfa119 = new DFA119(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA313 dfa313 = new DFA313(this);
    static final String DFA119_eotS =
        "\33\uffff";
    static final String DFA119_eofS =
        "\33\uffff";
    static final String DFA119_minS =
        "\1\27\2\13\2\uffff\1\27\1\111\5\uffff\2\6\1\uffff\1\u00fb\1\27\1"+
        "\6\1\170\2\6\3\uffff\1\27\2\6";
    static final String DFA119_maxS =
        "\1\u0104\2\u00d8\2\uffff\1\u00d8\1\u0090\5\uffff\2\104\1\uffff\1"+
        "\u00fb\1\156\1\u0107\1\u0090\2\104\3\uffff\1\156\2\104";
    static final String DFA119_acceptS =
        "\3\uffff\1\2\1\3\2\uffff\1\10\1\11\1\13\1\4\1\1\2\uffff\1\12\6\uffff"+
        "\1\6\1\5\1\7\3\uffff";
    static final String DFA119_specialS =
        "\33\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\1\1\2\61\uffff\1\6\55\uffff\1\10\27\uffff\1\7\130\uffff\1"+
            "\4\13\uffff\1\11\14\uffff\1\3\1\uffff\1\5",
            "\1\12\13\uffff\2\13\35\uffff\1\12\24\uffff\15\13\2\uffff\26"+
            "\13\53\uffff\1\13\25\uffff\1\13\45\uffff\2\13",
            "\1\12\13\uffff\2\13\35\uffff\1\12\24\uffff\15\13\2\uffff\26"+
            "\13\53\uffff\1\13\25\uffff\1\13\45\uffff\2\13",
            "",
            "",
            "\1\14\1\15\62\uffff\15\16\2\uffff\26\16\101\uffff\1\16\45\uffff"+
            "\2\16",
            "\1\17\56\uffff\1\10\27\uffff\1\7",
            "",
            "",
            "",
            "",
            "",
            "\1\16\4\uffff\1\20\30\uffff\3\16\35\uffff\1\21",
            "\1\16\4\uffff\1\20\30\uffff\3\16\35\uffff\1\21",
            "",
            "\1\22",
            "\1\23\1\24\125\uffff\1\16",
            "\1\16\20\uffff\2\16\62\uffff\15\16\2\uffff\26\16\31\uffff\1"+
            "\25\47\uffff\1\16\45\uffff\2\16\27\uffff\1\16\10\uffff\1\26"+
            "\14\uffff\2\27",
            "\1\10\27\uffff\1\7",
            "\1\16\4\uffff\1\30\30\uffff\3\16\35\uffff\1\21",
            "\1\16\4\uffff\1\30\30\uffff\3\16\35\uffff\1\21",
            "",
            "",
            "",
            "\1\31\1\32\125\uffff\1\16",
            "\1\16\4\uffff\1\30\31\uffff\1\16\36\uffff\1\21",
            "\1\16\4\uffff\1\30\31\uffff\1\16\36\uffff\1\21"
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "5227:1: declare_spec returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_declarationGen+= procedure_declaration | function_declarationGen+= function_declaration | type_declarationGen+= type_declaration | pragma_declarationGen+= pragma_declaration );";
        }
    }
    static final String DFA226_eotS =
        "\u0189\uffff";
    static final String DFA226_eofS =
        "\u0189\uffff";
    static final String DFA226_minS =
        "\1\27\2\13\1\uffff\2\27\5\uffff\2\13\2\6\1\27\1\u0089\1\27\2\uffff"+
        "\2\13\3\uffff\20\5\1\u00a2\7\5\1\u00c7\7\5\1\140\12\5\1\27\1\104"+
        "\1\23\1\5\2\23\2\6\1\23\1\u00ba\1\23\2\5\1\23\1\106\1\23\1\106\1"+
        "\23\1\106\1\5\1\23\1\5\3\23\2\5\1\106\1\27\1\5\1\27\1\5\1\23\1\27"+
        "\1\23\3\5\2\7\1\23\1\u00bf\1\23\1\u00ce\1\7\1\u00d7\1\u00e0\2\7"+
        "\1\27\1\7\1\27\1\7\1\27\4\7\1\5\1\23\1\27\3\13\3\46\1\7\2\5\1\7"+
        "\16\5\1\u00a2\7\5\1\u00c7\7\5\1\140\12\5\1\23\3\5\1\7\1\5\1\7\4"+
        "\5\2\7\3\5\1\13\2\7\3\5\1\13\2\7\3\5\1\13\4\5\1\7\2\5\1\13\1\27"+
        "\1\5\1\27\1\5\1\23\1\5\2\23\2\6\1\23\1\u00ba\1\23\2\5\1\23\1\106"+
        "\1\23\1\106\1\23\1\106\1\5\1\23\1\5\3\23\2\5\1\106\1\27\1\5\1\27"+
        "\1\5\1\23\1\27\1\23\1\7\2\130\1\23\1\27\1\5\1\27\1\5\1\27\2\5\1"+
        "\27\1\5\3\13\3\5\2\7\1\23\1\u00ce\1\23\1\u00bf\1\7\1\u00d7\1\u00e0"+
        "\2\7\1\27\1\7\1\27\1\7\1\27\4\7\1\5\1\23\1\27\3\13\3\46\1\7\2\5"+
        "\2\7\14\13\1\23\3\5\1\7\1\5\1\7\4\5\2\7\3\5\1\13\2\7\3\5\1\13\2"+
        "\7\3\5\1\13\4\5\1\7\2\5\1\13\1\27\1\5\1\27\2\5\1\7\1\130\1\23\1"+
        "\130\1\27\1\5\1\27\1\5\1\27\2\5\1\27\1\5\3\13\2\5\1\7\14\13\1\5";
    static final String DFA226_maxS =
        "\1\u0104\2\u00d8\1\uffff\2\30\5\uffff\2\104\2\u00fd\1\30\1\u0107"+
        "\1\30\2\uffff\2\104\3\uffff\3\u00d8\11\7\1\125\3\7\1\u00df\2\131"+
        "\5\7\1\u00c7\1\u0107\2\141\2\u0107\2\7\1\141\3\7\1\141\2\7\1\46"+
        "\1\7\2\46\1\30\1\u00fd\1\23\1\7\2\23\2\130\1\23\1\u00d7\1\23\1\7"+
        "\1\141\1\23\1\106\1\23\1\106\1\23\1\106\1\7\1\23\1\7\3\23\2\u0107"+
        "\1\106\1\156\1\7\1\156\1\7\1\23\1\156\1\23\2\u00d8\3\7\1\23\1\u00bf"+
        "\1\23\1\u00ce\1\7\1\u00d7\1\u00e0\1\7\1\u00e6\1\156\1\u00e6\1\156"+
        "\1\u00e6\1\156\5\7\1\23\1\156\6\46\1\7\2\46\1\7\1\u00d8\11\7\1\125"+
        "\3\7\1\u00df\2\131\5\7\1\u00c7\1\u0107\2\141\2\u0107\2\7\1\141\3"+
        "\7\1\141\2\7\1\46\1\7\2\46\1\23\7\7\1\131\4\7\1\141\3\24\2\7\1\141"+
        "\3\24\2\7\1\141\3\24\5\7\3\24\1\156\1\7\1\156\1\7\1\23\1\7\2\23"+
        "\2\130\1\23\1\u00d7\1\23\1\7\1\141\1\23\1\106\1\23\1\106\1\23\1"+
        "\106\1\7\1\23\1\7\3\23\2\u0107\1\106\1\156\1\7\1\156\1\7\1\23\1"+
        "\156\1\23\1\7\2\130\1\23\1\156\1\7\1\156\1\7\1\156\2\7\1\156\1\7"+
        "\5\45\3\7\1\23\1\u00ce\1\23\1\u00bf\1\7\1\u00d7\1\u00e0\1\7\1\u00e6"+
        "\1\156\1\u00e6\1\156\1\u00e6\1\156\5\7\1\23\1\156\6\46\1\7\2\46"+
        "\2\7\14\24\1\23\7\7\1\131\4\7\1\141\3\24\2\7\1\141\3\24\2\7\1\141"+
        "\3\24\5\7\3\24\1\156\1\7\1\156\3\7\1\130\1\23\1\130\1\156\1\7\1"+
        "\156\1\7\1\156\2\7\1\156\1\7\5\45\1\7\14\24\1\7";
    static final String DFA226_acceptS =
        "\3\uffff\1\2\2\uffff\1\10\1\11\1\13\1\12\1\1\7\uffff\1\6\1\7\2\uffff"+
        "\1\4\1\3\1\5\u0170\uffff";
    static final String DFA226_specialS =
        "\u0189\uffff}>";
    static final String[] DFA226_transitionS = {
            "\1\1\1\2\137\uffff\1\7\27\uffff\1\6\130\uffff\1\5\13\uffff\1"+
            "\10\14\uffff\1\3\1\uffff\1\4",
            "\1\11\13\uffff\2\12\35\uffff\1\11\24\uffff\15\12\2\uffff\26"+
            "\12\53\uffff\1\12\25\uffff\1\12\45\uffff\2\12",
            "\1\11\13\uffff\2\12\35\uffff\1\11\24\uffff\15\12\2\uffff\26"+
            "\12\53\uffff\1\12\25\uffff\1\12\45\uffff\2\12",
            "",
            "\1\13\1\14",
            "\1\15\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\17\70\uffff\1\20",
            "\1\17\70\uffff\1\20",
            "\1\21\75\uffff\1\22\u00b8\uffff\1\23",
            "\1\21\75\uffff\1\22\u00b8\uffff\1\23",
            "\1\24\1\25",
            "\1\26\157\uffff\1\27\14\uffff\2\30",
            "\1\31\1\32",
            "",
            "",
            "\1\17\70\uffff\1\20",
            "\1\17\70\uffff\1\20",
            "",
            "",
            "",
            "\1\104\1\uffff\1\105\17\uffff\1\102\1\103\32\uffff\1\33\27\uffff"+
            "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50\2\uffff\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\65\1\63\1"+
            "\64\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
            "\1\101\101\uffff\1\51\45\uffff\1\52\1\53",
            "\1\104\1\uffff\1\105\17\uffff\1\102\1\103\32\uffff\1\33\27\uffff"+
            "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50\2\uffff\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\65\1\63\1"+
            "\64\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
            "\1\101\101\uffff\1\51\45\uffff\1\52\1\53",
            "\1\104\1\uffff\1\105\17\uffff\1\102\1\103\62\uffff\1\34\1\35"+
            "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\2\uffff"+
            "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\65\1\63\1\64\1\66\1\67"+
            "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\101\uffff"+
            "\1\51\45\uffff\1\52\1\53",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\106\1\105",
            "\1\104\1\106\1\105",
            "\1\104\1\106\1\105",
            "\1\104\1\106\1\105",
            "\1\104\1\110\1\105\115\uffff\1\107",
            "\1\104\1\111\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\113\74\uffff\1\112",
            "\1\104\1\114\1\105\121\uffff\1\115",
            "\1\104\1\114\1\105\121\uffff\1\115",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\116\1\105",
            "\1\104\1\uffff\1\105",
            "\1\117",
            "\1\104\1\121\1\105\131\uffff\1\122\u00a5\uffff\1\120",
            "\1\104\1\123\1\105\131\uffff\1\124",
            "\1\104\1\125\1\105\131\uffff\1\126",
            "\1\104\1\130\1\105\u00ff\uffff\1\127",
            "\1\104\1\132\1\105\u00ff\uffff\1\131",
            "\1\104\1\133\1\105",
            "\1\104\1\134\1\105",
            "\1\136\1\135",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105\131\uffff\1\137",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105\3\uffff\1\140\30\uffff\1\142\1\141\1\143",
            "\1\104\1\144\1\105",
            "\1\104\1\146\1\105\3\uffff\1\145\30\uffff\1\142\1\141\1\143",
            "\1\104\1\146\1\105\3\uffff\1\145\30\uffff\1\142\1\141\1\143",
            "\1\147\1\150",
            "\1\22\u00b8\uffff\1\23",
            "\1\151",
            "\1\104\1\110\1\105",
            "\1\152",
            "\1\153",
            "\1\154\121\uffff\1\155",
            "\1\156\121\uffff\1\157",
            "\1\160",
            "\1\161\34\uffff\1\162",
            "\1\163",
            "\1\104\1\uffff\1\105",
            "\1\104\1\121\1\105\131\uffff\1\122",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\104\1\130\1\105",
            "\1\172",
            "\1\104\1\132\1\105",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\104\1\177\1\105\u00ff\uffff\1\176",
            "\1\104\1\177\1\105\u00ff\uffff\1\176",
            "\1\u0080",
            "\1\u0081\1\u0082\125\uffff\1\u0083",
            "\1\104\1\uffff\1\105",
            "\1\u0084\1\u0085\125\uffff\1\u0086",
            "\1\104\1\uffff\1\105",
            "\1\u0087",
            "\1\u0088\1\u0089\125\uffff\1\u0083",
            "\1\u008a",
            "\1\104\1\uffff\1\105\17\uffff\1\u00b2\1\u00b3\32\uffff\1\u008b"+
            "\27\uffff\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1"+
            "\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\2\uffff"+
            "\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a5"+
            "\1\u00a3\1\u00a4\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\101\uffff\1"+
            "\u0099\45\uffff\1\u009a\1\u009b",
            "\1\104\1\uffff\1\105\17\uffff\1\u00b2\1\u00b3\32\uffff\1\u008b"+
            "\27\uffff\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1"+
            "\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\2\uffff"+
            "\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a5"+
            "\1\u00a3\1\u00a4\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\101\uffff\1"+
            "\u0099\45\uffff\1\u009a\1\u009b",
            "\1\u00b4\1\uffff\1\u00b5",
            "\1\u00b6",
            "\1\u00b7",
            "\1\u00b8",
            "\1\u00b9",
            "\1\u00ba",
            "\1\u00bb",
            "\1\u00bc",
            "\1\162",
            "\1\u00bd",
            "\1\u00be",
            "\1\u00c1\130\uffff\1\u00c0\u0085\uffff\1\u00bf",
            "\1\u00c2\1\u00c3\125\uffff\1\u00c4",
            "\1\u00c7\130\uffff\1\u00c6\u0085\uffff\1\u00c5",
            "\1\u00c8\1\u00c9\125\uffff\1\u00ca",
            "\1\u00cd\130\uffff\1\u00cc\u0085\uffff\1\u00cb",
            "\1\u00ce\1\u00cf\125\uffff\1\u00d0",
            "\1\u00d1",
            "\1\u00d2",
            "\1\u00d3",
            "\1\u00d4",
            "\1\104\1\177\1\105",
            "\1\u00d5",
            "\1\u00d6\1\u00d7\125\uffff\1\u00d8",
            "\1\u00d9\30\uffff\1\142\1\141\1\143",
            "\1\u00d9\30\uffff\1\142\1\141\1\143",
            "\1\u00d9\30\uffff\1\142\1\141\1\143",
            "\1\143",
            "\1\143",
            "\1\143",
            "\1\u00da",
            "\1\104\1\146\1\105\3\uffff\1\u00db\30\uffff\1\142\1\141\1\143",
            "\1\104\1\146\1\105\3\uffff\1\u00db\30\uffff\1\142\1\141\1\143",
            "\1\u00dc",
            "\1\104\1\uffff\1\105\17\uffff\1\u00b2\1\u00b3\62\uffff\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094"+
            "\1\u0095\1\u0096\1\u0097\1\u0098\2\uffff\1\u009c\1\u009d\1\u009e"+
            "\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a5\1\u00a3\1\u00a4\1\u00a6"+
            "\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae"+
            "\1\u00af\1\u00b0\1\u00b1\101\uffff\1\u0099\45\uffff\1\u009a"+
            "\1\u009b",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\u00dd\1\105",
            "\1\104\1\u00dd\1\105",
            "\1\104\1\u00dd\1\105",
            "\1\104\1\u00dd\1\105",
            "\1\104\1\u00df\1\105\115\uffff\1\u00de",
            "\1\104\1\u00e0\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u00e1\74\uffff\1\u00e2",
            "\1\104\1\u00e3\1\105\121\uffff\1\u00e4",
            "\1\104\1\u00e3\1\105\121\uffff\1\u00e4",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\u00e5\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u00e6",
            "\1\104\1\u00e8\1\105\131\uffff\1\u00e9\u00a5\uffff\1\u00e7",
            "\1\104\1\u00ea\1\105\131\uffff\1\u00eb",
            "\1\104\1\u00ec\1\105\131\uffff\1\u00ed",
            "\1\104\1\u00ef\1\105\u00ff\uffff\1\u00ee",
            "\1\104\1\u00f1\1\105\u00ff\uffff\1\u00f0",
            "\1\104\1\u00f2\1\105",
            "\1\104\1\u00f3\1\105",
            "\1\u00f5\1\u00f4",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105\131\uffff\1\u00f6",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105\3\uffff\1\u00f7\30\uffff\1\u00f9\1\u00f8"+
            "\1\u00fa",
            "\1\104\1\u00fb\1\105",
            "\1\104\1\u00fd\1\105\3\uffff\1\u00fc\30\uffff\1\u00f9\1\u00f8"+
            "\1\u00fa",
            "\1\104\1\u00fd\1\105\3\uffff\1\u00fc\30\uffff\1\u00f9\1\u00f8"+
            "\1\u00fa",
            "\1\u00fe",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u00ff",
            "\1\104\1\uffff\1\105",
            "\1\u0100",
            "\1\104\1\u0101\1\105",
            "\1\104\1\uffff\1\105\121\uffff\1\115",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u00c1",
            "\1\u00c1",
            "\1\104\1\uffff\1\105\131\uffff\1\122",
            "\1\104\1\uffff\1\105\3\uffff\1\u0102\10\uffff\1\u0103",
            "\1\104\1\uffff\1\105\3\uffff\1\u0102\10\uffff\1\u0103",
            "\1\u0102\10\uffff\1\u0103",
            "\1\u00c7",
            "\1\u00c7",
            "\1\104\1\uffff\1\105\131\uffff\1\124",
            "\1\104\1\uffff\1\105\3\uffff\1\u0104\10\uffff\1\u0105",
            "\1\104\1\uffff\1\105\3\uffff\1\u0104\10\uffff\1\u0105",
            "\1\u0104\10\uffff\1\u0105",
            "\1\u00cd",
            "\1\u00cd",
            "\1\104\1\uffff\1\105\131\uffff\1\126",
            "\1\104\1\uffff\1\105\3\uffff\1\u0106\10\uffff\1\u0107",
            "\1\104\1\uffff\1\105\3\uffff\1\u0106\10\uffff\1\u0107",
            "\1\u0106\10\uffff\1\u0107",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u0108",
            "\1\104\1\uffff\1\105\3\uffff\1\u0109\10\uffff\1\u010a",
            "\1\104\1\uffff\1\105\3\uffff\1\u0109\10\uffff\1\u010a",
            "\1\u0109\10\uffff\1\u010a",
            "\1\u010b\1\u010c\125\uffff\1\u010d",
            "\1\104\1\uffff\1\105",
            "\1\u010e\1\u010f\125\uffff\1\u010d",
            "\1\104\1\uffff\1\105",
            "\1\u0110",
            "\1\104\1\u00df\1\105",
            "\1\u0111",
            "\1\u0112",
            "\1\u0113\121\uffff\1\u0114",
            "\1\u0115\121\uffff\1\u0116",
            "\1\u0117",
            "\1\u0118\34\uffff\1\u0119",
            "\1\u011a",
            "\1\104\1\uffff\1\105",
            "\1\104\1\u00e8\1\105\131\uffff\1\u00e9",
            "\1\u011b",
            "\1\u011c",
            "\1\u011d",
            "\1\u011e",
            "\1\u011f",
            "\1\u0120",
            "\1\104\1\u00ef\1\105",
            "\1\u0121",
            "\1\104\1\u00f1\1\105",
            "\1\u0122",
            "\1\u0123",
            "\1\u0124",
            "\1\104\1\u0126\1\105\u00ff\uffff\1\u0125",
            "\1\104\1\u0126\1\105\u00ff\uffff\1\u0125",
            "\1\u0127",
            "\1\u0128\1\u0129\125\uffff\1\u012a",
            "\1\104\1\uffff\1\105",
            "\1\u012b\1\u012c\125\uffff\1\u012d",
            "\1\104\1\uffff\1\105",
            "\1\u012e",
            "\1\u012f\1\u0130\125\uffff\1\u012a",
            "\1\u0131",
            "\1\u00b5",
            "\1\155",
            "\1\157",
            "\1\u0132",
            "\1\u0133\1\u0134\125\uffff\1\u0135",
            "\1\104\1\uffff\1\105",
            "\1\u0136\1\u0137\125\uffff\1\u0138",
            "\1\104\1\uffff\1\105",
            "\1\u0139\1\u013a\125\uffff\1\u013b",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u013c\1\u013d\125\uffff\1\u013e",
            "\1\104\1\uffff\1\105",
            "\1\u00d9\31\uffff\1\141",
            "\1\u00d9\31\uffff\1\141",
            "\1\u00d9\31\uffff\1\141",
            "\1\104\1\146\1\105\3\uffff\1\u00db\31\uffff\1\141",
            "\1\104\1\146\1\105\3\uffff\1\u00db\31\uffff\1\141",
            "\1\u013f\1\uffff\1\u0140",
            "\1\u0141",
            "\1\u0142",
            "\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "\1\u0146",
            "\1\u0147",
            "\1\u0119",
            "\1\u0148",
            "\1\u0149",
            "\1\u014c\130\uffff\1\u014b\u0085\uffff\1\u014a",
            "\1\u014d\1\u014e\125\uffff\1\u014f",
            "\1\u0152\130\uffff\1\u0151\u0085\uffff\1\u0150",
            "\1\u0153\1\u0154\125\uffff\1\u0155",
            "\1\u0158\130\uffff\1\u0157\u0085\uffff\1\u0156",
            "\1\u0159\1\u015a\125\uffff\1\u015b",
            "\1\u015c",
            "\1\u015d",
            "\1\u015e",
            "\1\u015f",
            "\1\104\1\u0126\1\105",
            "\1\u0160",
            "\1\u0161\1\u0162\125\uffff\1\u0163",
            "\1\u0164\30\uffff\1\u00f9\1\u00f8\1\u00fa",
            "\1\u0164\30\uffff\1\u00f9\1\u00f8\1\u00fa",
            "\1\u0164\30\uffff\1\u00f9\1\u00f8\1\u00fa",
            "\1\u00fa",
            "\1\u00fa",
            "\1\u00fa",
            "\1\u0165",
            "\1\104\1\u00fd\1\105\3\uffff\1\u0166\30\uffff\1\u00f9\1\u00f8"+
            "\1\u00fa",
            "\1\104\1\u00fd\1\105\3\uffff\1\u0166\30\uffff\1\u00f9\1\u00f8"+
            "\1\u00fa",
            "\1\u0167",
            "\1\u0168",
            "\1\u0102\10\uffff\1\u0103",
            "\1\u0102\10\uffff\1\u0103",
            "\1\u0102\10\uffff\1\u0103",
            "\1\u0104\10\uffff\1\u0105",
            "\1\u0104\10\uffff\1\u0105",
            "\1\u0104\10\uffff\1\u0105",
            "\1\u0106\10\uffff\1\u0107",
            "\1\u0106\10\uffff\1\u0107",
            "\1\u0106\10\uffff\1\u0107",
            "\1\u0109\10\uffff\1\u010a",
            "\1\u0109\10\uffff\1\u010a",
            "\1\u0109\10\uffff\1\u010a",
            "\1\u0169",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u016a",
            "\1\104\1\u016b\1\105",
            "\1\u016c",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105\121\uffff\1\u00e4",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u014c",
            "\1\u014c",
            "\1\104\1\uffff\1\105\131\uffff\1\u00e9",
            "\1\104\1\uffff\1\105\3\uffff\1\u016d\10\uffff\1\u016e",
            "\1\104\1\uffff\1\105\3\uffff\1\u016d\10\uffff\1\u016e",
            "\1\u016d\10\uffff\1\u016e",
            "\1\u0152",
            "\1\u0152",
            "\1\104\1\uffff\1\105\131\uffff\1\u00eb",
            "\1\104\1\uffff\1\105\3\uffff\1\u016f\10\uffff\1\u0170",
            "\1\104\1\uffff\1\105\3\uffff\1\u016f\10\uffff\1\u0170",
            "\1\u016f\10\uffff\1\u0170",
            "\1\u0158",
            "\1\u0158",
            "\1\104\1\uffff\1\105\131\uffff\1\u00ed",
            "\1\104\1\uffff\1\105\3\uffff\1\u0171\10\uffff\1\u0172",
            "\1\104\1\uffff\1\105\3\uffff\1\u0171\10\uffff\1\u0172",
            "\1\u0171\10\uffff\1\u0172",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u0173",
            "\1\104\1\uffff\1\105\3\uffff\1\u0174\10\uffff\1\u0175",
            "\1\104\1\uffff\1\105\3\uffff\1\u0174\10\uffff\1\u0175",
            "\1\u0174\10\uffff\1\u0175",
            "\1\u0176\1\u0177\125\uffff\1\u0178",
            "\1\104\1\uffff\1\105",
            "\1\u0179\1\u017a\125\uffff\1\u0178",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u0140",
            "\1\u0114",
            "\1\u017b",
            "\1\u0116",
            "\1\u017c\1\u017d\125\uffff\1\u017e",
            "\1\104\1\uffff\1\105",
            "\1\u017f\1\u0180\125\uffff\1\u0181",
            "\1\104\1\uffff\1\105",
            "\1\u0182\1\u0183\125\uffff\1\u0184",
            "\1\104\1\uffff\1\105",
            "\1\104\1\uffff\1\105",
            "\1\u0185\1\u0186\125\uffff\1\u0187",
            "\1\104\1\uffff\1\105",
            "\1\u0164\31\uffff\1\u00f8",
            "\1\u0164\31\uffff\1\u00f8",
            "\1\u0164\31\uffff\1\u00f8",
            "\1\104\1\u00fd\1\105\3\uffff\1\u0166\31\uffff\1\u00f8",
            "\1\104\1\u00fd\1\105\3\uffff\1\u0166\31\uffff\1\u00f8",
            "\1\u0188",
            "\1\u016d\10\uffff\1\u016e",
            "\1\u016d\10\uffff\1\u016e",
            "\1\u016d\10\uffff\1\u016e",
            "\1\u016f\10\uffff\1\u0170",
            "\1\u016f\10\uffff\1\u0170",
            "\1\u016f\10\uffff\1\u0170",
            "\1\u0171\10\uffff\1\u0172",
            "\1\u0171\10\uffff\1\u0172",
            "\1\u0171\10\uffff\1\u0172",
            "\1\u0174\10\uffff\1\u0175",
            "\1\u0174\10\uffff\1\u0175",
            "\1\u0174\10\uffff\1\u0175",
            "\1\104\1\uffff\1\105"
    };

    static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
    static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
    static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
    static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
    static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
    static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
    static final short[][] DFA226_transition;

    static {
        int numStates = DFA226_transitionS.length;
        DFA226_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = DFA226_eot;
            this.eof = DFA226_eof;
            this.min = DFA226_min;
            this.max = DFA226_max;
            this.accept = DFA226_accept;
            this.special = DFA226_special;
            this.transition = DFA226_transition;
        }
        public String getDescription() {
            return "10092:1: package_obj_spec returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | cursor_declarationGen+= cursor_declaration | cursor_specGen+= cursor_spec | procedure_specGen+= procedure_spec | function_specGen+= function_spec | exception_declarationGen+= exception_declaration | pragma_declarationGen+= pragma_declaration );";
        }
    }
    static final String DFA227_eotS =
        "\27\uffff";
    static final String DFA227_eofS =
        "\27\uffff";
    static final String DFA227_minS =
        "\1\27\2\13\2\uffff\1\27\1\111\5\uffff\2\13\1\u00fb\1\27\1\u0089"+
        "\1\170\2\13\3\uffff";
    static final String DFA227_maxS =
        "\1\u0104\2\u00d8\2\uffff\1\30\1\u0090\5\uffff\2\104\1\u00fb\1\30"+
        "\1\u0107\1\u0090\2\104\3\uffff";
    static final String DFA227_acceptS =
        "\3\uffff\1\2\1\3\2\uffff\1\10\1\11\1\12\1\4\1\1\10\uffff\1\6\1\5"+
        "\1\7";
    static final String DFA227_specialS =
        "\27\uffff}>";
    static final String[] DFA227_transitionS = {
            "\1\1\1\2\61\uffff\1\6\55\uffff\1\10\27\uffff\1\7\130\uffff\1"+
            "\4\13\uffff\1\11\14\uffff\1\3\1\uffff\1\5",
            "\1\12\13\uffff\2\13\35\uffff\1\12\24\uffff\15\13\2\uffff\26"+
            "\13\53\uffff\1\13\25\uffff\1\13\45\uffff\2\13",
            "\1\12\13\uffff\2\13\35\uffff\1\12\24\uffff\15\13\2\uffff\26"+
            "\13\53\uffff\1\13\25\uffff\1\13\45\uffff\2\13",
            "",
            "",
            "\1\14\1\15",
            "\1\16\56\uffff\1\10\27\uffff\1\7",
            "",
            "",
            "",
            "",
            "",
            "\1\17\70\uffff\1\20",
            "\1\17\70\uffff\1\20",
            "\1\21",
            "\1\22\1\23",
            "\1\24\157\uffff\1\25\14\uffff\2\26",
            "\1\10\27\uffff\1\7",
            "\1\17\70\uffff\1\20",
            "\1\17\70\uffff\1\20",
            "",
            "",
            ""
    };

    static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
    static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
    static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
    static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
    static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
    static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
    static final short[][] DFA227_transition;

    static {
        int numStates = DFA227_transitionS.length;
        DFA227_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = DFA227_eot;
            this.eof = DFA227_eof;
            this.min = DFA227_min;
            this.max = DFA227_max;
            this.accept = DFA227_accept;
            this.special = DFA227_special;
            this.transition = DFA227_transition;
        }
        public String getDescription() {
            return "10293:1: package_obj_body returns [Node returnNode] : (variable_declarationGen+= variable_declaration | subtype_declarationGen+= subtype_declaration | cursor_declarationGen+= cursor_declaration | exception_declarationGen+= exception_declaration | record_declarationGen+= record_declaration | plsql_table_declarationGen+= plsql_table_declaration | varray_declarationGen+= varray_declaration | procedure_bodyGen+= procedure_body | function_bodyGen+= function_body | pragma_declarationGen+= pragma_declaration );";
        }
    }
    static final String DFA313_eotS =
        "\22\uffff";
    static final String DFA313_eofS =
        "\2\uffff\1\1\2\11\10\uffff\2\11\1\uffff\2\11";
    static final String DFA313_minS =
        "\1\27\1\uffff\3\4\1\uffff\1\27\1\uffff\1\27\1\uffff\3\13\2\4\1\27"+
        "\2\4";
    static final String DFA313_maxS =
        "\1\u00d8\1\uffff\3\u0104\1\uffff\1\156\1\uffff\1\156\1\uffff\3\46"+
        "\2\u0104\1\156\2\u0104";
    static final String DFA313_acceptS =
        "\1\uffff\1\1\3\uffff\1\3\1\uffff\1\2\1\uffff\1\4\10\uffff";
    static final String DFA313_specialS =
        "\22\uffff}>";
    static final String[] DFA313_transitionS = {
            "\1\3\1\4\62\uffff\15\1\2\uffff\24\1\1\2\1\1\101\uffff\1\1\45"+
            "\uffff\2\1",
            "",
            "\2\1\1\uffff\1\1\3\uffff\1\6\6\uffff\1\1\4\uffff\2\1\13\uffff"+
            "\1\5\1\7\1\5\13\uffff\1\1\1\uffff\2\1\1\uffff\1\1\6\uffff\1"+
            "\1\5\uffff\1\1\5\uffff\1\1\55\uffff\1\1\1\uffff\1\1\25\uffff"+
            "\1\1\11\uffff\1\1\116\uffff\1\1\13\uffff\1\1\1\uffff\1\1\12"+
            "\uffff\1\1\1\uffff\1\1",
            "\4\11\3\uffff\1\10\6\uffff\1\11\4\uffff\2\11\13\uffff\1\5\1"+
            "\7\1\5\13\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11"+
            "\5\uffff\1\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff"+
            "\1\11\11\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11"+
            "\12\uffff\1\11\1\uffff\1\11",
            "\4\11\3\uffff\1\10\6\uffff\1\11\4\uffff\2\11\13\uffff\1\5\1"+
            "\7\1\5\13\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11"+
            "\5\uffff\1\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff"+
            "\1\11\11\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11"+
            "\12\uffff\1\11\1\uffff\1\11",
            "",
            "\1\12\1\13\125\uffff\1\14",
            "",
            "\1\15\1\16\125\uffff\1\14",
            "",
            "\1\7\30\uffff\1\5\1\7\1\5",
            "\1\7\30\uffff\1\5\1\7\1\5",
            "\1\7\30\uffff\1\5\1\7\1\5",
            "\4\11\3\uffff\1\17\6\uffff\1\11\4\uffff\2\11\13\uffff\1\5\1"+
            "\7\1\5\13\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11"+
            "\5\uffff\1\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff"+
            "\1\11\11\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11"+
            "\12\uffff\1\11\1\uffff\1\11",
            "\4\11\3\uffff\1\17\6\uffff\1\11\4\uffff\2\11\13\uffff\1\5\1"+
            "\7\1\5\13\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11"+
            "\5\uffff\1\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff"+
            "\1\11\11\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11"+
            "\12\uffff\1\11\1\uffff\1\11",
            "\1\20\1\21\125\uffff\1\7",
            "\4\11\3\uffff\1\17\6\uffff\1\11\4\uffff\2\11\14\uffff\1\7\14"+
            "\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11\5\uffff\1"+
            "\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff\1\11\11"+
            "\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11\12\uffff"+
            "\1\11\1\uffff\1\11",
            "\4\11\3\uffff\1\17\6\uffff\1\11\4\uffff\2\11\14\uffff\1\7\14"+
            "\uffff\1\11\1\uffff\2\11\1\uffff\1\11\6\uffff\1\11\5\uffff\1"+
            "\11\5\uffff\1\11\55\uffff\1\11\1\uffff\1\11\25\uffff\1\11\11"+
            "\uffff\1\11\116\uffff\1\11\13\uffff\1\11\1\uffff\1\11\12\uffff"+
            "\1\11\1\uffff\1\11"
    };

    static final short[] DFA313_eot = DFA.unpackEncodedString(DFA313_eotS);
    static final short[] DFA313_eof = DFA.unpackEncodedString(DFA313_eofS);
    static final char[] DFA313_min = DFA.unpackEncodedStringToUnsignedChars(DFA313_minS);
    static final char[] DFA313_max = DFA.unpackEncodedStringToUnsignedChars(DFA313_maxS);
    static final short[] DFA313_accept = DFA.unpackEncodedString(DFA313_acceptS);
    static final short[] DFA313_special = DFA.unpackEncodedString(DFA313_specialS);
    static final short[][] DFA313_transition;

    static {
        int numStates = DFA313_transitionS.length;
        DFA313_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA313_transition[i] = DFA.unpackEncodedString(DFA313_transitionS[i]);
        }
    }

    class DFA313 extends DFA {

        public DFA313(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 313;
            this.eot = DFA313_eot;
            this.eof = DFA313_eof;
            this.min = DFA313_min;
            this.max = DFA313_max;
            this.accept = DFA313_accept;
            this.special = DFA313_special;
            this.transition = DFA313_transition;
        }
        public String getDescription() {
            return "14713:1: type_spec returns [Node returnNode] : (datatypeGen+= datatype | column_specGen+= column_spec TYPE_ATTRGen= TYPE_ATTR | table_specGen+= table_spec ROWTYPE_ATTRGen= ROWTYPE_ATTR | type_nameGen+= type_name (LPARENGen= LPAREN NUMBERGen= NUMBER RPARENGen= RPAREN )? );";
        }
    }
 

    public static final BitSet FOLLOW_create_package_in_start_rule62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EOF_in_start_rule68 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_alias91 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_sql_identifier_in_alias98 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_name_in_argument120 = new BitSet(new long[]{0x0018000001800012L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0008000001800000L});
    public static final BitSet FOLLOW_keyOUT_in_argument126 = new BitSet(new long[]{0x0010000001800012L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_51_in_argument132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyOUT_in_argument136 = new BitSet(new long[]{0x0010000001800012L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_51_in_argument142 = new BitSet(new long[]{0x0010000001800012L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_argument_type_in_argument150 = new BitSet(new long[]{0x0010000000000012L});
    public static final BitSet FOLLOW_ASSIGN_in_argument163 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_52_in_argument169 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_argument175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arguments199 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_arguments205 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_argument_in_arguments209 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_identifier_in_argument_name233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_argument_type254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_statement275 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ASSIGN_in_assignment_statement279 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_assignment_statement283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_begin_block305 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_begin_block313 = new BitSet(new long[]{0x00C0000000000000L});
    public static final BitSet FOLLOW_54_in_begin_block323 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_begin_block329 = new BitSet(new long[]{0x0080000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_55_in_begin_block341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_boolean_literal362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_boolean_literal372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_bracket_literals393 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literals_in_bracket_literals397 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_bracket_literals401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list423 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_bracket_literals_list429 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list433 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_parameter_name_in_call_parameter459 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_ARROW_in_call_parameter463 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_call_parameter470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters491 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_call_parameters497 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters501 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_58_in_case_expression525 = new BitSet(new long[]{0x4700000027C80040L,0x0210400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_simple_case_expression_in_case_expression531 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_searched_case_expression_in_case_expression537 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_else_case_expression_in_case_expression545 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_case_expression552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_case_statement575 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_case_statement582 = new BitSet(new long[]{0x4700000027C80040L,0x0210400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement588 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement594 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_else_case_statement_in_case_statement602 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_case_statement609 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_case_statement613 = new BitSet(new long[]{0x0000000001800002L});
    public static final BitSet FOLLOW_label_name_in_case_statement619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measure_column_in_cell_assignment643 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_LBRACK_in_cell_assignment647 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042101000L,0x0000020004000400L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_cell_assignment653 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment659 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_RBRACK_in_cell_assignment665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_cell_assignment_expr687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_cell_assignment_expr697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs730 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_cell_assignment_exprs736 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042101000L,0x0000020004000400L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs740 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_sql_identifier_in_cell_reference764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_cell_reference_options789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_keyKEEP_in_cell_reference_options795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_keyNAV_in_cell_reference_options801 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_59_in_cell_reference_options812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_cell_reference_options818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySINGLE_in_cell_reference_options824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_keyREFERENCE_in_cell_reference_options828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_name854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec875 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_column_spec881 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec885 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_column_spec_in_column_specs915 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_column_specs921 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_spec_in_column_specs925 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_keyCLOSE_in_close_statement949 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_close_statement953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_commit_statement974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_not_in_condition_and995 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_61_in_condition_and1001 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_condition_not_in_condition_and1005 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between1030 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_62_in_condition_between1036 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_condition_between1043 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between1047 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_condition_between1051 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison1076 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_comparison1080 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison1084 = new BitSet(new long[]{0x0000000000003040L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison1090 = new BitSet(new long[]{0x0000000000003000L});
    public static final BitSet FOLLOW_EQ_in_condition_comparison1099 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_comparison1105 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison1111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison1115 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison1119 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison1125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_condition_comparison1141 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison1148 = new BitSet(new long[]{0x000000000003F040L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison1154 = new BitSet(new long[]{0x000000000003F000L});
    public static final BitSet FOLLOW_EQ_in_condition_comparison1163 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_comparison1169 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_GTH_in_condition_comparison1175 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_GEQ_in_condition_comparison1181 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LTH_in_condition_comparison1187 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LEQ_in_condition_comparison1193 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000021L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_64_in_condition_comparison1201 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison1210 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison1216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison1220 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison1224 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path1256 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_equals_path1260 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_name_in_condition_equals_path1264 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path1268 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_path_string_in_condition_equals_path1272 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path1278 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_equals_path1282 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_equals_path1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_condition_exists1310 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_exists1314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_condition_exists1318 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_exists1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_exists_in_condition_expr1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_condition_expr1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_condition_expr1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_condition_expr1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_condition_expr1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_condition_expr1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_condition_expr1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_condition_expr1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_condition_expr1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_condition_expr1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_condition_expr1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_member_in_condition_expr1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_condition_expr1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_condition_expr1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_condition_expr1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_condition_expr1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_condition_expr1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_paren_in_condition_expr1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison1552 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison1556 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison1560 = new BitSet(new long[]{0x0000000000003000L});
    public static final BitSet FOLLOW_EQ_in_condition_group_comparison1566 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_group_comparison1572 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_66_in_condition_group_comparison1580 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison1586 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_67_in_condition_group_comparison1592 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison1598 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison1604 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison1610 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_group_comparison1627 = new BitSet(new long[]{0x000000000003F000L});
    public static final BitSet FOLLOW_EQ_in_condition_group_comparison1633 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_group_comparison1639 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_GTH_in_condition_group_comparison1645 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_GEQ_in_condition_group_comparison1651 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LTH_in_condition_group_comparison1657 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LEQ_in_condition_group_comparison1663 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_66_in_condition_group_comparison1671 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison1677 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_67_in_condition_group_comparison1683 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison1689 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison1695 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison1701 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison1707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in1728 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_in1732 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in1736 = new BitSet(new long[]{0x4008000000000000L});
    public static final BitSet FOLLOW_62_in_condition_in1742 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_condition_in1749 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in1753 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_in1759 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_condition_in1765 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_in1782 = new BitSet(new long[]{0x4008000000000000L});
    public static final BitSet FOLLOW_62_in_condition_in1788 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_condition_in1795 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in1799 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expression_list_in_condition_in1805 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_condition_in1811 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is1838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is1842 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000020L,0x0000800000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_condition_is1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000800000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_keyNAN_in_condition_is1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_condition_is1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_condition_is1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_condition_is_any1894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is_any1898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_condition_is_any1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_empty1926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is_empty1930 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_62_in_condition_is_empty1936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_keyEMPTY_in_condition_is_empty1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set1965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is_a_set1969 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_62_in_condition_is_a_set1975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyA_in_condition_is_a_set1982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_condition_is_a_set1986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is_of_type2008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is_of_type2012 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_62_in_condition_is_of_type2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_condition_is_of_type2025 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keyTYPE_in_condition_is_of_type2031 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_is_of_type2038 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type2042 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_is_of_type2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_in_condition_is_present2067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_condition_is_present2071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keyPRESENT_in_condition_is_present2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like2096 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000100L,0x0380000000000000L});
    public static final BitSet FOLLOW_62_in_condition_like2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0380000000000000L});
    public static final BitSet FOLLOW_72_in_condition_like2111 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyLIKEC_in_condition_like2117 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyLIKE2_in_condition_like2123 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyLIKE4_in_condition_like2129 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like2135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyESCAPE_in_condition_like2141 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_member2169 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_62_in_condition_member2175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_keyMEMBER_in_condition_member2182 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000080L});
    public static final BitSet FOLLOW_71_in_condition_member2188 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_member2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_condition_not2216 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not2220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_and_in_condition_or2252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_condition_or2258 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_condition_and_in_condition_or2262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_condition_paren2288 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_condition_paren2292 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_paren2296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like2318 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_regexp_like2322 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_call_parameters_in_condition_regexp_like2326 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_regexp_like2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset2351 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_62_in_condition_submultiset2357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset2364 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000080L});
    public static final BitSet FOLLOW_71_in_condition_submultiset2370 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset2377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path2398 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_condition_under_path2402 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_name_in_condition_under_path2406 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path2412 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_levels_in_condition_under_path2416 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path2423 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_path_string_in_condition_under_path2427 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path2433 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_under_path2437 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_condition_under_path2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_correlation_integer2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_create_package2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_73_in_create_package2492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_keyREPLACE_in_create_package2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_package_spec_in_create_package2507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_create_package2513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_declaration2536 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration2540 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_declaration2548 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_declaration2552 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_declaration2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_cursor_declaration2565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_cursor_declaration2569 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_cursor_declaration2573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_expression2594 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_expression2598 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression2602 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_expression2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param2628 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_cursor_loop_param2632 = new BitSet(new long[]{0x0000000001800040L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param2640 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param2646 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expressions_in_cursor_loop_param2650 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param2654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param2669 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_name2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_spec2720 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_spec2724 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_spec2733 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_spec2737 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_spec2741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_keyRETURN_in_cursor_spec2750 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_return_type_in_cursor_spec2754 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_cursor_spec2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_datatype2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_datatype2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_datatype2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_datatype2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_datatype2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_datatype2840 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_81_in_datatype2846 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_82_in_datatype2852 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_83_in_datatype2858 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2866 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2870 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_COMMA_in_datatype2876 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2880 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_datatype2901 = new BitSet(new long[]{0x0000000000000042L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_datatype2907 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2915 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2919 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_datatype2937 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2943 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2947 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_datatype2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_datatype2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_keyDAY_in_datatype2991 = new BitSet(new long[]{0x0000000000000040L,0x0000000001000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2997 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3001 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_datatype3012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_keySECOND_in_datatype3016 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3022 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3026 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_keyYEAR_in_datatype3048 = new BitSet(new long[]{0x0000000000000040L,0x0000000001000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3054 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3058 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_datatype3069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_keyMONTH_in_datatype3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3086 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_datatype3092 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3100 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3104 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3108 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_datatype3117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datatype3123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_keyZONE_in_datatype3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_datatype3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_datatype3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_datatype3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_datatype3180 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3186 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3190 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_datatype3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_datatype3219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyPRECISION_in_datatype3223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_datatype3234 = new BitSet(new long[]{0x0000000000000042L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3245 = new BitSet(new long[]{0x0000000000000042L,0x0000000200000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3254 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3258 = new BitSet(new long[]{0x0000000000000080L,0x0000000100000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3264 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_96_in_datatype3270 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3277 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_datatype3286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_datatype3290 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3302 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_datatype3322 = new BitSet(new long[]{0x0000000000000042L,0x0000000200000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3346 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3350 = new BitSet(new long[]{0x0000000000000080L,0x0000000100000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3356 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_96_in_datatype3362 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3369 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_datatype3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_datatype3382 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3394 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_datatype3414 = new BitSet(new long[]{0x0000000000000042L,0x0000000200000000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3437 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3441 = new BitSet(new long[]{0x0000000000000080L,0x0000000100000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3447 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_96_in_datatype3453 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3460 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_datatype3469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_datatype3473 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3485 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_datatype3505 = new BitSet(new long[]{0x0000000000000042L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3511 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3520 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3524 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_datatype3542 = new BitSet(new long[]{0x0000000000000042L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3552 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3561 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3565 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_datatype3583 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3590 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3594 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_datatype3612 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3618 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3622 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_datatype3640 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_97_in_datatype3647 = new BitSet(new long[]{0x0000000000000042L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_96_in_datatype3653 = new BitSet(new long[]{0x0000000000000042L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3661 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3670 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3674 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_datatype3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_datatype3703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_datatype3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_datatype3725 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_datatype3731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_datatype3735 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3747 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_datatype3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_datatype3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_datatype3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_datatype3801 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3807 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3811 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec3839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec3851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_declare_spec3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_declare_spec3911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_declare_spec3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_declaration_in_declare_spec3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_declare_spec3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_delete_command3978 = new BitSet(new long[]{0x0000000001800040L,0x0002400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_113_in_delete_command3984 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_selected_table_in_delete_command3991 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_114_in_delete_command3999 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010242100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_delete_command4008 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_delete_command4012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_sql_condition_in_delete_command4021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_returning_clause_in_delete_command4039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_displayed_column4065 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_displayed_column4069 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ASTERISK_in_displayed_column4073 = new BitSet(new long[]{0x0004000001800002L,0x0000400000000000L});
    public static final BitSet FOLLOW_sql_expression_in_displayed_column4083 = new BitSet(new long[]{0x0004000001800002L,0x0000400000000000L});
    public static final BitSet FOLLOW_alias_in_displayed_column4095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_else_case_statement4119 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_case_statement4123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_else_case_expression4144 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_else_case_expression4148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration4170 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_54_in_exception_declaration4174 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_exception_declaration4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_exception_handler4199 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_exception_names_in_exception_handler4203 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_exception_handler4207 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler4213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_exception_names4240 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_exception_package_name_in_exception_name4270 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_exception_name4274 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_identifier_in_exception_name4281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_exception_package_name4302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXIT_in_exit_statement4323 = new BitSet(new long[]{0x0000000001800002L,0x0010000000000000L});
    public static final BitSet FOLLOW_label_name_in_exit_statement4329 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_exit_statement4338 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_condition_in_exit_statement4342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_fetch_statement4366 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement4370 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_fetch_statement4374 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_variable_names_in_fetch_statement4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_fetch_statement4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_name4416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_field_spec4438 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_field_spec4442 = new BitSet(new long[]{0x4010000000000012L});
    public static final BitSet FOLLOW_62_in_field_spec4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_field_spec4453 = new BitSet(new long[]{0x0010000000000012L});
    public static final BitSet FOLLOW_ASSIGN_in_field_spec4466 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_52_in_field_spec4472 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_field_spec4478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4501 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_field_specs4507 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4511 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_proc_fun_start_in_function_body4537 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_function_body4544 = new BitSet(new long[]{0x0000000001C00000L});
    public static final BitSet FOLLOW_function_name_in_function_body4548 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_body4557 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_arguments_in_function_body4561 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_function_body4565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_body4575 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_return_type_in_function_body4579 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_function_body4585 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_50_in_function_body4591 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_declare_spec_in_function_body4604 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_53_in_function_body4616 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_function_body4626 = new BitSet(new long[]{0x00C0000000000000L});
    public static final BitSet FOLLOW_54_in_function_body4636 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_function_body4642 = new BitSet(new long[]{0x0080000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_55_in_function_body4654 = new BitSet(new long[]{0x0000000001C40000L});
    public static final BitSet FOLLOW_function_name_in_function_body4660 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_function_body4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_user_defined_function_in_function_call4688 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_function_call4696 = new BitSet(new long[]{0x4700000027C800C0L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_call_parameters_in_function_call4702 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_function_call4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_function_declaration4738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_function_expression4759 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_function_expression4765 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression4769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_function_expression4789 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression4793 = new BitSet(new long[]{0x4700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_function_expression4799 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression4805 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression4811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_function_expression4819 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression4825 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression4829 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression4839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_function_spec4866 = new BitSet(new long[]{0x0000000001C00000L});
    public static final BitSet FOLLOW_function_name_in_function_spec4870 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_spec4879 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_arguments_in_function_spec4883 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_function_spec4887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_spec4896 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_return_type_in_function_spec4900 = new BitSet(new long[]{0x0000000000040000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_function_spec4905 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_function_spec4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_function_name4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_function_name4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_goto_statement4964 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_label_name_in_goto_statement4968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_group_by_clause4989 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_group_by_clause4993 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000100142100000L,0x0000020000001000L});
    public static final BitSet FOLLOW_group_by_exprs_in_group_by_clause4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_expr5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_expr5029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_group_by_expr5040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs5062 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_group_by_exprs5068 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000100142100000L,0x0000020000001000L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs5072 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause5099 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keyCUBE_in_rollup_cube_clause5105 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_rollup_cube_clause5111 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause5115 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_rollup_cube_clause5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list5140 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_grouping_expression_list5146 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list5150 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause5175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_keySETS_in_grouping_sets_clause5179 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_grouping_sets_clause5183 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause5187 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_grouping_sets_clause5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_hierarchical_query_clause5214 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_hierarchical_query_clause5218 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause5222 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_hierarchical_query_clause5229 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_hierarchical_query_clause5233 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000404L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause5239 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_host_variable5267 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_host_variable5272 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_identifier_in_host_variable5276 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_ID_in_identifier5299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLEQUOTED_STRING_in_identifier5310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause5341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause5348 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause5352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_128_in_inner_cross_join_clause5358 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_inner_cross_join_clause5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_inner_cross_join_clause5368 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_inner_cross_join_clause5372 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_inner_cross_join_clause5376 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_inner_cross_join_clause5380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause5395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause5401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause5407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause5415 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_if_statement5443 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement5447 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_if_statement5451 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement5455 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_keyELSIF_in_if_statement5463 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement5467 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_if_statement5471 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement5475 = new BitSet(new long[]{0x0080000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_115_in_if_statement5486 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement5490 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_if_statement5499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_if_statement5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_index_name5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_insert_command5545 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_insert_command5549 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_table_reference_list_in_insert_command5553 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100008L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command5561 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_insert_command5565 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command5569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100008L});
    public static final BitSet FOLLOW_131_in_insert_command5580 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command5584 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expressions_in_insert_command5588 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command5592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_select_statement_in_insert_command5600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_returning_clause_in_insert_command5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_integer5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_name_in_join_clause5657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0049080080000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_join_clause5663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0049080080000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_outer_join_clause_in_join_clause5669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0049080080000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_identifier_in_label_name5693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_levels5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_link_name5735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_literal5758 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_MINUS_in_literal5764 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_literal5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_literal5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_literals5804 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_literals5810 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_literals5814 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_132_in_lock_mode5838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_lock_mode5842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_lock_mode5853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_lock_mode5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_lock_mode5868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_lock_mode5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_lock_mode5883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_lock_mode5894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_lock_mode5898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_lock_mode5902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_lock_mode5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_lock_table_statement5934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_lock_table_statement5938 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_table_reference_list_in_lock_table_statement5942 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_lock_table_statement5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000070L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement5952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_lock_table_statement5956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_lock_table_statement5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_loop_statement5988 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5992 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_RLABEL_in_loop_statement5996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000800000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keyWHILE_in_loop_statement6007 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_condition_in_loop_statement6011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_140_in_loop_statement6023 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_numeric_loop_param_in_loop_statement6029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement6035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement6051 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement6057 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_loop_statement6063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement6067 = new BitSet(new long[]{0x0000000001800002L});
    public static final BitSet FOLLOW_label_name_in_loop_statement6076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalues6100 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_lvalues6106 = new BitSet(new long[]{0x0000000021800000L});
    public static final BitSet FOLLOW_lvalue_in_lvalues6110 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_variable_name_in_lvalue6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_lvalue6144 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_lvalue6148 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_field_name_in_lvalue6152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_lvalue6163 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_lvalue6167 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_subscript_in_lvalue6171 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_lvalue6175 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_lvalue6181 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_field_name_in_lvalue6185 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COLON_in_lvalue6199 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue6203 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_COLON_in_lvalue6209 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMAIN_in_main_model6239 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_main_model_name_in_main_model6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model6250 = new BitSet(new long[]{0x0800000000000040L,0x0000000000000000L,0x0014200000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model6258 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0004000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_main_model_name6286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_measure_column6307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMODEL_in_model_clause6328 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0010200000000000L,0x2000000000000200L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause6334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000200L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause6344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_reference_model_in_model_clause6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800004000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_main_model_in_model_clause6362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_model_column_clauses6385 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column_clauses6391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_model_column_clauses6403 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_model_column_clauses6407 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses6411 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses6415 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses6419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_keyMEASURES_in_model_column_clauses6425 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses6429 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses6433 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses6437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_in_model_columns6459 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_model_columns6465 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_model_column_in_model_columns6469 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_sql_expression_in_model_column6494 = new BitSet(new long[]{0x0004000001800002L,0x0000400000000000L});
    public static final BitSet FOLLOW_50_in_model_column6502 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column6509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRULES_in_model_rules_clause6535 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0004000020000080L,0x0000000020010000L});
    public static final BitSet FOLLOW_135_in_model_rules_clause6541 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0004000020000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_clause6547 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L,0x0004000020000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_67_in_model_rules_clause6553 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0004000020000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause6567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause6573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_model_rules_clause6579 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_keyITERATE_in_model_rules_clause6593 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause6597 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_model_rules_clause6601 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause6605 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_keyUNTIL_in_model_rules_clause6611 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause6615 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_model_rules_clause6619 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause6623 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause6635 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L,0x0000000000000080L,0x0000000020000000L});
    public static final BitSet FOLLOW_model_rules_exprs_in_model_rules_clause6639 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause6643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_model_rules_expr6666 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_expr6672 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000008L});
    public static final BitSet FOLLOW_67_in_model_rules_expr6678 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_expr6688 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_expr6694 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_EQ_in_model_rules_expr6701 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_model_rules_expr6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs6726 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_exprs6732 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L,0x0000000000000080L,0x0000000020000000L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs6736 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_140_in_multi_column_for_loop6760 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop6764 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_multi_column_for_loop6768 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop6772 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_multi_column_for_loop6776 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop6780 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop6786 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop6792 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop6798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_nested_condition6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_nested_condition6834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_nested_table6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_nested_table_column_name6878 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6882 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_table_name_in_nested_table_column_name6889 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6893 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nested_table_in_nested_table_column_name6897 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name6901 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_name_in_nested_table_column_name6905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_null_statement6926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_numeric_loop_param6948 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_numeric_loop_param6952 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x8000020000000000L});
    public static final BitSet FOLLOW_keyREVERSE_in_numeric_loop_param6958 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param6965 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param6969 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOPEN_in_open_statement6994 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement6998 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_open_statement7004 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expressions_in_open_statement7008 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_open_statement7012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_order_by_clause7036 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_keySIBLINGS_in_order_by_clause7042 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_order_by_clause7049 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_order_by_exprs_in_order_by_clause7053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_order_by_expr7076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L,0x0000000000000008L});
    public static final BitSet FOLLOW_142_in_order_by_expr7090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_143_in_order_by_expr7096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr7105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_keyFIRST_in_order_by_expr7109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr7115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_keyLAST_in_order_by_expr7119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs7143 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_order_by_exprs7149 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs7153 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0040080000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7194 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_keyNATURAL_in_outer_join_clause7202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0048080000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7215 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_table_name_in_outer_join_clause7225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L,0x0000000000000040L,0x0000000000000020L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_128_in_outer_join_clause7242 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_outer_join_clause7246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_outer_join_clause7252 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_clause7256 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_outer_join_clause7260 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_clause7264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_sign7288 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_PLUS_in_outer_join_sign7292 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_sign7296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_outer_join_type7319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_keyLEFT_in_outer_join_type7325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_keyRIGHT_in_outer_join_type7331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_keyOUTER_in_outer_join_type7339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_spec7364 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec7368 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_package_spec7374 = new BitSet(new long[]{0x0080000001800000L,0x0100000000000000L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_50_in_package_spec7380 = new BitSet(new long[]{0x0080000001800000L,0x0100000000000000L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_package_obj_spec_in_package_spec7391 = new BitSet(new long[]{0x0080000001800000L,0x0100000000000000L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_55_in_package_spec7400 = new BitSet(new long[]{0x0000000001840000L,0x0000400000000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec7405 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_package_spec7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_body7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_keyBODY_in_package_body7439 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_package_name_in_package_body7445 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_package_body7451 = new BitSet(new long[]{0x00A0000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_50_in_package_body7457 = new BitSet(new long[]{0x00A0000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_package_obj_body_in_package_body7467 = new BitSet(new long[]{0x00A0000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_53_in_package_body7478 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_package_body7482 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_package_body7493 = new BitSet(new long[]{0x0000000001840000L,0x0000400000000000L});
    public static final BitSet FOLLOW_package_name_in_package_body7499 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_package_body7506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_package_name7529 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_package_name7533 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_identifier_in_package_name7540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec7562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec7574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_spec7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_spec_in_package_obj_spec7633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec7645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec7681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body7715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body7727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body7739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body7751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_body7763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_body7775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_package_obj_body7786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_package_obj_body7798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_body7810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec7832 = new BitSet(new long[]{0x0008000001800002L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_51_in_parameter_spec7838 = new BitSet(new long[]{0x0000000001800002L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec7847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs7872 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_parameter_specs7878 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs7882 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_identifier_in_parameter_name7906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_path_string7927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pattern7948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_plsql_block7971 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block7975 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_RLABEL_in_plsql_block7979 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000001000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_keyDECLARE_in_plsql_block7992 = new BitSet(new long[]{0x0000000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_declare_spec_in_plsql_block8000 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_53_in_plsql_block8014 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_plsql_block8022 = new BitSet(new long[]{0x00C0000000000000L});
    public static final BitSet FOLLOW_54_in_plsql_block8030 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_plsql_block8036 = new BitSet(new long[]{0x0080000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_55_in_plsql_block8051 = new BitSet(new long[]{0x0000000001800002L});
    public static final BitSet FOLLOW_label_name_in_plsql_block8057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_condition8089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_type_dec_in_plsql_table_declaration8110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name8132 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_plsql_table_name8138 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name8142 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_keyPRAGMA_in_pragma_declaration8167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1002681401000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration8176 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8180 = new BitSet(new long[]{0x0010000001C00000L});
    public static final BitSet FOLLOW_52_in_pragma_declaration8186 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_function_name_in_pragma_declaration8192 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration8200 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_declaration8204 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8211 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration8220 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8224 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration8228 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration8232 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_pragma_declaration8236 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8240 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration8248 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration8256 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyBUILTIN_in_pragma_declaration8264 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8268 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration8272 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8276 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration8284 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8288 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration8292 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8296 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyINTERFACE_in_pragma_declaration8304 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8308 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration8312 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8316 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration8324 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8328 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration8332 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8336 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration8344 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration8348 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration8352 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration8356 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_pragma_declaration8366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_pragma_param8389 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_MINUS_in_pragma_param8395 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_pragma_param8402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pragma_param8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_pragma_param8424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params8446 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_pragma_params8452 = new BitSet(new long[]{0x0000000007C80000L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params8456 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_74_in_proc_fun_start8480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_proc_fun_start8486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_keyREPLACE_in_proc_fun_start8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_procedure_body8516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_procedure_body8523 = new BitSet(new long[]{0x0000000001C00000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body8527 = new BitSet(new long[]{0x0004000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_body8536 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_argument_in_procedure_body8540 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_COMMA_in_procedure_body8546 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_argument_in_procedure_body8550 = new BitSet(new long[]{0x00000000000000A0L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_body8557 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_procedure_body8569 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_50_in_procedure_body8575 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_declare_spec_in_procedure_body8588 = new BitSet(new long[]{0x0020000001800000L,0x0100000000000400L,0x0000000000010000L,0x0020020000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_53_in_procedure_body8600 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_procedure_body8610 = new BitSet(new long[]{0x00C0000000000000L});
    public static final BitSet FOLLOW_54_in_procedure_body8620 = new BitSet(new long[]{0x0080000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_procedure_body8626 = new BitSet(new long[]{0x0080000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_55_in_procedure_body8638 = new BitSet(new long[]{0x0000000001C40000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body8644 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_procedure_body8651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_procedure_declaration8672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_procedure_name8693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_procedure_name8703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_procedure_spec8727 = new BitSet(new long[]{0x0000000001C00000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec8731 = new BitSet(new long[]{0x0000000000040040L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_spec8739 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_arguments_in_procedure_spec8743 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_spec8747 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_procedure_spec8754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPARTITION_in_query_partition_clause8775 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_query_partition_clause8779 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause8783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_quoted_string8804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRAISE_in_raise_statement8825 = new BitSet(new long[]{0x0000000001800002L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement8831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration8855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_name8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_record_type_dec8899 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_type_name_in_record_type_dec8903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_record_type_dec8907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_keyRECORD_in_record_type_dec8911 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_record_type_dec8918 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_field_specs_in_record_type_dec8922 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_record_type_dec8926 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_record_type_dec8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREFERENCE_in_reference_model8951 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model8955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_reference_model8959 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_reference_model8963 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_reference_model8967 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_reference_model8971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model8977 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0010200000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model8983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_reference_model_name9005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_rows_clause9026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyUPDATED_in_return_rows_clause9032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_67_in_return_rows_clause9038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_return_rows_clause9044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_return_type9065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_returning_clause9088 = new BitSet(new long[]{0x0700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_keyRETURNING_in_returning_clause9094 = new BitSet(new long[]{0x0700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_select_list_in_returning_clause9100 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_keyBULK_in_returning_clause9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_returning_clause9110 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_returning_clause9117 = new BitSet(new long[]{0x0000000021800000L});
    public static final BitSet FOLLOW_lvalues_in_returning_clause9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_statement9142 = new BitSet(new long[]{0x4700000027C80042L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_return_statement9148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLBACK_in_rollback_statement9172 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_keyWORK_in_rollback_statement9178 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_88_in_rollback_statement9189 = new BitSet(new long[]{0x0000000001800000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_rollback_statement9195 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement9202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_rollback_statement9213 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_quoted_string_in_rollback_statement9217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_savepoint_name9241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_savepoint_statement9262 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement9266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_searched_case_statement9289 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_searched_case_statement9293 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_searched_case_statement9297 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_statement9301 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_searched_case_expression9327 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_nested_condition_in_searched_case_expression9331 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_searched_case_expression9335 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_searched_case_expression9339 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_select_statement_in_select_command9363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_select_expression9388 = new BitSet(new long[]{0x0F00000027E80040L,0x0200400000000028L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_121_in_select_expression9394 = new BitSet(new long[]{0x0700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_59_in_select_expression9400 = new BitSet(new long[]{0x0700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_67_in_select_expression9406 = new BitSet(new long[]{0x0700000027E80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_select_list_in_select_expression9413 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_keyBULK_in_select_expression9421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_select_expression9425 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_select_expression9436 = new BitSet(new long[]{0x0000000021800000L});
    public static final BitSet FOLLOW_lvalues_in_select_expression9440 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_select_expression9449 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_table_reference_list_in_select_expression9455 = new BitSet(new long[]{0x0000000000000002L,0xD004000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression9461 = new BitSet(new long[]{0x0000000000000002L,0xD004000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_LPAREN_in_select_expression9467 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression9471 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_select_expression9475 = new BitSet(new long[]{0x0000000000000002L,0xD004000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_where_clause_in_select_expression9485 = new BitSet(new long[]{0x0000000000000002L,0xD000000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_select_expression9494 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_group_by_clause_in_select_expression9503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000001E02000L});
    public static final BitSet FOLLOW_149_in_select_expression9514 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_select_expression9518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000001C02000L});
    public static final BitSet FOLLOW_model_clause_in_select_expression9527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001C02000L});
    public static final BitSet FOLLOW_150_in_select_expression9540 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L,0x0000000000100000L});
    public static final BitSet FOLLOW_67_in_select_expression9546 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_151_in_select_expression9558 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_152_in_select_expression9567 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_expression_in_select_expression9581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_subquery_in_select_expression9591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_order_by_clause_in_select_expression9609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list9633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_displayed_column_in_select_list9644 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_select_list9650 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_displayed_column_in_select_list9654 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_select_expression_in_select_statement9679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_selected_table9704 = new BitSet(new long[]{0x0004000001800002L,0x0000400000000000L});
    public static final BitSet FOLLOW_137_in_selected_table9712 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keyTHE_in_selected_table9718 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_selected_table9725 = new BitSet(new long[]{0x0004000001800002L,0x0000400000000000L});
    public static final BitSet FOLLOW_alias_in_selected_table9733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements9757 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_seq_of_statements9761 = new BitSet(new long[]{0x1420000029800002L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements9767 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_seq_of_statements9771 = new BitSet(new long[]{0x1420000029800002L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_70_in_set_transaction_command9795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command9799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_keyREAD_in_set_transaction_command9803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keyONLY_in_set_transaction_command9807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_schema_name9829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_simple_expression9851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_simple_expression9862 = new BitSet(new long[]{0x0000000F80000000L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_simple_expression9868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_simple_expression9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_simple_expression9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_simple_expression9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_simple_expression9892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_simple_expression9905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_simple_expression9916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_simple_expression9927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_simple_expression9939 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_host_variable_in_simple_expression9943 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_COLON_in_simple_expression9949 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_host_variable_in_simple_expression9953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_simple_expression9972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement9994 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_simple_case_statement10000 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement10004 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_case_statement10008 = new BitSet(new long[]{0x1420000029800000L,0x0941400000000460L,0x0000001000151186L,0x2064928000000000L,0x0000000000000115L});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_statement10012 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression10036 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_simple_case_expression10042 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression10046 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_case_expression10050 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression10054 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_140_in_single_column_for_loop10078 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop10082 = new BitSet(new long[]{0x0008000000000000L,0x0002000000000100L});
    public static final BitSet FOLLOW_51_in_single_column_for_loop10090 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_single_column_for_loop10094 = new BitSet(new long[]{0x0000000006480040L});
    public static final BitSet FOLLOW_literals_in_single_column_for_loop10100 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_subquery_in_single_column_for_loop10106 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_single_column_for_loop10112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_single_column_for_loop10122 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_pattern_in_single_column_for_loop10126 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_single_column_for_loop10133 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop10137 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_single_column_for_loop10141 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop10145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000402000000000L});
    public static final BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop10151 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop10157 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop10163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_sql_condition10194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sql_identifier10217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_sql_identifier10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_command_in_sql_statement10252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_modify_data_in_sql_command10273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_control_data_in_sql_command10284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subquery10305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_subquery10309 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_subquery10313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_subscript10334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBTYPE_in_subtype_declaration10356 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration10360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_subtype_declaration10364 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration10368 = new BitSet(new long[]{0x4000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_62_in_subtype_declaration10374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_subtype_declaration10378 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_keyRANGE_in_subtype_declaration10384 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration10388 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration10392 = new BitSet(new long[]{0x0000000006480000L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration10396 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_subtype_declaration10403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_statement10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement10436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement10447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement10458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement10481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement10493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement10504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement10515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement10526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_statement10537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement10549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_table_name10570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list10591 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_table_reference_list10597 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list10601 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_schema_name_in_table_spec10627 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_table_spec10631 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_table_name_in_table_spec10638 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_spec10644 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_link_name_in_table_spec10648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_table_type_dec10672 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_type_name_in_table_type_dec10676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_table_type_dec10680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_table_type_dec10684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_table_type_dec10691 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec10695 = new BitSet(new long[]{0x4000000000040000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_62_in_table_type_dec10701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_table_type_dec10705 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_table_type_dec10716 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_table_type_dec10720 = new BitSet(new long[]{0x0000000000000000L,0x0000020800000800L});
    public static final BitSet FOLLOW_75_in_table_type_dec10730 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_105_in_table_type_dec10739 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_99_in_table_type_dec10748 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_table_type_dec10752 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_integer_in_table_type_dec10756 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_table_type_dec10760 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_table_type_dec10776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_command_in_to_modify_data10797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_command_in_to_modify_data10808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_command_in_to_modify_data10819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_command_in_to_modify_data10830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_command_in_to_modify_data10841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_to_control_data10862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_to_control_data10873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_to_control_data10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_to_control_data10895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_to_control_data10906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_to_control_data10917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_to_control_data10928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_type_declaration10950 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_type_declaration10954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_type_declaration10958 = new BitSet(new long[]{0x0000000001800040L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0001000001800000L});
    public static final BitSet FOLLOW_keyNEW_in_type_declaration10964 = new BitSet(new long[]{0x0000000001800040L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_type_declaration10973 = new BitSet(new long[]{0x4000000000040000L});
    public static final BitSet FOLLOW_62_in_type_declaration10979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_type_declaration10983 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_type_declaration10992 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expressions_in_type_declaration10996 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_type_declaration11000 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_type_declaration11006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_name11027 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_type_name11033 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_identifier_in_type_name11037 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_datatype_in_type_spec11061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_type_spec11074 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_TYPE_ATTR_in_type_spec11078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_type_spec11090 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_ROWTYPE_ATTR_in_type_spec11094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type_spec11106 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_LPAREN_in_type_spec11112 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_NUMBER_in_type_spec11116 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_type_spec11120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs11143 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_update_column_specs11149 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs11153 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_column_spec_in_update_column_spec11177 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_EQ_in_update_column_spec11181 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_update_column_spec11185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_update_command11206 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_selected_table_in_update_command11210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_update_command11216 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L});
    public static final BitSet FOLLOW_update_nested_column_specs_in_update_command11225 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_update_column_specs_in_update_command11233 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_114_in_update_command11245 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010242100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_update_command11254 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_cursor_name_in_update_command11258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_sql_condition_in_update_command11267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_returning_clause_in_update_command11285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs11309 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_update_nested_column_specs11315 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs11319 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_LPAREN_in_update_nested_column_spec11343 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_update_nested_column_spec11347 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_update_nested_column_spec11351 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_EQ_in_update_nested_column_spec11355 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_update_nested_column_spec11359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function11380 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function11386 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function11390 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function11399 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000003L});
    public static final BitSet FOLLOW_65_in_user_defined_function11405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_user_defined_function11411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_user_defined_function11417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration11444 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000008000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_155_in_variable_declaration11449 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration11457 = new BitSet(new long[]{0x4010000000040010L});
    public static final BitSet FOLLOW_62_in_variable_declaration11462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_variable_declaration11466 = new BitSet(new long[]{0x0010000000040010L});
    public static final BitSet FOLLOW_ASSIGN_in_variable_declaration11479 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_52_in_variable_declaration11485 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_variable_declaration11491 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_SEMI_in_variable_declaration11497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_expression11518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_variable_name11540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_names11562 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_variable_names11568 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_variable_name_in_variable_names11572 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_keyTYPE_in_varray_declaration11596 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_type_name_in_varray_declaration11600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_varray_declaration11604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_keyVARRAY_in_varray_declaration11613 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keyVARYING_in_varray_declaration11619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_keyARRAY_in_varray_declaration11623 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_varray_declaration11629 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_integer_in_varray_declaration11633 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_varray_declaration11637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_varray_declaration11643 = new BitSet(new long[]{0x0000000001800000L,0x0000FFFFFCFFF800L,0x0002000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_type_spec_in_varray_declaration11647 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_62_in_varray_declaration11653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_varray_declaration11657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_where_clause11681 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_where_clause11685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expression_list11713 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list11717 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_expression_list11721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions11753 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_plsql_expressions11759 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions11763 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_expression11794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions11815 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_sql_expressions11821 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions11825 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_expr_add_in_sql_expression11856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions11878 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_COMMA_in_nested_expressions11884 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions11888 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_sql_expression_in_nested_expression11915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_nested_expression11928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool11950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_expr_bool11956 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool11960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_expr_and_in_expr_or11985 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_61_in_expr_or11991 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_or11995 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_62_in_expr_and12022 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_not_in_expr_and12029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_in_expr_not12051 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_relational_op_in_expr_not12060 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not12064 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_expr_not12072 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not12078 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_expr_not12084 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not12090 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not12096 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_68_in_expr_not12104 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_62_in_expr_not12110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_expr_not12117 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_62_in_expr_not12127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_expr_not12134 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not12138 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_62_in_expr_not12148 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_expr_not12155 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not12159 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_expr_not12163 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_expr_not12167 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_62_in_expr_not12177 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_expr_not12184 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_expr_not12188 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expressions_in_expr_not12192 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_expr_not12196 = new BitSet(new long[]{0xC008000F8003F002L,0x0000000000000110L});
    public static final BitSet FOLLOW_EQ_in_relational_op12223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTH_in_relational_op12233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTH_in_relational_op12243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQ_in_relational_op12253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEQ_in_relational_op12263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEQ_in_relational_op12273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add12295 = new BitSet(new long[]{0x0000008006000002L});
    public static final BitSet FOLLOW_PLUS_in_expr_add12303 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_expr_add12309 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOUBLEVERTBAR_in_expr_add12315 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add12321 = new BitSet(new long[]{0x0000008006000002L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul12346 = new BitSet(new long[]{0x0000010000200002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_mul12354 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DIVIDE_in_expr_mul12360 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul12366 = new BitSet(new long[]{0x0000010000200002L});
    public static final BitSet FOLLOW_PLUS_in_expr_sign12393 = new BitSet(new long[]{0x0700000021C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_expr_sign12399 = new BitSet(new long[]{0x0700000021C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_pow_in_expr_sign12406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expr_paren12427 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_expr_paren12431 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_expr_paren12435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow12457 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_EXPONENT_in_expr_pow12463 = new BitSet(new long[]{0x0700000021C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow12467 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_expr_paren_in_expr_expr12492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_expr_expr12503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_expr_expr12515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expr_expr12526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_expr_expr12537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_expr_expr12548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_integer_expr12578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_keyA12603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_keyAUTOMATIC12621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_keyCOUNT12639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_keyCROSS12657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_keyCUBE12675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_keyCURRENT_OF12693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_keyDAY12711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_keyDBTIMEZONE12729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_keyDECLARE12747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_keyDECREMENT12765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_keyDIMENSION12783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_keyEMPTY12801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_keyEQUALS_PATH12819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_keyESCAPE12837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_keyFIRST12855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_keyFULL12873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_keyGROUPING12891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_keyIGNORE12909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_keyINCREMENT12927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_keyINFINITE12945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_keyINNER12963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_keyINTERVAL12981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_keyITERATE12999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_keyJOIN13017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_keyKEEP13035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_keyLAST13053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_keyLEFT13071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_keyLIKE213089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_keyLIKE413107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_keyLIKEC13125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_keyLOCAL13143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_keyMAIN13161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_keyMEASURES13179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_keyMEMBER13197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_keyMODEL13215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_keyMONTH13233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_keyNAN13251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_keyNATURAL13269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_keyNAV13287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_keyNOCYCLE13305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_keyNULLS13323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_keyONLY13341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_keyOUTER13359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_keyPARTITION13377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_keyPRECISION13395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_keyPRESENT13413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_keyREFERENCE13431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_keyREGEXP_LIKE13449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_keyRIGHT13467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_keyROLLUP13485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_keyRULES13503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_keySECOND13521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_keySECONDS13539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_keySEQUENTIAL13557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_keySESSIONTIMEZONE13575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_keySETS13593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_keySIBLINGS13611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_keySINGLE13629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_keySOME13647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_keySUBMULTISET13665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_keyTIME13683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_keyTIMESTAMP13701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_keyTHE13719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_keyUNDER_PATH13737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_keyUNTIL13755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_keyUPDATED13773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_keyUPSERT13791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_keyWAIT13809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_keyYEAR13827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_keyZONE13845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_keyARRAY13863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_keyAUTONOMOUS_TRANSACTION13881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_keyBODY13899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_keyBUILTIN13917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_229_in_keyBULK13935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_230_in_keyBYTE13953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_231_in_keyCLOSE13971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_232_in_keyCOLLECT13989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_233_in_keyCURSOR14007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_234_in_keyELSIF14025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_235_in_keyEXCEPTION_INIT14044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_236_in_keyEXIT14062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_237_in_keyFIPSFLAG14080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_keyFUNCTION14098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_238_in_keyINTERFACE14116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_239_in_keyLOOP14134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_240_in_keyNEW14153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_241_in_keyNEW_NAMES14171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_242_in_keyOPEN14189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_243_in_keyOUT14207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_244_in_keyPACKAGE14226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_245_in_keyPRAGMA14245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_246_in_keyRAISE14264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_247_in_keyRANGE14283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_248_in_keyREAD14301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_249_in_keyRECORD14319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_250_in_keyREF14338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_251_in_keyREPLACE14356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_252_in_keyRESTRICT_REFERENCES14374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_253_in_keyRETURN14392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_254_in_keyRETURNING14411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_255_in_keyREVERSE14430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_256_in_keyROLLBACK14448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_keySERIALLY_REUSABLE14466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_258_in_keySUBTYPE14484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_259_in_keyTRANSACTION14502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_260_in_keyTYPE14520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_261_in_keyUSING14538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_262_in_keyVARRAY14556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_keyVARYING14574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_264_in_keyWHILE14592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_265_in_keyWORK14611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_synpred23687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred24697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_synpred321001 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_condition_not_in_synpred321005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred361125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred371076 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred371080 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred371084 = new BitSet(new long[]{0x0000000000003040L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred371090 = new BitSet(new long[]{0x0000000000003000L});
    public static final BitSet FOLLOW_set_in_synpred371095 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_synpred371111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_command_in_synpred371115 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred371119 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred371125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred461210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred471232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_synpred501355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_synpred511366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_synpred521377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_synpred531388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_synpred541399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_synpred551410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_synpred561421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_synpred571432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_synpred581443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_synpred591454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_member_in_synpred601465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_synpred611476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_synpred631498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred691604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred701552 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred701556 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred701560 = new BitSet(new long[]{0x0000000000003000L});
    public static final BitSet FOLLOW_set_in_synpred701562 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_66_in_synpred701580 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_keySOME_in_synpred701586 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_67_in_synpred701592 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_synpred701598 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred701604 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_synpred701610 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred701616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred781695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred801759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred811728 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred811732 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred811736 = new BitSet(new long[]{0x4008000000000000L});
    public static final BitSet FOLLOW_62_in_synpred811742 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred811749 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_synpred811753 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred811759 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_select_command_in_synpred811765 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred811771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_synpred831805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyESCAPE_in_synpred962141 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_synpred962145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred1002258 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_condition_and_in_synpred1002262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_synpred2034065 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_DOT_in_synpred2034069 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred2034073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_names_in_synpred2094383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred2274825 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred2274829 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred2274833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred2335068 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000100142100000L,0x0000020000001000L});
    public static final BitSet FOLLOW_group_by_expr_in_synpred2335072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred2355146 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expression_list_in_synpred2355150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_synpred2495663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_clause_in_synpred2505669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_loop_param_in_synpred2636029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_synpred2946821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_synpred2997090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_synpred3007096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred3017105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_keyFIRST_in_synpred3017109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred3027115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_keyLAST_in_synpred3027119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred3037149 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_order_by_expr_in_synpred3037153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred3077231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred3087242 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_synpred3087246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred3097252 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_synpred3097256 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_column_specs_in_synpred3097260 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred3097264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_synpred3889394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_reference_list_in_synpred3939455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_synpred3949461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred3959485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred3969494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_clause_in_synpred3979503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_synpred3989514 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000027L,0x0000010042100000L,0x0000020004000400L});
    public static final BitSet FOLLOW_sql_condition_in_synpred3989518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_clause_in_synpred3999527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_synpred4049540 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L,0x0000000000100000L});
    public static final BitSet FOLLOW_67_in_synpred4049546 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_151_in_synpred4049558 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_152_in_synpred4049567 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_select_expression_in_synpred4049581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_synpred4049591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred4059609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred4119733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred43410425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred43710458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_synpred43910481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_synpred44410537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred44510597 = new BitSet(new long[]{0x0000000001800040L,0x0000400000000000L,0x0000000000000200L,0x0000000002000000L});
    public static final BitSet FOLLOW_selected_table_in_synpred44510601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred47611386 = new BitSet(new long[]{0x0000000001800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_sql_identifier_in_synpred47611390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred48711713 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred48711717 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred48711721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred48911821 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_sql_expression_in_synpred48911825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred49111915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred49211956 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_or_in_synpred49211960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_synpred49311991 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_and_in_synpred49311995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_op_in_synpred49512060 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_synpred49512064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_synpred49612072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_synpred49712078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_synpred49812084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred49912090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred50012096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_synpred50212104 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_62_in_synpred50212110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred50212117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred50412127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_synpred50412134 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_synpred50412138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred50612148 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_63_in_synpred50612155 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_synpred50612159 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_synpred50612163 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_add_in_synpred50612167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred50812177 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred50812184 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_synpred50812188 = new BitSet(new long[]{0x4700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_nested_expressions_in_synpred50812192 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RPAREN_in_synpred50812196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred51612299 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_mul_in_synpred51612321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred51812350 = new BitSet(new long[]{0x0700000027C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_sign_in_synpred51812366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPONENT_in_synpred52112463 = new BitSet(new long[]{0x0700000021C80040L,0x0200400000000020L,0x0000000042100000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expr_expr_in_synpred52112467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_synpred52312503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_synpred52612537 = new BitSet(new long[]{0x0000000000000002L});

}
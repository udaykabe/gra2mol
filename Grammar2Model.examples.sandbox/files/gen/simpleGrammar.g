/** 
 * Grammar of Aemilia language
 **/

grammar simpleGrammar;

options {
	backtrack=true; 

	output=template;
}


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
archi_type returns [Node returnNode] 
: TK_0='ARCHI_TYPE' WORDGen=WORD archi_headerGen+=archi_header archi_elem_typesGen+=archi_elem_types archi_topologyGen+=archi_topology TK_1='END' 
	{
		// Create return CST Node
		Node archi_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_typeReturnNode.setKind("archi_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			archi_typeReturnNode.getChildren().add(WORDGenLeaf);
		}
	    // Create a CST Node
		if($archi_headerGen != null) {
	        for(Iterator it = $archi_headerGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_header_return r = (simpleGrammarParser.archi_header_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_header");
	            	archi_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($archi_elem_typesGen != null) {
	        for(Iterator it = $archi_elem_typesGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_elem_types_return r = (simpleGrammarParser.archi_elem_types_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_elem_types");
	            	archi_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($archi_topologyGen != null) {
	        for(Iterator it = $archi_topologyGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_topology_return r = (simpleGrammarParser.archi_topology_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_topology");
	            	archi_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		archi_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$archi_type.returnNode = archi_typeReturnNode;
	};

archi_header returns [Node returnNode] 
: TK_0='(' TK_1='void' TK_2=')' 
	{
		// Create return CST Node
		Node archi_headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_headerReturnNode.setKind("archi_header");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		archi_headerReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		archi_headerReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$archi_header.returnNode = archi_headerReturnNode;
	} | TK_0='(' init_constant_listGen+=init_constant_list TK_1=')' 
	{
		// Create return CST Node
		Node archi_headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_headerReturnNode.setKind("archi_header");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($init_constant_listGen != null) {
	        for(Iterator it = $init_constant_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.init_constant_list_return r = (simpleGrammarParser.init_constant_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("init_constant_list");
	            	archi_headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		archi_headerReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$archi_header.returnNode = archi_headerReturnNode;
	};
	
init_constant_list returns [Node returnNode] 
: init_constantGen+=init_constant (TK_0=',' init_constantGen_1+=init_constant)* 
	{
		// Create return CST Node
		Node init_constant_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		init_constant_listReturnNode.setKind("init_constant_list");
	    // Create a CST Node
		if($init_constantGen != null) {
	        for(Iterator it = $init_constantGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.init_constant_return r = (simpleGrammarParser.init_constant_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("init_constant");
	            	init_constant_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal init_constantGen_1 aggregation
		if($init_constantGen_1 != null) {
	    for(int pos = 0; pos < $init_constantGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		init_constant_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($init_constantGen_1 != null) {		
	    	simpleGrammarParser.init_constant_return r = (simpleGrammarParser.init_constant_return) $init_constantGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("init_constant");
	    		init_constant_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$init_constant_list.returnNode = init_constant_listReturnNode;
	};
	
init_constant returns [Node returnNode] 
: TK_0='const' dataTypeGen+=dataType constNameGen+=constName TK_1=':=' exprGen+=expr 
	{
		// Create return CST Node
		Node init_constantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		init_constantReturnNode.setKind("init_constant");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		init_constantReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($dataTypeGen != null) {
	        for(Iterator it = $dataTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.dataType_return r = (simpleGrammarParser.dataType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("dataType");
	            	init_constantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($constNameGen != null) {
	        for(Iterator it = $constNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.constName_return r = (simpleGrammarParser.constName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constName");
	            	init_constantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		init_constantReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	init_constantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$init_constant.returnNode = init_constantReturnNode;
	};
	
constName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node constNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constNameReturnNode.setKind("constName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			constNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$constName.returnNode = constNameReturnNode;
	};
	
archi_elem_types returns [Node returnNode] 
: TK_0='ARCHI_ELEM_TYPES' (elem_typeGen+=elem_type)+ 
	{
		// Create return CST Node
		Node archi_elem_typesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_elem_typesReturnNode.setKind("archi_elem_types");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_elem_typesReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elem_typeGen != null) {
	        for(Iterator it = $elem_typeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.elem_type_return r = (simpleGrammarParser.elem_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elem_type");
	            	archi_elem_typesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_elem_types.returnNode = archi_elem_typesReturnNode;
	};
	
elem_type returns [Node returnNode] 
: TK_0='ELEM_TYPE' WORDGen=WORD et_headerGen+=et_header 
	  TK_1='BEHAVIOR' behavior_equation_listGen+=behavior_equation_list
	  TK_2='INPUT_INTERACTIONS' interaction_list_inputGen+=interaction_list_input 
	  TK_3='OUTPUT_INTERACTIONS' interaction_list_outputGen+=interaction_list_output 
	{
		// Create return CST Node
		Node elem_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elem_typeReturnNode.setKind("elem_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elem_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			elem_typeReturnNode.getChildren().add(WORDGenLeaf);
		}
	    // Create a CST Node
		if($et_headerGen != null) {
	        for(Iterator it = $et_headerGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.et_header_return r = (simpleGrammarParser.et_header_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("et_header");
	            	elem_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		elem_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($behavior_equation_listGen != null) {
	        for(Iterator it = $behavior_equation_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.behavior_equation_list_return r = (simpleGrammarParser.behavior_equation_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("behavior_equation_list");
	            	elem_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		elem_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($interaction_list_inputGen != null) {
	        for(Iterator it = $interaction_list_inputGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interaction_list_input_return r = (simpleGrammarParser.interaction_list_input_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interaction_list_input");
	            	elem_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		elem_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($interaction_list_outputGen != null) {
	        for(Iterator it = $interaction_list_outputGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interaction_list_output_return r = (simpleGrammarParser.interaction_list_output_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interaction_list_output");
	            	elem_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elem_type.returnNode = elem_typeReturnNode;
	};
	  
et_header returns [Node returnNode] 
: TK_0='(' TK_1='void' TK_2=')' 
	{
		// Create return CST Node
		Node et_headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		et_headerReturnNode.setKind("et_header");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		et_headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		et_headerReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		et_headerReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$et_header.returnNode = et_headerReturnNode;
	} | TK_0='(' constant_listGen+=constant_list TK_1=')' 
	{
		// Create return CST Node
		Node et_headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		et_headerReturnNode.setKind("et_header");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		et_headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($constant_listGen != null) {
	        for(Iterator it = $constant_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.constant_list_return r = (simpleGrammarParser.constant_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constant_list");
	            	et_headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		et_headerReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$et_header.returnNode = et_headerReturnNode;
	};
	
constant_list returns [Node returnNode] 
: constantGen+=constant (TK_0=',' constantGen_1+=constant)* 
	{
		// Create return CST Node
		Node constant_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constant_listReturnNode.setKind("constant_list");
	    // Create a CST Node
		if($constantGen != null) {
	        for(Iterator it = $constantGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.constant_return r = (simpleGrammarParser.constant_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constant");
	            	constant_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal constantGen_1 aggregation
		if($constantGen_1 != null) {
	    for(int pos = 0; pos < $constantGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		constant_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($constantGen_1 != null) {		
	    	simpleGrammarParser.constant_return r = (simpleGrammarParser.constant_return) $constantGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("constant");
	    		constant_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$constant_list.returnNode = constant_listReturnNode;
	};
	
constant returns [Node returnNode] 
: TK_0='const' dataTypeGen+=dataType constNameGen+=constName 
	{
		// Create return CST Node
		Node constantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constantReturnNode.setKind("constant");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		constantReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($dataTypeGen != null) {
	        for(Iterator it = $dataTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.dataType_return r = (simpleGrammarParser.dataType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("dataType");
	            	constantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($constNameGen != null) {
	        for(Iterator it = $constNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.constName_return r = (simpleGrammarParser.constName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constName");
	            	constantReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$constant.returnNode = constantReturnNode;
	};
	
interaction_list_input returns [Node returnNode] 
: TK_0='void' 
	{
		// Create return CST Node
		Node interaction_list_inputReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_list_inputReturnNode.setKind("interaction_list_input");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_list_inputReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interaction_list_input.returnNode = interaction_list_inputReturnNode;
	}
	| interactionGen+=interaction (TK_0=';' interactionGen_1+=interaction)* 
	{
		// Create return CST Node
		Node interaction_list_inputReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_list_inputReturnNode.setKind("interaction_list_input");
	    // Create a CST Node
		if($interactionGen != null) {
	        for(Iterator it = $interactionGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interaction_return r = (simpleGrammarParser.interaction_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interaction");
	            	interaction_list_inputReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal interactionGen_1 aggregation
		if($interactionGen_1 != null) {
	    for(int pos = 0; pos < $interactionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_list_inputReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($interactionGen_1 != null) {		
	    	simpleGrammarParser.interaction_return r = (simpleGrammarParser.interaction_return) $interactionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("interaction");
	    		interaction_list_inputReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$interaction_list_input.returnNode = interaction_list_inputReturnNode;
	};
	
interaction_list_output returns [Node returnNode] 
: TK_0='void' 
	{
		// Create return CST Node
		Node interaction_list_outputReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_list_outputReturnNode.setKind("interaction_list_output");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_list_outputReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interaction_list_output.returnNode = interaction_list_outputReturnNode;
	}
	| interactionGen+=interaction (TK_0=';' interactionGen_1+=interaction)* 
	{
		// Create return CST Node
		Node interaction_list_outputReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_list_outputReturnNode.setKind("interaction_list_output");
	    // Create a CST Node
		if($interactionGen != null) {
	        for(Iterator it = $interactionGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interaction_return r = (simpleGrammarParser.interaction_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interaction");
	            	interaction_list_outputReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal interactionGen_1 aggregation
		if($interactionGen_1 != null) {
	    for(int pos = 0; pos < $interactionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_list_outputReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($interactionGen_1 != null) {		
	    	simpleGrammarParser.interaction_return r = (simpleGrammarParser.interaction_return) $interactionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("interaction");
	    		interaction_list_outputReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$interaction_list_output.returnNode = interaction_list_outputReturnNode;
	};
	
interaction returns [Node returnNode] 
: (interaction_typeGen+=interaction_type interactionNameGen+=interactionName) 
	{
		// Create return CST Node
		Node interactionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interactionReturnNode.setKind("interaction");
	    // Create a CST Node
		if($interaction_typeGen != null) {
	        for(Iterator it = $interaction_typeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interaction_type_return r = (simpleGrammarParser.interaction_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interaction_type");
	            	interactionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($interactionNameGen != null) {
	        for(Iterator it = $interactionNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interactionName_return r = (simpleGrammarParser.interactionName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interactionName");
	            	interactionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$interaction.returnNode = interactionReturnNode;
	};
	
interaction_type returns [Node returnNode] 
: TK_0='UNI' 
	{
		// Create return CST Node
		Node interaction_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_typeReturnNode.setKind("interaction_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interaction_type.returnNode = interaction_typeReturnNode;
	} | TK_0='AND' 
	{
		// Create return CST Node
		Node interaction_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_typeReturnNode.setKind("interaction_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interaction_type.returnNode = interaction_typeReturnNode;
	} | TK_0='OR' 
	{
		// Create return CST Node
		Node interaction_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interaction_typeReturnNode.setKind("interaction_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		interaction_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$interaction_type.returnNode = interaction_typeReturnNode;
	};
	
behavior_equation_list returns [Node returnNode] 
: first_equationGen+=first_equation equations_listGen+=equations_list? 
	{
		// Create return CST Node
		Node behavior_equation_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		behavior_equation_listReturnNode.setKind("behavior_equation_list");
	    // Create a CST Node
		if($first_equationGen != null) {
	        for(Iterator it = $first_equationGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.first_equation_return r = (simpleGrammarParser.first_equation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("first_equation");
	            	behavior_equation_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($equations_listGen != null) {
	        for(Iterator it = $equations_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.equations_list_return r = (simpleGrammarParser.equations_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("equations_list");
	            	behavior_equation_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$behavior_equation_list.returnNode = behavior_equation_listReturnNode;
	} ;
	
first_equation returns [Node returnNode] 
: eqNameGen+=eqName TK_0='(' behavior_header_firstGen+=behavior_header_first TK_1=')' TK_2='=' processTermGen+=processTerm TK_3=';'? 
	{
		// Create return CST Node
		Node first_equationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		first_equationReturnNode.setKind("first_equation");
	    // Create a CST Node
		if($eqNameGen != null) {
	        for(Iterator it = $eqNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.eqName_return r = (simpleGrammarParser.eqName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("eqName");
	            	first_equationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		first_equationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($behavior_header_firstGen != null) {
	        for(Iterator it = $behavior_header_firstGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.behavior_header_first_return r = (simpleGrammarParser.behavior_header_first_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("behavior_header_first");
	            	first_equationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		first_equationReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		first_equationReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($processTermGen != null) {
	        for(Iterator it = $processTermGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.processTerm_return r = (simpleGrammarParser.processTerm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("processTerm");
	            	first_equationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		first_equationReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$first_equation.returnNode = first_equationReturnNode;
	};
	
equations_list returns [Node returnNode] 
: equationsGen+=equations* 
	{
		// Create return CST Node
		Node equations_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		equations_listReturnNode.setKind("equations_list");
	    // Create a CST Node
		if($equationsGen != null) {
	        for(Iterator it = $equationsGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.equations_return r = (simpleGrammarParser.equations_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("equations");
	            	equations_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$equations_list.returnNode = equations_listReturnNode;
	};
	
equations returns [Node returnNode] 
: eqNameGen+=eqName TK_0='(' behavior_headerGen+=behavior_header TK_1=')' TK_2='=' processTermGen+=processTerm TK_3=';'? 
	{
		// Create return CST Node
		Node equationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		equationsReturnNode.setKind("equations");
	    // Create a CST Node
		if($eqNameGen != null) {
	        for(Iterator it = $eqNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.eqName_return r = (simpleGrammarParser.eqName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("eqName");
	            	equationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		equationsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($behavior_headerGen != null) {
	        for(Iterator it = $behavior_headerGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.behavior_header_return r = (simpleGrammarParser.behavior_header_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("behavior_header");
	            	equationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		equationsReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		equationsReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($processTermGen != null) {
	        for(Iterator it = $processTermGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.processTerm_return r = (simpleGrammarParser.processTerm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("processTerm");
	            	equationsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		equationsReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$equations.returnNode = equationsReturnNode;
	};
	
eqName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node eqNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		eqNameReturnNode.setKind("eqName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			eqNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$eqName.returnNode = eqNameReturnNode;
	};
	
behavior_header_first returns [Node returnNode] 
: (TK_0='void' | leftSide_firstGen+=leftSide_first) TK_1=';' (TK_2='void' | rightSideGen+=rightSide) 
	{
		// Create return CST Node
		Node behavior_header_firstReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		behavior_header_firstReturnNode.setKind("behavior_header_first");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		behavior_header_firstReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($leftSide_firstGen != null) {
	        for(Iterator it = $leftSide_firstGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.leftSide_first_return r = (simpleGrammarParser.leftSide_first_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("leftSide_first");
	            	behavior_header_firstReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		behavior_header_firstReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		behavior_header_firstReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($rightSideGen != null) {
	        for(Iterator it = $rightSideGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.rightSide_return r = (simpleGrammarParser.rightSide_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rightSide");
	            	behavior_header_firstReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$behavior_header_first.returnNode = behavior_header_firstReturnNode;
	};
	
behavior_header returns [Node returnNode] 
: (TK_0='void' | leftSideGen+=leftSide) TK_1=';' (TK_2='void' | rightSideGen+=rightSide) 
	{
		// Create return CST Node
		Node behavior_headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		behavior_headerReturnNode.setKind("behavior_header");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		behavior_headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($leftSideGen != null) {
	        for(Iterator it = $leftSideGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.leftSide_return r = (simpleGrammarParser.leftSide_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("leftSide");
	            	behavior_headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		behavior_headerReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		behavior_headerReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($rightSideGen != null) {
	        for(Iterator it = $rightSideGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.rightSide_return r = (simpleGrammarParser.rightSide_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rightSide");
	            	behavior_headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$behavior_header.returnNode = behavior_headerReturnNode;
	};
	
leftSide_first returns [Node returnNode] 
: varInitGen+=varInit (TK_0=',' varInitGen_1+=varInit)* 
	{
		// Create return CST Node
		Node leftSide_firstReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		leftSide_firstReturnNode.setKind("leftSide_first");
	    // Create a CST Node
		if($varInitGen != null) {
	        for(Iterator it = $varInitGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.varInit_return r = (simpleGrammarParser.varInit_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("varInit");
	            	leftSide_firstReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal varInitGen_1 aggregation
		if($varInitGen_1 != null) {
	    for(int pos = 0; pos < $varInitGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		leftSide_firstReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($varInitGen_1 != null) {		
	    	simpleGrammarParser.varInit_return r = (simpleGrammarParser.varInit_return) $varInitGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("varInit");
	    		leftSide_firstReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$leftSide_first.returnNode = leftSide_firstReturnNode;
	};

varInit returns [Node returnNode] 
: normalTypeGen+=normalType WORDGen=WORD TK_0=':=' exprGen+=expr 
	{
		// Create return CST Node
		Node varInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varInitReturnNode.setKind("varInit");
	    // Create a CST Node
		if($normalTypeGen != null) {
	        for(Iterator it = $normalTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.normalType_return r = (simpleGrammarParser.normalType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalType");
	            	varInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			varInitReturnNode.getChildren().add(WORDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		varInitReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	varInitReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$varInit.returnNode = varInitReturnNode;
	};
	
leftSide returns [Node returnNode] 
: varGen+=var (TK_0=',' varGen_1+=var)* 
	{
		// Create return CST Node
		Node leftSideReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		leftSideReturnNode.setKind("leftSide");
	    // Create a CST Node
		if($varGen != null) {
	        for(Iterator it = $varGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.var_return r = (simpleGrammarParser.var_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("var");
	            	leftSideReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal varGen_1 aggregation
		if($varGen_1 != null) {
	    for(int pos = 0; pos < $varGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		leftSideReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($varGen_1 != null) {		
	    	simpleGrammarParser.var_return r = (simpleGrammarParser.var_return) $varGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("var");
	    		leftSideReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$leftSide.returnNode = leftSideReturnNode;
	};
	
var returns [Node returnNode] 
: normalTypeGen+=normalType WORDGen=WORD 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a CST Node
		if($normalTypeGen != null) {
	        for(Iterator it = $normalTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.normalType_return r = (simpleGrammarParser.normalType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalType");
	            	varReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			varReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	};
	
rightSide returns [Node returnNode] 
:localGen+=local (TK_0=',' localGen_1+=local)* 
	{
		// Create return CST Node
		Node rightSideReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rightSideReturnNode.setKind("rightSide");
	    // Create a CST Node
		if($localGen != null) {
	        for(Iterator it = $localGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.local_return r = (simpleGrammarParser.local_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("local");
	            	rightSideReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal localGen_1 aggregation
		if($localGen_1 != null) {
	    for(int pos = 0; pos < $localGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rightSideReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($localGen_1 != null) {		
	    	simpleGrammarParser.local_return r = (simpleGrammarParser.local_return) $localGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("local");
	    		rightSideReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$rightSide.returnNode = rightSideReturnNode;
	};
	
local returns [Node returnNode] 
: TK_0='local' normalTypeGen+=normalType WORDGen=WORD 
	{
		// Create return CST Node
		Node localReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		localReturnNode.setKind("local");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		localReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($normalTypeGen != null) {
	        for(Iterator it = $normalTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.normalType_return r = (simpleGrammarParser.normalType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalType");
	            	localReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			localReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$local.returnNode = localReturnNode;
	};

processTerm returns [Node returnNode] 
: TK_0='stop' 
	{
		// Create return CST Node
		Node processTermReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		processTermReturnNode.setKind("processTerm");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		processTermReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$processTerm.returnNode = processTermReturnNode;
	}
			 | actionGen+=action TK_0='.' process_term_1Gen+=process_term_1 
	{
		// Create return CST Node
		Node processTermReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		processTermReturnNode.setKind("processTerm");
	    // Create a CST Node
		if($actionGen != null) {
	        for(Iterator it = $actionGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.action_return r = (simpleGrammarParser.action_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("action");
	            	processTermReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		processTermReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($process_term_1Gen != null) {
	        for(Iterator it = $process_term_1Gen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.process_term_1_return r = (simpleGrammarParser.process_term_1_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("process_term_1");
	            	processTermReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$processTerm.returnNode = processTermReturnNode;
	}
			 | TK_0='choice' TK_1='{' process_term_2Gen+=process_term_2 (TK_2=',' process_term_2Gen_1+=process_term_2 )* TK_3='}' 
	{
		// Create return CST Node
		Node processTermReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		processTermReturnNode.setKind("processTerm");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		processTermReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		processTermReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($process_term_2Gen != null) {
	        for(Iterator it = $process_term_2Gen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.process_term_2_return r = (simpleGrammarParser.process_term_2_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("process_term_2");
	            	processTermReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal process_term_2Gen_1 aggregation
		if($process_term_2Gen_1 != null) {
	    for(int pos = 0; pos < $process_term_2Gen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		processTermReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($process_term_2Gen_1 != null) {		
	    	simpleGrammarParser.process_term_2_return r = (simpleGrammarParser.process_term_2_return) $process_term_2Gen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("process_term_2");
	    		processTermReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		processTermReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$processTerm.returnNode = processTermReturnNode;
	};
			 
process_term_1 returns [Node returnNode] 
: processTermGen+=processTerm 
	{
		// Create return CST Node
		Node process_term_1ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		process_term_1ReturnNode.setKind("process_term_1");
	    // Create a CST Node
		if($processTermGen != null) {
	        for(Iterator it = $processTermGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.processTerm_return r = (simpleGrammarParser.processTerm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("processTerm");
	            	process_term_1ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$process_term_1.returnNode = process_term_1ReturnNode;
	}
			   | behavEqInvocationGen+=behavEqInvocation 
	{
		// Create return CST Node
		Node process_term_1ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		process_term_1ReturnNode.setKind("process_term_1");
	    // Create a CST Node
		if($behavEqInvocationGen != null) {
	        for(Iterator it = $behavEqInvocationGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.behavEqInvocation_return r = (simpleGrammarParser.behavEqInvocation_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("behavEqInvocation");
	            	process_term_1ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$process_term_1.returnNode = process_term_1ReturnNode;
	};
			   
behavEqInvocation returns [Node returnNode] 
:
			 WORDGen=WORD TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node behavEqInvocationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		behavEqInvocationReturnNode.setKind("behavEqInvocation");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			behavEqInvocationReturnNode.getChildren().add(WORDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		behavEqInvocationReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	behavEqInvocationReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		behavEqInvocationReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$behavEqInvocation.returnNode = behavEqInvocationReturnNode;
	};
			 
expressionList returns [Node returnNode] 
: exprGen+=expr (TK_0=',' exprGen_1+=expr)* 
	{
		// Create return CST Node
		Node expressionListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		expressionListReturnNode.setKind("expressionList");
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	expressionListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal exprGen_1 aggregation
		if($exprGen_1 != null) {
	    for(int pos = 0; pos < $exprGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		expressionListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($exprGen_1 != null) {		
	    	simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) $exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr");
	    		expressionListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$expressionList.returnNode = expressionListReturnNode;
	};
			   
process_term_2 returns [Node returnNode] 
: (condExprGen+=condExpr)? processTermGen+=processTerm 
	{
		// Create return CST Node
		Node process_term_2ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		process_term_2ReturnNode.setKind("process_term_2");
	    // Create a CST Node
		if($condExprGen != null) {
	        for(Iterator it = $condExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.condExpr_return r = (simpleGrammarParser.condExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condExpr");
	            	process_term_2ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($processTermGen != null) {
	        for(Iterator it = $processTermGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.processTerm_return r = (simpleGrammarParser.processTerm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("processTerm");
	            	process_term_2ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$process_term_2.returnNode = process_term_2ReturnNode;
	};

condExpr returns [Node returnNode] 
:  TK_0='cond' TK_1='(' exprGen+=expr TK_2=')' TK_3='->' 
	{
		// Create return CST Node
		Node condExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		condExprReturnNode.setKind("condExpr");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		condExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		condExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	condExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		condExprReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		condExprReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$condExpr.returnNode = condExprReturnNode;
	};

action returns [Node returnNode] 
: TK_0='<' actionNameGen+=actionName action_typeGen+=action_type? TK_1=',' action_rateGen+=action_rate TK_2='>' 
	{
		// Create return CST Node
		Node actionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionReturnNode.setKind("action");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		actionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($actionNameGen != null) {
	        for(Iterator it = $actionNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.actionName_return r = (simpleGrammarParser.actionName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("actionName");
	            	actionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($action_typeGen != null) {
	        for(Iterator it = $action_typeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.action_type_return r = (simpleGrammarParser.action_type_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("action_type");
	            	actionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		actionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($action_rateGen != null) {
	        for(Iterator it = $action_rateGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.action_rate_return r = (simpleGrammarParser.action_rate_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("action_rate");
	            	actionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		actionReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action.returnNode = actionReturnNode;
	};

actionName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node actionNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionNameReturnNode.setKind("actionName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			actionNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$actionName.returnNode = actionNameReturnNode;
	};

action_type returns [Node returnNode] 
: TK_0='?' TK_1='(' WORDGen=WORD* (TK_2=',' WORDGen_1_List+=WORD)* TK_3=')' 
	{
		// Create return CST Node
		Node action_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_typeReturnNode.setKind("action_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		action_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			action_typeReturnNode.getChildren().add(WORDGenLeaf);
		}

		// Create a special CST Node for terminal WORDGen_1_List aggregation
		if($WORDGen_1_List != null) {
	    for(int pos = 0; pos < $WORDGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		action_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Terminal extractor
	    if($WORDGen_1_List != null) {
		    Token t = (Token) $WORDGen_1_List.get(pos); 
		    Leaf WORDGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGen_1_ListLeaf.setKind("WORD");
			WORDGen_1_ListLeaf.setValue(t.getText());
			WORDGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			WORDGen_1_ListLeaf.setLine(t.getLine());
			action_typeReturnNode.getChildren().add(WORDGen_1_ListLeaf);
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		action_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_type.returnNode = action_typeReturnNode;
	}
			| TK_0='!' TK_1='(' exprGen+=expr* (TK_2=',' exprGen_1+=expr)* TK_3=')' 
	{
		// Create return CST Node
		Node action_typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_typeReturnNode.setKind("action_type");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_typeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		action_typeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_typeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal exprGen_1 aggregation
		if($exprGen_1 != null) {
	    for(int pos = 0; pos < $exprGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		action_typeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($exprGen_1 != null) {		
	    	simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) $exprGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("expr");
	    		action_typeReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		action_typeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_type.returnNode = action_typeReturnNode;
	};
			
action_rate returns [Node returnNode] 
: TK_0='exp' TK_1='(' exprGen+=expr TK_2=')' 
	{
		// Create return CST Node
		Node action_rateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_rateReturnNode.setKind("action_rate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_rateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		action_rateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_rateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		action_rateReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_rate.returnNode = action_rateReturnNode;
	}
			| TK_0='inf' TK_1='(' exprGen+=expr TK_2=',' exprGen_1+=expr TK_3=')' 
	{
		// Create return CST Node
		Node action_rateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_rateReturnNode.setKind("action_rate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_rateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		action_rateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_rateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		action_rateReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($exprGen_1 != null) {
	        for(Iterator it = $exprGen_1.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_rateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		action_rateReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_rate.returnNode = action_rateReturnNode;
	}
			| TK_0='inf' 
	{
		// Create return CST Node
		Node action_rateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_rateReturnNode.setKind("action_rate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_rateReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_rate.returnNode = action_rateReturnNode;
	}
			| TK_0='_' TK_1='(' exprGen+=expr TK_2=',' exprGen_1+=expr TK_3=')' 
	{
		// Create return CST Node
		Node action_rateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_rateReturnNode.setKind("action_rate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_rateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		action_rateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($exprGen != null) {
	        for(Iterator it = $exprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_rateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		action_rateReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($exprGen_1 != null) {
	        for(Iterator it = $exprGen_1.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expr_return r = (simpleGrammarParser.expr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expr");
	            	action_rateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		action_rateReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_rate.returnNode = action_rateReturnNode;
	}
			| TK_0='_' 
	{
		// Create return CST Node
		Node action_rateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		action_rateReturnNode.setKind("action_rate");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		action_rateReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$action_rate.returnNode = action_rateReturnNode;
	};
	
archi_topology returns [Node returnNode] 
: TK_0='ARCHI_TOPOLOGY' archi_elem_instancesGen+=archi_elem_instances archi_interactionsGen+=archi_interactions archi_attachmentsGen+=archi_attachments 
	{
		// Create return CST Node
		Node archi_topologyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_topologyReturnNode.setKind("archi_topology");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_topologyReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($archi_elem_instancesGen != null) {
	        for(Iterator it = $archi_elem_instancesGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_elem_instances_return r = (simpleGrammarParser.archi_elem_instances_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_elem_instances");
	            	archi_topologyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($archi_interactionsGen != null) {
	        for(Iterator it = $archi_interactionsGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_interactions_return r = (simpleGrammarParser.archi_interactions_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_interactions");
	            	archi_topologyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($archi_attachmentsGen != null) {
	        for(Iterator it = $archi_attachmentsGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_attachments_return r = (simpleGrammarParser.archi_attachments_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_attachments");
	            	archi_topologyReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_topology.returnNode = archi_topologyReturnNode;
	};

archi_elem_instances returns [Node returnNode] 
: TK_0='ARCHI_ELEM_INSTANCES' (instancesGen+=instances)+ 
	{
		// Create return CST Node
		Node archi_elem_instancesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_elem_instancesReturnNode.setKind("archi_elem_instances");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_elem_instancesReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($instancesGen != null) {
	        for(Iterator it = $instancesGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.instances_return r = (simpleGrammarParser.instances_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("instances");
	            	archi_elem_instancesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_elem_instances.returnNode = archi_elem_instancesReturnNode;
	};
	
instances returns [Node returnNode] 
: istanceNameGen+=istanceName TK_0=':' elementTypeGen+=elementType TK_1='(' parListGen+=parList? TK_2=')' TK_3=';'? 
	{
		// Create return CST Node
		Node instancesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		instancesReturnNode.setKind("instances");
	    // Create a CST Node
		if($istanceNameGen != null) {
	        for(Iterator it = $istanceNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.istanceName_return r = (simpleGrammarParser.istanceName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("istanceName");
	            	instancesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		instancesReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elementTypeGen != null) {
	        for(Iterator it = $elementTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.elementType_return r = (simpleGrammarParser.elementType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementType");
	            	instancesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		instancesReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($parListGen != null) {
	        for(Iterator it = $parListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.parList_return r = (simpleGrammarParser.parList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("parList");
	            	instancesReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		instancesReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		instancesReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$instances.returnNode = instancesReturnNode;
	}; 
	
istanceNameFrom returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node istanceNameFromReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		istanceNameFromReturnNode.setKind("istanceNameFrom");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			istanceNameFromReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$istanceNameFrom.returnNode = istanceNameFromReturnNode;
	};
	
istanceNameTo returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node istanceNameToReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		istanceNameToReturnNode.setKind("istanceNameTo");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			istanceNameToReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$istanceNameTo.returnNode = istanceNameToReturnNode;
	};
	
istanceName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node istanceNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		istanceNameReturnNode.setKind("istanceName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			istanceNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$istanceName.returnNode = istanceNameReturnNode;
	};
	
elementType returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node elementTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementTypeReturnNode.setKind("elementType");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			elementTypeReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$elementType.returnNode = elementTypeReturnNode;
	};
	
parList returns [Node returnNode] 
: WORDGen=WORD  (TK_0=',' WORDGen_1_List+=WORD)* 
	{
		// Create return CST Node
		Node parListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		parListReturnNode.setKind("parList");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			parListReturnNode.getChildren().add(WORDGenLeaf);
		}

		// Create a special CST Node for terminal WORDGen_1_List aggregation
		if($WORDGen_1_List != null) {
	    for(int pos = 0; pos < $WORDGen_1_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		parListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($WORDGen_1_List != null) {
		    Token t = (Token) $WORDGen_1_List.get(pos); 
		    Leaf WORDGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGen_1_ListLeaf.setKind("WORD");
			WORDGen_1_ListLeaf.setValue(t.getText());
			WORDGen_1_ListLeaf.setPos(t.getCharPositionInLine());
			WORDGen_1_ListLeaf.setLine(t.getLine());
			parListReturnNode.getChildren().add(WORDGen_1_ListLeaf);
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$parList.returnNode = parListReturnNode;
	};
	
archi_interactions returns [Node returnNode] 
: TK_0='ARCHI_INTERACTIONS' (archi_interaction_listGen+=archi_interaction_list) 
	{
		// Create return CST Node
		Node archi_interactionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_interactionsReturnNode.setKind("archi_interactions");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_interactionsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($archi_interaction_listGen != null) {
	        for(Iterator it = $archi_interaction_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_interaction_list_return r = (simpleGrammarParser.archi_interaction_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_interaction_list");
	            	archi_interactionsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_interactions.returnNode = archi_interactionsReturnNode;
	};
	
archi_interaction_list returns [Node returnNode] 
: archi_interactionGen+=archi_interaction (TK_0=';' archi_interactionGen_1+=archi_interaction)* 
	{
		// Create return CST Node
		Node archi_interaction_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_interaction_listReturnNode.setKind("archi_interaction_list");
	    // Create a CST Node
		if($archi_interactionGen != null) {
	        for(Iterator it = $archi_interactionGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.archi_interaction_return r = (simpleGrammarParser.archi_interaction_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("archi_interaction");
	            	archi_interaction_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal archi_interactionGen_1 aggregation
		if($archi_interactionGen_1 != null) {
	    for(int pos = 0; pos < $archi_interactionGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_interaction_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($archi_interactionGen_1 != null) {		
	    	simpleGrammarParser.archi_interaction_return r = (simpleGrammarParser.archi_interaction_return) $archi_interactionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("archi_interaction");
	    		archi_interaction_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$archi_interaction_list.returnNode = archi_interaction_listReturnNode;
	};
	
archi_interaction returns [Node returnNode] 
: istanceNameGen+=istanceName TK_0='.' interactionNameGen+=interactionName 
	{
		// Create return CST Node
		Node archi_interactionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_interactionReturnNode.setKind("archi_interaction");
	    // Create a CST Node
		if($istanceNameGen != null) {
	        for(Iterator it = $istanceNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.istanceName_return r = (simpleGrammarParser.istanceName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("istanceName");
	            	archi_interactionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_interactionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($interactionNameGen != null) {
	        for(Iterator it = $interactionNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interactionName_return r = (simpleGrammarParser.interactionName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interactionName");
	            	archi_interactionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_interaction.returnNode = archi_interactionReturnNode;
	};

archi_attachments returns [Node returnNode] 
: TK_0='ARCHI_ATTACHMENTS' (attachment_listGen+=attachment_list) 
	{
		// Create return CST Node
		Node archi_attachmentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		archi_attachmentsReturnNode.setKind("archi_attachments");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		archi_attachmentsReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($attachment_listGen != null) {
	        for(Iterator it = $attachment_listGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.attachment_list_return r = (simpleGrammarParser.attachment_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("attachment_list");
	            	archi_attachmentsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$archi_attachments.returnNode = archi_attachmentsReturnNode;
	};

attachment_list returns [Node returnNode] 
: attachmentGen+=attachment (TK_0=';' attachmentGen_1+=attachment)* 
	{
		// Create return CST Node
		Node attachment_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		attachment_listReturnNode.setKind("attachment_list");
	    // Create a CST Node
		if($attachmentGen != null) {
	        for(Iterator it = $attachmentGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.attachment_return r = (simpleGrammarParser.attachment_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("attachment");
	            	attachment_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal attachmentGen_1 aggregation
		if($attachmentGen_1 != null) {
	    for(int pos = 0; pos < $attachmentGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		attachment_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($attachmentGen_1 != null) {		
	    	simpleGrammarParser.attachment_return r = (simpleGrammarParser.attachment_return) $attachmentGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("attachment");
	    		attachment_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$attachment_list.returnNode = attachment_listReturnNode;
	};

attachment returns [Node returnNode] 
: TK_0='FROM' istanceNameFromGen+=istanceNameFrom TK_1='.' interactionNameFromGen+=interactionNameFrom TK_2='TO' istanceNameToGen+=istanceNameTo TK_3='.' interactionNameToGen+=interactionNameTo 
	{
		// Create return CST Node
		Node attachmentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		attachmentReturnNode.setKind("attachment");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		attachmentReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($istanceNameFromGen != null) {
	        for(Iterator it = $istanceNameFromGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.istanceNameFrom_return r = (simpleGrammarParser.istanceNameFrom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("istanceNameFrom");
	            	attachmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		attachmentReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($interactionNameFromGen != null) {
	        for(Iterator it = $interactionNameFromGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interactionNameFrom_return r = (simpleGrammarParser.interactionNameFrom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interactionNameFrom");
	            	attachmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		attachmentReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($istanceNameToGen != null) {
	        for(Iterator it = $istanceNameToGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.istanceNameTo_return r = (simpleGrammarParser.istanceNameTo_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("istanceNameTo");
	            	attachmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		attachmentReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($interactionNameToGen != null) {
	        for(Iterator it = $interactionNameToGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.interactionNameTo_return r = (simpleGrammarParser.interactionNameTo_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("interactionNameTo");
	            	attachmentReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$attachment.returnNode = attachmentReturnNode;
	} 
	;
	
interactionNameFrom returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node interactionNameFromReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interactionNameFromReturnNode.setKind("interactionNameFrom");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			interactionNameFromReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$interactionNameFrom.returnNode = interactionNameFromReturnNode;
	};
	
interactionNameTo returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node interactionNameToReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interactionNameToReturnNode.setKind("interactionNameTo");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			interactionNameToReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$interactionNameTo.returnNode = interactionNameToReturnNode;
	};
	
interactionName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node interactionNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		interactionNameReturnNode.setKind("interactionName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			interactionNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$interactionName.returnNode = interactionNameReturnNode;
	};

dataType returns [Node returnNode] 
: normalTypeGen+=normalType 
	{
		// Create return CST Node
		Node dataTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		dataTypeReturnNode.setKind("dataType");
	    // Create a CST Node
		if($normalTypeGen != null) {
	        for(Iterator it = $normalTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.normalType_return r = (simpleGrammarParser.normalType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("normalType");
	            	dataTypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$dataType.returnNode = dataTypeReturnNode;
	} | specialTypeGen+=specialType 
	{
		// Create return CST Node
		Node dataTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		dataTypeReturnNode.setKind("dataType");
	    // Create a CST Node
		if($specialTypeGen != null) {
	        for(Iterator it = $specialTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.specialType_return r = (simpleGrammarParser.specialType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("specialType");
	            	dataTypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$dataType.returnNode = dataTypeReturnNode;
	};
	
normalType returns [Node returnNode] 
: TK_0='integer' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	} 
	  | TK_0='integer' TK_1='(' DIGITGen=DIGIT TK_2=',' DIGITGen_1=DIGIT TK_3=')' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($DIGITGen != null) {
			Leaf DIGITGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIGITGenLeaf.setKind("DIGIT");
			DIGITGenLeaf.setValue($DIGITGen.text);
			DIGITGenLeaf.setPos(DIGITGen.getCharPositionInLine());
			DIGITGenLeaf.setLine(DIGITGen.getLine());
			normalTypeReturnNode.getChildren().add(DIGITGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DIGITGen_1 != null) {
			Leaf DIGITGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIGITGen_1Leaf.setKind("DIGIT");
			DIGITGen_1Leaf.setValue($DIGITGen_1.text);
			DIGITGen_1Leaf.setPos(DIGITGen_1.getCharPositionInLine());
			DIGITGen_1Leaf.setLine(DIGITGen_1.getLine());
			normalTypeReturnNode.getChildren().add(DIGITGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	} 
	  | TK_0='real' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	} 
	  | TK_0='boolean' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	} 
	  | TK_0='list' TK_1='(' elemTypeGen+=elemType TK_2=')' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($elemTypeGen != null) {
	        for(Iterator it = $elemTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.elemType_return r = (simpleGrammarParser.elemType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elemType");
	            	normalTypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	} 
	  | TK_0='array' TK_1='(' DIGITGen=DIGIT TK_2=',' elemTypeGen+=elemType TK_3=')' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($DIGITGen != null) {
			Leaf DIGITGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIGITGenLeaf.setKind("DIGIT");
			DIGITGenLeaf.setValue($DIGITGen.text);
			DIGITGenLeaf.setPos(DIGITGen.getCharPositionInLine());
			DIGITGenLeaf.setLine(DIGITGen.getLine());
			normalTypeReturnNode.getChildren().add(DIGITGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($elemTypeGen != null) {
	        for(Iterator it = $elemTypeGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.elemType_return r = (simpleGrammarParser.elemType_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elemType");
	            	normalTypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	}
	  | TK_0='record' TK_1='(' recordListGen+=recordList? TK_2=')' 
	{
		// Create return CST Node
		Node normalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		normalTypeReturnNode.setKind("normalType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($recordListGen != null) {
	        for(Iterator it = $recordListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.recordList_return r = (simpleGrammarParser.recordList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("recordList");
	            	normalTypeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		normalTypeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$normalType.returnNode = normalTypeReturnNode;
	};
	  
elemType returns [Node returnNode] 
: TK_0='integer' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	} | TK_0='real' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	} | TK_0='boolean' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	} | TK_0='list' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	} | TK_0='array' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	} | TK_0='record' 
	{
		// Create return CST Node
		Node elemTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemTypeReturnNode.setKind("elemType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elemTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elemType.returnNode = elemTypeReturnNode;
	};
	
recordList returns [Node returnNode] 
: typeNameGen+=typeName elemNameGen+=elemName (TK_0=',' typeNameGen_1+=typeName elemNameGen_1+=elemName )* 
	{
		// Create return CST Node
		Node recordListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		recordListReturnNode.setKind("recordList");
	    // Create a CST Node
		if($typeNameGen != null) {
	        for(Iterator it = $typeNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.typeName_return r = (simpleGrammarParser.typeName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("typeName");
	            	recordListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($elemNameGen != null) {
	        for(Iterator it = $elemNameGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.elemName_return r = (simpleGrammarParser.elemName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elemName");
	            	recordListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal typeNameGen_1 aggregation
		if($typeNameGen_1 != null) {
	    for(int pos = 0; pos < $typeNameGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		recordListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($typeNameGen_1 != null) {		
	    	simpleGrammarParser.typeName_return r = (simpleGrammarParser.typeName_return) $typeNameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("typeName");
	    		recordListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($elemNameGen_1 != null) {		
	    	simpleGrammarParser.elemName_return r = (simpleGrammarParser.elemName_return) $elemNameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("elemName");
	    		recordListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$recordList.returnNode = recordListReturnNode;
	};
	
typeName returns [Node returnNode] 
:TK_0='integer' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='real' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='boolean' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='list' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='array' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='record' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='prio' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='rate' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	} | TK_0='weight' 
	{
		// Create return CST Node
		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		typeNameReturnNode.setKind("typeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$typeName.returnNode = typeNameReturnNode;
	};

elemName returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node elemNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elemNameReturnNode.setKind("elemName");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			elemNameReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$elemName.returnNode = elemNameReturnNode;
	};
	
specialType returns [Node returnNode] 
: TK_0='prio' 
	{
		// Create return CST Node
		Node specialTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specialTypeReturnNode.setKind("specialType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specialTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$specialType.returnNode = specialTypeReturnNode;
	} | TK_0='rate' 
	{
		// Create return CST Node
		Node specialTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specialTypeReturnNode.setKind("specialType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specialTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$specialType.returnNode = specialTypeReturnNode;
	} | TK_0='weight' 
	{
		// Create return CST Node
		Node specialTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specialTypeReturnNode.setKind("specialType");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specialTypeReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$specialType.returnNode = specialTypeReturnNode;
	};
	
expr returns [Node returnNode] 
: arithExprGen+=arithExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($arithExprGen != null) {
	        for(Iterator it = $arithExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.arithExpr_return r = (simpleGrammarParser.arithExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arithExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| relationalExprGen+=relationalExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($relationalExprGen != null) {
	        for(Iterator it = $relationalExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.relationalExpr_return r = (simpleGrammarParser.relationalExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("relationalExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| booleanExprGen+=booleanExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($booleanExprGen != null) {
	        for(Iterator it = $booleanExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.booleanExpr_return r = (simpleGrammarParser.booleanExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("booleanExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| numGenExprGen+=numGenExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($numGenExprGen != null) {
	        for(Iterator it = $numGenExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.numGenExpr_return r = (simpleGrammarParser.numGenExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("numGenExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| mathExprGen+=mathExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($mathExprGen != null) {
	        for(Iterator it = $mathExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.mathExpr_return r = (simpleGrammarParser.mathExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("mathExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| listExprGen+=listExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($listExprGen != null) {
	        for(Iterator it = $listExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.listExpr_return r = (simpleGrammarParser.listExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("listExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| arrayExprGen+=arrayExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($arrayExprGen != null) {
	        for(Iterator it = $arrayExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.arrayExpr_return r = (simpleGrammarParser.arrayExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arrayExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| recordExprGen+=recordExpr 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($recordExprGen != null) {
	        for(Iterator it = $recordExprGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.recordExpr_return r = (simpleGrammarParser.recordExpr_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("recordExpr");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	| termGen+=term 
	{
		// Create return CST Node
		Node exprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exprReturnNode.setKind("expr");
	    // Create a CST Node
		if($termGen != null) {
	        for(Iterator it = $termGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	exprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$expr.returnNode = exprReturnNode;
	}
	;
	
arithExpr returns [Node returnNode] 
: termGen+=term arithOpGen+=arithOp termGen_1+=term 
	{
		// Create return CST Node
		Node arithExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arithExprReturnNode.setKind("arithExpr");
	    // Create a CST Node
		if($termGen != null) {
	        for(Iterator it = $termGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	arithExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($arithOpGen != null) {
	        for(Iterator it = $arithOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.arithOp_return r = (simpleGrammarParser.arithOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arithOp");
	            	arithExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($termGen_1 != null) {
	        for(Iterator it = $termGen_1.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	arithExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$arithExpr.returnNode = arithExprReturnNode;
	}
	;
	
arithOp returns [Node returnNode] 
: TK_0='+' 
	{
		// Create return CST Node
		Node arithOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arithOpReturnNode.setKind("arithOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arithOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arithOp.returnNode = arithOpReturnNode;
	}| TK_0='-' 
	{
		// Create return CST Node
		Node arithOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arithOpReturnNode.setKind("arithOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arithOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arithOp.returnNode = arithOpReturnNode;
	}| TK_0='*' 
	{
		// Create return CST Node
		Node arithOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arithOpReturnNode.setKind("arithOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arithOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arithOp.returnNode = arithOpReturnNode;
	}| TK_0='/' 
	{
		// Create return CST Node
		Node arithOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arithOpReturnNode.setKind("arithOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arithOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arithOp.returnNode = arithOpReturnNode;
	};
	
relationalExpr returns [Node returnNode] 
: termGen+=term relatOpGen+=relatOp termGen_1+=term 
	{
		// Create return CST Node
		Node relationalExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relationalExprReturnNode.setKind("relationalExpr");
	    // Create a CST Node
		if($termGen != null) {
	        for(Iterator it = $termGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	relationalExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($relatOpGen != null) {
	        for(Iterator it = $relatOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.relatOp_return r = (simpleGrammarParser.relatOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("relatOp");
	            	relationalExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($termGen_1 != null) {
	        for(Iterator it = $termGen_1.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	relationalExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$relationalExpr.returnNode = relationalExprReturnNode;
	}
	;
	
relatOp returns [Node returnNode] 
: TK_0='=' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	} | TK_0='!=' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	} | TK_0='<' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	} | TK_0='<=' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	} | TK_0='>' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	} | TK_0='>=' 
	{
		// Create return CST Node
		Node relatOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		relatOpReturnNode.setKind("relatOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		relatOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$relatOp.returnNode = relatOpReturnNode;
	};
	
booleanExpr returns [Node returnNode] 
: termGen+=term? boolOpGen+=boolOp termGen_1+=term 
	{
		// Create return CST Node
		Node booleanExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		booleanExprReturnNode.setKind("booleanExpr");
	    // Create a CST Node
		if($termGen != null) {
	        for(Iterator it = $termGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	booleanExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($boolOpGen != null) {
	        for(Iterator it = $boolOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.boolOp_return r = (simpleGrammarParser.boolOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("boolOp");
	            	booleanExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($termGen_1 != null) {
	        for(Iterator it = $termGen_1.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.term_return r = (simpleGrammarParser.term_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("term");
	            	booleanExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$booleanExpr.returnNode = booleanExprReturnNode;
	}
	;
	
boolOp returns [Node returnNode] 
: TK_0='&&' 
	{
		// Create return CST Node
		Node boolOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolOpReturnNode.setKind("boolOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boolOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$boolOp.returnNode = boolOpReturnNode;
	}| TK_0='||' 
	{
		// Create return CST Node
		Node boolOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolOpReturnNode.setKind("boolOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boolOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$boolOp.returnNode = boolOpReturnNode;
	} | TK_0='!' 
	{
		// Create return CST Node
		Node boolOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolOpReturnNode.setKind("boolOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		boolOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$boolOp.returnNode = boolOpReturnNode;
	};
	
mathExpr returns [Node returnNode] 
: mathOpGen+=mathOp TK_0='('expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node mathExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathExprReturnNode.setKind("mathExpr");
	    // Create a CST Node
		if($mathOpGen != null) {
	        for(Iterator it = $mathOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.mathOp_return r = (simpleGrammarParser.mathOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("mathOp");
	            	mathExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	mathExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		mathExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathExpr.returnNode = mathExprReturnNode;
	}
	;
	
mathOp returns [Node returnNode] 
: TK_0='mod' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='abs' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='ceil' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	}
	| TK_0='floor' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='min' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='max' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	}
	| TK_0='power' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='epower' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='loge' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='log10' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='sqrt' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='sin' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	} 
	| TK_0='cos' 
	{
		// Create return CST Node
		Node mathOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mathOpReturnNode.setKind("mathOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		mathOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$mathOp.returnNode = mathOpReturnNode;
	}
	; 
	
numGenExpr returns [Node returnNode] 
: numGenOpGen+=numGenOp TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node numGenExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenExprReturnNode.setKind("numGenExpr");
	    // Create a CST Node
		if($numGenOpGen != null) {
	        for(Iterator it = $numGenOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.numGenOp_return r = (simpleGrammarParser.numGenOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("numGenOp");
	            	numGenExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	numGenExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		numGenExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenExpr.returnNode = numGenExprReturnNode;
	}
	;
	
numGenOp returns [Node returnNode] 
: TK_0='c_uniform' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='erlang' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='gamma' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	| TK_0='exponential' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='weibull' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	| TK_0='beta' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='normal' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='pareto' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='b_pareto' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='d_uniform' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	| TK_0='bernoulli' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='binomial' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='poisson' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	} 
	| TK_0='neg_binomial' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	| TK_0='geometric' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	| TK_0='pascal' 
	{
		// Create return CST Node
		Node numGenOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numGenOpReturnNode.setKind("numGenOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numGenOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$numGenOp.returnNode = numGenOpReturnNode;
	}
	;
	
listExpr returns [Node returnNode] 
: listOpGen+=listOp TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node listExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listExprReturnNode.setKind("listExpr");
	    // Create a CST Node
		if($listOpGen != null) {
	        for(Iterator it = $listOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.listOp_return r = (simpleGrammarParser.listOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("listOp");
	            	listExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	listExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		listExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listExpr.returnNode = listExprReturnNode;
	}
	;
	
listOp returns [Node returnNode] 
: TK_0='list_cons' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	}
	| TK_0='first' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	}
	| TK_0='tail' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	}
	| TK_0='concat' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	}
	| TK_0='insert' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	}
	| TK_0='remove' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	} 
	| TK_0='length' 
	{
		// Create return CST Node
		Node listOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		listOpReturnNode.setKind("listOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		listOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$listOp.returnNode = listOpReturnNode;
	} 
	;
	
arrayExpr returns [Node returnNode] 
: arrayOpGen+=arrayOp TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node arrayExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayExprReturnNode.setKind("arrayExpr");
	    // Create a CST Node
		if($arrayOpGen != null) {
	        for(Iterator it = $arrayOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.arrayOp_return r = (simpleGrammarParser.arrayOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("arrayOp");
	            	arrayExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	arrayExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		arrayExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arrayExpr.returnNode = arrayExprReturnNode;
	}
	;
	
arrayOp returns [Node returnNode] 
: TK_0='array_cons' 
	{
		// Create return CST Node
		Node arrayOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayOpReturnNode.setKind("arrayOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arrayOp.returnNode = arrayOpReturnNode;
	} | TK_0='read' 
	{
		// Create return CST Node
		Node arrayOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayOpReturnNode.setKind("arrayOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arrayOp.returnNode = arrayOpReturnNode;
	} | TK_0='write' 
	{
		// Create return CST Node
		Node arrayOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		arrayOpReturnNode.setKind("arrayOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		arrayOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$arrayOp.returnNode = arrayOpReturnNode;
	};
	
recordExpr returns [Node returnNode] 
: recordOpGen+=recordOp TK_0='(' expressionListGen+=expressionList? TK_1=')' 
	{
		// Create return CST Node
		Node recordExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		recordExprReturnNode.setKind("recordExpr");
	    // Create a CST Node
		if($recordOpGen != null) {
	        for(Iterator it = $recordOpGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.recordOp_return r = (simpleGrammarParser.recordOp_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("recordOp");
	            	recordExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		recordExprReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($expressionListGen != null) {
	        for(Iterator it = $expressionListGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.expressionList_return r = (simpleGrammarParser.expressionList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("expressionList");
	            	recordExprReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		recordExprReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$recordExpr.returnNode = recordExprReturnNode;
	}
	;
	
recordOp returns [Node returnNode] 
: TK_0='record_cons' 
	{
		// Create return CST Node
		Node recordOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		recordOpReturnNode.setKind("recordOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		recordOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$recordOp.returnNode = recordOpReturnNode;
	} | TK_0='get' 
	{
		// Create return CST Node
		Node recordOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		recordOpReturnNode.setKind("recordOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		recordOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$recordOp.returnNode = recordOpReturnNode;
	} | TK_0='put' 
	{
		// Create return CST Node
		Node recordOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		recordOpReturnNode.setKind("recordOp");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		recordOpReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$recordOp.returnNode = recordOpReturnNode;
	};
	
term returns [Node returnNode] 
: WORDGen=WORD 
	{
		// Create return CST Node
		Node termReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		termReturnNode.setKind("term");
	    // Create a CST Leaf
		if($WORDGen != null) {
			Leaf WORDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			WORDGenLeaf.setKind("WORD");
			WORDGenLeaf.setValue($WORDGen.text);
			WORDGenLeaf.setPos(WORDGen.getCharPositionInLine());
			WORDGenLeaf.setLine(WORDGen.getLine());
			termReturnNode.getChildren().add(WORDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$term.returnNode = termReturnNode;
	} | numberGen+=number 
	{
		// Create return CST Node
		Node termReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		termReturnNode.setKind("term");
	    // Create a CST Node
		if($numberGen != null) {
	        for(Iterator it = $numberGen.iterator(); it.hasNext(); )  { 
	            simpleGrammarParser.number_return r = (simpleGrammarParser.number_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("number");
	            	termReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$term.returnNode = termReturnNode;
	};
	

WORD : LETTER DIGIT? LETTER?;

fragment LETTER : ('a'..'z' | 'A'..'Z' | '_')+;

number returns [Node returnNode] 
: DIGITGen=DIGIT+ (TK_0='.'? DIGITGen_1=DIGIT*)? 
	{
		// Create return CST Node
		Node numberReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		numberReturnNode.setKind("number");
	    // Create a CST Leaf
		if($DIGITGen != null) {
			Leaf DIGITGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIGITGenLeaf.setKind("DIGIT");
			DIGITGenLeaf.setValue($DIGITGen.text);
			DIGITGenLeaf.setPos(DIGITGen.getCharPositionInLine());
			DIGITGenLeaf.setLine(DIGITGen.getLine());
			numberReturnNode.getChildren().add(DIGITGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		numberReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($DIGITGen_1 != null) {
			Leaf DIGITGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DIGITGen_1Leaf.setKind("DIGIT");
			DIGITGen_1Leaf.setValue($DIGITGen_1.text);
			DIGITGen_1Leaf.setPos(DIGITGen_1.getCharPositionInLine());
			DIGITGen_1Leaf.setLine(DIGITGen_1.getLine());
			numberReturnNode.getChildren().add(DIGITGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$number.returnNode = numberReturnNode;
	};
			    
fragment DIGIT : ('0'..'9')+; 

DQUOTE : '\u0022';

DQVAL  : DQUOTE (options {greedy=false;} : .)* DQUOTE;

WS 	   : (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};

COMMENT
    : '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;    

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;
 
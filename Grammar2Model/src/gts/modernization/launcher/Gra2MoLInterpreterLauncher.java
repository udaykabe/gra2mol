/*******************************************************************************
 * Copyright (c) 2008, 2011
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Javier Canovas (jlcanovas@um.es) 
 *******************************************************************************/


package gts.modernization.launcher;

import gts.modernization.interpreter.Gra2MoLLogger;
import gts.modernization.model.CST.CSTFactory;
import gts.modernization.model.CST.Element;
import gts.modernization.model.CST.Leaf;
import gts.modernization.model.CST.Node;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.Lexer;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;

/**
 * This class executing a Gra2MoL transformation.
 * It requires the existence of the Parser/Lexer in the classpath to obtain the particular CST for 
 * each file to be parsed. Such Parser/Lexer must have been generated by the Gra2MoL enricher tool.
 * 
 * @author <a href="mailto:jlcanovas@um.es">Javier Canovas</a>
 *
 */
public class Gra2MoLInterpreterLauncher extends Gra2MoLAbstractInterpreterLauncher {
	/**
	 * Specifies if the parser must be case sensitive
	 */
	protected boolean caseSensitive;
	/**
	 * Saves the CST in memory
	 */
	protected Element globalCST;

	/**
	 * This class ignores the capital terminal elements of the grammar.
	 * Be careful, the terminal elements must be written in capital letters in the grammar definition
	 * @author jlcanovas
	 *
	 */
	class ANTLRNoCaseFileStream  extends ANTLRFileStream {
		public ANTLRNoCaseFileStream(String fileName) throws IOException {
			super(fileName, null);
		}

		public ANTLRNoCaseFileStream(String fileName, String encoding)
		throws IOException {
			super(fileName, encoding);
		}

		public int LA(int i) {
			if ( i==0 ) {
				return 0; // undefined
			}
			if ( i<0 ) {
				i++; // e.g., translate LA(-1) to use offset 0
			}
			if ( (p+i-1) >= n ) {
				return CharStream.EOF;
			}
			return Character.toUpperCase(data[p+i-1]);
		}
	}

	

	public Gra2MoLInterpreterLauncher(File pathTransformation, File pathMetamodel,
			String targetMetamodel, File resultModelPath, String grammarName,
			String grammarMainRule, List<File> sourceFilePaths) {
		super(pathTransformation, pathMetamodel, targetMetamodel, resultModelPath,
				grammarName, grammarMainRule, sourceFilePaths);
		this.caseSensitive = false;
	}

	public Gra2MoLInterpreterLauncher(File pathTransformation, File pathMetamodel,
			String targetMetamodel, File resultModelPath, String grammarName,
			String grammarMainRule, File sourceFilePath) {
		super(pathTransformation, pathMetamodel, targetMetamodel, resultModelPath,
				grammarName, grammarMainRule);
		getSourceFilePaths().add(sourceFilePath);
		this.caseSensitive = false;
	}
	
	

	@Override
	protected void addCST(Element child, String sourceFilePath) {
		if (globalCST instanceof Node && child instanceof Node) {
			Node globalNode = (Node) globalCST;
			Node file = createRootNode(child, sourceFilePath);
			globalNode.getChildren().add(file);
		}
	}
	
	/**
	 * Creates a root CST node which contains the particular CST for the file and its name
	 * and path.
	 * @param child
	 * @param sourceFilePath
	 * @return
	 */
	protected Node createRootNode(Element child, String sourceFilePath) {
		Node specficidNode = (Node) child;

		// The node to be returned
		Node file = CSTFactory.eINSTANCE.createNode();
		file.setKind("file");

		Leaf pathLeaf = CSTFactory.eINSTANCE.createLeaf();
		pathLeaf.setKind("path");
		pathLeaf.setValue(sourceFilePath);

		Leaf pathFileName = CSTFactory.eINSTANCE.createLeaf();
		pathFileName.setKind("filename");
		pathFileName.setValue(extractFileName(sourceFilePath));

		file.getChildren().add(pathLeaf);
		file.getChildren().add(pathFileName);
		file.getChildren().add(specficidNode);
		
		return file;		
	}
	
	/**
	 * Extracts the filename of a absolute/relative path
	 * @param path
	 * @return
	 */
	protected String extractFileName(String path) {
		String result = path;
		
		int lastBar = path.lastIndexOf("/");
		if(lastBar > 0) {
			result = path.substring(lastBar, path.length());
		}
		
		return result;
	}

	@Override
	protected Element getCST() {
		return globalCST;
	}

	@Override
	protected void initializeCST() {
		globalCST = CSTFactory.eINSTANCE.createNode();
		globalCST.setKind("CST");
	}

	/* 
	 * This method overrides the superclass method in order to calls the parser which is 
	 * in charge of extracting the particular CST of a provided file. 
	 * It requires the existence of the Parser/Lexer of the grammar in the classpath
	 * 
	 * @see gts.modernization.launcher.Gra2MoLAbstractLauncher#parser(java.lang.String)
	 */
	@Override
	protected Element parser(File path) {
		Object result = null;
		
		try {
			// Create the filestream
			ANTLRFileStream afs;
			if(!caseSensitive) {
				Gra2MoLLogger.getInstance().print("Creating non case sensitive parser for " + path);
				afs = new ANTLRNoCaseFileStream(path.getAbsolutePath());
			} else {
				Gra2MoLLogger.getInstance().print("Creating case sensitive parser for " + path);
				afs = new ANTLRFileStream(path.getAbsolutePath());
			}

			// Create the lexer class
			Class lexer = Class.forName(grammarName+"Lexer");
			// Locate the lexer constructor
			Constructor lexerConstructor = lexer.getConstructor(org.antlr.runtime.CharStream.class);		
			// Create the lexer instance
			Lexer lexerInstance = (Lexer) lexerConstructor.newInstance((CharStream) afs);

			// Create the token stream
			CommonTokenStream cts = new CommonTokenStream(lexerInstance);

			// Create the parser class
			Class parser = Class.forName(grammarName+"Parser");
			// Locate the parser constructor
			Constructor parserConstructor = parser.getConstructor(org.antlr.runtime.TokenStream.class);
			// Create the parser instance
			Object parserInstance = parserConstructor.newInstance(cts); 	

			// Locate the method
			Method method = parser.getMethod(grammarMainRule, null);	
			// Invoke the method
			Object returnedValue = method.invoke(parserInstance, null);
			// Extracts the returnNode field
			Class returned = returnedValue.getClass();
			Field field = returned.getField("returnNode");
			result = field.get(returnedValue);
		} catch (Exception e) {
			System.err.println("Error parsing the file " + path);
			e.printStackTrace();
		}

		if (result instanceof Node) {
			Node n = (Node) result;
			return n;
		} else {
			return null;
		}
	}

	@Override
	protected void postParserFile() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void preParserFile() {
		// TODO Auto-generated method stub
	}


	public boolean isCaseSensitive() {
		return caseSensitive;
	}

	public void setCaseSensitive(boolean caseSensitive) {
		this.caseSensitive = caseSensitive;
	}

	public static void main(String[] args) {
//		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
//				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/files/src/delphi2astm.g2m"), 
//				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/files/metamodels/astm.ecore"), 
//				"astm", 
//				new File("../Grammar2Model.examples.Delphi2Model/ASTMExtraction/resultModel.ecore.xmi"), 
//				"delphi", 
//				"mainRule", 
//				new File("../Grammar2Model.examples.Delphi2Model/delphiSrc/untClArchivo.pas"));
//		launcher.setCaseSensitive(false);
		

//		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
//				new File("../Grammar2Model.examples.sandbox/files/src/simpleTransformation.g2m"), 
//				new File("../Grammar2Model.examples.sandbox/files/src/mmAEmilia.ecore"), 
//				"mmaemilia", 
//				new File("../Grammar2Model.examples.sandbox/result.ecore.xmi"), 
//				"simpleGrammar", 
//				"archi_type", 
//				new File("../Grammar2Model.examples.sandbox/files/src/scripts/example.txt"));
//		launcher.setCaseSensitive(false);
		
//		List<File> files = new ArrayList<File>();
////		files.add(new File("../Grammar2Model.examples.modsea/files/src/CalendarView_accessorSpecs.json"));
////		files.add(new File("../Grammar2Model.examples.modsea/files/src/CalendarView_settingSpecs.json"));
//		files.add(new File("../Grammar2Model.examples.modsea/json_files_parsing/input/ImageFacet_accessorSpecs.json"));
//		files.add(new File("../Grammar2Model.examples.modsea/json_files_parsing/input/ImageFacet_settingSpecs.json"));
//		
//		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
//				new File("../Grammar2Model.examples.modsea/files/src/metamodelExtractor.g2m"), 
//				new File("../Grammar2Model.examples.modsea/files/metamodels/Ecore.ecore"), 
//				"ecore", 
//				new File("../Grammar2Model.examples.modsea/resultModel.ecore"), 
//				"json", 
//				"mainRule", 
//				files);
//		launcher.setCaseSensitive(false);
		
//		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
//		new File("../Grammar2Model.examples.101companies/gra2mol/src/transformation.g2m"), 
//		new File("../Grammar2Model.examples.101companies/gra2mol/metamodels/Company.ecore"), 
//		"company", 
//		new File("../Grammar2Model.examples.101companies/resultModel.ecore.xmi"), 
//		"Company", 
//		"company", 
//		new File("../Grammar2Model.examples.101companies/gra2mol/src/example1.101"));
//		launcher.setCaseSensitive(true);
		
		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
				new File("../Java2Fragmentos/transformations/extraerFragmentos.g2m"), 
				new File("../Java2Fragmentos/metamodels/Fragmentos.ecore"), 
				"Fragmentos", 
				new File("../Java2Fragmentos/Fragmentos.xmi"), 
				"codigoJava", 
				"aplicacion", 
				new File("../Java2Fragmentos/sources/Programa.java"));
				launcher.setCaseSensitive(true);
		 

//		Gra2MoLInterpreterLauncher launcher = new Gra2MoLInterpreterLauncher(
//				new File("../api2mol.concreteSyntax/transformation/api2molInjector.g2m"), 
//				new File("../api2mol.abstractSyntax/model/api2mol.ecore"), 
//				"api2mol", 
//				new File("../api2mol.concreteSyntax/resultModel.ecore.xmi"), 
//				"api2mol", 
//				"mainRule", 
//				new File("../api2mol.example.swing/transformation/swing.api2mol"));
//		launcher.setCaseSensitive(true);
		launcher.launch();
		
		
	}

	@Override
	protected void postprocess() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void preprocess() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void postInterpreter() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void preInterpreter() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void saveCST(String path, Node n) {
		ResourceSet rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("ecore", new EcoreResourceFactoryImpl());
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("xmi", new EcoreResourceFactoryImpl());
		Resource r = rs.createResource(URI.createFileURI(path));
		try {
			r.getContents().add(n);
			r.save(null);
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
	
}

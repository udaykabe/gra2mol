grammar ABNF;

options {
	backtrack=true;

	output=template;
}  


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
abnf_definition returns [Node returnNode] 
:	ruleGen+=rule* 
	{
		// Create return CST Node
		Node abnf_definitionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		abnf_definitionReturnNode.setKind("abnf_definition");
	    // Create a CST Node
		if($ruleGen != null) {
	        for(Iterator it = $ruleGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.rule_return r = (ABNFParser.rule_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule");
	            	abnf_definitionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$abnf_definition.returnNode = abnf_definitionReturnNode;
	}
	;
	
rule returns [Node returnNode] 
:	hierarchy_ruleGen+=hierarchy_rule 
	{
		// Create return CST Node
		Node ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleReturnNode.setKind("rule");
	    // Create a CST Node
		if($hierarchy_ruleGen != null) {
	        for(Iterator it = $hierarchy_ruleGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.hierarchy_rule_return r = (ABNFParser.hierarchy_rule_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("hierarchy_rule");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rule.returnNode = ruleReturnNode;
	}
	|	specification_ruleGen+=specification_rule 
	{
		// Create return CST Node
		Node ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleReturnNode.setKind("rule");
	    // Create a CST Node
		if($specification_ruleGen != null) {
	        for(Iterator it = $specification_ruleGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.specification_rule_return r = (ABNFParser.specification_rule_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("specification_rule");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rule.returnNode = ruleReturnNode;
	}
	;

hierarchy_rule returns [Node returnNode] 
: 	classIdGen+=classId (DOUBLEARROWGen=DOUBLEARROW subclassIdGen+=subclassId)+ TK_0=';' 
	{
		// Create return CST Node
		Node hierarchy_ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		hierarchy_ruleReturnNode.setKind("hierarchy_rule");
	    // Create a CST Node
		if($classIdGen != null) {
	        for(Iterator it = $classIdGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.classId_return r = (ABNFParser.classId_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classId");
	            	hierarchy_ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal subclassIdGen aggregation
		if($subclassIdGen != null) {
	    for(int pos = 0; pos < $subclassIdGen.size(); pos++ )  { 
	    // Create a CST Leaf
		if($DOUBLEARROWGen != null) {
			Leaf DOUBLEARROWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLEARROWGenLeaf.setKind("DOUBLEARROW");
			DOUBLEARROWGenLeaf.setValue($DOUBLEARROWGen.text);
			DOUBLEARROWGenLeaf.setPos(DOUBLEARROWGen.getCharPositionInLine());
			DOUBLEARROWGenLeaf.setLine(DOUBLEARROWGen.getLine());
			hierarchy_ruleReturnNode.getChildren().add(DOUBLEARROWGenLeaf);
		}
		// No Terminal extractor
	    if($subclassIdGen != null) {		
	    	ABNFParser.subclassId_return r = (ABNFParser.subclassId_return) $subclassIdGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("subclassId");
	    		hierarchy_ruleReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		hierarchy_ruleReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$hierarchy_rule.returnNode = hierarchy_ruleReturnNode;
	}
	;

specification_rule returns [Node returnNode] 
: 	classIdGen+=classId ARROWGen=ARROW attributeGen+=attribute* TK_0=';' 
	{
		// Create return CST Node
		Node specification_ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		specification_ruleReturnNode.setKind("specification_rule");
	    // Create a CST Node
		if($classIdGen != null) {
	        for(Iterator it = $classIdGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.classId_return r = (ABNFParser.classId_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("classId");
	            	specification_ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ARROWGen != null) {
			Leaf ARROWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARROWGenLeaf.setKind("ARROW");
			ARROWGenLeaf.setValue($ARROWGen.text);
			ARROWGenLeaf.setPos(ARROWGen.getCharPositionInLine());
			ARROWGenLeaf.setLine(ARROWGen.getLine());
			specification_ruleReturnNode.getChildren().add(ARROWGenLeaf);
		}
	    // Create a CST Node
		if($attributeGen != null) {
	        for(Iterator it = $attributeGen.iterator(); it.hasNext(); )  { 
	            ABNFParser.attribute_return r = (ABNFParser.attribute_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("attribute");
	            	specification_ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		specification_ruleReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$specification_rule.returnNode = specification_ruleReturnNode;
	}
	;
	
classId returns [Node returnNode] 
:	IDGen=ID 
	{
		// Create return CST Node
		Node classIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		classIdReturnNode.setKind("classId");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			classIdReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$classId.returnNode = classIdReturnNode;
	}
	;
	
subclassId returns [Node returnNode] 
: 	IDGen=ID 
	{
		// Create return CST Node
		Node subclassIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		subclassIdReturnNode.setKind("subclassId");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			subclassIdReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$subclassId.returnNode = subclassIdReturnNode;
	}
	| 	ABSTRACTGen=ABSTRACT IDGen=ID 
	{
		// Create return CST Node
		Node subclassIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		subclassIdReturnNode.setKind("subclassId");
	    // Create a CST Leaf
		if($ABSTRACTGen != null) {
			Leaf ABSTRACTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ABSTRACTGenLeaf.setKind("ABSTRACT");
			ABSTRACTGenLeaf.setValue($ABSTRACTGen.text);
			ABSTRACTGenLeaf.setPos(ABSTRACTGen.getCharPositionInLine());
			ABSTRACTGenLeaf.setLine(ABSTRACTGen.getLine());
			subclassIdReturnNode.getChildren().add(ABSTRACTGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			IDGenLeaf.setKind("ID");
			IDGenLeaf.setValue($IDGen.text);
			IDGenLeaf.setPos(IDGen.getCharPositionInLine());
			IDGenLeaf.setLine(IDGen.getLine());
			subclassIdReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$subclassId.returnNode = subclassIdReturnNode;
	}
	;

attribute returns [Node returnNode] 
:	(OPTA='[')? (SEM='<')? NAME=ID TK_0=':' TYPE=ID (TK_1='>')? (MULTA='*' | MULTB='+' | OPTB='?')? (TK_2=']')? 
	{
		// Create return CST Node
		Node attributeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		attributeReturnNode.setKind("attribute");
	    // Create a CST Leaf
		if($OPTA != null) {
			Leaf OPTALeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			OPTALeaf.setKind("OPTA");
			OPTALeaf.setValue($OPTA.text);
			OPTALeaf.setPos(OPTA.getCharPositionInLine());
			OPTALeaf.setLine(OPTA.getLine());
			attributeReturnNode.getChildren().add(OPTALeaf);
		}
	    // Create a CST Leaf
		if($SEM != null) {
			Leaf SEMLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMLeaf.setKind("SEM");
			SEMLeaf.setValue($SEM.text);
			SEMLeaf.setPos(SEM.getCharPositionInLine());
			SEMLeaf.setLine(SEM.getLine());
			attributeReturnNode.getChildren().add(SEMLeaf);
		}
	    // Create a CST Leaf
		if($NAME != null) {
			Leaf NAMELeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			NAMELeaf.setKind("NAME");
			NAMELeaf.setValue($NAME.text);
			NAMELeaf.setPos(NAME.getCharPositionInLine());
			NAMELeaf.setLine(NAME.getLine());
			attributeReturnNode.getChildren().add(NAMELeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		attributeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($TYPE != null) {
			Leaf TYPELeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TYPELeaf.setKind("TYPE");
			TYPELeaf.setValue($TYPE.text);
			TYPELeaf.setPos(TYPE.getCharPositionInLine());
			TYPELeaf.setLine(TYPE.getLine());
			attributeReturnNode.getChildren().add(TYPELeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		attributeReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($MULTA != null) {
			Leaf MULTALeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MULTALeaf.setKind("MULTA");
			MULTALeaf.setValue($MULTA.text);
			MULTALeaf.setPos(MULTA.getCharPositionInLine());
			MULTALeaf.setLine(MULTA.getLine());
			attributeReturnNode.getChildren().add(MULTALeaf);
		}
	    // Create a CST Leaf
		if($MULTB != null) {
			Leaf MULTBLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			MULTBLeaf.setKind("MULTB");
			MULTBLeaf.setValue($MULTB.text);
			MULTBLeaf.setPos(MULTB.getCharPositionInLine());
			MULTBLeaf.setLine(MULTB.getLine());
			attributeReturnNode.getChildren().add(MULTBLeaf);
		}
	    // Create a CST Leaf
		if($OPTB != null) {
			Leaf OPTBLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			OPTBLeaf.setKind("OPTB");
			OPTBLeaf.setValue($OPTB.text);
			OPTBLeaf.setPos(OPTB.getCharPositionInLine());
			OPTBLeaf.setLine(OPTB.getLine());
			attributeReturnNode.getChildren().add(OPTBLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		attributeReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$attribute.returnNode = attributeReturnNode;
	}
	;
	
	
ABSTRACT	: '!';
ARROW		: '->';
DOUBLEARROW	: '=>';
ID 			: ('a'..'z' | 'A'..'Z') ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '$' | '#' | '-')*;
WS 			: (' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;};

hash strutsClassTypeMap
	"Action" -> "ACTION",
	"ActionForm" -> "ACTION_FORM",
	default -> "NORMAL_JAVA_CLASS"
end_hash

hash visibilityTypeMap
	"public" -> "PUBLIC",
	"private" -> "PRIVATE",
	"protected" -> "PROTECTED",
	default -> "PACKAGE"
end_hash

hash infixOperatorTypeMap
	"==" -> "EQUALS",
	"!=" -> "NOT_EQUALS",
	"&&" -> "CONDITIONAL_AND",
	"||" -> "CONDITIONAL_OR"
end_hash

hash assignmentOperatorTypeMap
	"=" -> "ASSIGN",
	"+=" -> "PLUS_ASSIGN"
end_hash

------------------------ REGLA INICIAL --------------------------

rule 'beans'
	from compilationUnit
	to StrutsMM::StrutsBeansMM::StrutsBeans 
	queries 
		t  : //compilationUnit//typeDeclaration[0]//#type;
		p  : //packageDeclaration//#type{!Identifier.exists}; 
		t2 : (type) //compilationUnit//#createdName;
		td : //compilationUnit//#typeDeclaration;
		--multi: //compilationUnit/A///#B/D///B/C;
		--multi: //compilationUnit/A/B/#D;
	mappings
		types = t;
		types = t2;
		beans = execute javaClass td;
end_rule

rule 'javaClass'
	from typeDeclaration td
	to StrutsBeansMM::StrutsJavaClass
	queries 
		imp : //compilationUnit//#importDeclaration;
		ncd : /td//#normalClassDeclaration;
		t	: /ncd/#type;
		cbd1: /ncd//#classBodyDeclaration//fieldDeclaration;
		cbd2: /ncd//#classBodyDeclaration;
		--imp2: //compilationUnit///#importDeclaration[0];
	mappings
		methods = cbd2;
		imports = extract imp;
		name = new JavaSimplified::Name;
		name.identifier = ncd.Identifier;
		name.strValue = ncd.Identifier;
		--name.strValue = imp2.Identifier*;
		fields = cbd1;
		strutsClassType = map strutsClassTypeMap(t.Identifier);
end_rule

rule 'field'
	from classBodyDeclaration//fieldDeclaration cbd
	to JavaSimplified::Field
	queries 
		vd : /cbd//#variableDeclarator[first];
		md : /cbd/#modifier;
		fd : /cbd/memberDecl/#fieldDeclaration;
		t  : /fd/#type;
	mappings
		name = new JavaSimplified::Name;
		name.identifier = vd.Identifier;
		name.strValue = vd.Identifier;
		visibility = map visibilityTypeMap(md.TOKEN);
		type = t;
		strValue = extract cbd;
end_rule

rule 'validateMethod'
	from classBodyDeclaration/memberDecl/methodDeclaration{Identifier.eq("validate")} cbd
	to StrutsBeansMM::ValidateMethod
	queries
		md : /cbd/memberDecl/#methodDeclaration;
	    fp : /cbd//formalParameters///#formalParameterDecls;
	    fpMap: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("ActionMapping")};
	    fpReq: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("HttpServletRequest")};
	    t  : /md/#type;
	    st : /cbd//#blockStatement;
		errVar: /md//#localVariableDeclaration/type{Identifier.eq("ActionErrors")};
		errId: /errVar//#variableDeclarator;
		container : //compilationUnit//#typeDeclaration//classBodyDeclaration{this.check(cbd)};
	mappings
		containerBean = container;
		actionErrorsVar = new JavaSimplified::Name;
		actionErrorsVar.identifier = errId.Identifier;
		actionErrorsVar.strValue = errId.Identifier;
		strValue = "***";
		name = new JavaSimplified::Name;
		name.identifier = md.Identifier;
		name.strValue = md.Identifier;
		parameters = fp;
		actionMappingParameter = fpMap;
		requestParameter = fpReq;
		returnType = t;
		statements = st;
end_rule

rule 'executeMethod'
	from classBodyDeclaration/memberDecl/methodDeclaration{Identifier.eq("execute")} cbd
	to StrutsBeansMM::ExecuteMethod
	queries
		md : /cbd/memberDecl/#methodDeclaration;
	    fp : /cbd//formalParameters///#formalParameterDecls;
	    fpMap: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("ActionMapping")};
	    fpFor: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("ActionForm")};
	    fpReq: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("HttpServletRequest")};
	    fpRes: /cbd//formalParameters///#formalParameterDecls/type{Identifier.eq("HttpServletResponse")};
	    t  : /md/#type;
	    st : /cbd//#blockStatement;
		errVar: /md//#localVariableDeclaration/type{Identifier.eq("ActionErrors")};
		errId: /errVar//#variableDeclarator;
		container : //compilationUnit//#typeDeclaration//classBodyDeclaration{this.check(cbd)};
		exceps : /cbd//methodDeclaratorRest{TOKEN.eq("throws")}/qualifiedNameList/#qualifiedName;
	mappings
		exceptions = exceps.Identifier;
		strValue = "***";
		name = new JavaSimplified::Name;
		name.identifier = md.Identifier;
		name.strValue = md.Identifier;
		parameters = fp;
		containerBean = container;
		actionMappingParameter = fpMap;
		actionFormParameter = fpFor;
		requestParameter = fpReq;
		responseParameter = fpRes;
		returnType = t;
		statements = st;
end_rule

rule 'typedMethod'
	from classBodyDeclaration/memberDecl/methodDeclaration cbd
	to JavaSimplified::Method
	queries
		md : /cbd/memberDecl/#methodDeclaration;
	    t  : /md/#type;
	    fp : /cbd//formalParameters///#formalParameterDecls;
	    st : /cbd//#blockStatement;
	    body : /cbd//#methodBody;
	mappings
		strValue = extract cbd;
		name = new JavaSimplified::Name;
		name.identifier = md.Identifier;
		name.strValue = md.Identifier;
		parameters = fp;	
		returnType = t;
		statements = st;
end_rule

rule 'voidMethod'
	from classBodyDeclaration/memberDecl{Identifier.exists} cbd
	to JavaSimplified::Method
	queries
		md : /cbd/#memberDecl;
		fp : /cbd//formalParameters//#formalParameterDecls;
		--st : /cbd//#statement;
		st : /cbd//#blockStatement;
	    body : /cbd//#methodBody;
	mappings
		strValue = extract cbd;
		name = new JavaSimplified::Name;
		name.identifier = md.Identifier;
		name.strValue = md.Identifier;
		parameters = fp;
		statements = st;
end_rule

rule 'parameter'
	from formalParameterDecls fpd
	to JavaSimplified::Parameter
	queries
		t : /fpd/#type;
		v : /fpd/formalParameterDeclsRest/#variableDeclaratorId;
	mappings
		name = new JavaSimplified::Name;
		name.identifier = v.Identifier;
		name.strValue = v.Identifier;
		type = t;
end_rule


-------------------- REGLAS PARA LOS TIPOS --------------------

rule 'complexType'
	from type[unique]{Identifier.exists} t
	to JavaSimplified::Type
	queries
	mappings
		type = t.Identifier;
end_rule

rule 'primitiveType'
	from type[unique]/primitiveType t
	to JavaSimplified::Type
	queries
		ptype : /t/#primitiveType;
	mappings
		type = ptype.TOKEN;
end_rule

-------------------- REGLAS PARA SENTENCIAS ---------------------

rule 'returnStatement'
	from statement{TOKEN.eq("return")} st
	to JavaSimplified::ReturnStatement
	queries
		q : /st/#expression;
	mappings
		expr = q;
end_rule

rule 'expressionStatement'
	from statement//blockStatement/statement/statementExpression st
	to JavaSimplified::ExpressionStatement
	queries
		e : /st//blockStatement/statement/statementExpression/#expression;
	init
		strValue = extract e;
		expr = e;
end_rule

rule 'expressionStatement2'
	from statement/statementExpression st
	to JavaSimplified::ExpressionStatement
	queries
		e : /st/statementExpression/#expression;
	init
		strValue = extract e;
		expr = e;
end_rule

-------------------- REGLAS PARA BLOQUES DE SENTENCIAS ---------------------



rule 'returnStatementB'
	from blockStatement/statement{TOKEN.eq("return")} bst
	to JavaSimplified::ReturnStatement
	queries
		q : /bst/statement[0]/#expression;
	init
		expr = q;
end_rule

rule 'expressionStatementB'
	from blockStatement/statement/statementExpression bst
	to JavaSimplified::ExpressionStatement
	queries
		e : /bst/statement/statementExpression/#expression;
	mappings
		strValue = extract e;
		expr = e;
end_rule

rule 'variableDeclarationStatementB'
	from blockStatement/localVariableDeclaration bst
	to JavaSimplified::VariableDeclarationStatement
	queries
		lvd : /bst/#localVariableDeclaration;
		t   : /lvd/#type;
		vd  : /lvd/variableDeclarators/#variableDeclarator[first];
		e   : /vd/variableDeclaratorRest/variableInitializer/#expression;
	mappings
		strValue = extract bst;
		type = t;
		name = new JavaSimplified::Name;
		name.identifier = vd.Identifier;
		name.strValue = vd.Identifier;
		expr = e;
end_rule

rule 'ifStatementB'
	from blockStatement/statement{TOKEN.exists && TOKEN.eq("if")} bst
	to JavaSimplified::IfStatement
	queries
		e : /bst/statement/parExpression/#expression;
		--st1 : /bst/statement/statement//#blockStatement;
		blockst : /bst/statement/statement[0]/#block;
		st1 : /bst/statement/statement[0]/block//#statement;
		st2 : /bst/statement/#statement[0];
		el : /bst/statement/#statement[1];
	mappings
		strValue = extract bst;
		expr = e;
		if (blockst.hasResults) then
			ifst = st1;		
		else
			ifst = st2;		
		end_if
		elsest = el;
end_rule

-------------------- REGLAS PARA EXPRESIONES (el orden importa)-------------

rule 'methodCall'
	from primary{Identifier.exists && TOKEN.eq(".") && Identifier[1].exists}/identifierSuffix pri
	to JavaSimplified::MethodCall
	queries
	    args : /pri//arguments//#expression;
	    unexp : //compilationUnit//#unaryExpressionNotPlusMinus/primary{this.check(pri)};
	    child : /unexp/#selector;
	mappings
		arguments = args;
		methodName = new JavaSimplified::Name;
		methodName.identifier = pri.Identifier[1];
		methodName.strValue = pri.Identifier[1];
		childCall = child;
end_rule

rule 'selectorMethodCall'
	from selector{TOKEN.eq(".") && Identifier.exists} sel
	to JavaSimplified::MethodCall
	queries
	    args : /sel//arguments//#expression;
	    unexp : //compilationUnit//#unaryExpressionNotPlusMinus/selector{this.check(sel)};
	    child : /unexp/#selector;
	mappings
		arguments = args;
		methodName = new JavaSimplified::Name;
		methodName.identifier = sel.Identifier;
		methodName.strValue = sel.Identifier;
		childCall = child;
end_rule

rule 'thismethodCall'
	from primary{Identifier.exists}/identifierSuffix pri
	to JavaSimplified::MethodCall
	queries
	    args : /pri//arguments//#expression;
	mappings
		arguments = args;
		methodName = new JavaSimplified::Name;
		methodName.identifier = pri.Identifier;
		methodName.strValue = pri.Identifier;
end_rule

rule 'auxName'
	from primary{Identifier.exists} p
	to JavaSimplified::Name
	queries
	mappings
		identifier = p.Identifier;
		strValue = p.Identifier;
end_rule

rule 'orExpression'
	from expression/conditionalExpression/conditionalOrExpression{TOKEN.eq("||")} ex
	to JavaSimplified::InfixExpression
	queries
		e1 : /ex/conditionalExpression/conditionalOrExpression/conditionalAndExpression[0]//#unaryExpressionNotPlusMinus;
		e2 : /ex/conditionalExpression/conditionalOrExpression/conditionalAndExpression[1]//#unaryExpressionNotPlusMinus;
	mappings
		operator = "CONDITIONAL_OR";
		expr1 = e1;
		expr2 = e2;
end_rule

rule 'orExpression'
	from expression/conditionalExpression/conditionalOrExpression/conditionalAndExpression{TOKEN.eq("&&")} ex
	to JavaSimplified::InfixExpression
	queries
		e1 : /ex/conditionalExpression/conditionalOrExpression/conditionalAndExpression/inclusiveOrExpression[0]//#unaryExpressionNotPlusMinus;
		e2 : /ex/conditionalExpression/conditionalOrExpression/conditionalAndExpression/inclusiveOrExpression[1]//#unaryExpressionNotPlusMinus;
	init
		operator = "CONDITIONAL_AND";
		expr1 = e1;
		expr2 = e2;
end_rule


rule 'notequalsExpression'
	from expression//equalityExpression{TOKEN.eq("!=")} ex
	to JavaSimplified::InfixExpression
	queries
		pivot : /ex//#equalityExpression{TOKEN.eq("!=")};
		e1 : (conditionalExpression) /pivot/#instanceOfExpression[0];
		e2 : (expression) /pivot/#instanceOfExpression[0];
	mappings
		operator = "NOT_EQUALS";
		expr1 = e1;
		expr2 = e2;
end_rule

rule 'parenmethodInvocationExpr'
	from expression//parExpression{TOKEN.eq("(")}//primary{TOKEN.eq(".")}/identifierSuffix expr
	to JavaSimplified::MethodInvocation
	queries
		pri : /expr//parExpression{TOKEN.eq("(")}//#primary;
	mappings
		strValue = extract expr;
		object = pri;
		method = pri;
end_rule

rule 'normalmethodInvocationExpr'
	from expression//primary{TOKEN.eq(".")}/identifierSuffix expr
	to JavaSimplified::MethodInvocation
	queries
		pri : /expr///#primary[0];
	mappings
		strValue = extract expr;
		object = pri;
		method = pri;
end_rule

rule 'normalmethodInvocationExprSpecial'
	from unaryExpressionNotPlusMinus/primary{TOKEN.eq(".")}/identifierSuffix ue
	to JavaSimplified::MethodInvocation
	queries
		pri : /ue/#primary;
	mappings
		strValue = extract ce;
		object = pri;
		method = pri;
end_rule

rule 'thismethodInvocationExpr'
	from expression//primary/identifierSuffix expr
	to JavaSimplified::MethodInvocation
	queries
		pri : /expr//#primary;
	mappings
		strValue = extract expr;
		method = pri;
end_rule

rule 'classInstanceCreationExpr'
	from expression//creator expr
	to JavaSimplified::ClassInstanceCreation
	queries
		crn : (type) /cr/#createdName;
		arg : /expr//arguments//#expression;
	mappings
		strValue = extract expr;
		className = crn;
		arguments = arg;
end_rule

rule 'assignmentExpr'
	from expression/assignmentOperator expr
	to JavaSimplified::Assignment
	queries
		e1 : /expr/#conditionalExpression;
		e2 : /expr/#expression;
		op : /expr/#assignmentOperator;
	mappings
		operator = map assignmentOperatorTypeMap(op.TOKEN);
		expr1 = e1;
		expr2 = e2;
end_rule

rule 'castExpression'
	from expression//castExpression expr
	to JavaSimplified::CastExpression
	queries
		cast : /expr//#castExpression;
		t : /cast/#type;
		e : (expression) /cast/#unaryExpressionNotPlusMinus; 
	mappings
		strValue = extract cast;
		expr = e;
		type = t;
end_rule

rule 'leftThisExpr'
	from conditionalExpression//primary{Identifier.exists && TOKEN.exists && TOKEN[0].eq("this")} expr
	to JavaSimplified::FieldAccess
	queries
		pri: /expr//#primary{Identifier.exists && TOKEN.exists && TOKEN[0].eq("this")};
	mappings
		expr = new JavaSimplified::ThisExpression;
		name = new JavaSimplified::Name;
		name.identifier = pri.Identifier;
		name.strValue = pri.Identifier;
end_rule

rule 'nameCondExpr'
	from conditionalExpression//primary{Identifier.exists} expr
	to JavaSimplified::Name
	queries
		pri: /expr//#primary{Identifier.exists};
	mappings
		identifier = pri.Identifier;
		strValue = pri.Identifier;
end_rule

rule 'nameExpr'
	from expression//primary{Identifier.exists && !TOKEN.exists} expr
	to JavaSimplified::Name
	queries
		pri: /expr//#primary{Identifier.exists && !TOKEN.exists};
	mappings
		identifier = pri.Identifier;
		strValue = pri.Identifier;
end_rule

rule 'constantExpr'
	from expression//primary{Identifier.exists} expr
	to JavaSimplified::Name
	queries
	mappings
		identifier = extract expr;
		strValue = extract expr;
end_rule


-------------------- REGLAS PARA LITERALES -----------------------------

rule 'booleanLiteralExpr'
	from expression//booleanLiteral{TOKEN.exists} expr
	to JavaSimplified::Literal
	queries
		bool : /expr//#booleanLiteral{TOKEN.exists};
	mappings
		type = "BOOLEAN";
		value = bool.TOKEN;
		strValue = bool.TOKEN;
end_rule

rule 'stringLiteralExpr'
	from expression//literal{StringLiteral.exists} expr
	to JavaSimplified::Literal
	queries
		strl : /expr//#literal{StringLiteral.exists};
	mappings
		type = "STRING";
		value = removeQuotes strl.StringLiteral;
		strValue = removeQuotes strl.StringLiteral;
end_rule

rule 'nullLiteralExpr'
	from expression//literal{TOKEN.exists && TOKEN.eq("null")} expr
	to JavaSimplified::Literal
	queries
	mappings
		type = "NULL";
end_rule

/** ANTLR v3 grammar written in ANTLR v3 with AST construction */ 
grammar ANTLRv3; 

// Autogenerated options
options {
	output=template;
}



tokens {
	DOC_COMMENT;
	PARSER;	
    LEXER;
    RULE;
    BLOCK;
    OPTIONAL;
    CLOSURE;
    POSITIVE_CLOSURE;
    SYNPRED;
    RANGE;
    CHAR_RANGE;
    EPSILON;
    ALT;
    EOR;
    EOB;
    EOA; // end of alt
    ID;
    ARG;
    ARGLIST;
    RET;
    LEXER_GRAMMAR;
    PARSER_GRAMMAR;
    TREE_GRAMMAR;
    COMBINED_GRAMMAR;
    INITACTION;
    LABEL; 
    TEMPLATE;
    SCOPE='scope';
    SEMPRED;
    GATED_SEMPRED; 
    SYN_SEMPRED; 
    BACKTRACK_SEMPRED;
    FRAGMENT='fragment';
    TREE_BEGIN='^(';
    ROOT='^';
    BANG='!'; 
    RANGE='..';
    REWRITE='->';
}

@members {
	int gtype;
}


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
grammarDef returns [Node returnNode] 
:   DOC_COMMENTGen=DOC_COMMENT?
    	(	TK_0='lexer' 
    	|   TK_1='parser' 
    	|   TK_2='tree'   
    	|		     
    	)
    	TK_3='grammar' idGen+=id TK_4=';' optionsSpecGen+=optionsSpec? tokensSpecGen+=tokensSpec? attrScopeGen+=attrScope* actionGen+=action*
    	ruleGen+=rule+
    	EOFGen=EOF 
	{
		// Create return CST Node
		Node grammarDefReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		grammarDefReturnNode.setKind("grammarDef");
	    // Create a CST Leaf
		if($DOC_COMMENTGen != null) {
			Leaf DOC_COMMENTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOC_COMMENTGenLeaf.setKind("DOC_COMMENT");
			DOC_COMMENTGenLeaf.setValue($DOC_COMMENTGen.text);
			DOC_COMMENTGenLeaf.setPos(DOC_COMMENTGen.getCharPositionInLine());
			DOC_COMMENTGenLeaf.setLine(DOC_COMMENTGen.getLine());
			grammarDefReturnNode.getChildren().add(DOC_COMMENTGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		grammarDefReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		grammarDefReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		grammarDefReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		grammarDefReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		grammarDefReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Node
		if($optionsSpecGen != null) {
	        for(Iterator it = $optionsSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.optionsSpec_return r = (ANTLRv3Parser.optionsSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("optionsSpec");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($tokensSpecGen != null) {
	        for(Iterator it = $tokensSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.tokensSpec_return r = (ANTLRv3Parser.tokensSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("tokensSpec");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($attrScopeGen != null) {
	        for(Iterator it = $attrScopeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.attrScope_return r = (ANTLRv3Parser.attrScope_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("attrScope");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($actionGen != null) {
	        for(Iterator it = $actionGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.action_return r = (ANTLRv3Parser.action_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("action");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ruleGen != null) {
	        for(Iterator it = $ruleGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rule_return r = (ANTLRv3Parser.rule_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule");
	            	grammarDefReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EOFGen != null) {
			Leaf EOFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			EOFGenLeaf.setKind("EOF");
			EOFGenLeaf.setValue($EOFGen.text);
			EOFGenLeaf.setPos(EOFGen.getCharPositionInLine());
			EOFGenLeaf.setLine(EOFGen.getLine());
			grammarDefReturnNode.getChildren().add(EOFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$grammarDef.returnNode = grammarDefReturnNode;
	}
    ;

tokensSpec returns [Node returnNode] 
:	TOKENSGen=TOKENS tokenSpecGen+=tokenSpec+ TK_0='}' 
	{
		// Create return CST Node
		Node tokensSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		tokensSpecReturnNode.setKind("tokensSpec");
	    // Create a CST Leaf
		if($TOKENSGen != null) {
			Leaf TOKENSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKENSGenLeaf.setKind("TOKENS");
			TOKENSGenLeaf.setValue($TOKENSGen.text);
			TOKENSGenLeaf.setPos(TOKENSGen.getCharPositionInLine());
			TOKENSGenLeaf.setLine(TOKENSGen.getLine());
			tokensSpecReturnNode.getChildren().add(TOKENSGenLeaf);
		}
	    // Create a CST Node
		if($tokenSpecGen != null) {
	        for(Iterator it = $tokenSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.tokenSpec_return r = (ANTLRv3Parser.tokenSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("tokenSpec");
	            	tokensSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		tokensSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$tokensSpec.returnNode = tokensSpecReturnNode;
	} 
	;

tokenSpec returns [Node returnNode] 
:	TOKEN_REFGen=TOKEN_REF
		(	TK_0='=' (STRING_LITERALGen=STRING_LITERAL|CHAR_LITERALGen=CHAR_LITERAL)	
		|												
		)
		TK_1=';' 
	{
		// Create return CST Node
		Node tokenSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		tokenSpecReturnNode.setKind("tokenSpec");
	    // Create a CST Leaf
		if($TOKEN_REFGen != null) {
			Leaf TOKEN_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKEN_REFGenLeaf.setKind("TOKEN_REF");
			TOKEN_REFGenLeaf.setValue($TOKEN_REFGen.text);
			TOKEN_REFGenLeaf.setPos(TOKEN_REFGen.getCharPositionInLine());
			TOKEN_REFGenLeaf.setLine(TOKEN_REFGen.getLine());
			tokenSpecReturnNode.getChildren().add(TOKEN_REFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		tokenSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($STRING_LITERALGen != null) {
			Leaf STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRING_LITERALGenLeaf.setKind("STRING_LITERAL");
			STRING_LITERALGenLeaf.setValue($STRING_LITERALGen.text);
			STRING_LITERALGenLeaf.setPos(STRING_LITERALGen.getCharPositionInLine());
			STRING_LITERALGenLeaf.setLine(STRING_LITERALGen.getLine());
			tokenSpecReturnNode.getChildren().add(STRING_LITERALGenLeaf);
		}
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			tokenSpecReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		tokenSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$tokenSpec.returnNode = tokenSpecReturnNode;
	}
	;

attrScope returns [Node returnNode] 
:	TK_0='scope' idGen+=id ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node attrScopeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		attrScopeReturnNode.setKind("attrScope");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		attrScopeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	attrScopeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			attrScopeReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$attrScope.returnNode = attrScopeReturnNode;
	}
	;

action returns [Node returnNode] 
:	TK_0='@' (actionScopeNameGen+=actionScopeName TK_1='::')? idGen+=id ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node actionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionReturnNode.setKind("action");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		actionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($actionScopeNameGen != null) {
	        for(Iterator it = $actionScopeNameGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.actionScopeName_return r = (ANTLRv3Parser.actionScopeName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("actionScopeName");
	            	actionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		actionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	actionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			actionReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$action.returnNode = actionReturnNode;
	} 
	;


actionScopeName returns [Node returnNode] 
:	idGen+=id 
	{
		// Create return CST Node
		Node actionScopeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionScopeNameReturnNode.setKind("actionScopeName");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	actionScopeNameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$actionScopeName.returnNode = actionScopeNameReturnNode;
	}
	|	TK_0='lexer' 
	{
		// Create return CST Node
		Node actionScopeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionScopeNameReturnNode.setKind("actionScopeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		actionScopeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$actionScopeName.returnNode = actionScopeNameReturnNode;
	}	
    |   TK_0='parser' 
	{
		// Create return CST Node
		Node actionScopeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		actionScopeNameReturnNode.setKind("actionScopeName");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		actionScopeNameReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$actionScopeName.returnNode = actionScopeNameReturnNode;
	}
	;

optionsSpec returns [Node returnNode] 
:	OPTIONSGen=OPTIONS (optionGen+=option TK_0=';')+ TK_1='}' 
	{
		// Create return CST Node
		Node optionsSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionsSpecReturnNode.setKind("optionsSpec");
	    // Create a CST Leaf
		if($OPTIONSGen != null) {
			Leaf OPTIONSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			OPTIONSGenLeaf.setKind("OPTIONS");
			OPTIONSGenLeaf.setValue($OPTIONSGen.text);
			OPTIONSGenLeaf.setPos(OPTIONSGen.getCharPositionInLine());
			OPTIONSGenLeaf.setLine(OPTIONSGen.getLine());
			optionsSpecReturnNode.getChildren().add(OPTIONSGenLeaf);
		}
	
		// Create a special CST Node for terminal optionGen aggregation
		if($optionGen != null) {
	    for(int pos = 0; pos < $optionGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($optionGen != null) {		
	    	ANTLRv3Parser.option_return r = (ANTLRv3Parser.option_return) $optionGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("option");
	    		optionsSpecReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		optionsSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		optionsSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$optionsSpec.returnNode = optionsSpecReturnNode;
	}
	;

option returns [Node returnNode] 
:   idGen+=id TK_0='=' optionValueGen+=optionValue 
	{
		// Create return CST Node
		Node optionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionReturnNode.setKind("option");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	optionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		optionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($optionValueGen != null) {
	        for(Iterator it = $optionValueGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.optionValue_return r = (ANTLRv3Parser.optionValue_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("optionValue");
	            	optionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$option.returnNode = optionReturnNode;
	} 
 	;
 	
optionValue returns [Node returnNode] 
:   idGen+=id 
	{
		// Create return CST Node
		Node optionValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionValueReturnNode.setKind("optionValue");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	optionValueReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$optionValue.returnNode = optionValueReturnNode;
	}
    |   STRING_LITERALGen=STRING_LITERAL 
	{
		// Create return CST Node
		Node optionValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionValueReturnNode.setKind("optionValue");
	    // Create a CST Leaf
		if($STRING_LITERALGen != null) {
			Leaf STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRING_LITERALGenLeaf.setKind("STRING_LITERAL");
			STRING_LITERALGenLeaf.setValue($STRING_LITERALGen.text);
			STRING_LITERALGenLeaf.setPos(STRING_LITERALGen.getCharPositionInLine());
			STRING_LITERALGenLeaf.setLine(STRING_LITERALGen.getLine());
			optionValueReturnNode.getChildren().add(STRING_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$optionValue.returnNode = optionValueReturnNode;
	}
    |   CHAR_LITERALGen=CHAR_LITERAL 
	{
		// Create return CST Node
		Node optionValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionValueReturnNode.setKind("optionValue");
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			optionValueReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$optionValue.returnNode = optionValueReturnNode;
	}
    |   INTGen=INT 
	{
		// Create return CST Node
		Node optionValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionValueReturnNode.setKind("optionValue");
	    // Create a CST Leaf
		if($INTGen != null) {
			Leaf INTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			INTGenLeaf.setKind("INT");
			INTGenLeaf.setValue($INTGen.text);
			INTGenLeaf.setPos(INTGen.getCharPositionInLine());
			INTGenLeaf.setLine(INTGen.getLine());
			optionValueReturnNode.getChildren().add(INTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$optionValue.returnNode = optionValueReturnNode;
	}
    |	s='*' 
	{
		// Create return CST Node
		Node optionValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		optionValueReturnNode.setKind("optionValue");
	    // Create a CST Leaf
		if($s != null) {
			Leaf sLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			sLeaf.setKind("s");
			sLeaf.setValue($s.text);
			sLeaf.setPos(s.getCharPositionInLine());
			sLeaf.setLine(s.getLine());
			optionValueReturnNode.getChildren().add(sLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$optionValue.returnNode = optionValueReturnNode;
	} 
    ;

rule returns [Node returnNode] 
:	DOC_COMMENTGen=DOC_COMMENT?
		( (TK_0='protected'|TK_1='public'|TK_2='private'|TK_3='fragment') )?
		ruleName+=id 
		TK_4='!'?
		( ARG_ACTIONGen=ARG_ACTION )?
		( TK_5='returns' ARG_ACTIONGen_1=ARG_ACTION  )?
		throwsSpecGen+=throwsSpec? optionsSpecGen+=optionsSpec? ruleScopeSpecGen+=ruleScopeSpec? ruleActionGen+=ruleAction*
		TK_6=':'	altListGen+=altList	TK_7=';'
		exceptionGroupGen+=exceptionGroup? 
	{
		// Create return CST Node
		Node ruleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleReturnNode.setKind("rule");
	    // Create a CST Leaf
		if($DOC_COMMENTGen != null) {
			Leaf DOC_COMMENTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOC_COMMENTGenLeaf.setKind("DOC_COMMENT");
			DOC_COMMENTGenLeaf.setValue($DOC_COMMENTGen.text);
			DOC_COMMENTGenLeaf.setPos(DOC_COMMENTGen.getCharPositionInLine());
			DOC_COMMENTGenLeaf.setLine(DOC_COMMENTGen.getLine());
			ruleReturnNode.getChildren().add(DOC_COMMENTGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ruleReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		ruleReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		ruleReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		ruleReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($ruleName != null) {
	        for(Iterator it = $ruleName.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ruleName");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		ruleReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($ARG_ACTIONGen != null) {
			Leaf ARG_ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARG_ACTIONGenLeaf.setKind("ARG_ACTION");
			ARG_ACTIONGenLeaf.setValue($ARG_ACTIONGen.text);
			ARG_ACTIONGenLeaf.setPos(ARG_ACTIONGen.getCharPositionInLine());
			ARG_ACTIONGenLeaf.setLine(ARG_ACTIONGen.getLine());
			ruleReturnNode.getChildren().add(ARG_ACTIONGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		ruleReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($ARG_ACTIONGen_1 != null) {
			Leaf ARG_ACTIONGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARG_ACTIONGen_1Leaf.setKind("ARG_ACTION");
			ARG_ACTIONGen_1Leaf.setValue($ARG_ACTIONGen_1.text);
			ARG_ACTIONGen_1Leaf.setPos(ARG_ACTIONGen_1.getCharPositionInLine());
			ARG_ACTIONGen_1Leaf.setLine(ARG_ACTIONGen_1.getLine());
			ruleReturnNode.getChildren().add(ARG_ACTIONGen_1Leaf);
		}
	    // Create a CST Node
		if($throwsSpecGen != null) {
	        for(Iterator it = $throwsSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.throwsSpec_return r = (ANTLRv3Parser.throwsSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("throwsSpec");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($optionsSpecGen != null) {
	        for(Iterator it = $optionsSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.optionsSpec_return r = (ANTLRv3Parser.optionsSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("optionsSpec");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ruleScopeSpecGen != null) {
	        for(Iterator it = $ruleScopeSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ruleScopeSpec_return r = (ANTLRv3Parser.ruleScopeSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ruleScopeSpec");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ruleActionGen != null) {
	        for(Iterator it = $ruleActionGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ruleAction_return r = (ANTLRv3Parser.ruleAction_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ruleAction");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_6Leaf.setKind("TOKEN");
	 		TK_6Leaf.setValue($TK_6.text);
			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
			TK_6Leaf.setLine(TK_6.getLine());
	 		ruleReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($altListGen != null) {
	        for(Iterator it = $altListGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.altList_return r = (ANTLRv3Parser.altList_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("altList");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_7Leaf.setKind("TOKEN");
	 		TK_7Leaf.setValue($TK_7.text);
			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
			TK_7Leaf.setLine(TK_7.getLine());
	 		ruleReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Node
		if($exceptionGroupGen != null) {
	        for(Iterator it = $exceptionGroupGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.exceptionGroup_return r = (ANTLRv3Parser.exceptionGroup_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exceptionGroup");
	            	ruleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rule.returnNode = ruleReturnNode;
	}
	;

ruleAction returns [Node returnNode] 
:	TK_0='@' idGen+=id ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node ruleActionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleActionReturnNode.setKind("ruleAction");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ruleActionReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	ruleActionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			ruleActionReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$ruleAction.returnNode = ruleActionReturnNode;
	}
	;

throwsSpec returns [Node returnNode] 
:	TK_0='throws' idGen+=id ( TK_1=',' idGen_1+=id )* 
	{
		// Create return CST Node
		Node throwsSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		throwsSpecReturnNode.setKind("throwsSpec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		throwsSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	throwsSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal idGen_1 aggregation
		if($idGen_1 != null) {
	    for(int pos = 0; pos < $idGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		throwsSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($idGen_1 != null) {		
	    	ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) $idGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("id");
	    		throwsSpecReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$throwsSpec.returnNode = throwsSpecReturnNode;
	} 
	;

ruleScopeSpec returns [Node returnNode] 
:	TK_0='scope' ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node ruleScopeSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleScopeSpecReturnNode.setKind("ruleScopeSpec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			ruleScopeSpecReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$ruleScopeSpec.returnNode = ruleScopeSpecReturnNode;
	} 
	|	TK_0='scope' idGen+=id (TK_1=',' idGen_1+=id)* TK_2=';' 
	{
		// Create return CST Node
		Node ruleScopeSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleScopeSpecReturnNode.setKind("ruleScopeSpec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	ruleScopeSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal idGen_1 aggregation
		if($idGen_1 != null) {
	    for(int pos = 0; pos < $idGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($idGen_1 != null) {		
	    	ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) $idGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("id");
	    		ruleScopeSpecReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ruleScopeSpec.returnNode = ruleScopeSpecReturnNode;
	} 
	|	TK_0='scope' ACTIONGen=ACTION
		TK_1='scope' idGen+=id (TK_2=',' idGen_1+=id)* TK_3=';' 
	{
		// Create return CST Node
		Node ruleScopeSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ruleScopeSpecReturnNode.setKind("ruleScopeSpec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			ruleScopeSpecReturnNode.getChildren().add(ACTIONGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	ruleScopeSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal idGen_1 aggregation
		if($idGen_1 != null) {
	    for(int pos = 0; pos < $idGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($idGen_1 != null) {		
	    	ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) $idGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("id");
	    		ruleScopeSpecReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		ruleScopeSpecReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ruleScopeSpec.returnNode = ruleScopeSpecReturnNode;
	}
	;

block returns [Node returnNode] 
:   TK_0='('
		( (optionsSpecGen+=optionsSpec)? TK_1=':' )?
		alternativeGen+=alternative rewriteGen+=rewrite ( TK_2='|' alternativeGen_1+=alternative rewriteGen_1+=rewrite )*
        TK_3=')' 
	{
		// Create return CST Node
		Node blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		blockReturnNode.setKind("block");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($optionsSpecGen != null) {
	        for(Iterator it = $optionsSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.optionsSpec_return r = (ANTLRv3Parser.optionsSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("optionsSpec");
	            	blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($alternativeGen != null) {
	        for(Iterator it = $alternativeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.alternative_return r = (ANTLRv3Parser.alternative_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("alternative");
	            	blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($rewriteGen != null) {
	        for(Iterator it = $rewriteGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_return r = (ANTLRv3Parser.rewrite_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite");
	            	blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal alternativeGen_1 aggregation
		if($alternativeGen_1 != null) {
	    for(int pos = 0; pos < $alternativeGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		blockReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// No Terminal extractor
	    if($alternativeGen_1 != null) {		
	    	ANTLRv3Parser.alternative_return r = (ANTLRv3Parser.alternative_return) $alternativeGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("alternative");
	    		blockReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($rewriteGen_1 != null) {		
	    	ANTLRv3Parser.rewrite_return r = (ANTLRv3Parser.rewrite_return) $rewriteGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("rewrite");
	    		blockReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		blockReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$block.returnNode = blockReturnNode;
	}
    ;

altList returns [Node returnNode] 
:   a1+=alternative rewriteGen+=rewrite ( TK_0='|' a2+=alternative rewriteGen_1+=rewrite )* 
	{
		// Create return CST Node
		Node altListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		altListReturnNode.setKind("altList");
	    // Create a CST Node
		if($a1 != null) {
	        for(Iterator it = $a1.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.alternative_return r = (ANTLRv3Parser.alternative_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("a1");
	            	altListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($rewriteGen != null) {
	        for(Iterator it = $rewriteGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_return r = (ANTLRv3Parser.rewrite_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite");
	            	altListReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal a2 aggregation
		if($a2 != null) {
	    for(int pos = 0; pos < $a2.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		altListReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($a2 != null) {		
	    	ANTLRv3Parser.alternative_return r = (ANTLRv3Parser.alternative_return) $a2.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("a2");
	    		altListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($rewriteGen_1 != null) {		
	    	ANTLRv3Parser.rewrite_return r = (ANTLRv3Parser.rewrite_return) $rewriteGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("rewrite");
	    		altListReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$altList.returnNode = altListReturnNode;
	}
    ;

alternative returns [Node returnNode] 
:   elementGen+=element+ 
	{
		// Create return CST Node
		Node alternativeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		alternativeReturnNode.setKind("alternative");
	    // Create a CST Node
		if($elementGen != null) {
	        for(Iterator it = $elementGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.element_return r = (ANTLRv3Parser.element_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("element");
	            	alternativeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$alternative.returnNode = alternativeReturnNode;
	} 
    |   
    ;

exceptionGroup returns [Node returnNode] 
:	( exceptionHandlerGen+=exceptionHandler )+ ( finallyClauseGen+=finallyClause )? 
	{
		// Create return CST Node
		Node exceptionGroupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exceptionGroupReturnNode.setKind("exceptionGroup");
	    // Create a CST Node
		if($exceptionHandlerGen != null) {
	        for(Iterator it = $exceptionHandlerGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.exceptionHandler_return r = (ANTLRv3Parser.exceptionHandler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("exceptionHandler");
	            	exceptionGroupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($finallyClauseGen != null) {
	        for(Iterator it = $finallyClauseGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.finallyClause_return r = (ANTLRv3Parser.finallyClause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("finallyClause");
	            	exceptionGroupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exceptionGroup.returnNode = exceptionGroupReturnNode;
	}
	|	finallyClauseGen+=finallyClause 
	{
		// Create return CST Node
		Node exceptionGroupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exceptionGroupReturnNode.setKind("exceptionGroup");
	    // Create a CST Node
		if($finallyClauseGen != null) {
	        for(Iterator it = $finallyClauseGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.finallyClause_return r = (ANTLRv3Parser.finallyClause_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("finallyClause");
	            	exceptionGroupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$exceptionGroup.returnNode = exceptionGroupReturnNode;
	}
    ;

exceptionHandler returns [Node returnNode] 
:    TK_0='catch' ARG_ACTIONGen=ARG_ACTION ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node exceptionHandlerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		exceptionHandlerReturnNode.setKind("exceptionHandler");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		exceptionHandlerReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ARG_ACTIONGen != null) {
			Leaf ARG_ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARG_ACTIONGenLeaf.setKind("ARG_ACTION");
			ARG_ACTIONGenLeaf.setValue($ARG_ACTIONGen.text);
			ARG_ACTIONGenLeaf.setPos(ARG_ACTIONGen.getCharPositionInLine());
			ARG_ACTIONGenLeaf.setLine(ARG_ACTIONGen.getLine());
			exceptionHandlerReturnNode.getChildren().add(ARG_ACTIONGenLeaf);
		}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			exceptionHandlerReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$exceptionHandler.returnNode = exceptionHandlerReturnNode;
	} 
    ;

finallyClause returns [Node returnNode] 
:    TK_0='finally' ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node finallyClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		finallyClauseReturnNode.setKind("finallyClause");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		finallyClauseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			finallyClauseReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$finallyClause.returnNode = finallyClauseReturnNode;
	} 
    ;

element returns [Node returnNode] 
:	elementNoOptionSpecGen+=elementNoOptionSpec 
	{
		// Create return CST Node
		Node elementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementReturnNode.setKind("element");
	    // Create a CST Node
		if($elementNoOptionSpecGen != null) {
	        for(Iterator it = $elementNoOptionSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.elementNoOptionSpec_return r = (ANTLRv3Parser.elementNoOptionSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("elementNoOptionSpec");
	            	elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$element.returnNode = elementReturnNode;
	}
	;

elementNoOptionSpec returns [Node returnNode] 
:	idGen+=id (TK_0='='|TK_1='+=') ruleName+=atom
		(	ebnfSuffixGen+=ebnfSuffix	
		|				
		) 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementNoOptionSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		elementNoOptionSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($ruleName != null) {
	        for(Iterator it = $ruleName.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.atom_return r = (ANTLRv3Parser.atom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ruleName");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|	idGen+=id (TK_0='='|TK_1='+=') blockGen+=block
		(	ebnfSuffixGen+=ebnfSuffix	
		|				
		) 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementNoOptionSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		elementNoOptionSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.block_return r = (ANTLRv3Parser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|	ruleName+=atom
		(	ebnfSuffixGen+=ebnfSuffix	
		|				
		) 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Node
		if($ruleName != null) {
	        for(Iterator it = $ruleName.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.atom_return r = (ANTLRv3Parser.atom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ruleName");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|	ebnfGen+=ebnf 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Node
		if($ebnfGen != null) {
	        for(Iterator it = $ebnfGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnf_return r = (ANTLRv3Parser.ebnf_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnf");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|   ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			elementNoOptionSpecReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|   SEMPREDGen=SEMPRED ( TK_0='=>' |  ) 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Leaf
		if($SEMPREDGen != null) {
			Leaf SEMPREDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMPREDGenLeaf.setKind("SEMPRED");
			SEMPREDGenLeaf.setValue($SEMPREDGen.text);
			SEMPREDGenLeaf.setPos(SEMPREDGen.getCharPositionInLine());
			SEMPREDGenLeaf.setLine(SEMPREDGen.getLine());
			elementNoOptionSpecReturnNode.getChildren().add(SEMPREDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		elementNoOptionSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	|   treeSpecGen+=treeSpec 
	{
		// Create return CST Node
		Node elementNoOptionSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		elementNoOptionSpecReturnNode.setKind("elementNoOptionSpec");
	    // Create a CST Node
		if($treeSpecGen != null) {
	        for(Iterator it = $treeSpecGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.treeSpec_return r = (ANTLRv3Parser.treeSpec_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("treeSpec");
	            	elementNoOptionSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$elementNoOptionSpec.returnNode = elementNoOptionSpecReturnNode;
	}
	;

atom returns [Node returnNode] 
:   rangeGen+=range ( (TK_0='^'|TK_1='!')  |  ) 
	{
		// Create return CST Node
		Node atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		atomReturnNode.setKind("atom");
	    // Create a CST Node
		if($rangeGen != null) {
	        for(Iterator it = $rangeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.range_return r = (ANTLRv3Parser.range_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("range");
	            	atomReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		atomReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		atomReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$atom.returnNode = atomReturnNode;
	}
    |   terminalGen+=terminal 
	{
		// Create return CST Node
		Node atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		atomReturnNode.setKind("atom");
	    // Create a CST Node
		if($terminalGen != null) {
	        for(Iterator it = $terminalGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.terminal_return r = (ANTLRv3Parser.terminal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("terminal");
	            	atomReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$atom.returnNode = atomReturnNode;
	}
    |	notSetGen+=notSet ( (TK_0='^'|TK_1='!')  |  ) 
	{
		// Create return CST Node
		Node atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		atomReturnNode.setKind("atom");
	    // Create a CST Node
		if($notSetGen != null) {
	        for(Iterator it = $notSetGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.notSet_return r = (ANTLRv3Parser.notSet_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("notSet");
	            	atomReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		atomReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		atomReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$atom.returnNode = atomReturnNode;
	}
    |   RULE_REFGen=RULE_REF ( arg=ARG_ACTION )? ( (op='^'|op='!') )? 
	{
		// Create return CST Node
		Node atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		atomReturnNode.setKind("atom");
	    // Create a CST Leaf
		if($RULE_REFGen != null) {
			Leaf RULE_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RULE_REFGenLeaf.setKind("RULE_REF");
			RULE_REFGenLeaf.setValue($RULE_REFGen.text);
			RULE_REFGenLeaf.setPos(RULE_REFGen.getCharPositionInLine());
			RULE_REFGenLeaf.setLine(RULE_REFGen.getLine());
			atomReturnNode.getChildren().add(RULE_REFGenLeaf);
		}
	    // Create a CST Leaf
		if($arg != null) {
			Leaf argLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			argLeaf.setKind("arg");
			argLeaf.setValue($arg.text);
			argLeaf.setPos(arg.getCharPositionInLine());
			argLeaf.setLine(arg.getLine());
			atomReturnNode.getChildren().add(argLeaf);
		}
	    // Create a CST Leaf
		if($op != null) {
			Leaf opLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			opLeaf.setKind("op");
			opLeaf.setValue($op.text);
			opLeaf.setPos(op.getCharPositionInLine());
			opLeaf.setLine(op.getLine());
			atomReturnNode.getChildren().add(opLeaf);
		}
	    // Create a CST Leaf
		if($op != null) {
			Leaf opLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			opLeaf.setKind("op");
			opLeaf.setValue($op.text);
			opLeaf.setPos(op.getCharPositionInLine());
			opLeaf.setLine(op.getLine());
			atomReturnNode.getChildren().add(opLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$atom.returnNode = atomReturnNode;
	}
    ;

notSet returns [Node returnNode] 
:	TK_0='~'
		(	notTerminalGen+=notTerminal	
		|	blockGen+=block		
		) 
	{
		// Create return CST Node
		Node notSetReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		notSetReturnNode.setKind("notSet");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		notSetReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($notTerminalGen != null) {
	        for(Iterator it = $notTerminalGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.notTerminal_return r = (ANTLRv3Parser.notTerminal_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("notTerminal");
	            	notSetReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.block_return r = (ANTLRv3Parser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	notSetReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$notSet.returnNode = notSetReturnNode;
	}
	;

treeSpec returns [Node returnNode] 
:	TK_0='^(' elementGen+=element ( elementGen_1+=element )+ TK_1=')' 
	{
		// Create return CST Node
		Node treeSpecReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		treeSpecReturnNode.setKind("treeSpec");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		treeSpecReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($elementGen != null) {
	        for(Iterator it = $elementGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.element_return r = (ANTLRv3Parser.element_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("element");
	            	treeSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($elementGen_1 != null) {
	        for(Iterator it = $elementGen_1.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.element_return r = (ANTLRv3Parser.element_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("element");
	            	treeSpecReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		treeSpecReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$treeSpec.returnNode = treeSpecReturnNode;
	} 
	;


ebnf returns [Node returnNode] 
:	blockGen+=block {Token op=input.LT(1);}
		(	TK_0='?'		
		|	TK_1='*'		
		|	TK_2='+'		
		|   TK_3='^'		
		|   TK_4='!'		
		|   TK_5='=>'	
        |			
		) 
	{
		// Create return CST Node
		Node ebnfReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ebnfReturnNode.setKind("ebnf");
	    // Create a CST Node
		if($blockGen != null) {
	        for(Iterator it = $blockGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.block_return r = (ANTLRv3Parser.block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("block");
	            	ebnfReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ebnfReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		ebnfReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		ebnfReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		ebnfReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_4Leaf.setKind("TOKEN");
	 		TK_4Leaf.setValue($TK_4.text);
			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
			TK_4Leaf.setLine(TK_4.getLine());
	 		ebnfReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_5Leaf.setKind("TOKEN");
	 		TK_5Leaf.setValue($TK_5.text);
			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
			TK_5Leaf.setLine(TK_5.getLine());
	 		ebnfReturnNode.getChildren().add(TK_5Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ebnf.returnNode = ebnfReturnNode;
	}
	;

range! returns [Node returnNode] 
:	CHAR_LITERALGen=CHAR_LITERAL RANGEGen=RANGE CHAR_LITERALGen_1=CHAR_LITERAL 
	{
		// Create return CST Node
		Node rangeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rangeReturnNode.setKind("range");
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			rangeReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
	    // Create a CST Leaf
		if($RANGEGen != null) {
			Leaf RANGEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RANGEGenLeaf.setKind("RANGE");
			RANGEGenLeaf.setValue($RANGEGen.text);
			RANGEGenLeaf.setPos(RANGEGen.getCharPositionInLine());
			RANGEGenLeaf.setLine(RANGEGen.getLine());
			rangeReturnNode.getChildren().add(RANGEGenLeaf);
		}
	    // Create a CST Leaf
		if($CHAR_LITERALGen_1 != null) {
			Leaf CHAR_LITERALGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGen_1Leaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGen_1Leaf.setValue($CHAR_LITERALGen_1.text);
			CHAR_LITERALGen_1Leaf.setPos(CHAR_LITERALGen_1.getCharPositionInLine());
			CHAR_LITERALGen_1Leaf.setLine(CHAR_LITERALGen_1.getLine());
			rangeReturnNode.getChildren().add(CHAR_LITERALGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$range.returnNode = rangeReturnNode;
	}
	;

terminal returns [Node returnNode] 
:   (	CHAR_LITERALGen=CHAR_LITERAL				
		|   TOKEN_REFGen=TOKEN_REF
			( ARG_ACTIONGen=ARG_ACTION				
			|						
			)
		|   STRING_LITERALGen=STRING_LITERAL				
		|   TK_0='.'							
		)	
		(	TK_1='^'							
		|	TK_2='!' 						
		)? 
	{
		// Create return CST Node
		Node terminalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		terminalReturnNode.setKind("terminal");
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			terminalReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
	    // Create a CST Leaf
		if($TOKEN_REFGen != null) {
			Leaf TOKEN_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKEN_REFGenLeaf.setKind("TOKEN_REF");
			TOKEN_REFGenLeaf.setValue($TOKEN_REFGen.text);
			TOKEN_REFGenLeaf.setPos(TOKEN_REFGen.getCharPositionInLine());
			TOKEN_REFGenLeaf.setLine(TOKEN_REFGen.getLine());
			terminalReturnNode.getChildren().add(TOKEN_REFGenLeaf);
		}
	    // Create a CST Leaf
		if($ARG_ACTIONGen != null) {
			Leaf ARG_ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARG_ACTIONGenLeaf.setKind("ARG_ACTION");
			ARG_ACTIONGenLeaf.setValue($ARG_ACTIONGen.text);
			ARG_ACTIONGenLeaf.setPos(ARG_ACTIONGen.getCharPositionInLine());
			ARG_ACTIONGenLeaf.setLine(ARG_ACTIONGen.getLine());
			terminalReturnNode.getChildren().add(ARG_ACTIONGenLeaf);
		}
	    // Create a CST Leaf
		if($STRING_LITERALGen != null) {
			Leaf STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRING_LITERALGenLeaf.setKind("STRING_LITERAL");
			STRING_LITERALGenLeaf.setValue($STRING_LITERALGen.text);
			STRING_LITERALGenLeaf.setPos(STRING_LITERALGen.getCharPositionInLine());
			STRING_LITERALGenLeaf.setLine(STRING_LITERALGen.getLine());
			terminalReturnNode.getChildren().add(STRING_LITERALGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		terminalReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		terminalReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		terminalReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$terminal.returnNode = terminalReturnNode;
	}
	;

notTerminal returns [Node returnNode] 
:   CHAR_LITERALGen=CHAR_LITERAL 
	{
		// Create return CST Node
		Node notTerminalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		notTerminalReturnNode.setKind("notTerminal");
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			notTerminalReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$notTerminal.returnNode = notTerminalReturnNode;
	}
	|	TOKEN_REFGen=TOKEN_REF 
	{
		// Create return CST Node
		Node notTerminalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		notTerminalReturnNode.setKind("notTerminal");
	    // Create a CST Leaf
		if($TOKEN_REFGen != null) {
			Leaf TOKEN_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKEN_REFGenLeaf.setKind("TOKEN_REF");
			TOKEN_REFGenLeaf.setValue($TOKEN_REFGen.text);
			TOKEN_REFGenLeaf.setPos(TOKEN_REFGen.getCharPositionInLine());
			TOKEN_REFGenLeaf.setLine(TOKEN_REFGen.getLine());
			notTerminalReturnNode.getChildren().add(TOKEN_REFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$notTerminal.returnNode = notTerminalReturnNode;
	}
	|	STRING_LITERALGen=STRING_LITERAL 
	{
		// Create return CST Node
		Node notTerminalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		notTerminalReturnNode.setKind("notTerminal");
	    // Create a CST Leaf
		if($STRING_LITERALGen != null) {
			Leaf STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRING_LITERALGenLeaf.setKind("STRING_LITERAL");
			STRING_LITERALGenLeaf.setValue($STRING_LITERALGen.text);
			STRING_LITERALGenLeaf.setPos(STRING_LITERALGen.getCharPositionInLine());
			STRING_LITERALGenLeaf.setLine(STRING_LITERALGen.getLine());
			notTerminalReturnNode.getChildren().add(STRING_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$notTerminal.returnNode = notTerminalReturnNode;
	}
	;
	
ebnfSuffix returns [Node returnNode] 
:	TK_0='?' 
	{
		// Create return CST Node
		Node ebnfSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ebnfSuffixReturnNode.setKind("ebnfSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ebnfSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ebnfSuffix.returnNode = ebnfSuffixReturnNode;
	}
  	|	TK_0='*' 
	{
		// Create return CST Node
		Node ebnfSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ebnfSuffixReturnNode.setKind("ebnfSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ebnfSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ebnfSuffix.returnNode = ebnfSuffixReturnNode;
	}
   	|	TK_0='+' 
	{
		// Create return CST Node
		Node ebnfSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ebnfSuffixReturnNode.setKind("ebnfSuffix");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		ebnfSuffixReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$ebnfSuffix.returnNode = ebnfSuffixReturnNode;
	}
	;
	


// R E W R I T E  S Y N T A X

rewrite returns [Node returnNode] 
:	(TK_0='->' SEMPREDGen_List+=SEMPRED rewrite_alternativeGen+=rewrite_alternative)*
		 TK_1='->' rewrite_alternativeGen_1+=rewrite_alternative 
	{
		// Create return CST Node
		Node rewriteReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewriteReturnNode.setKind("rewrite");
	
		// Create a special CST Node for terminal SEMPREDGen_List aggregation
		if($SEMPREDGen_List != null) {
	    for(int pos = 0; pos < $SEMPREDGen_List.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewriteReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Terminal extractor
	    if($SEMPREDGen_List != null) {
		    Token t = (Token) $SEMPREDGen_List.get(pos); 
		    Leaf SEMPREDGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			SEMPREDGen_ListLeaf.setKind("SEMPRED");
			SEMPREDGen_ListLeaf.setValue(t.getText());
			SEMPREDGen_ListLeaf.setPos(t.getCharPositionInLine());
			SEMPREDGen_ListLeaf.setLine(t.getLine());
			rewriteReturnNode.getChildren().add(SEMPREDGen_ListLeaf);
		}
		// No Terminal extractor
	    if($rewrite_alternativeGen != null) {		
	    	ANTLRv3Parser.rewrite_alternative_return r = (ANTLRv3Parser.rewrite_alternative_return) $rewrite_alternativeGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("rewrite_alternative");
	    		rewriteReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewriteReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_alternativeGen_1 != null) {
	        for(Iterator it = $rewrite_alternativeGen_1.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_alternative_return r = (ANTLRv3Parser.rewrite_alternative_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_alternative");
	            	rewriteReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite.returnNode = rewriteReturnNode;
	}
	|
	;

rewrite_alternative returns [Node returnNode] 
:	rewrite_templateGen+=rewrite_template 
	{
		// Create return CST Node
		Node rewrite_alternativeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_alternativeReturnNode.setKind("rewrite_alternative");
	    // Create a CST Node
		if($rewrite_templateGen != null) {
	        for(Iterator it = $rewrite_templateGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_return r = (ANTLRv3Parser.rewrite_template_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template");
	            	rewrite_alternativeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_alternative.returnNode = rewrite_alternativeReturnNode;
	}
	|	rewrite_tree_alternativeGen+=rewrite_tree_alternative 
	{
		// Create return CST Node
		Node rewrite_alternativeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_alternativeReturnNode.setKind("rewrite_alternative");
	    // Create a CST Node
		if($rewrite_tree_alternativeGen != null) {
	        for(Iterator it = $rewrite_tree_alternativeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_alternative_return r = (ANTLRv3Parser.rewrite_tree_alternative_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_alternative");
	            	rewrite_alternativeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_alternative.returnNode = rewrite_alternativeReturnNode;
	}
   	|   /* empty rewrite */ 
	;
	
rewrite_template_block returns [Node returnNode] 
:   TK_0='(' rewrite_templateGen+=rewrite_template TK_1=')' 
	{
		// Create return CST Node
		Node rewrite_template_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_template_blockReturnNode.setKind("rewrite_template_block");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_template_blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_templateGen != null) {
	        for(Iterator it = $rewrite_templateGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_return r = (ANTLRv3Parser.rewrite_template_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template");
	            	rewrite_template_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_template_blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template_block.returnNode = rewrite_template_blockReturnNode;
	}
    ;

rewrite_tree_block returns [Node returnNode] 
:   TK_0='(' rewrite_tree_alternativeGen+=rewrite_tree_alternative TK_1=')' 
	{
		// Create return CST Node
		Node rewrite_tree_blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_blockReturnNode.setKind("rewrite_tree_block");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_tree_blockReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_tree_alternativeGen != null) {
	        for(Iterator it = $rewrite_tree_alternativeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_alternative_return r = (ANTLRv3Parser.rewrite_tree_alternative_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_alternative");
	            	rewrite_tree_blockReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_tree_blockReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_block.returnNode = rewrite_tree_blockReturnNode;
	}
    ;

rewrite_tree_alternative returns [Node returnNode] 
:	rewrite_tree_elementGen+=rewrite_tree_element+ 
	{
		// Create return CST Node
		Node rewrite_tree_alternativeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_alternativeReturnNode.setKind("rewrite_tree_alternative");
	    // Create a CST Node
		if($rewrite_tree_elementGen != null) {
	        for(Iterator it = $rewrite_tree_elementGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_element_return r = (ANTLRv3Parser.rewrite_tree_element_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_element");
	            	rewrite_tree_alternativeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_alternative.returnNode = rewrite_tree_alternativeReturnNode;
	} 
    ;

rewrite_tree_element returns [Node returnNode] 
:	rewrite_tree_atomGen+=rewrite_tree_atom 
	{
		// Create return CST Node
		Node rewrite_tree_elementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_elementReturnNode.setKind("rewrite_tree_element");
	    // Create a CST Node
		if($rewrite_tree_atomGen != null) {
	        for(Iterator it = $rewrite_tree_atomGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_atom_return r = (ANTLRv3Parser.rewrite_tree_atom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_atom");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_element.returnNode = rewrite_tree_elementReturnNode;
	}
	|	rewrite_tree_atomGen+=rewrite_tree_atom ebnfSuffixGen+=ebnfSuffix 
	{
		// Create return CST Node
		Node rewrite_tree_elementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_elementReturnNode.setKind("rewrite_tree_element");
	    // Create a CST Node
		if($rewrite_tree_atomGen != null) {
	        for(Iterator it = $rewrite_tree_atomGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_atom_return r = (ANTLRv3Parser.rewrite_tree_atom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_atom");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_element.returnNode = rewrite_tree_elementReturnNode;
	}
	|   rewrite_treeGen+=rewrite_tree
		(	ebnfSuffixGen+=ebnfSuffix
		|	
		) 
	{
		// Create return CST Node
		Node rewrite_tree_elementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_elementReturnNode.setKind("rewrite_tree_element");
	    // Create a CST Node
		if($rewrite_treeGen != null) {
	        for(Iterator it = $rewrite_treeGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_return r = (ANTLRv3Parser.rewrite_tree_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_element.returnNode = rewrite_tree_elementReturnNode;
	}
	|   rewrite_tree_ebnfGen+=rewrite_tree_ebnf 
	{
		// Create return CST Node
		Node rewrite_tree_elementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_elementReturnNode.setKind("rewrite_tree_element");
	    // Create a CST Node
		if($rewrite_tree_ebnfGen != null) {
	        for(Iterator it = $rewrite_tree_ebnfGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_ebnf_return r = (ANTLRv3Parser.rewrite_tree_ebnf_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_ebnf");
	            	rewrite_tree_elementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_element.returnNode = rewrite_tree_elementReturnNode;
	}
	;

rewrite_tree_atom returns [Node returnNode] 
:   CHAR_LITERALGen=CHAR_LITERAL 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a CST Leaf
		if($CHAR_LITERALGen != null) {
			Leaf CHAR_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			CHAR_LITERALGenLeaf.setKind("CHAR_LITERAL");
			CHAR_LITERALGenLeaf.setValue($CHAR_LITERALGen.text);
			CHAR_LITERALGenLeaf.setPos(CHAR_LITERALGen.getCharPositionInLine());
			CHAR_LITERALGenLeaf.setLine(CHAR_LITERALGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(CHAR_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	}
	|   TOKEN_REFGen=TOKEN_REF ARG_ACTIONGen=ARG_ACTION? 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a CST Leaf
		if($TOKEN_REFGen != null) {
			Leaf TOKEN_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKEN_REFGenLeaf.setKind("TOKEN_REF");
			TOKEN_REFGenLeaf.setValue($TOKEN_REFGen.text);
			TOKEN_REFGenLeaf.setPos(TOKEN_REFGen.getCharPositionInLine());
			TOKEN_REFGenLeaf.setLine(TOKEN_REFGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(TOKEN_REFGenLeaf);
		}
	    // Create a CST Leaf
		if($ARG_ACTIONGen != null) {
			Leaf ARG_ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ARG_ACTIONGenLeaf.setKind("ARG_ACTION");
			ARG_ACTIONGenLeaf.setValue($ARG_ACTIONGen.text);
			ARG_ACTIONGenLeaf.setPos(ARG_ACTIONGen.getCharPositionInLine());
			ARG_ACTIONGenLeaf.setLine(ARG_ACTIONGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(ARG_ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	} 
    |   RULE_REFGen=RULE_REF 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a CST Leaf
		if($RULE_REFGen != null) {
			Leaf RULE_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RULE_REFGenLeaf.setKind("RULE_REF");
			RULE_REFGenLeaf.setValue($RULE_REFGen.text);
			RULE_REFGenLeaf.setPos(RULE_REFGen.getCharPositionInLine());
			RULE_REFGenLeaf.setLine(RULE_REFGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(RULE_REFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	}
	|   STRING_LITERALGen=STRING_LITERAL 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a CST Leaf
		if($STRING_LITERALGen != null) {
			Leaf STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			STRING_LITERALGenLeaf.setKind("STRING_LITERAL");
			STRING_LITERALGenLeaf.setValue($STRING_LITERALGen.text);
			STRING_LITERALGenLeaf.setPos(STRING_LITERALGen.getCharPositionInLine());
			STRING_LITERALGenLeaf.setLine(STRING_LITERALGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(STRING_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	}
	|   TK_0='$' 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_tree_atomReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	} 
	|	ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node rewrite_tree_atomReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_atomReturnNode.setKind("rewrite_tree_atom");
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			rewrite_tree_atomReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_atom.returnNode = rewrite_tree_atomReturnNode;
	}
	;

rewrite_tree_ebnf returns [Node returnNode] 
:	rewrite_tree_blockGen+=rewrite_tree_block ebnfSuffixGen+=ebnfSuffix 
	{
		// Create return CST Node
		Node rewrite_tree_ebnfReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_tree_ebnfReturnNode.setKind("rewrite_tree_ebnf");
	    // Create a CST Node
		if($rewrite_tree_blockGen != null) {
	        for(Iterator it = $rewrite_tree_blockGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_block_return r = (ANTLRv3Parser.rewrite_tree_block_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_block");
	            	rewrite_tree_ebnfReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ebnfSuffixGen != null) {
	        for(Iterator it = $ebnfSuffixGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.ebnfSuffix_return r = (ANTLRv3Parser.ebnfSuffix_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ebnfSuffix");
	            	rewrite_tree_ebnfReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree_ebnf.returnNode = rewrite_tree_ebnfReturnNode;
	} 
	;
	
rewrite_tree returns [Node returnNode] 
:	TK_0='^(' rewrite_tree_atomGen+=rewrite_tree_atom rewrite_tree_elementGen+=rewrite_tree_element* TK_1=')' 
	{
		// Create return CST Node
		Node rewrite_treeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_treeReturnNode.setKind("rewrite_tree");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_treeReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_tree_atomGen != null) {
	        for(Iterator it = $rewrite_tree_atomGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_atom_return r = (ANTLRv3Parser.rewrite_tree_atom_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_atom");
	            	rewrite_treeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($rewrite_tree_elementGen != null) {
	        for(Iterator it = $rewrite_tree_elementGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_tree_element_return r = (ANTLRv3Parser.rewrite_tree_element_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_tree_element");
	            	rewrite_treeReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_treeReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_tree.returnNode = rewrite_treeReturnNode;
	}
	;

rewrite_template returns [Node returnNode] 
:   idGen+=id TK_0='(' rewrite_template_argsGen+=rewrite_template_args TK_1=')'
		( DOUBLE_QUOTE_STRING_LITERALGen=DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERALGen=DOUBLE_ANGLE_STRING_LITERAL ) 
	{
		// Create return CST Node
		Node rewrite_templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_templateReturnNode.setKind("rewrite_template");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	rewrite_templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_templateReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_template_argsGen != null) {
	        for(Iterator it = $rewrite_template_argsGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_args_return r = (ANTLRv3Parser.rewrite_template_args_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template_args");
	            	rewrite_templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_templateReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($DOUBLE_QUOTE_STRING_LITERALGen != null) {
			Leaf DOUBLE_QUOTE_STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLE_QUOTE_STRING_LITERALGenLeaf.setKind("DOUBLE_QUOTE_STRING_LITERAL");
			DOUBLE_QUOTE_STRING_LITERALGenLeaf.setValue($DOUBLE_QUOTE_STRING_LITERALGen.text);
			DOUBLE_QUOTE_STRING_LITERALGenLeaf.setPos(DOUBLE_QUOTE_STRING_LITERALGen.getCharPositionInLine());
			DOUBLE_QUOTE_STRING_LITERALGenLeaf.setLine(DOUBLE_QUOTE_STRING_LITERALGen.getLine());
			rewrite_templateReturnNode.getChildren().add(DOUBLE_QUOTE_STRING_LITERALGenLeaf);
		}
	    // Create a CST Leaf
		if($DOUBLE_ANGLE_STRING_LITERALGen != null) {
			Leaf DOUBLE_ANGLE_STRING_LITERALGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			DOUBLE_ANGLE_STRING_LITERALGenLeaf.setKind("DOUBLE_ANGLE_STRING_LITERAL");
			DOUBLE_ANGLE_STRING_LITERALGenLeaf.setValue($DOUBLE_ANGLE_STRING_LITERALGen.text);
			DOUBLE_ANGLE_STRING_LITERALGenLeaf.setPos(DOUBLE_ANGLE_STRING_LITERALGen.getCharPositionInLine());
			DOUBLE_ANGLE_STRING_LITERALGenLeaf.setLine(DOUBLE_ANGLE_STRING_LITERALGen.getLine());
			rewrite_templateReturnNode.getChildren().add(DOUBLE_ANGLE_STRING_LITERALGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template.returnNode = rewrite_templateReturnNode;
	}
	|	rewrite_template_refGen+=rewrite_template_ref 
	{
		// Create return CST Node
		Node rewrite_templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_templateReturnNode.setKind("rewrite_template");
	    // Create a CST Node
		if($rewrite_template_refGen != null) {
	        for(Iterator it = $rewrite_template_refGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_ref_return r = (ANTLRv3Parser.rewrite_template_ref_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template_ref");
	            	rewrite_templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template.returnNode = rewrite_templateReturnNode;
	}
	|	rewrite_indirect_template_headGen+=rewrite_indirect_template_head 
	{
		// Create return CST Node
		Node rewrite_templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_templateReturnNode.setKind("rewrite_template");
	    // Create a CST Node
		if($rewrite_indirect_template_headGen != null) {
	        for(Iterator it = $rewrite_indirect_template_headGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_indirect_template_head_return r = (ANTLRv3Parser.rewrite_indirect_template_head_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_indirect_template_head");
	            	rewrite_templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template.returnNode = rewrite_templateReturnNode;
	}
	|	ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node rewrite_templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_templateReturnNode.setKind("rewrite_template");
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			rewrite_templateReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template.returnNode = rewrite_templateReturnNode;
	}
	;

rewrite_template_ref returns [Node returnNode] 
:	idGen+=id TK_0='(' rewrite_template_argsGen+=rewrite_template_args TK_1=')' 
	{
		// Create return CST Node
		Node rewrite_template_refReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_template_refReturnNode.setKind("rewrite_template_ref");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	rewrite_template_refReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_template_refReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_template_argsGen != null) {
	        for(Iterator it = $rewrite_template_argsGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_args_return r = (ANTLRv3Parser.rewrite_template_args_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template_args");
	            	rewrite_template_refReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_template_refReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template_ref.returnNode = rewrite_template_refReturnNode;
	}
	;

rewrite_indirect_template_head returns [Node returnNode] 
:	TK_0='(' ACTIONGen=ACTION TK_1=')' TK_2='(' rewrite_template_argsGen+=rewrite_template_args TK_3=')' 
	{
		// Create return CST Node
		Node rewrite_indirect_template_headReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_indirect_template_headReturnNode.setKind("rewrite_indirect_template_head");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_indirect_template_headReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			rewrite_indirect_template_headReturnNode.getChildren().add(ACTIONGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_1Leaf.setKind("TOKEN");
	 		TK_1Leaf.setValue($TK_1.text);
			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
			TK_1Leaf.setLine(TK_1.getLine());
	 		rewrite_indirect_template_headReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_2Leaf.setKind("TOKEN");
	 		TK_2Leaf.setValue($TK_2.text);
			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
			TK_2Leaf.setLine(TK_2.getLine());
	 		rewrite_indirect_template_headReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($rewrite_template_argsGen != null) {
	        for(Iterator it = $rewrite_template_argsGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_args_return r = (ANTLRv3Parser.rewrite_template_args_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template_args");
	            	rewrite_indirect_template_headReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_3Leaf.setKind("TOKEN");
	 		TK_3Leaf.setValue($TK_3.text);
			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
			TK_3Leaf.setLine(TK_3.getLine());
	 		rewrite_indirect_template_headReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_indirect_template_head.returnNode = rewrite_indirect_template_headReturnNode;
	}
	;

rewrite_template_args returns [Node returnNode] 
:	rewrite_template_argGen+=rewrite_template_arg (TK_0=',' rewrite_template_argGen_1+=rewrite_template_arg)* 
	{
		// Create return CST Node
		Node rewrite_template_argsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_template_argsReturnNode.setKind("rewrite_template_args");
	    // Create a CST Node
		if($rewrite_template_argGen != null) {
	        for(Iterator it = $rewrite_template_argGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.rewrite_template_arg_return r = (ANTLRv3Parser.rewrite_template_arg_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rewrite_template_arg");
	            	rewrite_template_argsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	
		// Create a special CST Node for terminal rewrite_template_argGen_1 aggregation
		if($rewrite_template_argGen_1 != null) {
	    for(int pos = 0; pos < $rewrite_template_argGen_1.size(); pos++ )  { 
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_template_argsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($rewrite_template_argGen_1 != null) {		
	    	ANTLRv3Parser.rewrite_template_arg_return r = (ANTLRv3Parser.rewrite_template_arg_return) $rewrite_template_argGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("rewrite_template_arg");
	    		rewrite_template_argsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}
	
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template_args.returnNode = rewrite_template_argsReturnNode;
	}
	|	
	;

rewrite_template_arg returns [Node returnNode] 
:   idGen+=id TK_0='=' ACTIONGen=ACTION 
	{
		// Create return CST Node
		Node rewrite_template_argReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rewrite_template_argReturnNode.setKind("rewrite_template_arg");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            ANTLRv3Parser.id_return r = (ANTLRv3Parser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	rewrite_template_argReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
	 		TK_0Leaf.setKind("TOKEN");
	 		TK_0Leaf.setValue($TK_0.text);
			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
			TK_0Leaf.setLine(TK_0.getLine());
	 		rewrite_template_argReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($ACTIONGen != null) {
			Leaf ACTIONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			ACTIONGenLeaf.setKind("ACTION");
			ACTIONGenLeaf.setValue($ACTIONGen.text);
			ACTIONGenLeaf.setPos(ACTIONGen.getCharPositionInLine());
			ACTIONGenLeaf.setLine(ACTIONGen.getLine());
			rewrite_template_argReturnNode.getChildren().add(ACTIONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$rewrite_template_arg.returnNode = rewrite_template_argReturnNode;
	} 
	;

id returns [Node returnNode] 
:	TOKEN_REFGen=TOKEN_REF 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a CST Leaf
		if($TOKEN_REFGen != null) {
			Leaf TOKEN_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			TOKEN_REFGenLeaf.setKind("TOKEN_REF");
			TOKEN_REFGenLeaf.setValue($TOKEN_REFGen.text);
			TOKEN_REFGenLeaf.setPos(TOKEN_REFGen.getCharPositionInLine());
			TOKEN_REFGenLeaf.setLine(TOKEN_REFGen.getLine());
			idReturnNode.getChildren().add(TOKEN_REFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	} 
	|	RULE_REFGen=RULE_REF 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a CST Leaf
		if($RULE_REFGen != null) {
			Leaf RULE_REFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
			RULE_REFGenLeaf.setKind("RULE_REF");
			RULE_REFGenLeaf.setValue($RULE_REFGen.text);
			RULE_REFGenLeaf.setPos(RULE_REFGen.getCharPositionInLine());
			RULE_REFGenLeaf.setLine(RULE_REFGen.getLine());
			idReturnNode.getChildren().add(RULE_REFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}  
	;

// L E X I C A L   R U L E S

SL_COMMENT
 	:	'//'
 	 	(	' $ANTLR ' SRC // src directive
 		|	~('\r'|'\n')*
		)
		'\r'? '\n'
		{$channel=HIDDEN;}
	;

ML_COMMENT
	:	'/*' {if (input.LA(1)=='*') $type=DOC_COMMENT; else $channel=HIDDEN;} .* '*/'
	;

CHAR_LITERAL
	:	'\'' LITERAL_CHAR '\''
	;

STRING_LITERAL
	:	'\'' LITERAL_CHAR LITERAL_CHAR* '\''
	;

fragment
LITERAL_CHAR
	:	ESC
	|	~('\''|'\\')
	;

DOUBLE_QUOTE_STRING_LITERAL
	:	'"' LITERAL_CHAR* '"'
	;

DOUBLE_ANGLE_STRING_LITERAL
	:	'<<' .* '>>'
	;

fragment
ESC	:	'\\'
		(	'n'
		|	'r'
		|	't'
		|	'b'
		|	'f'
		|	'"'
		|	'\''
		|	'\\'
		|	'>'
		|	'u' XDIGIT XDIGIT XDIGIT XDIGIT
		|	. // unknown, leave as it is
		)
	;

fragment
XDIGIT :
		'0' .. '9'
	|	'a' .. 'f'
	|	'A' .. 'F'
	;

INT	:	'0'..'9'+
	;

ARG_ACTION
	:	NESTED_ARG_ACTION
	;

fragment
NESTED_ARG_ACTION :
	'['
	(	options {greedy=false; k=1;}
	:	NESTED_ARG_ACTION
	|	ACTION_STRING_LITERAL
	|	ACTION_CHAR_LITERAL
	|	.
	)*
	']'
	{setText(getText().substring(1, getText().length()-1));}
	;

ACTION
	:	NESTED_ACTION ( '?' {$type = SEMPRED;} )?
	;

fragment
NESTED_ACTION :
	'{'
	(	options {greedy=false; k=3;}
	:	NESTED_ACTION
	|	SL_COMMENT
	|	ML_COMMENT
	|	ACTION_STRING_LITERAL
	|	ACTION_CHAR_LITERAL
	|	.
	)*
	'}'
	{$channel = DEFAULT_TOKEN_CHANNEL;}
   ;

fragment
ACTION_CHAR_LITERAL
	:	'\'' (ACTION_ESC|~('\\'|'\'')) '\''
	;

fragment
ACTION_STRING_LITERAL
	:	'"' (ACTION_ESC|~('\\'|'"'))+ '"'
	;

fragment
ACTION_ESC
	:	'\\\''
	|	'\\"'
	|	'\\' ~('\''|'"')
	;

TOKEN_REF
	:	'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;

RULE_REF
	:	'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;

/** Match the start of an options section.  Don't allow normal
 *  action processing on the {...} as it's not a action.
 */
OPTIONS
	:	'options' WS_LOOP '{' {$channel=DEFAULT_TOKEN_CHANNEL;} // WS_LOOP sets channel
	;
	
TOKENS
	:	'tokens' WS_LOOP '{' {$channel=DEFAULT_TOKEN_CHANNEL;}
	;

/** Reset the file and line information; useful when the grammar
 *  has been generated so that errors are shown relative to the
 *  original file like the old C preprocessor used to do.
 */
fragment
SRC	:	'src' ' ' file=ACTION_STRING_LITERAL ' ' line=INT {$channel=HIDDEN;}
	;

WS	:	(	' '
		|	'\t'
		|	'\r'? '\n'
		)+
		{$channel=HIDDEN;}
	;

fragment
WS_LOOP
	:	(	WS
		|	SL_COMMENT
		|	ML_COMMENT
		)*
		{$channel=HIDDEN;}
	;

